
SRI Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000242  00800100  00001e20  00001eb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000133  00800342  00800342  000020f6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000020f6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000230  00000000  00000000  00002152  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f75  00000000  00000000  00002382  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a5c  00000000  00000000  000042f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c32  00000000  00000000  00004d53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000630  00000000  00000000  00005988  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007d3  00000000  00000000  00005fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001773  00000000  00000000  0000678b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001f0  00000000  00000000  00007efe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__ctors_end>
       4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
       8:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
       c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      10:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      14:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      18:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      1c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      20:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      24:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      28:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      2c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      30:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      34:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      38:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      3c:	0c 94 4b 04 	jmp	0x896	; 0x896 <__vector_15>
      40:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      44:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      48:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      4c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      50:	0c 94 86 04 	jmp	0x90c	; 0x90c <__vector_20>
      54:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      58:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      5c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      60:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      68:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      6c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      70:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      74:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      78:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      7c:	4f 01       	movw	r8, r30
      7e:	ea 00       	.word	0x00ea	; ????
      80:	ed 00       	.word	0x00ed	; ????
      82:	5c 01       	movw	r10, r24
      84:	5c 01       	movw	r10, r24
      86:	5c 01       	movw	r10, r24
      88:	5c 01       	movw	r10, r24
      8a:	5c 01       	movw	r10, r24
      8c:	5c 01       	movw	r10, r24
      8e:	5c 01       	movw	r10, r24
      90:	5c 01       	movw	r10, r24
      92:	5c 01       	movw	r10, r24
      94:	5c 01       	movw	r10, r24
      96:	45 01       	movw	r8, r10
      98:	f0 00       	.word	0x00f0	; ????
      9a:	f5 00       	.word	0x00f5	; ????
      9c:	36 01       	movw	r6, r12
      9e:	3f 01       	movw	r6, r30
      a0:	39 01       	movw	r6, r18

000000a2 <__ctors_end>:
      a2:	11 24       	eor	r1, r1
      a4:	1f be       	out	0x3f, r1	; 63
      a6:	cf ef       	ldi	r28, 0xFF	; 255
      a8:	d0 e1       	ldi	r29, 0x10	; 16
      aa:	de bf       	out	0x3e, r29	; 62
      ac:	cd bf       	out	0x3d, r28	; 61

000000ae <__do_copy_data>:
      ae:	13 e0       	ldi	r17, 0x03	; 3
      b0:	a0 e0       	ldi	r26, 0x00	; 0
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	e0 e2       	ldi	r30, 0x20	; 32
      b6:	fe e1       	ldi	r31, 0x1E	; 30
      b8:	02 c0       	rjmp	.+4      	; 0xbe <__do_copy_data+0x10>
      ba:	05 90       	lpm	r0, Z+
      bc:	0d 92       	st	X+, r0
      be:	a2 34       	cpi	r26, 0x42	; 66
      c0:	b1 07       	cpc	r27, r17
      c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0xc>

000000c4 <__do_clear_bss>:
      c4:	24 e0       	ldi	r18, 0x04	; 4
      c6:	a2 e4       	ldi	r26, 0x42	; 66
      c8:	b3 e0       	ldi	r27, 0x03	; 3
      ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
      cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
      ce:	a5 37       	cpi	r26, 0x75	; 117
      d0:	b2 07       	cpc	r27, r18
      d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
      d4:	0e 94 ac 04 	call	0x958	; 0x958 <main>
      d8:	0c 94 0e 0f 	jmp	0x1e1c	; 0x1e1c <_exit>

000000dc <__bad_interrupt>:
      dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e0 <BTTransmitStr>:
}

void BTTransmitStr(char *theString){
	uint8_t len, i;
	
	len = strlen(theString);
      e0:	fc 01       	movw	r30, r24
      e2:	01 90       	ld	r0, Z+
      e4:	00 20       	and	r0, r0
      e6:	e9 f7       	brne	.-6      	; 0xe2 <BTTransmitStr+0x2>
      e8:	31 97       	sbiw	r30, 0x01	; 1
      ea:	e8 1b       	sub	r30, r24
      ec:	f9 0b       	sbc	r31, r25
      ee:	2e 2f       	mov	r18, r30
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
      f0:	3a ea       	ldi	r19, 0xAA	; 170
      f2:	30 93 c6 00 	sts	0x00C6, r19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	af e1       	ldi	r26, 0x1F	; 31
      f8:	be e4       	ldi	r27, 0x4E	; 78
      fa:	11 97       	sbiw	r26, 0x01	; 1
      fc:	f1 f7       	brne	.-4      	; 0xfa <BTTransmitStr+0x1a>
      fe:	00 c0       	rjmp	.+0      	; 0x100 <BTTransmitStr+0x20>
     100:	00 00       	nop
     102:	34 e1       	ldi	r19, 0x14	; 20
     104:	30 93 c6 00 	sts	0x00C6, r19
     108:	af e1       	ldi	r26, 0x1F	; 31
     10a:	be e4       	ldi	r27, 0x4E	; 78
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	f1 f7       	brne	.-4      	; 0x10c <BTTransmitStr+0x2c>
     110:	00 c0       	rjmp	.+0      	; 0x112 <BTTransmitStr+0x32>
     112:	00 00       	nop
     114:	e0 93 c6 00 	sts	0x00C6, r30
     118:	ef e1       	ldi	r30, 0x1F	; 31
     11a:	fe e4       	ldi	r31, 0x4E	; 78
     11c:	31 97       	sbiw	r30, 0x01	; 1
     11e:	f1 f7       	brne	.-4      	; 0x11c <BTTransmitStr+0x3c>
     120:	00 c0       	rjmp	.+0      	; 0x122 <BTTransmitStr+0x42>
     122:	00 00       	nop
	
	BTTransmitChar(0xAA);
	BTTransmitChar(DisplayMessage);
	BTTransmitChar(len);
	
	for(i=0;i<len;i++)
     124:	22 23       	and	r18, r18
     126:	89 f0       	breq	.+34     	; 0x14a <BTTransmitStr+0x6a>
     128:	38 2f       	mov	r19, r24
     12a:	e8 2f       	mov	r30, r24
     12c:	f9 2f       	mov	r31, r25
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     12e:	a6 ec       	ldi	r26, 0xC6	; 198
     130:	b0 e0       	ldi	r27, 0x00	; 0
	BTTransmitChar(DisplayMessage);
	BTTransmitChar(len);
	
	for(i=0;i<len;i++)
	{
		BTTransmitChar(theString[i]);
     132:	81 91       	ld	r24, Z+
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     134:	8c 93       	st	X, r24
     136:	8f e1       	ldi	r24, 0x1F	; 31
     138:	9e e4       	ldi	r25, 0x4E	; 78
     13a:	01 97       	sbiw	r24, 0x01	; 1
     13c:	f1 f7       	brne	.-4      	; 0x13a <BTTransmitStr+0x5a>
     13e:	00 c0       	rjmp	.+0      	; 0x140 <BTTransmitStr+0x60>
     140:	00 00       	nop
     142:	8e 2f       	mov	r24, r30
     144:	83 1b       	sub	r24, r19
	
	BTTransmitChar(0xAA);
	BTTransmitChar(DisplayMessage);
	BTTransmitChar(len);
	
	for(i=0;i<len;i++)
     146:	82 17       	cp	r24, r18
     148:	a0 f3       	brcs	.-24     	; 0x132 <BTTransmitStr+0x52>
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     14a:	85 e5       	ldi	r24, 0x55	; 85
     14c:	80 93 c6 00 	sts	0x00C6, r24
     150:	af e1       	ldi	r26, 0x1F	; 31
     152:	be e4       	ldi	r27, 0x4E	; 78
     154:	11 97       	sbiw	r26, 0x01	; 1
     156:	f1 f7       	brne	.-4      	; 0x154 <BTTransmitStr+0x74>
     158:	00 c0       	rjmp	.+0      	; 0x15a <BTTransmitStr+0x7a>
     15a:	00 00       	nop
     15c:	08 95       	ret

0000015e <prelucreazaDatele>:
extern volatile uint8_t ms2p1_enabled;

void prelucreazaDatele(void){
	//BTTransmitStr("Procesez ceva!");
	//cli();
	if(actiune >= GoFront && actiune <= GoRightB){
     15e:	80 91 53 03 	lds	r24, 0x0353
     162:	9f ef       	ldi	r25, 0xFF	; 255
     164:	98 0f       	add	r25, r24
     166:	96 30       	cpi	r25, 0x06	; 6
     168:	50 f5       	brcc	.+84     	; 0x1be <prelucreazaDatele+0x60>
		unsigned char timp = date[0];
     16a:	90 91 54 03 	lds	r25, 0x0354
		unsigned char viteza = date[1];
     16e:	60 91 55 03 	lds	r22, 0x0355
		switch(actiune){
     172:	83 30       	cpi	r24, 0x03	; 3
     174:	a1 f0       	breq	.+40     	; 0x19e <prelucreazaDatele+0x40>
     176:	28 f4       	brcc	.+10     	; 0x182 <prelucreazaDatele+0x24>
     178:	81 30       	cpi	r24, 0x01	; 1
     17a:	49 f0       	breq	.+18     	; 0x18e <prelucreazaDatele+0x30>
     17c:	82 30       	cpi	r24, 0x02	; 2
     17e:	59 f0       	breq	.+22     	; 0x196 <prelucreazaDatele+0x38>
     180:	08 95       	ret
     182:	85 30       	cpi	r24, 0x05	; 5
     184:	81 f0       	breq	.+32     	; 0x1a6 <prelucreazaDatele+0x48>
     186:	98 f0       	brcs	.+38     	; 0x1ae <prelucreazaDatele+0x50>
     188:	86 30       	cpi	r24, 0x06	; 6
     18a:	a9 f0       	breq	.+42     	; 0x1b6 <prelucreazaDatele+0x58>
     18c:	08 95       	ret
			case GoFront:
			goFront(timp, viteza);
     18e:	89 2f       	mov	r24, r25
     190:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <goFront>
			break;
     194:	08 95       	ret
			case GoBack:
			goBack(timp, viteza);
     196:	89 2f       	mov	r24, r25
     198:	0e 94 7f 02 	call	0x4fe	; 0x4fe <goBack>
			break;
     19c:	08 95       	ret
			case GoLeftF:
			goFrontLeft(timp, viteza);
     19e:	89 2f       	mov	r24, r25
     1a0:	0e 94 a3 02 	call	0x546	; 0x546 <goFrontLeft>
			break;
     1a4:	08 95       	ret
			case GoLeftB:
			goBackLeft(timp, viteza);
     1a6:	89 2f       	mov	r24, r25
     1a8:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <goBackLeft>
			break;
     1ac:	08 95       	ret
			case GoRightF:
			goFrontRight(timp, viteza);
     1ae:	89 2f       	mov	r24, r25
     1b0:	0e 94 c4 02 	call	0x588	; 0x588 <goFrontRight>
			break;
     1b4:	08 95       	ret
			case GoRightB:
			goBackRight(timp, viteza);
     1b6:	89 2f       	mov	r24, r25
     1b8:	0e 94 09 03 	call	0x612	; 0x612 <goBackRight>
			break;
     1bc:	08 95       	ret
				break;
		}
		return;
	}
	
	switch(actiune){
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	fc 01       	movw	r30, r24
     1c2:	37 97       	sbiw	r30, 0x07	; 7
     1c4:	e3 31       	cpi	r30, 0x13	; 19
     1c6:	f1 05       	cpc	r31, r1
     1c8:	08 f0       	brcs	.+2      	; 0x1cc <prelucreazaDatele+0x6e>
     1ca:	76 c0       	rjmp	.+236    	; 0x2b8 <prelucreazaDatele+0x15a>
     1cc:	e2 5c       	subi	r30, 0xC2	; 194
     1ce:	ff 4f       	sbci	r31, 0xFF	; 255
     1d0:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <__tablejump2__>
		case GoM2P2:
			completeEnclosedContour();
     1d4:	0e 94 16 02 	call	0x42c	; 0x42c <completeEnclosedContour>
		break;
     1d8:	08 95       	ret
		case GoM2P3:
			checkFreeParallelParkingPlace();
     1da:	0e 94 11 02 	call	0x422	; 0x422 <checkFreeParallelParkingPlace>
		break;
     1de:	08 95       	ret
		case Led:
			ledAction(date[0]);
     1e0:	80 91 54 03 	lds	r24, 0x0354
     1e4:	0e 94 1f 08 	call	0x103e	; 0x103e <ledAction>
		break;
     1e8:	08 95       	ret
		case ReadSensorValue:
		{
			if(date[1] == 1){
     1ea:	80 91 55 03 	lds	r24, 0x0355
     1ee:	81 30       	cpi	r24, 0x01	; 1
     1f0:	89 f5       	brne	.+98     	; 0x254 <prelucreazaDatele+0xf6>
				if(date[0] == 0){
     1f2:	80 91 54 03 	lds	r24, 0x0354
     1f6:	81 11       	cpse	r24, r1
     1f8:	15 c0       	rjmp	.+42     	; 0x224 <prelucreazaDatele+0xc6>
					if((char)existsEntryInTimerQueue(&ReadSensor0))
     1fa:	8a e4       	ldi	r24, 0x4A	; 74
     1fc:	98 e0       	ldi	r25, 0x08	; 8
     1fe:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <existsEntryInTimerQueue>
     202:	88 23       	and	r24, r24
     204:	29 f0       	breq	.+10     	; 0x210 <prelucreazaDatele+0xb2>
						removeEntryFromTimerQueue(&ReadSensor0);
     206:	8a e4       	ldi	r24, 0x4A	; 74
     208:	98 e0       	ldi	r25, 0x08	; 8
     20a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <removeEntryFromTimerQueue>
     20e:	08 95       	ret
					else
						addEntryToTimerQueue(&ReadSensor0, 1000UL * 1000UL, Periodic);
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	40 e4       	ldi	r20, 0x40	; 64
     214:	52 e4       	ldi	r21, 0x42	; 66
     216:	6f e0       	ldi	r22, 0x0F	; 15
     218:	70 e0       	ldi	r23, 0x00	; 0
     21a:	8a e4       	ldi	r24, 0x4A	; 74
     21c:	98 e0       	ldi	r25, 0x08	; 8
     21e:	0e 94 81 05 	call	0xb02	; 0xb02 <addEntryToTimerQueue>
     222:	08 95       	ret
					
				}
				else if(date[0] == 1){
     224:	81 30       	cpi	r24, 0x01	; 1
     226:	09 f0       	breq	.+2      	; 0x22a <prelucreazaDatele+0xcc>
     228:	47 c0       	rjmp	.+142    	; 0x2b8 <prelucreazaDatele+0x15a>
					if((char)existsEntryInTimerQueue(&ReadSensor1))
     22a:	87 e3       	ldi	r24, 0x37	; 55
     22c:	99 e0       	ldi	r25, 0x09	; 9
     22e:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <existsEntryInTimerQueue>
     232:	88 23       	and	r24, r24
     234:	29 f0       	breq	.+10     	; 0x240 <prelucreazaDatele+0xe2>
						removeEntryFromTimerQueue(&ReadSensor1);
     236:	87 e3       	ldi	r24, 0x37	; 55
     238:	99 e0       	ldi	r25, 0x09	; 9
     23a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <removeEntryFromTimerQueue>
     23e:	08 95       	ret
					else
						addEntryToTimerQueue(&ReadSensor1, 1000UL * 1000UL, Periodic);
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	40 e4       	ldi	r20, 0x40	; 64
     244:	52 e4       	ldi	r21, 0x42	; 66
     246:	6f e0       	ldi	r22, 0x0F	; 15
     248:	70 e0       	ldi	r23, 0x00	; 0
     24a:	87 e3       	ldi	r24, 0x37	; 55
     24c:	99 e0       	ldi	r25, 0x09	; 9
     24e:	0e 94 81 05 	call	0xb02	; 0xb02 <addEntryToTimerQueue>
     252:	08 95       	ret
				}
			}
			else
				if(date[0] == 0)
     254:	80 91 54 03 	lds	r24, 0x0354
     258:	81 11       	cpse	r24, r1
     25a:	03 c0       	rjmp	.+6      	; 0x262 <prelucreazaDatele+0x104>
					ReadSensor0();
     25c:	0e 94 4a 08 	call	0x1094	; 0x1094 <ReadSensor0>
     260:	08 95       	ret
				else if(date[0] == 1)
     262:	81 30       	cpi	r24, 0x01	; 1
     264:	49 f5       	brne	.+82     	; 0x2b8 <prelucreazaDatele+0x15a>
					ReadSensor1();
     266:	0e 94 37 09 	call	0x126e	; 0x126e <ReadSensor1>
     26a:	08 95       	ret
			
		}
		break;
		case StopEngines:
			stopEngines();
     26c:	0e 94 04 02 	call	0x408	; 0x408 <stopEngines>
		break;
     270:	08 95       	ret
		case RotirePeLocDreapta:
			rotirePeLoc(date[0], RightEngines);
     272:	60 e0       	ldi	r22, 0x00	; 0
     274:	80 91 54 03 	lds	r24, 0x0354
     278:	0e 94 2d 03 	call	0x65a	; 0x65a <rotirePeLoc>
		break;		
     27c:	08 95       	ret
		case RotirePeLocStanga:
			rotirePeLoc(date[0], LeftEngines);
     27e:	61 e0       	ldi	r22, 0x01	; 1
     280:	80 91 54 03 	lds	r24, 0x0354
     284:	0e 94 2d 03 	call	0x65a	; 0x65a <rotirePeLoc>
		break;
     288:	08 95       	ret
		case DisplayMessage:
			addEntryToTimerQueue(&fctSmechera, 10UL * 1000UL, Periodic);
     28a:	21 e0       	ldi	r18, 0x01	; 1
     28c:	40 e1       	ldi	r20, 0x10	; 16
     28e:	57 e2       	ldi	r21, 0x27	; 39
     290:	60 e0       	ldi	r22, 0x00	; 0
     292:	70 e0       	ldi	r23, 0x00	; 0
     294:	8c e7       	ldi	r24, 0x7C	; 124
     296:	98 e0       	ldi	r25, 0x08	; 8
     298:	0e 94 81 05 	call	0xb02	; 0xb02 <addEntryToTimerQueue>
		break;
     29c:	08 95       	ret
		case GoM2P1:
			addEntryToTimerQueue(&doTimer, 1000UL * 1000UL, Periodic);
     29e:	21 e0       	ldi	r18, 0x01	; 1
     2a0:	40 e4       	ldi	r20, 0x40	; 64
     2a2:	52 e4       	ldi	r21, 0x42	; 66
     2a4:	6f e0       	ldi	r22, 0x0F	; 15
     2a6:	70 e0       	ldi	r23, 0x00	; 0
     2a8:	89 e6       	ldi	r24, 0x69	; 105
     2aa:	99 e0       	ldi	r25, 0x09	; 9
     2ac:	0e 94 81 05 	call	0xb02	; 0xb02 <addEntryToTimerQueue>
			BTTransmitStr("doTimer started");
     2b0:	83 e0       	ldi	r24, 0x03	; 3
     2b2:	91 e0       	ldi	r25, 0x01	; 1
     2b4:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
     2b8:	08 95       	ret

000002ba <BTTransmitMsg>:
	}
	BTTransmitChar(0x55);
	
}

void BTTransmitMsg(char *theString, uint8_t len){
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
	uint16_t i;
	for(i=0;i<len;i++)
     2be:	70 e0       	ldi	r23, 0x00	; 0
     2c0:	61 15       	cp	r22, r1
     2c2:	71 05       	cpc	r23, r1
     2c4:	91 f0       	breq	.+36     	; 0x2ea <BTTransmitMsg+0x30>
     2c6:	e8 2f       	mov	r30, r24
     2c8:	f9 2f       	mov	r31, r25
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	90 e0       	ldi	r25, 0x00	; 0
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     2ce:	a6 ec       	ldi	r26, 0xC6	; 198
     2d0:	b0 e0       	ldi	r27, 0x00	; 0

void BTTransmitMsg(char *theString, uint8_t len){
	uint16_t i;
	for(i=0;i<len;i++)
	{
		BTTransmitChar(theString[i]);
     2d2:	21 91       	ld	r18, Z+
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     2d4:	2c 93       	st	X, r18
     2d6:	cf e1       	ldi	r28, 0x1F	; 31
     2d8:	de e4       	ldi	r29, 0x4E	; 78
     2da:	21 97       	sbiw	r28, 0x01	; 1
     2dc:	f1 f7       	brne	.-4      	; 0x2da <BTTransmitMsg+0x20>
     2de:	00 c0       	rjmp	.+0      	; 0x2e0 <BTTransmitMsg+0x26>
     2e0:	00 00       	nop
	
}

void BTTransmitMsg(char *theString, uint8_t len){
	uint16_t i;
	for(i=0;i<len;i++)
     2e2:	01 96       	adiw	r24, 0x01	; 1
     2e4:	86 17       	cp	r24, r22
     2e6:	97 07       	cpc	r25, r23
     2e8:	a0 f3       	brcs	.-24     	; 0x2d2 <BTTransmitMsg+0x18>
	{
		BTTransmitChar(theString[i]);
	}
}
     2ea:	df 91       	pop	r29
     2ec:	cf 91       	pop	r28
     2ee:	08 95       	ret

000002f0 <reTransmit>:
#include "../utile.h"
#include "../Timing/Timing.h"

void prelucreazaDatele(void);

void reTransmit(void){
     2f0:	cf 93       	push	r28
     2f2:	df 93       	push	r29
     2f4:	00 d0       	rcall	.+0      	; 0x2f6 <reTransmit+0x6>
     2f6:	00 d0       	rcall	.+0      	; 0x2f8 <reTransmit+0x8>
     2f8:	cd b7       	in	r28, 0x3d	; 61
     2fa:	de b7       	in	r29, 0x3e	; 62
	//trimite un semnal telefonului pentru a retransmite ultimul mesaj
	printf("Trimite din nou ultimul mesaj!!!");
     2fc:	83 e1       	ldi	r24, 0x13	; 19
     2fe:	91 e0       	ldi	r25, 0x01	; 1
     300:	9f 93       	push	r25
     302:	8f 93       	push	r24
     304:	0e 94 29 0c 	call	0x1852	; 0x1852 <printf>
	char msg[] = { StartByte, ReTransmitLastMsg, 0, 0x55 };
     308:	8a ea       	ldi	r24, 0xAA	; 170
     30a:	89 83       	std	Y+1, r24	; 0x01
     30c:	83 e1       	ldi	r24, 0x13	; 19
     30e:	8a 83       	std	Y+2, r24	; 0x02
     310:	1b 82       	std	Y+3, r1	; 0x03
     312:	85 e5       	ldi	r24, 0x55	; 85
     314:	8c 83       	std	Y+4, r24	; 0x04
	BTTransmitMsg(msg, 4);
     316:	64 e0       	ldi	r22, 0x04	; 4
     318:	ce 01       	movw	r24, r28
     31a:	01 96       	adiw	r24, 0x01	; 1
     31c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <BTTransmitMsg>
}
     320:	0f 90       	pop	r0
     322:	0f 90       	pop	r0
     324:	0f 90       	pop	r0
     326:	0f 90       	pop	r0
     328:	0f 90       	pop	r0
     32a:	0f 90       	pop	r0
     32c:	df 91       	pop	r29
     32e:	cf 91       	pop	r28
     330:	08 95       	ret

00000332 <BTProtocolReadByte>:
	state = WaitingStartByte;
}

extern volatile uint8_t debugging;
void BTProtocolReadByte(unsigned char theByte){
	cli();
     332:	f8 94       	cli
	switch (state){
     334:	90 91 02 01 	lds	r25, 0x0102
     338:	92 30       	cpi	r25, 0x02	; 2
     33a:	21 f1       	breq	.+72     	; 0x384 <BTProtocolReadByte+0x52>
     33c:	28 f4       	brcc	.+10     	; 0x348 <BTProtocolReadByte+0x16>
     33e:	99 23       	and	r25, r25
     340:	49 f0       	breq	.+18     	; 0x354 <BTProtocolReadByte+0x22>
     342:	91 30       	cpi	r25, 0x01	; 1
     344:	91 f0       	breq	.+36     	; 0x36a <BTProtocolReadByte+0x38>
     346:	4d c0       	rjmp	.+154    	; 0x3e2 <BTProtocolReadByte+0xb0>
     348:	93 30       	cpi	r25, 0x03	; 3
     34a:	81 f1       	breq	.+96     	; 0x3ac <BTProtocolReadByte+0x7a>
     34c:	94 30       	cpi	r25, 0x04	; 4
     34e:	09 f4       	brne	.+2      	; 0x352 <BTProtocolReadByte+0x20>
     350:	3f c0       	rjmp	.+126    	; 0x3d0 <BTProtocolReadByte+0x9e>
     352:	47 c0       	rjmp	.+142    	; 0x3e2 <BTProtocolReadByte+0xb0>
		case WaitingStartByte:
			if(theByte == StartByte){
     354:	8a 3a       	cpi	r24, 0xAA	; 170
     356:	09 f0       	breq	.+2      	; 0x35a <BTProtocolReadByte+0x28>
     358:	44 c0       	rjmp	.+136    	; 0x3e2 <BTProtocolReadByte+0xb0>
				state = WaitingCarAction;
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	80 93 02 01 	sts	0x0102, r24
				debugging = 0;
     360:	10 92 00 01 	sts	0x0100, r1
				//addEntryToTimerQueue(&resetBTProtocol, 1000UL * 1000UL * 1000UL, Once);
				debugging = 1;
     364:	80 93 00 01 	sts	0x0100, r24
     368:	3c c0       	rjmp	.+120    	; 0x3e2 <BTProtocolReadByte+0xb0>
			}
			break;

		case WaitingCarAction:
			if(theByte >= NoAction && theByte < EndAction){
     36a:	8b 31       	cpi	r24, 0x1B	; 27
     36c:	30 f4       	brcc	.+12     	; 0x37a <BTProtocolReadByte+0x48>
				state = WaitingDataLength;
     36e:	92 e0       	ldi	r25, 0x02	; 2
     370:	90 93 02 01 	sts	0x0102, r25
				actiune = theByte;
     374:	80 93 53 03 	sts	0x0353, r24
     378:	34 c0       	rjmp	.+104    	; 0x3e2 <BTProtocolReadByte+0xb0>
			}
			else{
				state = WaitingStartByte;
     37a:	10 92 02 01 	sts	0x0102, r1
				reTransmit(); // error ocurred, send retransmit signal
     37e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <reTransmit>
     382:	2f c0       	rjmp	.+94     	; 0x3e2 <BTProtocolReadByte+0xb0>
			}
			break;

		case WaitingDataLength:
			if(theByte==0){
     384:	81 11       	cpse	r24, r1
     386:	05 c0       	rjmp	.+10     	; 0x392 <BTProtocolReadByte+0x60>
				state = WaitingEndByte;
			}
			state = ReadingData;
			len = theByte;
     388:	10 92 5e 03 	sts	0x035E, r1
			dateCrtIndex = 0;
     38c:	10 92 52 03 	sts	0x0352, r1
     390:	0a c0       	rjmp	.+20     	; 0x3a6 <BTProtocolReadByte+0x74>

		case WaitingDataLength:
			if(theByte==0){
				state = WaitingEndByte;
			}
			state = ReadingData;
     392:	93 e0       	ldi	r25, 0x03	; 3
     394:	90 93 02 01 	sts	0x0102, r25
			len = theByte;
     398:	80 93 5e 03 	sts	0x035E, r24
			dateCrtIndex = 0;
     39c:	10 92 52 03 	sts	0x0352, r1
			if(len<=0 || len>50)
     3a0:	81 50       	subi	r24, 0x01	; 1
     3a2:	82 33       	cpi	r24, 0x32	; 50
     3a4:	f0 f0       	brcs	.+60     	; 0x3e2 <BTProtocolReadByte+0xb0>
			state=WaitingStartByte;
     3a6:	10 92 02 01 	sts	0x0102, r1
     3aa:	1b c0       	rjmp	.+54     	; 0x3e2 <BTProtocolReadByte+0xb0>
			break;

		case ReadingData:
			date[dateCrtIndex++] = theByte;
     3ac:	e0 91 52 03 	lds	r30, 0x0352
     3b0:	91 e0       	ldi	r25, 0x01	; 1
     3b2:	9e 0f       	add	r25, r30
     3b4:	90 93 52 03 	sts	0x0352, r25
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	ec 5a       	subi	r30, 0xAC	; 172
     3bc:	fc 4f       	sbci	r31, 0xFC	; 252
     3be:	80 83       	st	Z, r24
			if(dateCrtIndex >= len)
     3c0:	80 91 5e 03 	lds	r24, 0x035E
     3c4:	98 17       	cp	r25, r24
     3c6:	68 f0       	brcs	.+26     	; 0x3e2 <BTProtocolReadByte+0xb0>
			state = WaitingEndByte;
     3c8:	84 e0       	ldi	r24, 0x04	; 4
     3ca:	80 93 02 01 	sts	0x0102, r24
     3ce:	09 c0       	rjmp	.+18     	; 0x3e2 <BTProtocolReadByte+0xb0>
			break;
		case WaitingEndByte:
			if(theByte != 0x55){
     3d0:	85 35       	cpi	r24, 0x55	; 85
     3d2:	19 f0       	breq	.+6      	; 0x3da <BTProtocolReadByte+0xa8>
				reTransmit(); // error ocurred, send retransmit signal
     3d4:	0e 94 78 01 	call	0x2f0	; 0x2f0 <reTransmit>
     3d8:	02 c0       	rjmp	.+4      	; 0x3de <BTProtocolReadByte+0xac>
			}
			else{
				prelucreazaDatele();
     3da:	0e 94 af 00 	call	0x15e	; 0x15e <prelucreazaDatele>
			}
			state = WaitingStartByte;
     3de:	10 92 02 01 	sts	0x0102, r1
			break;

	}
	sei();
     3e2:	78 94       	sei
     3e4:	08 95       	ret

000003e6 <BTInit>:
}

void BTInit()
{
	/*Pentru Receive*/
	UBRR0L = 51; //baud rate 9600 bps
     3e6:	83 e3       	ldi	r24, 0x33	; 51
     3e8:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B |= _BV(RXCIE0);
     3ec:	e1 ec       	ldi	r30, 0xC1	; 193
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	80 81       	ld	r24, Z
     3f2:	80 68       	ori	r24, 0x80	; 128
     3f4:	80 83       	st	Z, r24
	UCSR0B |= _BV(RXEN0);
     3f6:	80 81       	ld	r24, Z
     3f8:	80 61       	ori	r24, 0x10	; 16
     3fa:	80 83       	st	Z, r24
	UCSR0B |= _BV(TXEN0);
     3fc:	80 81       	ld	r24, Z
     3fe:	88 60       	ori	r24, 0x08	; 8
     400:	80 83       	st	Z, r24
	//UCSR0B |= (_BV(TXEN0))|(_BV(RXCIE0))|(_BV(RXCIE0));//activare receive,transmit si receive interrupt
	//UCSR0C |=(1<<UPM01)|(1<<UPM00);
	
	state=WaitingStartByte;
     402:	10 92 02 01 	sts	0x0102, r1
     406:	08 95       	ret

00000408 <stopEngines>:
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
}

extern volatile uint32_t time;
void stopEngines(){
    BTTransmitStr("M-am oprit!");
     408:	84 e3       	ldi	r24, 0x34	; 52
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
	
	PORTC &=~ 1<<PINC1;
     410:	88 b1       	in	r24, 0x08	; 8
     412:	8c 7f       	andi	r24, 0xFC	; 252
     414:	88 b9       	out	0x08, r24	; 8
	PORTC &=~ 1<<PINC0;	
     416:	40 98       	cbi	0x08, 0	; 8
	
	OCR0A = 255;
     418:	8f ef       	ldi	r24, 0xFF	; 255
     41a:	87 bd       	out	0x27, r24	; 39
	OCR2A = 255;
     41c:	80 93 b3 00 	sts	0x00B3, r24
     420:	08 95       	ret

00000422 <checkFreeParallelParkingPlace>:
	//setEnginesSpeed(RightEngines, 1, 0);
	//setEnginesSpeed(LeftEngines, 1, 0);
}
void checkFreeParallelParkingPlace(){
	
    BTTransmitStr("Start Free P P P!");
     422:	80 e4       	ldi	r24, 0x40	; 64
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
     42a:	08 95       	ret

0000042c <completeEnclosedContour>:
}
void completeEnclosedContour(){
	
	
    BTTransmitStr("Start complete enclosed contour!");
     42c:	82 e5       	ldi	r24, 0x52	; 82
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
     434:	08 95       	ret

00000436 <initEngines>:


void initEngines()
{
	
	OCR0A = 255;
     436:	8f ef       	ldi	r24, 0xFF	; 255
     438:	87 bd       	out	0x27, r24	; 39
	OCR2A = 255;
     43a:	80 93 b3 00 	sts	0x00B3, r24
	
	PINB|=(1<<PB3);
     43e:	1b 9a       	sbi	0x03, 3	; 3
	TCCR0A |=3;
     440:	84 b5       	in	r24, 0x24	; 36
     442:	83 60       	ori	r24, 0x03	; 3
     444:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0A0);
     446:	84 b5       	in	r24, 0x24	; 36
     448:	80 64       	ori	r24, 0x40	; 64
     44a:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0A1);
     44c:	84 b5       	in	r24, 0x24	; 36
     44e:	80 68       	ori	r24, 0x80	; 128
     450:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS00);
     452:	85 b5       	in	r24, 0x25	; 37
     454:	81 60       	ori	r24, 0x01	; 1
     456:	85 bd       	out	0x25, r24	; 37
	DDRB |=1<<PINB3;
     458:	23 9a       	sbi	0x04, 3	; 4
	// motor 2
	DDRD |= (1 << PD7);
     45a:	57 9a       	sbi	0x0a, 7	; 10
	TCCR2A|=3;
     45c:	e0 eb       	ldi	r30, 0xB0	; 176
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	80 81       	ld	r24, Z
     462:	83 60       	ori	r24, 0x03	; 3
     464:	80 83       	st	Z, r24
	TCCR2A |= (1 << COM2A0);
     466:	80 81       	ld	r24, Z
     468:	80 64       	ori	r24, 0x40	; 64
     46a:	80 83       	st	Z, r24
	TCCR2A |= (1 << COM2A1);
     46c:	80 81       	ld	r24, Z
     46e:	80 68       	ori	r24, 0x80	; 128
     470:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS20);
     472:	e1 eb       	ldi	r30, 0xB1	; 177
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	80 81       	ld	r24, Z
     478:	81 60       	ori	r24, 0x01	; 1
     47a:	80 83       	st	Z, r24
	//sens
	DDRC |= 1<<PINC0;
     47c:	38 9a       	sbi	0x07, 0	; 7
	DDRC |= 1<<PINC1;
     47e:	39 9a       	sbi	0x07, 1	; 7
	
	
	PORTC &=~ 1<<PINC1;
     480:	88 b1       	in	r24, 0x08	; 8
     482:	8c 7f       	andi	r24, 0xFC	; 252
     484:	88 b9       	out	0x08, r24	; 8
	PORTC &=~ 1<<PINC0;	
     486:	40 98       	cbi	0x08, 0	; 8
     488:	08 95       	ret

0000048a <setEnginesSpeed>:
			PORTC |= 1<<PINC0;	*/
}

void setEnginesSpeed(Engines engine, Sens sens, uint8_t viteza)
{
	if(sens == SensFata)
     48a:	61 11       	cpse	r22, r1
     48c:	01 c0       	rjmp	.+2      	; 0x490 <setEnginesSpeed+0x6>
		viteza = 255 - viteza;
     48e:	40 95       	com	r20
		
	if(engine==RightEngines){
     490:	81 11       	cpse	r24, r1
     492:	08 c0       	rjmp	.+16     	; 0x4a4 <setEnginesSpeed+0x1a>
		OCR2A = viteza;
     494:	40 93 b3 00 	sts	0x00B3, r20
		if(sens == SensFata){	
     498:	61 11       	cpse	r22, r1
     49a:	02 c0       	rjmp	.+4      	; 0x4a0 <setEnginesSpeed+0x16>
			PORTC &=~ 1<<PINC0;
     49c:	40 98       	cbi	0x08, 0	; 8
     49e:	08 95       	ret
		}			
		else{
			PORTC |= 1<<PINC0;	
     4a0:	40 9a       	sbi	0x08, 0	; 8
     4a2:	08 95       	ret
		}			
	}
	else
	{
		OCR0A = viteza;
     4a4:	47 bd       	out	0x27, r20	; 39
		if(sens == SensFata){	
     4a6:	61 11       	cpse	r22, r1
     4a8:	04 c0       	rjmp	.+8      	; 0x4b2 <setEnginesSpeed+0x28>
			PORTC &=~ 1<<PINC1;
     4aa:	88 b1       	in	r24, 0x08	; 8
     4ac:	8c 7f       	andi	r24, 0xFC	; 252
     4ae:	88 b9       	out	0x08, r24	; 8
     4b0:	08 95       	ret
		}			
		else{			
			PORTC |= 1<<PINC1;			
     4b2:	41 9a       	sbi	0x08, 1	; 8
     4b4:	08 95       	ret

000004b6 <goFront>:
#include "../BTProtocol/BTProtocol.h"
#include "../Timing/Timing.h"

void setEnginesSpeed(Engines, Sens, uint8_t);

void goFront(uint8_t timp, uint8_t viteza){	
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	d8 2f       	mov	r29, r24
     4bc:	c6 2f       	mov	r28, r22
	setEnginesSpeed(RightEngines, SensFata, viteza);
     4be:	46 2f       	mov	r20, r22
     4c0:	60 e0       	ldi	r22, 0x00	; 0
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	0e 94 45 02 	call	0x48a	; 0x48a <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensFata, viteza);
     4c8:	4c 2f       	mov	r20, r28
     4ca:	60 e0       	ldi	r22, 0x00	; 0
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	0e 94 45 02 	call	0x48a	; 0x48a <setEnginesSpeed>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);	
     4d2:	ad 2f       	mov	r26, r29
     4d4:	b0 e0       	ldi	r27, 0x00	; 0
     4d6:	20 e4       	ldi	r18, 0x40	; 64
     4d8:	32 e4       	ldi	r19, 0x42	; 66
     4da:	4f e0       	ldi	r20, 0x0F	; 15
     4dc:	50 e0       	ldi	r21, 0x00	; 0
     4de:	0e 94 1e 0c 	call	0x183c	; 0x183c <__muluhisi3>
     4e2:	ab 01       	movw	r20, r22
     4e4:	bc 01       	movw	r22, r24
     4e6:	20 e0       	ldi	r18, 0x00	; 0
     4e8:	84 e0       	ldi	r24, 0x04	; 4
     4ea:	92 e0       	ldi	r25, 0x02	; 2
     4ec:	0e 94 81 05 	call	0xb02	; 0xb02 <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inainte!");
     4f0:	83 e7       	ldi	r24, 0x73	; 115
     4f2:	91 e0       	ldi	r25, 0x01	; 1
     4f4:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
}
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	08 95       	ret

000004fe <goBack>:
void goBack(uint8_t timp, uint8_t viteza){
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	d8 2f       	mov	r29, r24
     504:	c6 2f       	mov	r28, r22
	setEnginesSpeed(RightEngines, SensSpate, viteza);
     506:	46 2f       	mov	r20, r22
     508:	61 e0       	ldi	r22, 0x01	; 1
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	0e 94 45 02 	call	0x48a	; 0x48a <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensSpate, viteza);
     510:	4c 2f       	mov	r20, r28
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	0e 94 45 02 	call	0x48a	; 0x48a <setEnginesSpeed>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     51a:	ad 2f       	mov	r26, r29
     51c:	b0 e0       	ldi	r27, 0x00	; 0
     51e:	20 e4       	ldi	r18, 0x40	; 64
     520:	32 e4       	ldi	r19, 0x42	; 66
     522:	4f e0       	ldi	r20, 0x0F	; 15
     524:	50 e0       	ldi	r21, 0x00	; 0
     526:	0e 94 1e 0c 	call	0x183c	; 0x183c <__muluhisi3>
     52a:	ab 01       	movw	r20, r22
     52c:	bc 01       	movw	r22, r24
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	84 e0       	ldi	r24, 0x04	; 4
     532:	92 e0       	ldi	r25, 0x02	; 2
     534:	0e 94 81 05 	call	0xb02	; 0xb02 <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inapoi!");
     538:	83 e8       	ldi	r24, 0x83	; 131
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
}
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	08 95       	ret

00000546 <goFrontLeft>:

void goFrontLeft(uint8_t timp, uint8_t viteza){
     546:	cf 93       	push	r28
     548:	c8 2f       	mov	r28, r24
     54a:	46 2f       	mov	r20, r22
	
	setEnginesSpeed(RightEngines, SensFata, viteza);
     54c:	60 e0       	ldi	r22, 0x00	; 0
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	0e 94 45 02 	call	0x48a	; 0x48a <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensFata, 10);
     554:	4a e0       	ldi	r20, 0x0A	; 10
     556:	60 e0       	ldi	r22, 0x00	; 0
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	0e 94 45 02 	call	0x48a	; 0x48a <setEnginesSpeed>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     55e:	ac 2f       	mov	r26, r28
     560:	b0 e0       	ldi	r27, 0x00	; 0
     562:	20 e4       	ldi	r18, 0x40	; 64
     564:	32 e4       	ldi	r19, 0x42	; 66
     566:	4f e0       	ldi	r20, 0x0F	; 15
     568:	50 e0       	ldi	r21, 0x00	; 0
     56a:	0e 94 1e 0c 	call	0x183c	; 0x183c <__muluhisi3>
     56e:	ab 01       	movw	r20, r22
     570:	bc 01       	movw	r22, r24
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	84 e0       	ldi	r24, 0x04	; 4
     576:	92 e0       	ldi	r25, 0x02	; 2
     578:	0e 94 81 05 	call	0xb02	; 0xb02 <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inainte stanga!");
     57c:	82 e9       	ldi	r24, 0x92	; 146
     57e:	91 e0       	ldi	r25, 0x01	; 1
     580:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
}
     584:	cf 91       	pop	r28
     586:	08 95       	ret

00000588 <goFrontRight>:
void goFrontRight(uint8_t timp, uint8_t viteza){
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29
     58c:	c8 2f       	mov	r28, r24
     58e:	d6 2f       	mov	r29, r22
	
	setEnginesSpeed(RightEngines, SensFata, 10);
     590:	4a e0       	ldi	r20, 0x0A	; 10
     592:	60 e0       	ldi	r22, 0x00	; 0
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	0e 94 45 02 	call	0x48a	; 0x48a <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensFata, viteza);
     59a:	4d 2f       	mov	r20, r29
     59c:	60 e0       	ldi	r22, 0x00	; 0
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	0e 94 45 02 	call	0x48a	; 0x48a <setEnginesSpeed>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     5a4:	ac 2f       	mov	r26, r28
     5a6:	b0 e0       	ldi	r27, 0x00	; 0
     5a8:	20 e4       	ldi	r18, 0x40	; 64
     5aa:	32 e4       	ldi	r19, 0x42	; 66
     5ac:	4f e0       	ldi	r20, 0x0F	; 15
     5ae:	50 e0       	ldi	r21, 0x00	; 0
     5b0:	0e 94 1e 0c 	call	0x183c	; 0x183c <__muluhisi3>
     5b4:	ab 01       	movw	r20, r22
     5b6:	bc 01       	movw	r22, r24
     5b8:	20 e0       	ldi	r18, 0x00	; 0
     5ba:	84 e0       	ldi	r24, 0x04	; 4
     5bc:	92 e0       	ldi	r25, 0x02	; 2
     5be:	0e 94 81 05 	call	0xb02	; 0xb02 <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inainte dreapta!");
     5c2:	89 ea       	ldi	r24, 0xA9	; 169
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
}
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	08 95       	ret

000005d0 <goBackLeft>:

void goBackLeft(uint8_t timp, uint8_t viteza){
     5d0:	cf 93       	push	r28
     5d2:	c8 2f       	mov	r28, r24
     5d4:	46 2f       	mov	r20, r22
	
	setEnginesSpeed(RightEngines, SensSpate, viteza);
     5d6:	61 e0       	ldi	r22, 0x01	; 1
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	0e 94 45 02 	call	0x48a	; 0x48a <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensSpate, 10);
     5de:	4a e0       	ldi	r20, 0x0A	; 10
     5e0:	61 e0       	ldi	r22, 0x01	; 1
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	0e 94 45 02 	call	0x48a	; 0x48a <setEnginesSpeed>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     5e8:	ac 2f       	mov	r26, r28
     5ea:	b0 e0       	ldi	r27, 0x00	; 0
     5ec:	20 e4       	ldi	r18, 0x40	; 64
     5ee:	32 e4       	ldi	r19, 0x42	; 66
     5f0:	4f e0       	ldi	r20, 0x0F	; 15
     5f2:	50 e0       	ldi	r21, 0x00	; 0
     5f4:	0e 94 1e 0c 	call	0x183c	; 0x183c <__muluhisi3>
     5f8:	ab 01       	movw	r20, r22
     5fa:	bc 01       	movw	r22, r24
     5fc:	20 e0       	ldi	r18, 0x00	; 0
     5fe:	84 e0       	ldi	r24, 0x04	; 4
     600:	92 e0       	ldi	r25, 0x02	; 2
     602:	0e 94 81 05 	call	0xb02	; 0xb02 <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inapoi stanga!");
     606:	81 ec       	ldi	r24, 0xC1	; 193
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
}
     60e:	cf 91       	pop	r28
     610:	08 95       	ret

00000612 <goBackRight>:
void goBackRight(uint8_t timp, uint8_t viteza){
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	c8 2f       	mov	r28, r24
     618:	d6 2f       	mov	r29, r22
	
	setEnginesSpeed(RightEngines, SensSpate, 10);
     61a:	4a e0       	ldi	r20, 0x0A	; 10
     61c:	61 e0       	ldi	r22, 0x01	; 1
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	0e 94 45 02 	call	0x48a	; 0x48a <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensSpate, viteza);
     624:	4d 2f       	mov	r20, r29
     626:	61 e0       	ldi	r22, 0x01	; 1
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	0e 94 45 02 	call	0x48a	; 0x48a <setEnginesSpeed>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     62e:	ac 2f       	mov	r26, r28
     630:	b0 e0       	ldi	r27, 0x00	; 0
     632:	20 e4       	ldi	r18, 0x40	; 64
     634:	32 e4       	ldi	r19, 0x42	; 66
     636:	4f e0       	ldi	r20, 0x0F	; 15
     638:	50 e0       	ldi	r21, 0x00	; 0
     63a:	0e 94 1e 0c 	call	0x183c	; 0x183c <__muluhisi3>
     63e:	ab 01       	movw	r20, r22
     640:	bc 01       	movw	r22, r24
     642:	20 e0       	ldi	r18, 0x00	; 0
     644:	84 e0       	ldi	r24, 0x04	; 4
     646:	92 e0       	ldi	r25, 0x02	; 2
     648:	0e 94 81 05 	call	0xb02	; 0xb02 <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inapoi dreapta!");
     64c:	87 ed       	ldi	r24, 0xD7	; 215
     64e:	91 e0       	ldi	r25, 0x01	; 1
     650:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
}
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	08 95       	ret

0000065a <rotirePeLoc>:
void rotirePeLoc(uint8_t timp, uint8_t engines){
     65a:	cf 93       	push	r28
     65c:	c8 2f       	mov	r28, r24
	
	if(engines == RightEngines){
     65e:	61 11       	cpse	r22, r1
     660:	0f c0       	rjmp	.+30     	; 0x680 <rotirePeLoc+0x26>
		setEnginesSpeed(LeftEngines, SensSpate,  25);
     662:	49 e1       	ldi	r20, 0x19	; 25
     664:	61 e0       	ldi	r22, 0x01	; 1
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	0e 94 45 02 	call	0x48a	; 0x48a <setEnginesSpeed>
		setEnginesSpeed(RightEngines, SensFata, 25);
     66c:	49 e1       	ldi	r20, 0x19	; 25
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	0e 94 45 02 	call	0x48a	; 0x48a <setEnginesSpeed>
		BTTransmitStr("ma rotesc spre dreapta");
     676:	8e ee       	ldi	r24, 0xEE	; 238
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
     67e:	0e c0       	rjmp	.+28     	; 0x69c <rotirePeLoc+0x42>
	}
	else {
		setEnginesSpeed(LeftEngines, SensFata, 25);
     680:	49 e1       	ldi	r20, 0x19	; 25
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	0e 94 45 02 	call	0x48a	; 0x48a <setEnginesSpeed>
		setEnginesSpeed(RightEngines, SensSpate, 25);
     68a:	49 e1       	ldi	r20, 0x19	; 25
     68c:	61 e0       	ldi	r22, 0x01	; 1
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	0e 94 45 02 	call	0x48a	; 0x48a <setEnginesSpeed>
		BTTransmitStr("ma rotesc spre stanga");
     694:	85 e0       	ldi	r24, 0x05	; 5
     696:	92 e0       	ldi	r25, 0x02	; 2
     698:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
	}
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     69c:	ac 2f       	mov	r26, r28
     69e:	b0 e0       	ldi	r27, 0x00	; 0
     6a0:	20 e4       	ldi	r18, 0x40	; 64
     6a2:	32 e4       	ldi	r19, 0x42	; 66
     6a4:	4f e0       	ldi	r20, 0x0F	; 15
     6a6:	50 e0       	ldi	r21, 0x00	; 0
     6a8:	0e 94 1e 0c 	call	0x183c	; 0x183c <__muluhisi3>
     6ac:	ab 01       	movw	r20, r22
     6ae:	bc 01       	movw	r22, r24
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	84 e0       	ldi	r24, 0x04	; 4
     6b4:	92 e0       	ldi	r25, 0x02	; 2
     6b6:	0e 94 81 05 	call	0xb02	; 0xb02 <addEntryToTimerQueue>
}
     6ba:	cf 91       	pop	r28
     6bc:	08 95       	ret

000006be <resetSensorQueue>:
		
	return s/7;
}

void resetSensorQueue(Sensor sensor){
	sVals[sensor][0] = 0;
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	88 0f       	add	r24, r24
     6c2:	99 1f       	adc	r25, r25
     6c4:	fc 01       	movw	r30, r24
     6c6:	ee 0f       	add	r30, r30
     6c8:	ff 1f       	adc	r31, r31
     6ca:	ee 0f       	add	r30, r30
     6cc:	ff 1f       	adc	r31, r31
     6ce:	ee 0f       	add	r30, r30
     6d0:	ff 1f       	adc	r31, r31
     6d2:	e8 1b       	sub	r30, r24
     6d4:	f9 0b       	sbc	r31, r25
     6d6:	e1 5a       	subi	r30, 0xA1	; 161
     6d8:	fc 4f       	sbci	r31, 0xFC	; 252
     6da:	11 82       	std	Z+1, r1	; 0x01
     6dc:	10 82       	st	Z, r1
	uint8_t i;
	for(i=0;i<6;i++)
		sVals[sensor][i] = 0;
     6de:	13 82       	std	Z+3, r1	; 0x03
     6e0:	12 82       	std	Z+2, r1	; 0x02
     6e2:	15 82       	std	Z+5, r1	; 0x05
     6e4:	14 82       	std	Z+4, r1	; 0x04
     6e6:	17 82       	std	Z+7, r1	; 0x07
     6e8:	16 82       	std	Z+6, r1	; 0x06
     6ea:	11 86       	std	Z+9, r1	; 0x09
     6ec:	10 86       	std	Z+8, r1	; 0x08
     6ee:	13 86       	std	Z+11, r1	; 0x0b
     6f0:	12 86       	std	Z+10, r1	; 0x0a
     6f2:	08 95       	ret

000006f4 <initSensors>:
}

void initSensors(void){
     6f4:	8f e5       	ldi	r24, 0x5F	; 95
     6f6:	93 e0       	ldi	r25, 0x03	; 3
     6f8:	27 e9       	ldi	r18, 0x97	; 151
     6fa:	33 e0       	ldi	r19, 0x03	; 3
     6fc:	50 e0       	ldi	r21, 0x00	; 0
     6fe:	09 c0       	rjmp	.+18     	; 0x712 <initSensors+0x1e>
	
	uint8_t i, j;
	for(i=0; i<4;i++)
		for(j=0; j<7;j++)
			sVals[i][j] = 0;
     700:	11 92       	st	Z+, r1
     702:	11 92       	st	Z+, r1

void initSensors(void){
	
	uint8_t i, j;
	for(i=0; i<4;i++)
		for(j=0; j<7;j++)
     704:	4f 5f       	subi	r20, 0xFF	; 255
     706:	47 30       	cpi	r20, 0x07	; 7
     708:	d9 f7       	brne	.-10     	; 0x700 <initSensors+0xc>
     70a:	0e 96       	adiw	r24, 0x0e	; 14
}

void initSensors(void){
	
	uint8_t i, j;
	for(i=0; i<4;i++)
     70c:	82 17       	cp	r24, r18
     70e:	93 07       	cpc	r25, r19
     710:	19 f0       	breq	.+6      	; 0x718 <initSensors+0x24>
	uint8_t i;
	for(i=0;i<6;i++)
		sVals[sensor][i] = 0;
}

void initSensors(void){
     712:	fc 01       	movw	r30, r24
     714:	45 2f       	mov	r20, r21
     716:	f4 cf       	rjmp	.-24     	; 0x700 <initSensors+0xc>
	for(i=0; i<4;i++)
		for(j=0; j<7;j++)
			sVals[i][j] = 0;
	
	//init ADC
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
     718:	aa e7       	ldi	r26, 0x7A	; 122
     71a:	b0 e0       	ldi	r27, 0x00	; 0
     71c:	8c 91       	ld	r24, X
     71e:	87 60       	ori	r24, 0x07	; 7
     720:	8c 93       	st	X, r24

	ADMUX |= (1 << REFS0);
     722:	ec e7       	ldi	r30, 0x7C	; 124
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	80 81       	ld	r24, Z
     728:	80 64       	ori	r24, 0x40	; 64
     72a:	80 83       	st	Z, r24
	ADMUX &=~ (1 << REFS1); // Set ADC reference to AVCC
     72c:	80 81       	ld	r24, Z
     72e:	8f 77       	andi	r24, 0x7F	; 127
     730:	80 83       	st	Z, r24
	
	ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
     732:	80 81       	ld	r24, Z
     734:	80 62       	ori	r24, 0x20	; 32
     736:	80 83       	st	Z, r24
	
	//ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running Mode
	
	ADCSRA |= (1 << ADEN);  // Enable ADC
     738:	8c 91       	ld	r24, X
     73a:	80 68       	ori	r24, 0x80	; 128
     73c:	8c 93       	st	X, r24
     73e:	08 95       	ret

00000740 <startADCConversionForSensor>:
	//ADCSRA |= (1 << ADSC);
}

void startADCConversionForSensor(Sensor sensor){

	ADMUX &= ~31; // set lasts 5 bits to 00000
     740:	ec e7       	ldi	r30, 0x7C	; 124
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	90 81       	ld	r25, Z
     746:	90 7e       	andi	r25, 0xE0	; 224
     748:	90 83       	st	Z, r25
	//ADMUX |= 0; // 0-ADC0, 1-ADC1, 2-ADC2 ...    datasheet pg 249-251
	ADMUX |= sensor; // Sensor ia valorile 0,1,2,3, exact ca cele pt ADC-uri
     74a:	90 81       	ld	r25, Z
     74c:	89 2b       	or	r24, r25
     74e:	80 83       	st	Z, r24
	// No MUX values needed to be changed to use ADC0

	
	ADCSRA |= (1 << ADSC);  // Start A2D Conversions
     750:	ea e7       	ldi	r30, 0x7A	; 122
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	80 81       	ld	r24, Z
     756:	80 64       	ori	r24, 0x40	; 64
     758:	80 83       	st	Z, r24
     75a:	08 95       	ret

0000075c <getValueOfSensor>:
	return val;
}

uint16_t sVals[4][7];

uint16_t getValueOfSensor(Sensor sensor){	
     75c:	6f 92       	push	r6
     75e:	7f 92       	push	r7
     760:	8f 92       	push	r8
     762:	9f 92       	push	r9
     764:	af 92       	push	r10
     766:	bf 92       	push	r11
     768:	cf 92       	push	r12
     76a:	df 92       	push	r13
     76c:	ef 92       	push	r14
     76e:	ff 92       	push	r15
     770:	0f 93       	push	r16
     772:	1f 93       	push	r17
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	98 2e       	mov	r9, r24
	
	resetSensorQueue(sensor);
     77a:	0e 94 5f 03 	call	0x6be	; 0x6be <resetSensorQueue>
	sVals[sensor][0] = 0;
     77e:	89 2d       	mov	r24, r9
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	9c 01       	movw	r18, r24
     784:	22 0f       	add	r18, r18
     786:	33 1f       	adc	r19, r19
     788:	f9 01       	movw	r30, r18
     78a:	ee 0f       	add	r30, r30
     78c:	ff 1f       	adc	r31, r31
     78e:	ee 0f       	add	r30, r30
     790:	ff 1f       	adc	r31, r31
     792:	ee 0f       	add	r30, r30
     794:	ff 1f       	adc	r31, r31
     796:	e2 1b       	sub	r30, r18
     798:	f3 0b       	sbc	r31, r19
     79a:	e1 5a       	subi	r30, 0xA1	; 161
     79c:	fc 4f       	sbci	r31, 0xFC	; 252
     79e:	11 82       	std	Z+1, r1	; 0x01
     7a0:	10 82       	st	Z, r1
     7a2:	5f 01       	movw	r10, r30
     7a4:	6e 2e       	mov	r6, r30
     7a6:	7b 2c       	mov	r7, r11
	uint8_t i;
	uint16_t s;
	
	while(sVals[sensor][0]==0){
		startADCConversionForSensor(sensor);
     7a8:	0f 2e       	mov	r0, r31
     7aa:	f6 e0       	ldi	r31, 0x06	; 6
     7ac:	8f 2e       	mov	r8, r31
     7ae:	f0 2d       	mov	r31, r0
		for(i=0;i<6;i++)
			sVals[sensor][i] = sVals[sensor][i+1];
		
		while ( ADCSRA & (1 << ADSC));
     7b0:	ca e7       	ldi	r28, 0x7A	; 122
     7b2:	d0 e0       	ldi	r29, 0x00	; 0
		sVals[sensor][6] = ADCL >> 6;
     7b4:	0f 2e       	mov	r0, r31
     7b6:	f8 e7       	ldi	r31, 0x78	; 120
     7b8:	cf 2e       	mov	r12, r31
     7ba:	d1 2c       	mov	r13, r1
     7bc:	f0 2d       	mov	r31, r0
     7be:	8f 01       	movw	r16, r30
     7c0:	04 5f       	subi	r16, 0xF4	; 244
     7c2:	1f 4f       	sbci	r17, 0xFF	; 255
		sVals[sensor][6] |= ADCH << 2;
     7c4:	0f 2e       	mov	r0, r31
     7c6:	f9 e7       	ldi	r31, 0x79	; 121
     7c8:	ef 2e       	mov	r14, r31
     7ca:	f1 2c       	mov	r15, r1
     7cc:	f0 2d       	mov	r31, r0
	sVals[sensor][0] = 0;
	uint8_t i;
	uint16_t s;
	
	while(sVals[sensor][0]==0){
		startADCConversionForSensor(sensor);
     7ce:	89 2d       	mov	r24, r9
     7d0:	0e 94 a0 03 	call	0x740	; 0x740 <startADCConversionForSensor>
     7d4:	5a 2d       	mov	r21, r10
     7d6:	4b 2d       	mov	r20, r11
     7d8:	e6 2d       	mov	r30, r6
     7da:	f7 2d       	mov	r31, r7
     7dc:	88 2d       	mov	r24, r8
		for(i=0;i<6;i++)
			sVals[sensor][i] = sVals[sensor][i+1];
     7de:	22 81       	ldd	r18, Z+2	; 0x02
     7e0:	33 81       	ldd	r19, Z+3	; 0x03
     7e2:	21 93       	st	Z+, r18
     7e4:	31 93       	st	Z+, r19
     7e6:	81 50       	subi	r24, 0x01	; 1
	uint8_t i;
	uint16_t s;
	
	while(sVals[sensor][0]==0){
		startADCConversionForSensor(sensor);
		for(i=0;i<6;i++)
     7e8:	d1 f7       	brne	.-12     	; 0x7de <getValueOfSensor+0x82>
			sVals[sensor][i] = sVals[sensor][i+1];
		
		while ( ADCSRA & (1 << ADSC));
     7ea:	88 81       	ld	r24, Y
     7ec:	86 fd       	sbrc	r24, 6
     7ee:	fd cf       	rjmp	.-6      	; 0x7ea <getValueOfSensor+0x8e>
		sVals[sensor][6] = ADCL >> 6;
     7f0:	f6 01       	movw	r30, r12
     7f2:	80 81       	ld	r24, Z
     7f4:	82 95       	swap	r24
     7f6:	86 95       	lsr	r24
     7f8:	86 95       	lsr	r24
     7fa:	83 70       	andi	r24, 0x03	; 3
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	f8 01       	movw	r30, r16
     800:	91 83       	std	Z+1, r25	; 0x01
     802:	80 83       	st	Z, r24
		sVals[sensor][6] |= ADCH << 2;
     804:	f7 01       	movw	r30, r14
     806:	20 81       	ld	r18, Z
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	22 0f       	add	r18, r18
     80c:	33 1f       	adc	r19, r19
     80e:	22 0f       	add	r18, r18
     810:	33 1f       	adc	r19, r19
     812:	82 2b       	or	r24, r18
     814:	93 2b       	or	r25, r19
     816:	f8 01       	movw	r30, r16
     818:	91 83       	std	Z+1, r25	; 0x01
     81a:	80 83       	st	Z, r24
	resetSensorQueue(sensor);
	sVals[sensor][0] = 0;
	uint8_t i;
	uint16_t s;
	
	while(sVals[sensor][0]==0){
     81c:	f5 01       	movw	r30, r10
     81e:	80 81       	ld	r24, Z
     820:	91 81       	ldd	r25, Z+1	; 0x01
     822:	89 2b       	or	r24, r25
     824:	a1 f2       	breq	.-88     	; 0x7ce <getValueOfSensor+0x72>
     826:	e5 2f       	mov	r30, r21
     828:	f4 2f       	mov	r31, r20
     82a:	40 e0       	ldi	r20, 0x00	; 0
     82c:	50 e0       	ldi	r21, 0x00	; 0
     82e:	20 e0       	ldi	r18, 0x00	; 0
	
	

	s=0;
	for(i=0;i<7;i++)
		s+=sVals[sensor][i];
     830:	81 91       	ld	r24, Z+
     832:	91 91       	ld	r25, Z+
     834:	48 0f       	add	r20, r24
     836:	59 1f       	adc	r21, r25
	}
	
	

	s=0;
	for(i=0;i<7;i++)
     838:	2f 5f       	subi	r18, 0xFF	; 255
     83a:	27 30       	cpi	r18, 0x07	; 7
     83c:	c9 f7       	brne	.-14     	; 0x830 <getValueOfSensor+0xd4>
		
	//sprintf(msg,"lv: %d %d %d %d %d %d %d  =%d",
	//sVals[sensor][0], sVals[sensor][1], sVals[sensor][2], sVals[sensor][3], sVals[sensor][4], sVals[sensor][5], sVals[sensor][6], s/7);
	//BTTransmitStr(msg);
		
	return s/7;
     83e:	9a 01       	movw	r18, r20
     840:	a3 e9       	ldi	r26, 0x93	; 147
     842:	b4 e2       	ldi	r27, 0x24	; 36
     844:	0e 94 0f 0c 	call	0x181e	; 0x181e <__umulhisi3>
     848:	48 1b       	sub	r20, r24
     84a:	59 0b       	sbc	r21, r25
     84c:	9a 01       	movw	r18, r20
     84e:	36 95       	lsr	r19
     850:	27 95       	ror	r18
     852:	82 0f       	add	r24, r18
     854:	93 1f       	adc	r25, r19
}
     856:	96 95       	lsr	r25
     858:	87 95       	ror	r24
     85a:	96 95       	lsr	r25
     85c:	87 95       	ror	r24
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	1f 91       	pop	r17
     864:	0f 91       	pop	r16
     866:	ff 90       	pop	r15
     868:	ef 90       	pop	r14
     86a:	df 90       	pop	r13
     86c:	cf 90       	pop	r12
     86e:	bf 90       	pop	r11
     870:	af 90       	pop	r10
     872:	9f 90       	pop	r9
     874:	8f 90       	pop	r8
     876:	7f 90       	pop	r7
     878:	6f 90       	pop	r6
     87a:	08 95       	ret

0000087c <timer_init>:

volatile uint32_t time=0;
void timer_init()
{
	//PIND = (1 << PIND0);
	TIMSK1|=(1<<TOIE1);
     87c:	ef e6       	ldi	r30, 0x6F	; 111
     87e:	f0 e0       	ldi	r31, 0x00	; 0
     880:	80 81       	ld	r24, Z
     882:	81 60       	ori	r24, 0x01	; 1
     884:	80 83       	st	Z, r24
	TCNT1 = 0x00;
     886:	10 92 85 00 	sts	0x0085, r1
     88a:	10 92 84 00 	sts	0x0084, r1
	TCCR1B = 0x01;//pt ca modificam ultimu bit din datasheet
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	80 93 81 00 	sts	0x0081, r24
     894:	08 95       	ret

00000896 <__vector_15>:
}
ISR(TIMER1_OVF_vect)// Din datasheet timerq(are 8 mh) => 8/8= 1 microsecunde
{
     896:	1f 92       	push	r1
     898:	0f 92       	push	r0
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	0f 92       	push	r0
     89e:	11 24       	eor	r1, r1
     8a0:	2f 93       	push	r18
     8a2:	3f 93       	push	r19
     8a4:	4f 93       	push	r20
     8a6:	5f 93       	push	r21
     8a8:	6f 93       	push	r22
     8aa:	7f 93       	push	r23
     8ac:	8f 93       	push	r24
     8ae:	9f 93       	push	r25
     8b0:	af 93       	push	r26
     8b2:	bf 93       	push	r27
     8b4:	ef 93       	push	r30
     8b6:	ff 93       	push	r31
	time++;
     8b8:	80 91 42 03 	lds	r24, 0x0342
     8bc:	90 91 43 03 	lds	r25, 0x0343
     8c0:	a0 91 44 03 	lds	r26, 0x0344
     8c4:	b0 91 45 03 	lds	r27, 0x0345
     8c8:	01 96       	adiw	r24, 0x01	; 1
     8ca:	a1 1d       	adc	r26, r1
     8cc:	b1 1d       	adc	r27, r1
     8ce:	80 93 42 03 	sts	0x0342, r24
     8d2:	90 93 43 03 	sts	0x0343, r25
     8d6:	a0 93 44 03 	sts	0x0344, r26
     8da:	b0 93 45 03 	sts	0x0345, r27
	//TCCR1B = 0x01; // init pentru 7.5 ms
	//TCCR1B = 0x02; // init pentru 60 ms
	//timePassed(7500); //7.5 ms = 7500 us;
	timePassed(8800);
     8de:	60 e6       	ldi	r22, 0x60	; 96
     8e0:	72 e2       	ldi	r23, 0x22	; 34
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0e 94 16 07 	call	0xe2c	; 0xe2c <timePassed>
	
	//PORTD ^= 1<<PIND5;
}
     8ea:	ff 91       	pop	r31
     8ec:	ef 91       	pop	r30
     8ee:	bf 91       	pop	r27
     8f0:	af 91       	pop	r26
     8f2:	9f 91       	pop	r25
     8f4:	8f 91       	pop	r24
     8f6:	7f 91       	pop	r23
     8f8:	6f 91       	pop	r22
     8fa:	5f 91       	pop	r21
     8fc:	4f 91       	pop	r20
     8fe:	3f 91       	pop	r19
     900:	2f 91       	pop	r18
     902:	0f 90       	pop	r0
     904:	0f be       	out	0x3f, r0	; 63
     906:	0f 90       	pop	r0
     908:	1f 90       	pop	r1
     90a:	18 95       	reti

0000090c <__vector_20>:

ISR(USART0_RX_vect)
{
     90c:	1f 92       	push	r1
     90e:	0f 92       	push	r0
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	0f 92       	push	r0
     914:	11 24       	eor	r1, r1
     916:	2f 93       	push	r18
     918:	3f 93       	push	r19
     91a:	4f 93       	push	r20
     91c:	5f 93       	push	r21
     91e:	6f 93       	push	r22
     920:	7f 93       	push	r23
     922:	8f 93       	push	r24
     924:	9f 93       	push	r25
     926:	af 93       	push	r26
     928:	bf 93       	push	r27
     92a:	ef 93       	push	r30
     92c:	ff 93       	push	r31
	BTProtocolReadByte(UDR0);
     92e:	80 91 c6 00 	lds	r24, 0x00C6
     932:	0e 94 99 01 	call	0x332	; 0x332 <BTProtocolReadByte>
}
     936:	ff 91       	pop	r31
     938:	ef 91       	pop	r30
     93a:	bf 91       	pop	r27
     93c:	af 91       	pop	r26
     93e:	9f 91       	pop	r25
     940:	8f 91       	pop	r24
     942:	7f 91       	pop	r23
     944:	6f 91       	pop	r22
     946:	5f 91       	pop	r21
     948:	4f 91       	pop	r20
     94a:	3f 91       	pop	r19
     94c:	2f 91       	pop	r18
     94e:	0f 90       	pop	r0
     950:	0f be       	out	0x3f, r0	; 63
     952:	0f 90       	pop	r0
     954:	1f 90       	pop	r1
     956:	18 95       	reti

00000958 <main>:

volatile uint8_t sradc0, shouldBlink=0;

int main(void)
{
	BTInit();
     958:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <BTInit>
	timer_init();
     95c:	0e 94 3e 04 	call	0x87c	; 0x87c <timer_init>
	initLeds();
     960:	0e 94 47 08 	call	0x108e	; 0x108e <initLeds>
	initEngines();
     964:	0e 94 1b 02 	call	0x436	; 0x436 <initEngines>
	initSensors();
     968:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <initSensors>
	initTimeQueue();
     96c:	0e 94 67 05 	call	0xace	; 0xace <initTimeQueue>
	
	sei();
     970:	78 94       	sei
	BTTransmitStr("  >>>main start<<<  ");
     972:	8b e1       	ldi	r24, 0x1B	; 27
     974:	92 e0       	ldi	r25, 0x02	; 2
     976:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
	
	PORTD |= 1<<PIND5;
     97a:	5d 9a       	sbi	0x0b, 5	; 11
	
    while(1)
    {
		//_delay_ms(1);
		checkTimeQueue();
     97c:	0e 94 ad 07 	call	0xf5a	; 0xf5a <checkTimeQueue>
     980:	fd cf       	rjmp	.-6      	; 0x97c <main+0x24>

00000982 <PID1cal>:
#define Kd 0.01
#define Ki 0.005
static float pre_error= 0;

float PID1cal(float setpoint, float actual_position)
{
     982:	8f 92       	push	r8
     984:	9f 92       	push	r9
     986:	af 92       	push	r10
     988:	bf 92       	push	r11
     98a:	cf 92       	push	r12
     98c:	df 92       	push	r13
     98e:	ef 92       	push	r14
     990:	ff 92       	push	r15
	static float integral=0;
	float error;
	float derivative;
	float output;

	error=setpoint- actual_position;
     992:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__subsf3>
     996:	6b 01       	movw	r12, r22
     998:	7c 01       	movw	r14, r24
	if(fabs(error)>epsilon)
     99a:	9f 77       	andi	r25, 0x7F	; 127
     99c:	2d ec       	ldi	r18, 0xCD	; 205
     99e:	3c ec       	ldi	r19, 0xCC	; 204
     9a0:	4c ec       	ldi	r20, 0xCC	; 204
     9a2:	5d e3       	ldi	r21, 0x3D	; 61
     9a4:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__gesf2>
     9a8:	18 16       	cp	r1, r24
     9aa:	e4 f4       	brge	.+56     	; 0x9e4 <PID1cal+0x62>
	{
		integral = integral +error*dt;
     9ac:	2a e0       	ldi	r18, 0x0A	; 10
     9ae:	37 ed       	ldi	r19, 0xD7	; 215
     9b0:	43 e2       	ldi	r20, 0x23	; 35
     9b2:	5c e3       	ldi	r21, 0x3C	; 60
     9b4:	c7 01       	movw	r24, r14
     9b6:	b6 01       	movw	r22, r12
     9b8:	0e 94 a6 0b 	call	0x174c	; 0x174c <__mulsf3>
     9bc:	9b 01       	movw	r18, r22
     9be:	ac 01       	movw	r20, r24
     9c0:	60 91 46 03 	lds	r22, 0x0346
     9c4:	70 91 47 03 	lds	r23, 0x0347
     9c8:	80 91 48 03 	lds	r24, 0x0348
     9cc:	90 91 49 03 	lds	r25, 0x0349
     9d0:	0e 94 ef 09 	call	0x13de	; 0x13de <__addsf3>
     9d4:	60 93 46 03 	sts	0x0346, r22
     9d8:	70 93 47 03 	sts	0x0347, r23
     9dc:	80 93 48 03 	sts	0x0348, r24
     9e0:	90 93 49 03 	sts	0x0349, r25
	}
	derivative =(error-pre_error)/dt;
	output = Kp*error + Ki*integral + Kd*derivative;
     9e4:	2d ec       	ldi	r18, 0xCD	; 205
     9e6:	3c ec       	ldi	r19, 0xCC	; 204
     9e8:	4c ec       	ldi	r20, 0xCC	; 204
     9ea:	5d e3       	ldi	r21, 0x3D	; 61
     9ec:	c7 01       	movw	r24, r14
     9ee:	b6 01       	movw	r22, r12
     9f0:	0e 94 a6 0b 	call	0x174c	; 0x174c <__mulsf3>
     9f4:	4b 01       	movw	r8, r22
     9f6:	5c 01       	movw	r10, r24
     9f8:	2a e0       	ldi	r18, 0x0A	; 10
     9fa:	37 ed       	ldi	r19, 0xD7	; 215
     9fc:	43 ea       	ldi	r20, 0xA3	; 163
     9fe:	5b e3       	ldi	r21, 0x3B	; 59
     a00:	60 91 46 03 	lds	r22, 0x0346
     a04:	70 91 47 03 	lds	r23, 0x0347
     a08:	80 91 48 03 	lds	r24, 0x0348
     a0c:	90 91 49 03 	lds	r25, 0x0349
     a10:	0e 94 a6 0b 	call	0x174c	; 0x174c <__mulsf3>
     a14:	9b 01       	movw	r18, r22
     a16:	ac 01       	movw	r20, r24
     a18:	c5 01       	movw	r24, r10
     a1a:	b4 01       	movw	r22, r8
     a1c:	0e 94 ef 09 	call	0x13de	; 0x13de <__addsf3>
     a20:	4b 01       	movw	r8, r22
     a22:	5c 01       	movw	r10, r24
	error=setpoint- actual_position;
	if(fabs(error)>epsilon)
	{
		integral = integral +error*dt;
	}
	derivative =(error-pre_error)/dt;
     a24:	20 91 4a 03 	lds	r18, 0x034A
     a28:	30 91 4b 03 	lds	r19, 0x034B
     a2c:	40 91 4c 03 	lds	r20, 0x034C
     a30:	50 91 4d 03 	lds	r21, 0x034D
     a34:	c7 01       	movw	r24, r14
     a36:	b6 01       	movw	r22, r12
     a38:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__subsf3>
     a3c:	2a e0       	ldi	r18, 0x0A	; 10
     a3e:	37 ed       	ldi	r19, 0xD7	; 215
     a40:	43 e2       	ldi	r20, 0x23	; 35
     a42:	5c e3       	ldi	r21, 0x3C	; 60
     a44:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__divsf3>
	output = Kp*error + Ki*integral + Kd*derivative;
     a48:	2a e0       	ldi	r18, 0x0A	; 10
     a4a:	37 ed       	ldi	r19, 0xD7	; 215
     a4c:	43 e2       	ldi	r20, 0x23	; 35
     a4e:	5c e3       	ldi	r21, 0x3C	; 60
     a50:	0e 94 a6 0b 	call	0x174c	; 0x174c <__mulsf3>
     a54:	9b 01       	movw	r18, r22
     a56:	ac 01       	movw	r20, r24
     a58:	c5 01       	movw	r24, r10
     a5a:	b4 01       	movw	r22, r8
     a5c:	0e 94 ef 09 	call	0x13de	; 0x13de <__addsf3>
     a60:	4b 01       	movw	r8, r22
     a62:	5c 01       	movw	r10, r24
	if(output > MAX)
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	40 e8       	ldi	r20, 0x80	; 128
     a6a:	50 e4       	ldi	r21, 0x40	; 64
     a6c:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__gesf2>
     a70:	18 16       	cp	r1, r24
     a72:	5c f0       	brlt	.+22     	; 0xa8a <PID1cal+0x108>
	{
		output=MAX;
	}
	if(output < MIN)
     a74:	20 e0       	ldi	r18, 0x00	; 0
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	40 e8       	ldi	r20, 0x80	; 128
     a7a:	50 ec       	ldi	r21, 0xC0	; 192
     a7c:	c5 01       	movw	r24, r10
     a7e:	b4 01       	movw	r22, r8
     a80:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__cmpsf2>
     a84:	88 23       	and	r24, r24
     a86:	44 f0       	brlt	.+16     	; 0xa98 <PID1cal+0x116>
     a88:	0f c0       	rjmp	.+30     	; 0xaa8 <PID1cal+0x126>
	}
	derivative =(error-pre_error)/dt;
	output = Kp*error + Ki*integral + Kd*derivative;
	if(output > MAX)
	{
		output=MAX;
     a8a:	81 2c       	mov	r8, r1
     a8c:	91 2c       	mov	r9, r1
     a8e:	54 01       	movw	r10, r8
     a90:	68 94       	set
     a92:	a7 f8       	bld	r10, 7
     a94:	b6 f8       	bld	r11, 6
     a96:	08 c0       	rjmp	.+16     	; 0xaa8 <PID1cal+0x126>
	}
	if(output < MIN)
	{
		output=MIN;
     a98:	0f 2e       	mov	r0, r31
     a9a:	81 2c       	mov	r8, r1
     a9c:	91 2c       	mov	r9, r1
     a9e:	f0 e8       	ldi	r31, 0x80	; 128
     aa0:	af 2e       	mov	r10, r31
     aa2:	f0 ec       	ldi	r31, 0xC0	; 192
     aa4:	bf 2e       	mov	r11, r31
     aa6:	f0 2d       	mov	r31, r0
	}
	pre_error=error;
     aa8:	c0 92 4a 03 	sts	0x034A, r12
     aac:	d0 92 4b 03 	sts	0x034B, r13
     ab0:	e0 92 4c 03 	sts	0x034C, r14
     ab4:	f0 92 4d 03 	sts	0x034D, r15
	return output;
}
     ab8:	c5 01       	movw	r24, r10
     aba:	b4 01       	movw	r22, r8
     abc:	ff 90       	pop	r15
     abe:	ef 90       	pop	r14
     ac0:	df 90       	pop	r13
     ac2:	cf 90       	pop	r12
     ac4:	bf 90       	pop	r11
     ac6:	af 90       	pop	r10
     ac8:	9f 90       	pop	r9
     aca:	8f 90       	pop	r8
     acc:	08 95       	ret

00000ace <initTimeQueue>:
extern uint32_t time;

void initTimeQueue(){
	uint8_t i;
	// initializez toti pointerii cu 0, adica pe fiecare pozitie din coada e o structura neocupata
	for(i=0;i<TimerQueueSize;i++)
     ace:	40 91 01 01 	lds	r20, 0x0101
     ad2:	44 23       	and	r20, r20
     ad4:	a9 f0       	breq	.+42     	; 0xb00 <initTimeQueue+0x32>
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	90 e0       	ldi	r25, 0x00	; 0
		TimerQueue[i].pointerFct = 0;
     ada:	fc 01       	movw	r30, r24
     adc:	ee 0f       	add	r30, r30
     ade:	ff 1f       	adc	r31, r31
     ae0:	9c 01       	movw	r18, r24
     ae2:	22 0f       	add	r18, r18
     ae4:	33 1f       	adc	r19, r19
     ae6:	22 0f       	add	r18, r18
     ae8:	33 1f       	adc	r19, r19
     aea:	22 0f       	add	r18, r18
     aec:	33 1f       	adc	r19, r19
     aee:	e2 0f       	add	r30, r18
     af0:	f3 1f       	adc	r31, r19
     af2:	e9 56       	subi	r30, 0x69	; 105
     af4:	fc 4f       	sbci	r31, 0xFC	; 252
     af6:	11 86       	std	Z+9, r1	; 0x09
     af8:	10 86       	std	Z+8, r1	; 0x08
     afa:	01 96       	adiw	r24, 0x01	; 1
extern uint32_t time;

void initTimeQueue(){
	uint8_t i;
	// initializez toti pointerii cu 0, adica pe fiecare pozitie din coada e o structura neocupata
	for(i=0;i<TimerQueueSize;i++)
     afc:	84 17       	cp	r24, r20
     afe:	68 f3       	brcs	.-38     	; 0xada <initTimeQueue+0xc>
     b00:	08 95       	ret

00000b02 <addEntryToTimerQueue>:
		TimerQueue[i].pointerFct = 0;
}

extern volatile uint8_t debugging;
// delay e in microsecunde (10^-6 secunde)
void addEntryToTimerQueue(void (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
     b02:	df 92       	push	r13
     b04:	ef 92       	push	r14
     b06:	ff 92       	push	r15
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	ce 56       	subi	r28, 0x6E	; 110
     b16:	d1 09       	sbc	r29, r1
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	f8 94       	cli
     b1c:	de bf       	out	0x3e, r29	; 62
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	cd bf       	out	0x3d, r28	; 61
	cli(); // dezactivare intreruperi
     b22:	f8 94       	cli
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
     b24:	d0 90 01 01 	lds	r13, 0x0101
     b28:	dd 20       	and	r13, r13
     b2a:	09 f4       	brne	.+2      	; 0xb2e <addEntryToTimerQueue+0x2c>
     b2c:	74 c0       	rjmp	.+232    	; 0xc16 <addEntryToTimerQueue+0x114>
		if(TimerQueue[i].pointerFct == 0)
     b2e:	e0 91 9f 03 	lds	r30, 0x039F
     b32:	f0 91 a0 03 	lds	r31, 0x03A0
     b36:	ef 2b       	or	r30, r31
     b38:	09 f4       	brne	.+2      	; 0xb3c <addEntryToTimerQueue+0x3a>
     b3a:	74 c0       	rjmp	.+232    	; 0xc24 <addEntryToTimerQueue+0x122>
			break;
		if(TimerQueue[i].pointerFct == _theFct){
     b3c:	e0 91 9f 03 	lds	r30, 0x039F
     b40:	f0 91 a0 03 	lds	r31, 0x03A0
     b44:	e8 17       	cp	r30, r24
     b46:	f9 07       	cpc	r31, r25
     b48:	09 f0       	breq	.+2      	; 0xb4c <addEntryToTimerQueue+0x4a>
     b4a:	5b c0       	rjmp	.+182    	; 0xc02 <addEntryToTimerQueue+0x100>
     b4c:	2d c0       	rjmp	.+90     	; 0xba8 <addEntryToTimerQueue+0xa6>
void addEntryToTimerQueue(void (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
	cli(); // dezactivare intreruperi
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct == 0)
     b4e:	7f 01       	movw	r14, r30
     b50:	df 01       	movw	r26, r30
     b52:	aa 0f       	add	r26, r26
     b54:	bb 1f       	adc	r27, r27
     b56:	aa 0f       	add	r26, r26
     b58:	bb 1f       	adc	r27, r27
     b5a:	aa 0f       	add	r26, r26
     b5c:	bb 1f       	adc	r27, r27
     b5e:	8f 01       	movw	r16, r30
     b60:	00 0f       	add	r16, r16
     b62:	11 1f       	adc	r17, r17
     b64:	a0 0f       	add	r26, r16
     b66:	b1 1f       	adc	r27, r17
     b68:	a9 56       	subi	r26, 0x69	; 105
     b6a:	bc 4f       	sbci	r27, 0xFC	; 252
     b6c:	18 96       	adiw	r26, 0x08	; 8
     b6e:	0d 90       	ld	r0, X+
     b70:	bc 91       	ld	r27, X
     b72:	a0 2d       	mov	r26, r0
     b74:	ab 2b       	or	r26, r27
     b76:	09 f4       	brne	.+2      	; 0xb7a <addEntryToTimerQueue+0x78>
     b78:	4b c0       	rjmp	.+150    	; 0xc10 <addEntryToTimerQueue+0x10e>
			break;
		if(TimerQueue[i].pointerFct == _theFct){
     b7a:	8f 01       	movw	r16, r30
     b7c:	00 0f       	add	r16, r16
     b7e:	11 1f       	adc	r17, r17
     b80:	df 01       	movw	r26, r30
     b82:	aa 0f       	add	r26, r26
     b84:	bb 1f       	adc	r27, r27
     b86:	aa 0f       	add	r26, r26
     b88:	bb 1f       	adc	r27, r27
     b8a:	aa 0f       	add	r26, r26
     b8c:	bb 1f       	adc	r27, r27
     b8e:	a0 0f       	add	r26, r16
     b90:	b1 1f       	adc	r27, r17
     b92:	a9 56       	subi	r26, 0x69	; 105
     b94:	bc 4f       	sbci	r27, 0xFC	; 252
     b96:	18 96       	adiw	r26, 0x08	; 8
     b98:	0d 90       	ld	r0, X+
     b9a:	bc 91       	ld	r27, X
     b9c:	a0 2d       	mov	r26, r0
     b9e:	31 96       	adiw	r30, 0x01	; 1
     ba0:	a8 17       	cp	r26, r24
     ba2:	b9 07       	cpc	r27, r25
     ba4:	81 f5       	brne	.+96     	; 0xc06 <addEntryToTimerQueue+0x104>
     ba6:	02 c0       	rjmp	.+4      	; 0xbac <addEntryToTimerQueue+0xaa>
void addEntryToTimerQueue(void (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
	cli(); // dezactivare intreruperi
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct == 0)
     ba8:	e1 2c       	mov	r14, r1
     baa:	f1 2c       	mov	r15, r1
			break;
		if(TimerQueue[i].pointerFct == _theFct){
			if(debugging || 1){
     bac:	80 91 00 01 	lds	r24, 0x0100
				char msg[100];
				sprintf(msg, "Functia asta e deja in coada! cu delay: %lu", TimerQueue[i].delay);
     bb0:	f7 01       	movw	r30, r14
     bb2:	ee 0f       	add	r30, r30
     bb4:	ff 1f       	adc	r31, r31
     bb6:	ee 0c       	add	r14, r14
     bb8:	ff 1c       	adc	r15, r15
     bba:	ee 0c       	add	r14, r14
     bbc:	ff 1c       	adc	r15, r15
     bbe:	ee 0c       	add	r14, r14
     bc0:	ff 1c       	adc	r15, r15
     bc2:	ee 0d       	add	r30, r14
     bc4:	ff 1d       	adc	r31, r15
     bc6:	e9 56       	subi	r30, 0x69	; 105
     bc8:	fc 4f       	sbci	r31, 0xFC	; 252
     bca:	80 81       	ld	r24, Z
     bcc:	91 81       	ldd	r25, Z+1	; 0x01
     bce:	a2 81       	ldd	r26, Z+2	; 0x02
     bd0:	b3 81       	ldd	r27, Z+3	; 0x03
     bd2:	bf 93       	push	r27
     bd4:	af 93       	push	r26
     bd6:	9f 93       	push	r25
     bd8:	8f 93       	push	r24
     bda:	80 e3       	ldi	r24, 0x30	; 48
     bdc:	92 e0       	ldi	r25, 0x02	; 2
     bde:	9f 93       	push	r25
     be0:	8f 93       	push	r24
     be2:	8e 01       	movw	r16, r28
     be4:	05 5f       	subi	r16, 0xF5	; 245
     be6:	1f 4f       	sbci	r17, 0xFF	; 255
     be8:	1f 93       	push	r17
     bea:	0f 93       	push	r16
     bec:	0e 94 3d 0c 	call	0x187a	; 0x187a <sprintf>
				BTTransmitStr(msg);
     bf0:	c8 01       	movw	r24, r16
     bf2:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	f8 94       	cli
     bfa:	de bf       	out	0x3e, r29	; 62
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	cd bf       	out	0x3d, r28	; 61
     c00:	5e c0       	rjmp	.+188    	; 0xcbe <addEntryToTimerQueue+0x1bc>
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct == 0)
			break;
		if(TimerQueue[i].pointerFct == _theFct){
     c02:	e1 e0       	ldi	r30, 0x01	; 1
     c04:	f0 e0       	ldi	r31, 0x00	; 0
// delay e in microsecunde (10^-6 secunde)
void addEntryToTimerQueue(void (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
	cli(); // dezactivare intreruperi
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
     c06:	3e 2f       	mov	r19, r30
     c08:	ed 15       	cp	r30, r13
     c0a:	08 f4       	brcc	.+2      	; 0xc0e <addEntryToTimerQueue+0x10c>
     c0c:	a0 cf       	rjmp	.-192    	; 0xb4e <addEntryToTimerQueue+0x4c>
     c0e:	01 c0       	rjmp	.+2      	; 0xc12 <addEntryToTimerQueue+0x110>
     c10:	e3 2f       	mov	r30, r19
				BTTransmitStr(msg);
			}
			return;
		}
	}
	if(i == TimerQueueSize){
     c12:	ed 11       	cpse	r30, r13
     c14:	08 c0       	rjmp	.+16     	; 0xc26 <addEntryToTimerQueue+0x124>
		//nu mai e loc in coada
		if(debugging || 1)
     c16:	80 91 00 01 	lds	r24, 0x0100
			BTTransmitStr("Coada e full!");
     c1a:	8c e5       	ldi	r24, 0x5C	; 92
     c1c:	92 e0       	ldi	r25, 0x02	; 2
     c1e:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
     c22:	4d c0       	rjmp	.+154    	; 0xcbe <addEntryToTimerQueue+0x1bc>
// delay e in microsecunde (10^-6 secunde)
void addEntryToTimerQueue(void (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
	cli(); // dezactivare intreruperi
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
     c24:	30 e0       	ldi	r19, 0x00	; 0
	}
	
	//construire entry pentru functia curenta 
	queueEntry thisEntry;
	thisEntry.delay = _delay;
	thisEntry.repeatDelay = _repeat ? _delay :0;
     c26:	21 11       	cpse	r18, r1
     c28:	04 c0       	rjmp	.+8      	; 0xc32 <addEntryToTimerQueue+0x130>
     c2a:	10 e0       	ldi	r17, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	a0 e0       	ldi	r26, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <addEntryToTimerQueue+0x138>
     c32:	14 2f       	mov	r17, r20
     c34:	b5 2f       	mov	r27, r21
     c36:	a6 2f       	mov	r26, r22
     c38:	27 2f       	mov	r18, r23
	thisEntry.pointerFct = _theFct;
	
	TimerQueue[i] = thisEntry;
     c3a:	e3 2f       	mov	r30, r19
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	49 83       	std	Y+1, r20	; 0x01
     c40:	5a 83       	std	Y+2, r21	; 0x02
     c42:	6b 83       	std	Y+3, r22	; 0x03
     c44:	7c 83       	std	Y+4, r23	; 0x04
     c46:	1d 83       	std	Y+5, r17	; 0x05
     c48:	be 83       	std	Y+6, r27	; 0x06
     c4a:	af 83       	std	Y+7, r26	; 0x07
     c4c:	28 87       	std	Y+8, r18	; 0x08
     c4e:	9a 87       	std	Y+10, r25	; 0x0a
     c50:	89 87       	std	Y+9, r24	; 0x09
     c52:	cf 01       	movw	r24, r30
     c54:	88 0f       	add	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	ee 0f       	add	r30, r30
     c5a:	ff 1f       	adc	r31, r31
     c5c:	ee 0f       	add	r30, r30
     c5e:	ff 1f       	adc	r31, r31
     c60:	ee 0f       	add	r30, r30
     c62:	ff 1f       	adc	r31, r31
     c64:	8e 0f       	add	r24, r30
     c66:	9f 1f       	adc	r25, r31
     c68:	89 56       	subi	r24, 0x69	; 105
     c6a:	9c 4f       	sbci	r25, 0xFC	; 252
     c6c:	2a e0       	ldi	r18, 0x0A	; 10
     c6e:	fe 01       	movw	r30, r28
     c70:	31 96       	adiw	r30, 0x01	; 1
     c72:	dc 01       	movw	r26, r24
     c74:	01 90       	ld	r0, Z+
     c76:	0d 92       	st	X+, r0
     c78:	2a 95       	dec	r18
     c7a:	e1 f7       	brne	.-8      	; 0xc74 <addEntryToTimerQueue+0x172>
	
	if(debugging || 1){
     c7c:	20 91 00 01 	lds	r18, 0x0100
		char msg[100];		
		sprintf(msg, "Entry adaugat in coada! la index %d si cu delay: %lu", i, TimerQueue[i].delay);
     c80:	fc 01       	movw	r30, r24
     c82:	80 81       	ld	r24, Z
     c84:	91 81       	ldd	r25, Z+1	; 0x01
     c86:	a2 81       	ldd	r26, Z+2	; 0x02
     c88:	b3 81       	ldd	r27, Z+3	; 0x03
     c8a:	bf 93       	push	r27
     c8c:	af 93       	push	r26
     c8e:	9f 93       	push	r25
     c90:	8f 93       	push	r24
     c92:	1f 92       	push	r1
     c94:	3f 93       	push	r19
     c96:	8a e6       	ldi	r24, 0x6A	; 106
     c98:	92 e0       	ldi	r25, 0x02	; 2
     c9a:	9f 93       	push	r25
     c9c:	8f 93       	push	r24
     c9e:	8e 01       	movw	r16, r28
     ca0:	05 5f       	subi	r16, 0xF5	; 245
     ca2:	1f 4f       	sbci	r17, 0xFF	; 255
     ca4:	1f 93       	push	r17
     ca6:	0f 93       	push	r16
     ca8:	0e 94 3d 0c 	call	0x187a	; 0x187a <sprintf>
		BTTransmitStr(msg);
     cac:	c8 01       	movw	r24, r16
     cae:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
	}
	sei();
     cb2:	78 94       	sei
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	f8 94       	cli
     cb8:	de bf       	out	0x3e, r29	; 62
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	cd bf       	out	0x3d, r28	; 61
}
     cbe:	c2 59       	subi	r28, 0x92	; 146
     cc0:	df 4f       	sbci	r29, 0xFF	; 255
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	f8 94       	cli
     cc6:	de bf       	out	0x3e, r29	; 62
     cc8:	0f be       	out	0x3f, r0	; 63
     cca:	cd bf       	out	0x3d, r28	; 61
     ccc:	df 91       	pop	r29
     cce:	cf 91       	pop	r28
     cd0:	1f 91       	pop	r17
     cd2:	0f 91       	pop	r16
     cd4:	ff 90       	pop	r15
     cd6:	ef 90       	pop	r14
     cd8:	df 90       	pop	r13
     cda:	08 95       	ret

00000cdc <removeEntryFromTimerQueue>:
void removeEntryFromTimerQueue(void (*_theFct) (void)){
     cdc:	bf 92       	push	r11
     cde:	cf 92       	push	r12
     ce0:	df 92       	push	r13
     ce2:	ef 92       	push	r14
     ce4:	ff 92       	push	r15
     ce6:	0f 93       	push	r16
     ce8:	1f 93       	push	r17
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
     cf2:	c4 56       	subi	r28, 0x64	; 100
     cf4:	d1 09       	sbc	r29, r1
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	f8 94       	cli
     cfa:	de bf       	out	0x3e, r29	; 62
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	cd bf       	out	0x3d, r28	; 61
     d00:	8c 01       	movw	r16, r24
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
     d02:	80 91 01 01 	lds	r24, 0x0101
     d06:	88 23       	and	r24, r24
     d08:	09 f4       	brne	.+2      	; 0xd0c <removeEntryFromTimerQueue+0x30>
     d0a:	52 c0       	rjmp	.+164    	; 0xdb0 <removeEntryFromTimerQueue+0xd4>
     d0c:	b1 2c       	mov	r11, r1
			TimerQueue[i].pointerFct = 0;
			TimerQueue[i].delay = 0;
			TimerQueue[i].repeatDelay = 0;
			if(debugging){
				char msg[100];
				sprintf(msg, "Entry sters din coada. de pe pozitia %d", i);
     d0e:	0f 2e       	mov	r0, r31
     d10:	ff e9       	ldi	r31, 0x9F	; 159
     d12:	cf 2e       	mov	r12, r31
     d14:	f2 e0       	ldi	r31, 0x02	; 2
     d16:	df 2e       	mov	r13, r31
     d18:	f0 2d       	mov	r31, r0
     d1a:	ce 01       	movw	r24, r28
     d1c:	01 96       	adiw	r24, 0x01	; 1
     d1e:	7c 01       	movw	r14, r24
	sei();
}
void removeEntryFromTimerQueue(void (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct == _theFct){
     d20:	2b 2d       	mov	r18, r11
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	f9 01       	movw	r30, r18
     d26:	ee 0f       	add	r30, r30
     d28:	ff 1f       	adc	r31, r31
     d2a:	c9 01       	movw	r24, r18
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	88 0f       	add	r24, r24
     d36:	99 1f       	adc	r25, r25
     d38:	e8 0f       	add	r30, r24
     d3a:	f9 1f       	adc	r31, r25
     d3c:	e9 56       	subi	r30, 0x69	; 105
     d3e:	fc 4f       	sbci	r31, 0xFC	; 252
     d40:	40 85       	ldd	r20, Z+8	; 0x08
     d42:	51 85       	ldd	r21, Z+9	; 0x09
     d44:	40 17       	cp	r20, r16
     d46:	51 07       	cpc	r21, r17
     d48:	69 f5       	brne	.+90     	; 0xda4 <removeEntryFromTimerQueue+0xc8>
			TimerQueue[i].pointerFct = 0;
     d4a:	c9 01       	movw	r24, r18
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	88 0f       	add	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	f9 01       	movw	r30, r18
     d5a:	ee 0f       	add	r30, r30
     d5c:	ff 1f       	adc	r31, r31
     d5e:	e8 0f       	add	r30, r24
     d60:	f9 1f       	adc	r31, r25
     d62:	e9 56       	subi	r30, 0x69	; 105
     d64:	fc 4f       	sbci	r31, 0xFC	; 252
     d66:	11 86       	std	Z+9, r1	; 0x09
     d68:	10 86       	std	Z+8, r1	; 0x08
			TimerQueue[i].delay = 0;
     d6a:	10 82       	st	Z, r1
     d6c:	11 82       	std	Z+1, r1	; 0x01
     d6e:	12 82       	std	Z+2, r1	; 0x02
     d70:	13 82       	std	Z+3, r1	; 0x03
			TimerQueue[i].repeatDelay = 0;
     d72:	14 82       	std	Z+4, r1	; 0x04
     d74:	15 82       	std	Z+5, r1	; 0x05
     d76:	16 82       	std	Z+6, r1	; 0x06
     d78:	17 82       	std	Z+7, r1	; 0x07
			if(debugging){
     d7a:	80 91 00 01 	lds	r24, 0x0100
     d7e:	88 23       	and	r24, r24
     d80:	89 f0       	breq	.+34     	; 0xda4 <removeEntryFromTimerQueue+0xc8>
				char msg[100];
				sprintf(msg, "Entry sters din coada. de pe pozitia %d", i);
     d82:	3f 93       	push	r19
     d84:	bf 92       	push	r11
     d86:	df 92       	push	r13
     d88:	cf 92       	push	r12
     d8a:	ff 92       	push	r15
     d8c:	ef 92       	push	r14
     d8e:	0e 94 3d 0c 	call	0x187a	; 0x187a <sprintf>
				BTTransmitStr(msg);
     d92:	c7 01       	movw	r24, r14
     d94:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
	}
	sei();
}
void removeEntryFromTimerQueue(void (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
     da4:	b3 94       	inc	r11
     da6:	80 91 01 01 	lds	r24, 0x0101
     daa:	b8 16       	cp	r11, r24
     dac:	08 f4       	brcc	.+2      	; 0xdb0 <removeEntryFromTimerQueue+0xd4>
     dae:	b8 cf       	rjmp	.-144    	; 0xd20 <removeEntryFromTimerQueue+0x44>
				sprintf(msg, "Entry sters din coada. de pe pozitia %d", i);
				BTTransmitStr(msg);
			}
		}
	}
}
     db0:	cc 59       	subi	r28, 0x9C	; 156
     db2:	df 4f       	sbci	r29, 0xFF	; 255
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	f8 94       	cli
     db8:	de bf       	out	0x3e, r29	; 62
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	cd bf       	out	0x3d, r28	; 61
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	ff 90       	pop	r15
     dc8:	ef 90       	pop	r14
     dca:	df 90       	pop	r13
     dcc:	cf 90       	pop	r12
     dce:	bf 90       	pop	r11
     dd0:	08 95       	ret

00000dd2 <existsEntryInTimerQueue>:

uint8_t existsEntryInTimerQueue(void (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
     dd2:	60 91 01 01 	lds	r22, 0x0101
     dd6:	66 23       	and	r22, r22
     dd8:	19 f1       	breq	.+70     	; 0xe20 <existsEntryInTimerQueue+0x4e>
		if(TimerQueue[i].pointerFct == _theFct){
     dda:	20 91 9f 03 	lds	r18, 0x039F
     dde:	30 91 a0 03 	lds	r19, 0x03A0
     de2:	28 17       	cp	r18, r24
     de4:	39 07       	cpc	r19, r25
     de6:	f1 f0       	breq	.+60     	; 0xe24 <existsEntryInTimerQueue+0x52>
     de8:	21 e0       	ldi	r18, 0x01	; 1
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	15 c0       	rjmp	.+42     	; 0xe18 <existsEntryInTimerQueue+0x46>
     dee:	f9 01       	movw	r30, r18
     df0:	ee 0f       	add	r30, r30
     df2:	ff 1f       	adc	r31, r31
     df4:	a9 01       	movw	r20, r18
     df6:	44 0f       	add	r20, r20
     df8:	55 1f       	adc	r21, r21
     dfa:	44 0f       	add	r20, r20
     dfc:	55 1f       	adc	r21, r21
     dfe:	44 0f       	add	r20, r20
     e00:	55 1f       	adc	r21, r21
     e02:	e4 0f       	add	r30, r20
     e04:	f5 1f       	adc	r31, r21
     e06:	e9 56       	subi	r30, 0x69	; 105
     e08:	fc 4f       	sbci	r31, 0xFC	; 252
     e0a:	40 85       	ldd	r20, Z+8	; 0x08
     e0c:	51 85       	ldd	r21, Z+9	; 0x09
     e0e:	2f 5f       	subi	r18, 0xFF	; 255
     e10:	3f 4f       	sbci	r19, 0xFF	; 255
     e12:	48 17       	cp	r20, r24
     e14:	59 07       	cpc	r21, r25
     e16:	41 f0       	breq	.+16     	; 0xe28 <existsEntryInTimerQueue+0x56>
	}
}

uint8_t existsEntryInTimerQueue(void (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
     e18:	26 17       	cp	r18, r22
     e1a:	48 f3       	brcs	.-46     	; 0xdee <existsEntryInTimerQueue+0x1c>
		if(TimerQueue[i].pointerFct == _theFct){
			return 1;
		}
	}
	return 0;
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	08 95       	ret
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	08 95       	ret

uint8_t existsEntryInTimerQueue(void (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct == _theFct){
			return 1;
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	08 95       	ret
     e28:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
     e2a:	08 95       	ret

00000e2c <timePassed>:

//se apeleaza din intrerupere (cate microsecunde au trecut)
//pentru fiecare functie(valida) din queue se scade din delay numarul de microsecunde care a trecut

void timePassed(uint32_t passed_us){
     e2c:	8f 92       	push	r8
     e2e:	9f 92       	push	r9
     e30:	af 92       	push	r10
     e32:	bf 92       	push	r11
     e34:	df 92       	push	r13
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
     e42:	10 91 01 01 	lds	r17, 0x0101
     e46:	11 23       	and	r17, r17
     e48:	09 f4       	brne	.+2      	; 0xe4c <timePassed+0x20>
     e4a:	7b c0       	rjmp	.+246    	; 0xf42 <timePassed+0x116>
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
		if(TimerQueue[i].pointerFct != 0){
			if(TimerQueue[i].delay > 0)
				TimerQueue[i].delay = TimerQueue[i].delay > passed_us ? TimerQueue[i].delay-passed_us : 0;
     e50:	d1 2c       	mov	r13, r1
     e52:	e1 2c       	mov	r14, r1
     e54:	f1 2c       	mov	r15, r1
     e56:	00 e0       	ldi	r16, 0x00	; 0
//pentru fiecare functie(valida) din queue se scade din delay numarul de microsecunde care a trecut

void timePassed(uint32_t passed_us){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct != 0){
     e58:	f9 01       	movw	r30, r18
     e5a:	a9 01       	movw	r20, r18
     e5c:	44 0f       	add	r20, r20
     e5e:	55 1f       	adc	r21, r21
     e60:	44 0f       	add	r20, r20
     e62:	55 1f       	adc	r21, r21
     e64:	44 0f       	add	r20, r20
     e66:	55 1f       	adc	r21, r21
     e68:	d9 01       	movw	r26, r18
     e6a:	aa 0f       	add	r26, r26
     e6c:	bb 1f       	adc	r27, r27
     e6e:	a4 0f       	add	r26, r20
     e70:	b5 1f       	adc	r27, r21
     e72:	a9 56       	subi	r26, 0x69	; 105
     e74:	bc 4f       	sbci	r27, 0xFC	; 252
     e76:	18 96       	adiw	r26, 0x08	; 8
     e78:	4d 91       	ld	r20, X+
     e7a:	5c 91       	ld	r21, X
     e7c:	19 97       	sbiw	r26, 0x09	; 9
     e7e:	45 2b       	or	r20, r21
     e80:	09 f4       	brne	.+2      	; 0xe84 <timePassed+0x58>
     e82:	5a c0       	rjmp	.+180    	; 0xf38 <timePassed+0x10c>
			if(TimerQueue[i].delay > 0)
     e84:	a9 01       	movw	r20, r18
     e86:	44 0f       	add	r20, r20
     e88:	55 1f       	adc	r21, r21
     e8a:	44 0f       	add	r20, r20
     e8c:	55 1f       	adc	r21, r21
     e8e:	44 0f       	add	r20, r20
     e90:	55 1f       	adc	r21, r21
     e92:	d9 01       	movw	r26, r18
     e94:	aa 0f       	add	r26, r26
     e96:	bb 1f       	adc	r27, r27
     e98:	a4 0f       	add	r26, r20
     e9a:	b5 1f       	adc	r27, r21
     e9c:	a9 56       	subi	r26, 0x69	; 105
     e9e:	bc 4f       	sbci	r27, 0xFC	; 252
     ea0:	8d 90       	ld	r8, X+
     ea2:	9d 90       	ld	r9, X+
     ea4:	ad 90       	ld	r10, X+
     ea6:	bc 90       	ld	r11, X
     ea8:	89 28       	or	r8, r9
     eaa:	8a 28       	or	r8, r10
     eac:	8b 28       	or	r8, r11
     eae:	09 f4       	brne	.+2      	; 0xeb2 <timePassed+0x86>
     eb0:	43 c0       	rjmp	.+134    	; 0xf38 <timePassed+0x10c>
				TimerQueue[i].delay = TimerQueue[i].delay > passed_us ? TimerQueue[i].delay-passed_us : 0;
     eb2:	a9 01       	movw	r20, r18
     eb4:	44 0f       	add	r20, r20
     eb6:	55 1f       	adc	r21, r21
     eb8:	44 0f       	add	r20, r20
     eba:	55 1f       	adc	r21, r21
     ebc:	44 0f       	add	r20, r20
     ebe:	55 1f       	adc	r21, r21
     ec0:	d9 01       	movw	r26, r18
     ec2:	aa 0f       	add	r26, r26
     ec4:	bb 1f       	adc	r27, r27
     ec6:	a4 0f       	add	r26, r20
     ec8:	b5 1f       	adc	r27, r21
     eca:	a9 56       	subi	r26, 0x69	; 105
     ecc:	bc 4f       	sbci	r27, 0xFC	; 252
     ece:	8d 90       	ld	r8, X+
     ed0:	9d 90       	ld	r9, X+
     ed2:	ad 90       	ld	r10, X+
     ed4:	bc 90       	ld	r11, X
     ed6:	68 15       	cp	r22, r8
     ed8:	79 05       	cpc	r23, r9
     eda:	8a 05       	cpc	r24, r10
     edc:	9b 05       	cpc	r25, r11
     ede:	b8 f4       	brcc	.+46     	; 0xf0e <timePassed+0xe2>
     ee0:	a9 01       	movw	r20, r18
     ee2:	44 0f       	add	r20, r20
     ee4:	55 1f       	adc	r21, r21
     ee6:	44 0f       	add	r20, r20
     ee8:	55 1f       	adc	r21, r21
     eea:	44 0f       	add	r20, r20
     eec:	55 1f       	adc	r21, r21
     eee:	d9 01       	movw	r26, r18
     ef0:	aa 0f       	add	r26, r26
     ef2:	bb 1f       	adc	r27, r27
     ef4:	a4 0f       	add	r26, r20
     ef6:	b5 1f       	adc	r27, r21
     ef8:	a9 56       	subi	r26, 0x69	; 105
     efa:	bc 4f       	sbci	r27, 0xFC	; 252
     efc:	8d 90       	ld	r8, X+
     efe:	9d 90       	ld	r9, X+
     f00:	ad 90       	ld	r10, X+
     f02:	bc 90       	ld	r11, X
     f04:	86 1a       	sub	r8, r22
     f06:	97 0a       	sbc	r9, r23
     f08:	a8 0a       	sbc	r10, r24
     f0a:	b9 0a       	sbc	r11, r25
     f0c:	04 c0       	rjmp	.+8      	; 0xf16 <timePassed+0xea>
     f0e:	8d 2c       	mov	r8, r13
     f10:	9e 2c       	mov	r9, r14
     f12:	af 2c       	mov	r10, r15
     f14:	b0 2e       	mov	r11, r16
     f16:	ef 01       	movw	r28, r30
     f18:	cc 0f       	add	r28, r28
     f1a:	dd 1f       	adc	r29, r29
     f1c:	ee 0f       	add	r30, r30
     f1e:	ff 1f       	adc	r31, r31
     f20:	ee 0f       	add	r30, r30
     f22:	ff 1f       	adc	r31, r31
     f24:	ee 0f       	add	r30, r30
     f26:	ff 1f       	adc	r31, r31
     f28:	ec 0f       	add	r30, r28
     f2a:	fd 1f       	adc	r31, r29
     f2c:	e9 56       	subi	r30, 0x69	; 105
     f2e:	fc 4f       	sbci	r31, 0xFC	; 252
     f30:	80 82       	st	Z, r8
     f32:	91 82       	std	Z+1, r9	; 0x01
     f34:	a2 82       	std	Z+2, r10	; 0x02
     f36:	b3 82       	std	Z+3, r11	; 0x03
     f38:	2f 5f       	subi	r18, 0xFF	; 255
     f3a:	3f 4f       	sbci	r19, 0xFF	; 255
//se apeleaza din intrerupere (cate microsecunde au trecut)
//pentru fiecare functie(valida) din queue se scade din delay numarul de microsecunde care a trecut

void timePassed(uint32_t passed_us){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
     f3c:	21 17       	cp	r18, r17
     f3e:	08 f4       	brcc	.+2      	; 0xf42 <timePassed+0x116>
     f40:	8b cf       	rjmp	.-234    	; 0xe58 <timePassed+0x2c>
		if(TimerQueue[i].pointerFct != 0){
			if(TimerQueue[i].delay > 0)
				TimerQueue[i].delay = TimerQueue[i].delay > passed_us ? TimerQueue[i].delay-passed_us : 0;
		}
	}
}
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	ff 90       	pop	r15
     f4c:	ef 90       	pop	r14
     f4e:	df 90       	pop	r13
     f50:	bf 90       	pop	r11
     f52:	af 90       	pop	r10
     f54:	9f 90       	pop	r9
     f56:	8f 90       	pop	r8
     f58:	08 95       	ret

00000f5a <checkTimeQueue>:

//se apeleaza din main loop
//verifica daca sunt functii care trebuie apelate (daca delay-ul lor a ajuns la 0)
void checkTimeQueue(void){
     f5a:	ef 92       	push	r14
     f5c:	ff 92       	push	r15
     f5e:	1f 93       	push	r17
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
	cli();
     f64:	f8 94       	cli
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
     f66:	80 91 01 01 	lds	r24, 0x0101
     f6a:	88 23       	and	r24, r24
     f6c:	09 f4       	brne	.+2      	; 0xf70 <checkTimeQueue+0x16>
     f6e:	57 c0       	rjmp	.+174    	; 0x101e <checkTimeQueue+0xc4>
     f70:	10 e0       	ldi	r17, 0x00	; 0
		if(TimerQueue[i].pointerFct != 0){
     f72:	c1 2f       	mov	r28, r17
     f74:	d0 e0       	ldi	r29, 0x00	; 0
     f76:	fe 01       	movw	r30, r28
     f78:	ee 0f       	add	r30, r30
     f7a:	ff 1f       	adc	r31, r31
     f7c:	ce 01       	movw	r24, r28
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	e8 0f       	add	r30, r24
     f8c:	f9 1f       	adc	r31, r25
     f8e:	e9 56       	subi	r30, 0x69	; 105
     f90:	fc 4f       	sbci	r31, 0xFC	; 252
     f92:	80 85       	ldd	r24, Z+8	; 0x08
     f94:	91 85       	ldd	r25, Z+9	; 0x09
     f96:	89 2b       	or	r24, r25
     f98:	e1 f1       	breq	.+120    	; 0x1012 <checkTimeQueue+0xb8>
			if(TimerQueue[i].delay == 0){
     f9a:	ce 01       	movw	r24, r28
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	fe 01       	movw	r30, r28
     faa:	ee 0f       	add	r30, r30
     fac:	ff 1f       	adc	r31, r31
     fae:	e8 0f       	add	r30, r24
     fb0:	f9 1f       	adc	r31, r25
     fb2:	e9 56       	subi	r30, 0x69	; 105
     fb4:	fc 4f       	sbci	r31, 0xFC	; 252
     fb6:	80 81       	ld	r24, Z
     fb8:	91 81       	ldd	r25, Z+1	; 0x01
     fba:	a2 81       	ldd	r26, Z+2	; 0x02
     fbc:	b3 81       	ldd	r27, Z+3	; 0x03
     fbe:	89 2b       	or	r24, r25
     fc0:	8a 2b       	or	r24, r26
     fc2:	8b 2b       	or	r24, r27
     fc4:	31 f5       	brne	.+76     	; 0x1012 <checkTimeQueue+0xb8>
				TimerQueue[i].pointerFct();
     fc6:	7f 01       	movw	r14, r30
     fc8:	00 84       	ldd	r0, Z+8	; 0x08
     fca:	f1 85       	ldd	r31, Z+9	; 0x09
     fcc:	e0 2d       	mov	r30, r0
     fce:	09 95       	icall
				if(TimerQueue[i].repeatDelay)
     fd0:	f7 01       	movw	r30, r14
     fd2:	84 81       	ldd	r24, Z+4	; 0x04
     fd4:	95 81       	ldd	r25, Z+5	; 0x05
     fd6:	a6 81       	ldd	r26, Z+6	; 0x06
     fd8:	b7 81       	ldd	r27, Z+7	; 0x07
     fda:	89 2b       	or	r24, r25
     fdc:	8a 2b       	or	r24, r26
     fde:	8b 2b       	or	r24, r27
     fe0:	49 f0       	breq	.+18     	; 0xff4 <checkTimeQueue+0x9a>
					TimerQueue[i].delay = TimerQueue[i].repeatDelay;
     fe2:	84 81       	ldd	r24, Z+4	; 0x04
     fe4:	95 81       	ldd	r25, Z+5	; 0x05
     fe6:	a6 81       	ldd	r26, Z+6	; 0x06
     fe8:	b7 81       	ldd	r27, Z+7	; 0x07
     fea:	80 83       	st	Z, r24
     fec:	91 83       	std	Z+1, r25	; 0x01
     fee:	a2 83       	std	Z+2, r26	; 0x02
     ff0:	b3 83       	std	Z+3, r27	; 0x03
     ff2:	0f c0       	rjmp	.+30     	; 0x1012 <checkTimeQueue+0xb8>
				else
					TimerQueue[i].pointerFct = 0;
     ff4:	ce 01       	movw	r24, r28
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	cc 0f       	add	r28, r28
     ffc:	dd 1f       	adc	r29, r29
     ffe:	cc 0f       	add	r28, r28
    1000:	dd 1f       	adc	r29, r29
    1002:	cc 0f       	add	r28, r28
    1004:	dd 1f       	adc	r29, r29
    1006:	c8 0f       	add	r28, r24
    1008:	d9 1f       	adc	r29, r25
    100a:	c9 56       	subi	r28, 0x69	; 105
    100c:	dc 4f       	sbci	r29, 0xFC	; 252
    100e:	19 86       	std	Y+9, r1	; 0x09
    1010:	18 86       	std	Y+8, r1	; 0x08
//se apeleaza din main loop
//verifica daca sunt functii care trebuie apelate (daca delay-ul lor a ajuns la 0)
void checkTimeQueue(void){
	cli();
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
    1012:	1f 5f       	subi	r17, 0xFF	; 255
    1014:	80 91 01 01 	lds	r24, 0x0101
    1018:	18 17       	cp	r17, r24
    101a:	08 f4       	brcc	.+2      	; 0x101e <checkTimeQueue+0xc4>
    101c:	aa cf       	rjmp	.-172    	; 0xf72 <checkTimeQueue+0x18>
				else
					TimerQueue[i].pointerFct = 0;
			}
		}
	}
	sei();
    101e:	78 94       	sei
}
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	1f 91       	pop	r17
    1026:	ff 90       	pop	r15
    1028:	ef 90       	pop	r14
    102a:	08 95       	ret

0000102c <blinkLedD6_v1>:
#include "Car/Engines.h"
#include "PID/PID1.h"

volatile uint8_t e_stins = 0;
void blinkLedD6_v1(){
	if(!e_stins)
    102c:	80 91 51 03 	lds	r24, 0x0351
    1030:	81 11       	cpse	r24, r1
    1032:	04 c0       	rjmp	.+8      	; 0x103c <blinkLedD6_v1+0x10>
		PORTD ^= 1<<PIND6;
    1034:	9b b1       	in	r25, 0x0b	; 11
    1036:	80 e4       	ldi	r24, 0x40	; 64
    1038:	89 27       	eor	r24, r25
    103a:	8b b9       	out	0x0b, r24	; 11
    103c:	08 95       	ret

0000103e <ledAction>:
void ledAction(char act){
	//char msg[] = "led action:  ";
	//msg[strlen(msg)-1]= act+'0';
	//BTTransmitStr(msg);
	
	switch(act){
    103e:	81 30       	cpi	r24, 0x01	; 1
    1040:	71 f0       	breq	.+28     	; 0x105e <ledAction+0x20>
    1042:	18 f0       	brcs	.+6      	; 0x104a <ledAction+0xc>
    1044:	82 30       	cpi	r24, 0x02	; 2
    1046:	a9 f0       	breq	.+42     	; 0x1072 <ledAction+0x34>
    1048:	08 95       	ret
		case 0:
			removeEntryFromTimerQueue(&blinkLedD6_v1);
    104a:	86 e1       	ldi	r24, 0x16	; 22
    104c:	98 e0       	ldi	r25, 0x08	; 8
    104e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <removeEntryFromTimerQueue>
			PORTD &=~ (1<<PIND6);
    1052:	5e 98       	cbi	0x0b, 6	; 11
			//shouldBlink = 0;
			BTTransmitStr("ledul a fost stins.");
    1054:	87 ec       	ldi	r24, 0xC7	; 199
    1056:	92 e0       	ldi	r25, 0x02	; 2
    1058:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
			break;
    105c:	08 95       	ret
		case 1:
			removeEntryFromTimerQueue(&blinkLedD6_v1);
    105e:	86 e1       	ldi	r24, 0x16	; 22
    1060:	98 e0       	ldi	r25, 0x08	; 8
    1062:	0e 94 6e 06 	call	0xcdc	; 0xcdc <removeEntryFromTimerQueue>
			PORTD |= 1<<PIND6;
    1066:	5e 9a       	sbi	0x0b, 6	; 11
			//shouldBlink = 0;
			BTTransmitStr("ledul a fost aprins.");
    1068:	8b ed       	ldi	r24, 0xDB	; 219
    106a:	92 e0       	ldi	r25, 0x02	; 2
    106c:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
			break;
    1070:	08 95       	ret
		
		case 2:
			addEntryToTimerQueue(&blinkLedD6_v1, (1000UL * 1000UL), Periodic);
    1072:	21 e0       	ldi	r18, 0x01	; 1
    1074:	40 e4       	ldi	r20, 0x40	; 64
    1076:	52 e4       	ldi	r21, 0x42	; 66
    1078:	6f e0       	ldi	r22, 0x0F	; 15
    107a:	70 e0       	ldi	r23, 0x00	; 0
    107c:	86 e1       	ldi	r24, 0x16	; 22
    107e:	98 e0       	ldi	r25, 0x08	; 8
    1080:	0e 94 81 05 	call	0xb02	; 0xb02 <addEntryToTimerQueue>
			BTTransmitStr("ledul va 'blincari'.");
    1084:	80 ef       	ldi	r24, 0xF0	; 240
    1086:	92 e0       	ldi	r25, 0x02	; 2
    1088:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
    108c:	08 95       	ret

0000108e <initLeds>:
			break;
	}
}

void initLeds(){	
	DDRD |=1<<PIND6;
    108e:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |=1<<PIND5;
    1090:	55 9a       	sbi	0x0a, 5	; 10
    1092:	08 95       	ret

00001094 <ReadSensor0>:
}
extern uint32_t time;

void ReadSensor0(){
    1094:	0f 93       	push	r16
    1096:	1f 93       	push	r17
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	c6 54       	subi	r28, 0x46	; 70
    10a2:	d1 09       	sbc	r29, r1
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	f8 94       	cli
    10a8:	de bf       	out	0x3e, r29	; 62
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	cd bf       	out	0x3d, r28	; 61
	char msg[70];
	//resetSensorQueue(0);
	uint16_t x = getValueOfSensor(0);
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	0e 94 ae 03 	call	0x75c	; 0x75c <getValueOfSensor>
	sprintf(msg, "sensor #0: %d", x);	
    10b4:	9f 93       	push	r25
    10b6:	8f 93       	push	r24
    10b8:	85 e0       	ldi	r24, 0x05	; 5
    10ba:	93 e0       	ldi	r25, 0x03	; 3
    10bc:	9f 93       	push	r25
    10be:	8f 93       	push	r24
    10c0:	8e 01       	movw	r16, r28
    10c2:	0f 5f       	subi	r16, 0xFF	; 255
    10c4:	1f 4f       	sbci	r17, 0xFF	; 255
    10c6:	1f 93       	push	r17
    10c8:	0f 93       	push	r16
    10ca:	0e 94 3d 0c 	call	0x187a	; 0x187a <sprintf>
	BTTransmitStr(msg);
    10ce:	c8 01       	movw	r24, r16
    10d0:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
}
    10e0:	ca 5b       	subi	r28, 0xBA	; 186
    10e2:	df 4f       	sbci	r29, 0xFF	; 255
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	de bf       	out	0x3e, r29	; 62
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	cd bf       	out	0x3d, r28	; 61
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	1f 91       	pop	r17
    10f4:	0f 91       	pop	r16
    10f6:	08 95       	ret

000010f8 <fctSmechera>:
	sprintf(msg, "t: %lu", time);
	BTTransmitStr(msg);
}
uint8_t started = 0, stopped = 0, reload = 0;
volatile uint32_t lastValues[4];
void fctSmechera(){
    10f8:	cf 92       	push	r12
    10fa:	df 92       	push	r13
    10fc:	ef 92       	push	r14
    10fe:	ff 92       	push	r15
    1100:	0f 93       	push	r16
    1102:	1f 93       	push	r17
    1104:	cf 93       	push	r28
    1106:	df 93       	push	r29
	if(reload){
    1108:	80 91 4e 03 	lds	r24, 0x034E
    110c:	88 23       	and	r24, r24
    110e:	39 f0       	breq	.+14     	; 0x111e <__stack+0x1f>
		reload = 0;
    1110:	10 92 4e 03 	sts	0x034E, r1
		started = stopped = 0;
    1114:	10 92 4f 03 	sts	0x034F, r1
    1118:	10 92 50 03 	sts	0x0350, r1
		return;
    111c:	9f c0       	rjmp	.+318    	; 0x125c <__stack+0x15d>
	}
	if(!started){
    111e:	80 91 50 03 	lds	r24, 0x0350
    1122:	81 11       	cpse	r24, r1
    1124:	2c c0       	rjmp	.+88     	; 0x117e <__stack+0x7f>
		started = 1;
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	80 93 50 03 	sts	0x0350, r24
		lastValues[0] = lastValues[1] = lastValues[2] = lastValues[3] = 0;
    112c:	10 92 6b 04 	sts	0x046B, r1
    1130:	10 92 6c 04 	sts	0x046C, r1
    1134:	10 92 6d 04 	sts	0x046D, r1
    1138:	10 92 6e 04 	sts	0x046E, r1
    113c:	10 92 67 04 	sts	0x0467, r1
    1140:	10 92 68 04 	sts	0x0468, r1
    1144:	10 92 69 04 	sts	0x0469, r1
    1148:	10 92 6a 04 	sts	0x046A, r1
    114c:	10 92 63 04 	sts	0x0463, r1
    1150:	10 92 64 04 	sts	0x0464, r1
    1154:	10 92 65 04 	sts	0x0465, r1
    1158:	10 92 66 04 	sts	0x0466, r1
    115c:	10 92 5f 04 	sts	0x045F, r1
    1160:	10 92 60 04 	sts	0x0460, r1
    1164:	10 92 61 04 	sts	0x0461, r1
    1168:	10 92 62 04 	sts	0x0462, r1
		goFront(60, 175);
    116c:	6f ea       	ldi	r22, 0xAF	; 175
    116e:	8c e3       	ldi	r24, 0x3C	; 60
    1170:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <goFront>
		BTTransmitStr("started!");
    1174:	83 e1       	ldi	r24, 0x13	; 19
    1176:	93 e0       	ldi	r25, 0x03	; 3
    1178:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
		return;
    117c:	6f c0       	rjmp	.+222    	; 0x125c <__stack+0x15d>
	}
	if(!stopped){
    117e:	80 91 4f 03 	lds	r24, 0x034F
    1182:	81 11       	cpse	r24, r1
    1184:	6b c0       	rjmp	.+214    	; 0x125c <__stack+0x15d>
		lastValues[0]=lastValues[1];
    1186:	0f 2e       	mov	r0, r31
    1188:	f3 e6       	ldi	r31, 0x63	; 99
    118a:	ef 2e       	mov	r14, r31
    118c:	f4 e0       	ldi	r31, 0x04	; 4
    118e:	ff 2e       	mov	r15, r31
    1190:	f0 2d       	mov	r31, r0
    1192:	f7 01       	movw	r30, r14
    1194:	80 81       	ld	r24, Z
    1196:	91 81       	ldd	r25, Z+1	; 0x01
    1198:	a2 81       	ldd	r26, Z+2	; 0x02
    119a:	b3 81       	ldd	r27, Z+3	; 0x03
    119c:	0f 2e       	mov	r0, r31
    119e:	ff e5       	ldi	r31, 0x5F	; 95
    11a0:	cf 2e       	mov	r12, r31
    11a2:	f4 e0       	ldi	r31, 0x04	; 4
    11a4:	df 2e       	mov	r13, r31
    11a6:	f0 2d       	mov	r31, r0
    11a8:	f6 01       	movw	r30, r12
    11aa:	80 83       	st	Z, r24
    11ac:	91 83       	std	Z+1, r25	; 0x01
    11ae:	a2 83       	std	Z+2, r26	; 0x02
    11b0:	b3 83       	std	Z+3, r27	; 0x03
		lastValues[1]=lastValues[2];
    11b2:	07 e6       	ldi	r16, 0x67	; 103
    11b4:	14 e0       	ldi	r17, 0x04	; 4
    11b6:	f8 01       	movw	r30, r16
    11b8:	80 81       	ld	r24, Z
    11ba:	91 81       	ldd	r25, Z+1	; 0x01
    11bc:	a2 81       	ldd	r26, Z+2	; 0x02
    11be:	b3 81       	ldd	r27, Z+3	; 0x03
    11c0:	f7 01       	movw	r30, r14
    11c2:	80 83       	st	Z, r24
    11c4:	91 83       	std	Z+1, r25	; 0x01
    11c6:	a2 83       	std	Z+2, r26	; 0x02
    11c8:	b3 83       	std	Z+3, r27	; 0x03
		lastValues[2]=lastValues[3];
    11ca:	cb e6       	ldi	r28, 0x6B	; 107
    11cc:	d4 e0       	ldi	r29, 0x04	; 4
    11ce:	88 81       	ld	r24, Y
    11d0:	99 81       	ldd	r25, Y+1	; 0x01
    11d2:	aa 81       	ldd	r26, Y+2	; 0x02
    11d4:	bb 81       	ldd	r27, Y+3	; 0x03
    11d6:	f8 01       	movw	r30, r16
    11d8:	80 83       	st	Z, r24
    11da:	91 83       	std	Z+1, r25	; 0x01
    11dc:	a2 83       	std	Z+2, r26	; 0x02
    11de:	b3 83       	std	Z+3, r27	; 0x03
		lastValues[3] = getValueOfSensor(0);
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	0e 94 ae 03 	call	0x75c	; 0x75c <getValueOfSensor>
    11e6:	a0 e0       	ldi	r26, 0x00	; 0
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	88 83       	st	Y, r24
    11ec:	99 83       	std	Y+1, r25	; 0x01
    11ee:	aa 83       	std	Y+2, r26	; 0x02
    11f0:	bb 83       	std	Y+3, r27	; 0x03
		
		if( (lastValues[0] + lastValues[1] + lastValues[2] + lastValues[3])/4 > 300){
    11f2:	f6 01       	movw	r30, r12
    11f4:	80 81       	ld	r24, Z
    11f6:	91 81       	ldd	r25, Z+1	; 0x01
    11f8:	a2 81       	ldd	r26, Z+2	; 0x02
    11fa:	b3 81       	ldd	r27, Z+3	; 0x03
    11fc:	f7 01       	movw	r30, r14
    11fe:	c0 80       	ld	r12, Z
    1200:	d1 80       	ldd	r13, Z+1	; 0x01
    1202:	e2 80       	ldd	r14, Z+2	; 0x02
    1204:	f3 80       	ldd	r15, Z+3	; 0x03
    1206:	f8 01       	movw	r30, r16
    1208:	00 81       	ld	r16, Z
    120a:	11 81       	ldd	r17, Z+1	; 0x01
    120c:	22 81       	ldd	r18, Z+2	; 0x02
    120e:	33 81       	ldd	r19, Z+3	; 0x03
    1210:	48 81       	ld	r20, Y
    1212:	59 81       	ldd	r21, Y+1	; 0x01
    1214:	6a 81       	ldd	r22, Y+2	; 0x02
    1216:	7b 81       	ldd	r23, Y+3	; 0x03
    1218:	8c 0d       	add	r24, r12
    121a:	9d 1d       	adc	r25, r13
    121c:	ae 1d       	adc	r26, r14
    121e:	bf 1d       	adc	r27, r15
    1220:	80 0f       	add	r24, r16
    1222:	91 1f       	adc	r25, r17
    1224:	a2 1f       	adc	r26, r18
    1226:	b3 1f       	adc	r27, r19
    1228:	84 0f       	add	r24, r20
    122a:	95 1f       	adc	r25, r21
    122c:	a6 1f       	adc	r26, r22
    122e:	b7 1f       	adc	r27, r23
    1230:	84 3b       	cpi	r24, 0xB4	; 180
    1232:	94 40       	sbci	r25, 0x04	; 4
    1234:	a1 05       	cpc	r26, r1
    1236:	b1 05       	cpc	r27, r1
    1238:	88 f0       	brcs	.+34     	; 0x125c <__stack+0x15d>
			stopEngines();
    123a:	0e 94 04 02 	call	0x408	; 0x408 <stopEngines>
			removeEntryFromTimerQueue(&stopEngines);
    123e:	84 e0       	ldi	r24, 0x04	; 4
    1240:	92 e0       	ldi	r25, 0x02	; 2
    1242:	0e 94 6e 06 	call	0xcdc	; 0xcdc <removeEntryFromTimerQueue>
			removeEntryFromTimerQueue(&fctSmechera); 
    1246:	8c e7       	ldi	r24, 0x7C	; 124
    1248:	98 e0       	ldi	r25, 0x08	; 8
    124a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <removeEntryFromTimerQueue>
			ReadSensor0();
    124e:	0e 94 4a 08 	call	0x1094	; 0x1094 <ReadSensor0>
			stopped = 1;
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	80 93 4f 03 	sts	0x034F, r24
			reload = 1;
    1258:	80 93 4e 03 	sts	0x034E, r24
		}
	}
}
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	1f 91       	pop	r17
    1262:	0f 91       	pop	r16
    1264:	ff 90       	pop	r15
    1266:	ef 90       	pop	r14
    1268:	df 90       	pop	r13
    126a:	cf 90       	pop	r12
    126c:	08 95       	ret

0000126e <ReadSensor1>:
	//resetSensorQueue(0);
	uint16_t x = getValueOfSensor(0);
	sprintf(msg, "sensor #0: %d", x);	
	BTTransmitStr(msg);
}
void ReadSensor1(){
    126e:	0f 93       	push	r16
    1270:	1f 93       	push	r17
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
    127a:	c6 54       	subi	r28, 0x46	; 70
    127c:	d1 09       	sbc	r29, r1
    127e:	0f b6       	in	r0, 0x3f	; 63
    1280:	f8 94       	cli
    1282:	de bf       	out	0x3e, r29	; 62
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	cd bf       	out	0x3d, r28	; 61
	char msg[70];
	//resetSensorQueue(1);
	uint16_t x = getValueOfSensor(1);
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	0e 94 ae 03 	call	0x75c	; 0x75c <getValueOfSensor>
	sprintf(msg, "sensor #1: %d", x);
    128e:	9f 93       	push	r25
    1290:	8f 93       	push	r24
    1292:	8c e1       	ldi	r24, 0x1C	; 28
    1294:	93 e0       	ldi	r25, 0x03	; 3
    1296:	9f 93       	push	r25
    1298:	8f 93       	push	r24
    129a:	8e 01       	movw	r16, r28
    129c:	0f 5f       	subi	r16, 0xFF	; 255
    129e:	1f 4f       	sbci	r17, 0xFF	; 255
    12a0:	1f 93       	push	r17
    12a2:	0f 93       	push	r16
    12a4:	0e 94 3d 0c 	call	0x187a	; 0x187a <sprintf>
	BTTransmitStr(msg);
    12a8:	c8 01       	movw	r24, r16
    12aa:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
}
    12ba:	ca 5b       	subi	r28, 0xBA	; 186
    12bc:	df 4f       	sbci	r29, 0xFF	; 255
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	f8 94       	cli
    12c2:	de bf       	out	0x3e, r29	; 62
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	cd bf       	out	0x3d, r28	; 61
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	1f 91       	pop	r17
    12ce:	0f 91       	pop	r16
    12d0:	08 95       	ret

000012d2 <doTimer>:
			reload = 1;
		}
	}
}
volatile uint8_t state=-1;
void doTimer(){
    12d2:	cf 92       	push	r12
    12d4:	df 92       	push	r13
    12d6:	ef 92       	push	r14
    12d8:	ff 92       	push	r15
    12da:	0f 93       	push	r16
    12dc:	1f 93       	push	r17
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	69 97       	sbiw	r28, 0x19	; 25
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	f8 94       	cli
    12ec:	de bf       	out	0x3e, r29	; 62
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	cd bf       	out	0x3d, r28	; 61
	uint16_t sensorValue = getValueOfSensor(1);
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	0e 94 ae 03 	call	0x75c	; 0x75c <getValueOfSensor>
    12f8:	8c 01       	movw	r16, r24
	if(sensorValue < 430 && 430 - sensorValue >15)
    12fa:	0e 3a       	cpi	r16, 0xAE	; 174
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	18 07       	cpc	r17, r24
    1300:	48 f4       	brcc	.+18     	; 0x1314 <doTimer+0x42>
    1302:	8e ea       	ldi	r24, 0xAE	; 174
    1304:	91 e0       	ldi	r25, 0x01	; 1
    1306:	80 1b       	sub	r24, r16
    1308:	91 0b       	sbc	r25, r17
    130a:	40 97       	sbiw	r24, 0x10	; 16
    130c:	18 f0       	brcs	.+6      	; 0x1314 <doTimer+0x42>
		sensorValue +=15;
    130e:	01 5f       	subi	r16, 0xF1	; 241
    1310:	1f 4f       	sbci	r17, 0xFF	; 255
    1312:	06 c0       	rjmp	.+12     	; 0x1320 <doTimer+0x4e>
	else
		if(sensorValue > 430 && sensorValue-430 > 15)
    1314:	0e 3b       	cpi	r16, 0xBE	; 190
    1316:	91 e0       	ldi	r25, 0x01	; 1
    1318:	19 07       	cpc	r17, r25
    131a:	10 f0       	brcs	.+4      	; 0x1320 <doTimer+0x4e>
			sensorValue-=15;
    131c:	0f 50       	subi	r16, 0x0F	; 15
    131e:	11 09       	sbc	r17, r1
	float diff = PID1cal(430, sensorValue);
    1320:	b8 01       	movw	r22, r16
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__floatunsisf>
    132a:	9b 01       	movw	r18, r22
    132c:	ac 01       	movw	r20, r24
    132e:	60 e0       	ldi	r22, 0x00	; 0
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	87 ed       	ldi	r24, 0xD7	; 215
    1334:	93 e4       	ldi	r25, 0x43	; 67
    1336:	0e 94 c1 04 	call	0x982	; 0x982 <PID1cal>
    133a:	6b 01       	movw	r12, r22
    133c:	7c 01       	movw	r14, r24
	int diffi8 = (int)(diff*100);
	char str[25];
	sprintf(str, "%d %d", diffi8, sensorValue);
    133e:	1f 93       	push	r17
    1340:	0f 93       	push	r16
		sensorValue +=15;
	else
		if(sensorValue > 430 && sensorValue-430 > 15)
			sensorValue-=15;
	float diff = PID1cal(430, sensorValue);
	int diffi8 = (int)(diff*100);
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	48 ec       	ldi	r20, 0xC8	; 200
    1348:	52 e4       	ldi	r21, 0x42	; 66
    134a:	0e 94 a6 0b 	call	0x174c	; 0x174c <__mulsf3>
    134e:	0e 94 bf 0a 	call	0x157e	; 0x157e <__fixsfsi>
	char str[25];
	sprintf(str, "%d %d", diffi8, sensorValue);
    1352:	7f 93       	push	r23
    1354:	6f 93       	push	r22
    1356:	81 e3       	ldi	r24, 0x31	; 49
    1358:	93 e0       	ldi	r25, 0x03	; 3
    135a:	9f 93       	push	r25
    135c:	8f 93       	push	r24
    135e:	8e 01       	movw	r16, r28
    1360:	0f 5f       	subi	r16, 0xFF	; 255
    1362:	1f 4f       	sbci	r17, 0xFF	; 255
    1364:	1f 93       	push	r17
    1366:	0f 93       	push	r16
    1368:	0e 94 3d 0c 	call	0x187a	; 0x187a <sprintf>
	BTTransmitStr(str);
    136c:	c8 01       	movw	r24, r16
    136e:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
			//goFront(10, 175),
			BTTransmitStr("front"),
			state = 0;
			
	}
	else if(diff>2){
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	f8 94       	cli
    1376:	de bf       	out	0x3e, r29	; 62
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	cd bf       	out	0x3d, r28	; 61
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	40 e0       	ldi	r20, 0x00	; 0
    1382:	50 e4       	ldi	r21, 0x40	; 64
    1384:	c7 01       	movw	r24, r14
    1386:	b6 01       	movw	r22, r12
    1388:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__gesf2>
    138c:	18 16       	cp	r1, r24
    138e:	64 f4       	brge	.+24     	; 0x13a8 <doTimer+0xd6>
		if(state!=1)
    1390:	80 91 02 01 	lds	r24, 0x0102
    1394:	81 30       	cpi	r24, 0x01	; 1
    1396:	99 f0       	breq	.+38     	; 0x13be <doTimer+0xec>
			//goFrontRight(10, 175),
			BTTransmitStr("right"),
    1398:	87 e3       	ldi	r24, 0x37	; 55
    139a:	93 e0       	ldi	r25, 0x03	; 3
    139c:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
			state = 1;
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	80 93 02 01 	sts	0x0102, r24
    13a6:	0b c0       	rjmp	.+22     	; 0x13be <doTimer+0xec>
	}
	else{
		if(state!=2)
    13a8:	80 91 02 01 	lds	r24, 0x0102
    13ac:	82 30       	cpi	r24, 0x02	; 2
    13ae:	39 f0       	breq	.+14     	; 0x13be <doTimer+0xec>
			//goFrontLeft(10, 175),
			BTTransmitStr("left"),
    13b0:	8d e3       	ldi	r24, 0x3D	; 61
    13b2:	93 e0       	ldi	r25, 0x03	; 3
    13b4:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
			state = 2;
    13b8:	82 e0       	ldi	r24, 0x02	; 2
    13ba:	80 93 02 01 	sts	0x0102, r24
	}
		
	
    13be:	69 96       	adiw	r28, 0x19	; 25
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	1f 91       	pop	r17
    13d0:	0f 91       	pop	r16
    13d2:	ff 90       	pop	r15
    13d4:	ef 90       	pop	r14
    13d6:	df 90       	pop	r13
    13d8:	cf 90       	pop	r12
    13da:	08 95       	ret

000013dc <__subsf3>:
    13dc:	50 58       	subi	r21, 0x80	; 128

000013de <__addsf3>:
    13de:	bb 27       	eor	r27, r27
    13e0:	aa 27       	eor	r26, r26
    13e2:	0e d0       	rcall	.+28     	; 0x1400 <__addsf3x>
    13e4:	75 c1       	rjmp	.+746    	; 0x16d0 <__fp_round>
    13e6:	66 d1       	rcall	.+716    	; 0x16b4 <__fp_pscA>
    13e8:	30 f0       	brcs	.+12     	; 0x13f6 <__addsf3+0x18>
    13ea:	6b d1       	rcall	.+726    	; 0x16c2 <__fp_pscB>
    13ec:	20 f0       	brcs	.+8      	; 0x13f6 <__addsf3+0x18>
    13ee:	31 f4       	brne	.+12     	; 0x13fc <__addsf3+0x1e>
    13f0:	9f 3f       	cpi	r25, 0xFF	; 255
    13f2:	11 f4       	brne	.+4      	; 0x13f8 <__addsf3+0x1a>
    13f4:	1e f4       	brtc	.+6      	; 0x13fc <__addsf3+0x1e>
    13f6:	5b c1       	rjmp	.+694    	; 0x16ae <__fp_nan>
    13f8:	0e f4       	brtc	.+2      	; 0x13fc <__addsf3+0x1e>
    13fa:	e0 95       	com	r30
    13fc:	e7 fb       	bst	r30, 7
    13fe:	51 c1       	rjmp	.+674    	; 0x16a2 <__fp_inf>

00001400 <__addsf3x>:
    1400:	e9 2f       	mov	r30, r25
    1402:	77 d1       	rcall	.+750    	; 0x16f2 <__fp_split3>
    1404:	80 f3       	brcs	.-32     	; 0x13e6 <__addsf3+0x8>
    1406:	ba 17       	cp	r27, r26
    1408:	62 07       	cpc	r22, r18
    140a:	73 07       	cpc	r23, r19
    140c:	84 07       	cpc	r24, r20
    140e:	95 07       	cpc	r25, r21
    1410:	18 f0       	brcs	.+6      	; 0x1418 <__addsf3x+0x18>
    1412:	71 f4       	brne	.+28     	; 0x1430 <__addsf3x+0x30>
    1414:	9e f5       	brtc	.+102    	; 0x147c <__addsf3x+0x7c>
    1416:	8f c1       	rjmp	.+798    	; 0x1736 <__fp_zero>
    1418:	0e f4       	brtc	.+2      	; 0x141c <__addsf3x+0x1c>
    141a:	e0 95       	com	r30
    141c:	0b 2e       	mov	r0, r27
    141e:	ba 2f       	mov	r27, r26
    1420:	a0 2d       	mov	r26, r0
    1422:	0b 01       	movw	r0, r22
    1424:	b9 01       	movw	r22, r18
    1426:	90 01       	movw	r18, r0
    1428:	0c 01       	movw	r0, r24
    142a:	ca 01       	movw	r24, r20
    142c:	a0 01       	movw	r20, r0
    142e:	11 24       	eor	r1, r1
    1430:	ff 27       	eor	r31, r31
    1432:	59 1b       	sub	r21, r25
    1434:	99 f0       	breq	.+38     	; 0x145c <__addsf3x+0x5c>
    1436:	59 3f       	cpi	r21, 0xF9	; 249
    1438:	50 f4       	brcc	.+20     	; 0x144e <__addsf3x+0x4e>
    143a:	50 3e       	cpi	r21, 0xE0	; 224
    143c:	68 f1       	brcs	.+90     	; 0x1498 <__addsf3x+0x98>
    143e:	1a 16       	cp	r1, r26
    1440:	f0 40       	sbci	r31, 0x00	; 0
    1442:	a2 2f       	mov	r26, r18
    1444:	23 2f       	mov	r18, r19
    1446:	34 2f       	mov	r19, r20
    1448:	44 27       	eor	r20, r20
    144a:	58 5f       	subi	r21, 0xF8	; 248
    144c:	f3 cf       	rjmp	.-26     	; 0x1434 <__addsf3x+0x34>
    144e:	46 95       	lsr	r20
    1450:	37 95       	ror	r19
    1452:	27 95       	ror	r18
    1454:	a7 95       	ror	r26
    1456:	f0 40       	sbci	r31, 0x00	; 0
    1458:	53 95       	inc	r21
    145a:	c9 f7       	brne	.-14     	; 0x144e <__addsf3x+0x4e>
    145c:	7e f4       	brtc	.+30     	; 0x147c <__addsf3x+0x7c>
    145e:	1f 16       	cp	r1, r31
    1460:	ba 0b       	sbc	r27, r26
    1462:	62 0b       	sbc	r22, r18
    1464:	73 0b       	sbc	r23, r19
    1466:	84 0b       	sbc	r24, r20
    1468:	ba f0       	brmi	.+46     	; 0x1498 <__addsf3x+0x98>
    146a:	91 50       	subi	r25, 0x01	; 1
    146c:	a1 f0       	breq	.+40     	; 0x1496 <__addsf3x+0x96>
    146e:	ff 0f       	add	r31, r31
    1470:	bb 1f       	adc	r27, r27
    1472:	66 1f       	adc	r22, r22
    1474:	77 1f       	adc	r23, r23
    1476:	88 1f       	adc	r24, r24
    1478:	c2 f7       	brpl	.-16     	; 0x146a <__addsf3x+0x6a>
    147a:	0e c0       	rjmp	.+28     	; 0x1498 <__addsf3x+0x98>
    147c:	ba 0f       	add	r27, r26
    147e:	62 1f       	adc	r22, r18
    1480:	73 1f       	adc	r23, r19
    1482:	84 1f       	adc	r24, r20
    1484:	48 f4       	brcc	.+18     	; 0x1498 <__addsf3x+0x98>
    1486:	87 95       	ror	r24
    1488:	77 95       	ror	r23
    148a:	67 95       	ror	r22
    148c:	b7 95       	ror	r27
    148e:	f7 95       	ror	r31
    1490:	9e 3f       	cpi	r25, 0xFE	; 254
    1492:	08 f0       	brcs	.+2      	; 0x1496 <__addsf3x+0x96>
    1494:	b3 cf       	rjmp	.-154    	; 0x13fc <__addsf3+0x1e>
    1496:	93 95       	inc	r25
    1498:	88 0f       	add	r24, r24
    149a:	08 f0       	brcs	.+2      	; 0x149e <__addsf3x+0x9e>
    149c:	99 27       	eor	r25, r25
    149e:	ee 0f       	add	r30, r30
    14a0:	97 95       	ror	r25
    14a2:	87 95       	ror	r24
    14a4:	08 95       	ret

000014a6 <__cmpsf2>:
    14a6:	d9 d0       	rcall	.+434    	; 0x165a <__fp_cmp>
    14a8:	08 f4       	brcc	.+2      	; 0x14ac <__cmpsf2+0x6>
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	08 95       	ret

000014ae <__divsf3>:
    14ae:	0c d0       	rcall	.+24     	; 0x14c8 <__divsf3x>
    14b0:	0f c1       	rjmp	.+542    	; 0x16d0 <__fp_round>
    14b2:	07 d1       	rcall	.+526    	; 0x16c2 <__fp_pscB>
    14b4:	40 f0       	brcs	.+16     	; 0x14c6 <__divsf3+0x18>
    14b6:	fe d0       	rcall	.+508    	; 0x16b4 <__fp_pscA>
    14b8:	30 f0       	brcs	.+12     	; 0x14c6 <__divsf3+0x18>
    14ba:	21 f4       	brne	.+8      	; 0x14c4 <__divsf3+0x16>
    14bc:	5f 3f       	cpi	r21, 0xFF	; 255
    14be:	19 f0       	breq	.+6      	; 0x14c6 <__divsf3+0x18>
    14c0:	f0 c0       	rjmp	.+480    	; 0x16a2 <__fp_inf>
    14c2:	51 11       	cpse	r21, r1
    14c4:	39 c1       	rjmp	.+626    	; 0x1738 <__fp_szero>
    14c6:	f3 c0       	rjmp	.+486    	; 0x16ae <__fp_nan>

000014c8 <__divsf3x>:
    14c8:	14 d1       	rcall	.+552    	; 0x16f2 <__fp_split3>
    14ca:	98 f3       	brcs	.-26     	; 0x14b2 <__divsf3+0x4>

000014cc <__divsf3_pse>:
    14cc:	99 23       	and	r25, r25
    14ce:	c9 f3       	breq	.-14     	; 0x14c2 <__divsf3+0x14>
    14d0:	55 23       	and	r21, r21
    14d2:	b1 f3       	breq	.-20     	; 0x14c0 <__divsf3+0x12>
    14d4:	95 1b       	sub	r25, r21
    14d6:	55 0b       	sbc	r21, r21
    14d8:	bb 27       	eor	r27, r27
    14da:	aa 27       	eor	r26, r26
    14dc:	62 17       	cp	r22, r18
    14de:	73 07       	cpc	r23, r19
    14e0:	84 07       	cpc	r24, r20
    14e2:	38 f0       	brcs	.+14     	; 0x14f2 <__divsf3_pse+0x26>
    14e4:	9f 5f       	subi	r25, 0xFF	; 255
    14e6:	5f 4f       	sbci	r21, 0xFF	; 255
    14e8:	22 0f       	add	r18, r18
    14ea:	33 1f       	adc	r19, r19
    14ec:	44 1f       	adc	r20, r20
    14ee:	aa 1f       	adc	r26, r26
    14f0:	a9 f3       	breq	.-22     	; 0x14dc <__divsf3_pse+0x10>
    14f2:	33 d0       	rcall	.+102    	; 0x155a <__divsf3_pse+0x8e>
    14f4:	0e 2e       	mov	r0, r30
    14f6:	3a f0       	brmi	.+14     	; 0x1506 <__divsf3_pse+0x3a>
    14f8:	e0 e8       	ldi	r30, 0x80	; 128
    14fa:	30 d0       	rcall	.+96     	; 0x155c <__divsf3_pse+0x90>
    14fc:	91 50       	subi	r25, 0x01	; 1
    14fe:	50 40       	sbci	r21, 0x00	; 0
    1500:	e6 95       	lsr	r30
    1502:	00 1c       	adc	r0, r0
    1504:	ca f7       	brpl	.-14     	; 0x14f8 <__divsf3_pse+0x2c>
    1506:	29 d0       	rcall	.+82     	; 0x155a <__divsf3_pse+0x8e>
    1508:	fe 2f       	mov	r31, r30
    150a:	27 d0       	rcall	.+78     	; 0x155a <__divsf3_pse+0x8e>
    150c:	66 0f       	add	r22, r22
    150e:	77 1f       	adc	r23, r23
    1510:	88 1f       	adc	r24, r24
    1512:	bb 1f       	adc	r27, r27
    1514:	26 17       	cp	r18, r22
    1516:	37 07       	cpc	r19, r23
    1518:	48 07       	cpc	r20, r24
    151a:	ab 07       	cpc	r26, r27
    151c:	b0 e8       	ldi	r27, 0x80	; 128
    151e:	09 f0       	breq	.+2      	; 0x1522 <__divsf3_pse+0x56>
    1520:	bb 0b       	sbc	r27, r27
    1522:	80 2d       	mov	r24, r0
    1524:	bf 01       	movw	r22, r30
    1526:	ff 27       	eor	r31, r31
    1528:	93 58       	subi	r25, 0x83	; 131
    152a:	5f 4f       	sbci	r21, 0xFF	; 255
    152c:	2a f0       	brmi	.+10     	; 0x1538 <__divsf3_pse+0x6c>
    152e:	9e 3f       	cpi	r25, 0xFE	; 254
    1530:	51 05       	cpc	r21, r1
    1532:	68 f0       	brcs	.+26     	; 0x154e <__divsf3_pse+0x82>
    1534:	b6 c0       	rjmp	.+364    	; 0x16a2 <__fp_inf>
    1536:	00 c1       	rjmp	.+512    	; 0x1738 <__fp_szero>
    1538:	5f 3f       	cpi	r21, 0xFF	; 255
    153a:	ec f3       	brlt	.-6      	; 0x1536 <__divsf3_pse+0x6a>
    153c:	98 3e       	cpi	r25, 0xE8	; 232
    153e:	dc f3       	brlt	.-10     	; 0x1536 <__divsf3_pse+0x6a>
    1540:	86 95       	lsr	r24
    1542:	77 95       	ror	r23
    1544:	67 95       	ror	r22
    1546:	b7 95       	ror	r27
    1548:	f7 95       	ror	r31
    154a:	9f 5f       	subi	r25, 0xFF	; 255
    154c:	c9 f7       	brne	.-14     	; 0x1540 <__divsf3_pse+0x74>
    154e:	88 0f       	add	r24, r24
    1550:	91 1d       	adc	r25, r1
    1552:	96 95       	lsr	r25
    1554:	87 95       	ror	r24
    1556:	97 f9       	bld	r25, 7
    1558:	08 95       	ret
    155a:	e1 e0       	ldi	r30, 0x01	; 1
    155c:	66 0f       	add	r22, r22
    155e:	77 1f       	adc	r23, r23
    1560:	88 1f       	adc	r24, r24
    1562:	bb 1f       	adc	r27, r27
    1564:	62 17       	cp	r22, r18
    1566:	73 07       	cpc	r23, r19
    1568:	84 07       	cpc	r24, r20
    156a:	ba 07       	cpc	r27, r26
    156c:	20 f0       	brcs	.+8      	; 0x1576 <__divsf3_pse+0xaa>
    156e:	62 1b       	sub	r22, r18
    1570:	73 0b       	sbc	r23, r19
    1572:	84 0b       	sbc	r24, r20
    1574:	ba 0b       	sbc	r27, r26
    1576:	ee 1f       	adc	r30, r30
    1578:	88 f7       	brcc	.-30     	; 0x155c <__divsf3_pse+0x90>
    157a:	e0 95       	com	r30
    157c:	08 95       	ret

0000157e <__fixsfsi>:
    157e:	04 d0       	rcall	.+8      	; 0x1588 <__fixunssfsi>
    1580:	68 94       	set
    1582:	b1 11       	cpse	r27, r1
    1584:	d9 c0       	rjmp	.+434    	; 0x1738 <__fp_szero>
    1586:	08 95       	ret

00001588 <__fixunssfsi>:
    1588:	bc d0       	rcall	.+376    	; 0x1702 <__fp_splitA>
    158a:	88 f0       	brcs	.+34     	; 0x15ae <__fixunssfsi+0x26>
    158c:	9f 57       	subi	r25, 0x7F	; 127
    158e:	90 f0       	brcs	.+36     	; 0x15b4 <__fixunssfsi+0x2c>
    1590:	b9 2f       	mov	r27, r25
    1592:	99 27       	eor	r25, r25
    1594:	b7 51       	subi	r27, 0x17	; 23
    1596:	a0 f0       	brcs	.+40     	; 0x15c0 <__fixunssfsi+0x38>
    1598:	d1 f0       	breq	.+52     	; 0x15ce <__fixunssfsi+0x46>
    159a:	66 0f       	add	r22, r22
    159c:	77 1f       	adc	r23, r23
    159e:	88 1f       	adc	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	1a f0       	brmi	.+6      	; 0x15aa <__fixunssfsi+0x22>
    15a4:	ba 95       	dec	r27
    15a6:	c9 f7       	brne	.-14     	; 0x159a <__fixunssfsi+0x12>
    15a8:	12 c0       	rjmp	.+36     	; 0x15ce <__fixunssfsi+0x46>
    15aa:	b1 30       	cpi	r27, 0x01	; 1
    15ac:	81 f0       	breq	.+32     	; 0x15ce <__fixunssfsi+0x46>
    15ae:	c3 d0       	rcall	.+390    	; 0x1736 <__fp_zero>
    15b0:	b1 e0       	ldi	r27, 0x01	; 1
    15b2:	08 95       	ret
    15b4:	c0 c0       	rjmp	.+384    	; 0x1736 <__fp_zero>
    15b6:	67 2f       	mov	r22, r23
    15b8:	78 2f       	mov	r23, r24
    15ba:	88 27       	eor	r24, r24
    15bc:	b8 5f       	subi	r27, 0xF8	; 248
    15be:	39 f0       	breq	.+14     	; 0x15ce <__fixunssfsi+0x46>
    15c0:	b9 3f       	cpi	r27, 0xF9	; 249
    15c2:	cc f3       	brlt	.-14     	; 0x15b6 <__fixunssfsi+0x2e>
    15c4:	86 95       	lsr	r24
    15c6:	77 95       	ror	r23
    15c8:	67 95       	ror	r22
    15ca:	b3 95       	inc	r27
    15cc:	d9 f7       	brne	.-10     	; 0x15c4 <__fixunssfsi+0x3c>
    15ce:	3e f4       	brtc	.+14     	; 0x15de <__fixunssfsi+0x56>
    15d0:	90 95       	com	r25
    15d2:	80 95       	com	r24
    15d4:	70 95       	com	r23
    15d6:	61 95       	neg	r22
    15d8:	7f 4f       	sbci	r23, 0xFF	; 255
    15da:	8f 4f       	sbci	r24, 0xFF	; 255
    15dc:	9f 4f       	sbci	r25, 0xFF	; 255
    15de:	08 95       	ret

000015e0 <__floatunsisf>:
    15e0:	e8 94       	clt
    15e2:	09 c0       	rjmp	.+18     	; 0x15f6 <__floatsisf+0x12>

000015e4 <__floatsisf>:
    15e4:	97 fb       	bst	r25, 7
    15e6:	3e f4       	brtc	.+14     	; 0x15f6 <__floatsisf+0x12>
    15e8:	90 95       	com	r25
    15ea:	80 95       	com	r24
    15ec:	70 95       	com	r23
    15ee:	61 95       	neg	r22
    15f0:	7f 4f       	sbci	r23, 0xFF	; 255
    15f2:	8f 4f       	sbci	r24, 0xFF	; 255
    15f4:	9f 4f       	sbci	r25, 0xFF	; 255
    15f6:	99 23       	and	r25, r25
    15f8:	a9 f0       	breq	.+42     	; 0x1624 <__floatsisf+0x40>
    15fa:	f9 2f       	mov	r31, r25
    15fc:	96 e9       	ldi	r25, 0x96	; 150
    15fe:	bb 27       	eor	r27, r27
    1600:	93 95       	inc	r25
    1602:	f6 95       	lsr	r31
    1604:	87 95       	ror	r24
    1606:	77 95       	ror	r23
    1608:	67 95       	ror	r22
    160a:	b7 95       	ror	r27
    160c:	f1 11       	cpse	r31, r1
    160e:	f8 cf       	rjmp	.-16     	; 0x1600 <__floatsisf+0x1c>
    1610:	fa f4       	brpl	.+62     	; 0x1650 <__floatsisf+0x6c>
    1612:	bb 0f       	add	r27, r27
    1614:	11 f4       	brne	.+4      	; 0x161a <__floatsisf+0x36>
    1616:	60 ff       	sbrs	r22, 0
    1618:	1b c0       	rjmp	.+54     	; 0x1650 <__floatsisf+0x6c>
    161a:	6f 5f       	subi	r22, 0xFF	; 255
    161c:	7f 4f       	sbci	r23, 0xFF	; 255
    161e:	8f 4f       	sbci	r24, 0xFF	; 255
    1620:	9f 4f       	sbci	r25, 0xFF	; 255
    1622:	16 c0       	rjmp	.+44     	; 0x1650 <__floatsisf+0x6c>
    1624:	88 23       	and	r24, r24
    1626:	11 f0       	breq	.+4      	; 0x162c <__floatsisf+0x48>
    1628:	96 e9       	ldi	r25, 0x96	; 150
    162a:	11 c0       	rjmp	.+34     	; 0x164e <__floatsisf+0x6a>
    162c:	77 23       	and	r23, r23
    162e:	21 f0       	breq	.+8      	; 0x1638 <__floatsisf+0x54>
    1630:	9e e8       	ldi	r25, 0x8E	; 142
    1632:	87 2f       	mov	r24, r23
    1634:	76 2f       	mov	r23, r22
    1636:	05 c0       	rjmp	.+10     	; 0x1642 <__floatsisf+0x5e>
    1638:	66 23       	and	r22, r22
    163a:	71 f0       	breq	.+28     	; 0x1658 <__floatsisf+0x74>
    163c:	96 e8       	ldi	r25, 0x86	; 134
    163e:	86 2f       	mov	r24, r22
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	60 e0       	ldi	r22, 0x00	; 0
    1644:	2a f0       	brmi	.+10     	; 0x1650 <__floatsisf+0x6c>
    1646:	9a 95       	dec	r25
    1648:	66 0f       	add	r22, r22
    164a:	77 1f       	adc	r23, r23
    164c:	88 1f       	adc	r24, r24
    164e:	da f7       	brpl	.-10     	; 0x1646 <__floatsisf+0x62>
    1650:	88 0f       	add	r24, r24
    1652:	96 95       	lsr	r25
    1654:	87 95       	ror	r24
    1656:	97 f9       	bld	r25, 7
    1658:	08 95       	ret

0000165a <__fp_cmp>:
    165a:	99 0f       	add	r25, r25
    165c:	00 08       	sbc	r0, r0
    165e:	55 0f       	add	r21, r21
    1660:	aa 0b       	sbc	r26, r26
    1662:	e0 e8       	ldi	r30, 0x80	; 128
    1664:	fe ef       	ldi	r31, 0xFE	; 254
    1666:	16 16       	cp	r1, r22
    1668:	17 06       	cpc	r1, r23
    166a:	e8 07       	cpc	r30, r24
    166c:	f9 07       	cpc	r31, r25
    166e:	c0 f0       	brcs	.+48     	; 0x16a0 <__fp_cmp+0x46>
    1670:	12 16       	cp	r1, r18
    1672:	13 06       	cpc	r1, r19
    1674:	e4 07       	cpc	r30, r20
    1676:	f5 07       	cpc	r31, r21
    1678:	98 f0       	brcs	.+38     	; 0x16a0 <__fp_cmp+0x46>
    167a:	62 1b       	sub	r22, r18
    167c:	73 0b       	sbc	r23, r19
    167e:	84 0b       	sbc	r24, r20
    1680:	95 0b       	sbc	r25, r21
    1682:	39 f4       	brne	.+14     	; 0x1692 <__fp_cmp+0x38>
    1684:	0a 26       	eor	r0, r26
    1686:	61 f0       	breq	.+24     	; 0x16a0 <__fp_cmp+0x46>
    1688:	23 2b       	or	r18, r19
    168a:	24 2b       	or	r18, r20
    168c:	25 2b       	or	r18, r21
    168e:	21 f4       	brne	.+8      	; 0x1698 <__fp_cmp+0x3e>
    1690:	08 95       	ret
    1692:	0a 26       	eor	r0, r26
    1694:	09 f4       	brne	.+2      	; 0x1698 <__fp_cmp+0x3e>
    1696:	a1 40       	sbci	r26, 0x01	; 1
    1698:	a6 95       	lsr	r26
    169a:	8f ef       	ldi	r24, 0xFF	; 255
    169c:	81 1d       	adc	r24, r1
    169e:	81 1d       	adc	r24, r1
    16a0:	08 95       	ret

000016a2 <__fp_inf>:
    16a2:	97 f9       	bld	r25, 7
    16a4:	9f 67       	ori	r25, 0x7F	; 127
    16a6:	80 e8       	ldi	r24, 0x80	; 128
    16a8:	70 e0       	ldi	r23, 0x00	; 0
    16aa:	60 e0       	ldi	r22, 0x00	; 0
    16ac:	08 95       	ret

000016ae <__fp_nan>:
    16ae:	9f ef       	ldi	r25, 0xFF	; 255
    16b0:	80 ec       	ldi	r24, 0xC0	; 192
    16b2:	08 95       	ret

000016b4 <__fp_pscA>:
    16b4:	00 24       	eor	r0, r0
    16b6:	0a 94       	dec	r0
    16b8:	16 16       	cp	r1, r22
    16ba:	17 06       	cpc	r1, r23
    16bc:	18 06       	cpc	r1, r24
    16be:	09 06       	cpc	r0, r25
    16c0:	08 95       	ret

000016c2 <__fp_pscB>:
    16c2:	00 24       	eor	r0, r0
    16c4:	0a 94       	dec	r0
    16c6:	12 16       	cp	r1, r18
    16c8:	13 06       	cpc	r1, r19
    16ca:	14 06       	cpc	r1, r20
    16cc:	05 06       	cpc	r0, r21
    16ce:	08 95       	ret

000016d0 <__fp_round>:
    16d0:	09 2e       	mov	r0, r25
    16d2:	03 94       	inc	r0
    16d4:	00 0c       	add	r0, r0
    16d6:	11 f4       	brne	.+4      	; 0x16dc <__fp_round+0xc>
    16d8:	88 23       	and	r24, r24
    16da:	52 f0       	brmi	.+20     	; 0x16f0 <__fp_round+0x20>
    16dc:	bb 0f       	add	r27, r27
    16de:	40 f4       	brcc	.+16     	; 0x16f0 <__fp_round+0x20>
    16e0:	bf 2b       	or	r27, r31
    16e2:	11 f4       	brne	.+4      	; 0x16e8 <__fp_round+0x18>
    16e4:	60 ff       	sbrs	r22, 0
    16e6:	04 c0       	rjmp	.+8      	; 0x16f0 <__fp_round+0x20>
    16e8:	6f 5f       	subi	r22, 0xFF	; 255
    16ea:	7f 4f       	sbci	r23, 0xFF	; 255
    16ec:	8f 4f       	sbci	r24, 0xFF	; 255
    16ee:	9f 4f       	sbci	r25, 0xFF	; 255
    16f0:	08 95       	ret

000016f2 <__fp_split3>:
    16f2:	57 fd       	sbrc	r21, 7
    16f4:	90 58       	subi	r25, 0x80	; 128
    16f6:	44 0f       	add	r20, r20
    16f8:	55 1f       	adc	r21, r21
    16fa:	59 f0       	breq	.+22     	; 0x1712 <__fp_splitA+0x10>
    16fc:	5f 3f       	cpi	r21, 0xFF	; 255
    16fe:	71 f0       	breq	.+28     	; 0x171c <__fp_splitA+0x1a>
    1700:	47 95       	ror	r20

00001702 <__fp_splitA>:
    1702:	88 0f       	add	r24, r24
    1704:	97 fb       	bst	r25, 7
    1706:	99 1f       	adc	r25, r25
    1708:	61 f0       	breq	.+24     	; 0x1722 <__fp_splitA+0x20>
    170a:	9f 3f       	cpi	r25, 0xFF	; 255
    170c:	79 f0       	breq	.+30     	; 0x172c <__fp_splitA+0x2a>
    170e:	87 95       	ror	r24
    1710:	08 95       	ret
    1712:	12 16       	cp	r1, r18
    1714:	13 06       	cpc	r1, r19
    1716:	14 06       	cpc	r1, r20
    1718:	55 1f       	adc	r21, r21
    171a:	f2 cf       	rjmp	.-28     	; 0x1700 <__fp_split3+0xe>
    171c:	46 95       	lsr	r20
    171e:	f1 df       	rcall	.-30     	; 0x1702 <__fp_splitA>
    1720:	08 c0       	rjmp	.+16     	; 0x1732 <__fp_splitA+0x30>
    1722:	16 16       	cp	r1, r22
    1724:	17 06       	cpc	r1, r23
    1726:	18 06       	cpc	r1, r24
    1728:	99 1f       	adc	r25, r25
    172a:	f1 cf       	rjmp	.-30     	; 0x170e <__fp_splitA+0xc>
    172c:	86 95       	lsr	r24
    172e:	71 05       	cpc	r23, r1
    1730:	61 05       	cpc	r22, r1
    1732:	08 94       	sec
    1734:	08 95       	ret

00001736 <__fp_zero>:
    1736:	e8 94       	clt

00001738 <__fp_szero>:
    1738:	bb 27       	eor	r27, r27
    173a:	66 27       	eor	r22, r22
    173c:	77 27       	eor	r23, r23
    173e:	cb 01       	movw	r24, r22
    1740:	97 f9       	bld	r25, 7
    1742:	08 95       	ret

00001744 <__gesf2>:
    1744:	8a df       	rcall	.-236    	; 0x165a <__fp_cmp>
    1746:	08 f4       	brcc	.+2      	; 0x174a <__gesf2+0x6>
    1748:	8f ef       	ldi	r24, 0xFF	; 255
    174a:	08 95       	ret

0000174c <__mulsf3>:
    174c:	0b d0       	rcall	.+22     	; 0x1764 <__mulsf3x>
    174e:	c0 cf       	rjmp	.-128    	; 0x16d0 <__fp_round>
    1750:	b1 df       	rcall	.-158    	; 0x16b4 <__fp_pscA>
    1752:	28 f0       	brcs	.+10     	; 0x175e <__mulsf3+0x12>
    1754:	b6 df       	rcall	.-148    	; 0x16c2 <__fp_pscB>
    1756:	18 f0       	brcs	.+6      	; 0x175e <__mulsf3+0x12>
    1758:	95 23       	and	r25, r21
    175a:	09 f0       	breq	.+2      	; 0x175e <__mulsf3+0x12>
    175c:	a2 cf       	rjmp	.-188    	; 0x16a2 <__fp_inf>
    175e:	a7 cf       	rjmp	.-178    	; 0x16ae <__fp_nan>
    1760:	11 24       	eor	r1, r1
    1762:	ea cf       	rjmp	.-44     	; 0x1738 <__fp_szero>

00001764 <__mulsf3x>:
    1764:	c6 df       	rcall	.-116    	; 0x16f2 <__fp_split3>
    1766:	a0 f3       	brcs	.-24     	; 0x1750 <__mulsf3+0x4>

00001768 <__mulsf3_pse>:
    1768:	95 9f       	mul	r25, r21
    176a:	d1 f3       	breq	.-12     	; 0x1760 <__mulsf3+0x14>
    176c:	95 0f       	add	r25, r21
    176e:	50 e0       	ldi	r21, 0x00	; 0
    1770:	55 1f       	adc	r21, r21
    1772:	62 9f       	mul	r22, r18
    1774:	f0 01       	movw	r30, r0
    1776:	72 9f       	mul	r23, r18
    1778:	bb 27       	eor	r27, r27
    177a:	f0 0d       	add	r31, r0
    177c:	b1 1d       	adc	r27, r1
    177e:	63 9f       	mul	r22, r19
    1780:	aa 27       	eor	r26, r26
    1782:	f0 0d       	add	r31, r0
    1784:	b1 1d       	adc	r27, r1
    1786:	aa 1f       	adc	r26, r26
    1788:	64 9f       	mul	r22, r20
    178a:	66 27       	eor	r22, r22
    178c:	b0 0d       	add	r27, r0
    178e:	a1 1d       	adc	r26, r1
    1790:	66 1f       	adc	r22, r22
    1792:	82 9f       	mul	r24, r18
    1794:	22 27       	eor	r18, r18
    1796:	b0 0d       	add	r27, r0
    1798:	a1 1d       	adc	r26, r1
    179a:	62 1f       	adc	r22, r18
    179c:	73 9f       	mul	r23, r19
    179e:	b0 0d       	add	r27, r0
    17a0:	a1 1d       	adc	r26, r1
    17a2:	62 1f       	adc	r22, r18
    17a4:	83 9f       	mul	r24, r19
    17a6:	a0 0d       	add	r26, r0
    17a8:	61 1d       	adc	r22, r1
    17aa:	22 1f       	adc	r18, r18
    17ac:	74 9f       	mul	r23, r20
    17ae:	33 27       	eor	r19, r19
    17b0:	a0 0d       	add	r26, r0
    17b2:	61 1d       	adc	r22, r1
    17b4:	23 1f       	adc	r18, r19
    17b6:	84 9f       	mul	r24, r20
    17b8:	60 0d       	add	r22, r0
    17ba:	21 1d       	adc	r18, r1
    17bc:	82 2f       	mov	r24, r18
    17be:	76 2f       	mov	r23, r22
    17c0:	6a 2f       	mov	r22, r26
    17c2:	11 24       	eor	r1, r1
    17c4:	9f 57       	subi	r25, 0x7F	; 127
    17c6:	50 40       	sbci	r21, 0x00	; 0
    17c8:	8a f0       	brmi	.+34     	; 0x17ec <__mulsf3_pse+0x84>
    17ca:	e1 f0       	breq	.+56     	; 0x1804 <__mulsf3_pse+0x9c>
    17cc:	88 23       	and	r24, r24
    17ce:	4a f0       	brmi	.+18     	; 0x17e2 <__mulsf3_pse+0x7a>
    17d0:	ee 0f       	add	r30, r30
    17d2:	ff 1f       	adc	r31, r31
    17d4:	bb 1f       	adc	r27, r27
    17d6:	66 1f       	adc	r22, r22
    17d8:	77 1f       	adc	r23, r23
    17da:	88 1f       	adc	r24, r24
    17dc:	91 50       	subi	r25, 0x01	; 1
    17de:	50 40       	sbci	r21, 0x00	; 0
    17e0:	a9 f7       	brne	.-22     	; 0x17cc <__mulsf3_pse+0x64>
    17e2:	9e 3f       	cpi	r25, 0xFE	; 254
    17e4:	51 05       	cpc	r21, r1
    17e6:	70 f0       	brcs	.+28     	; 0x1804 <__mulsf3_pse+0x9c>
    17e8:	5c cf       	rjmp	.-328    	; 0x16a2 <__fp_inf>
    17ea:	a6 cf       	rjmp	.-180    	; 0x1738 <__fp_szero>
    17ec:	5f 3f       	cpi	r21, 0xFF	; 255
    17ee:	ec f3       	brlt	.-6      	; 0x17ea <__mulsf3_pse+0x82>
    17f0:	98 3e       	cpi	r25, 0xE8	; 232
    17f2:	dc f3       	brlt	.-10     	; 0x17ea <__mulsf3_pse+0x82>
    17f4:	86 95       	lsr	r24
    17f6:	77 95       	ror	r23
    17f8:	67 95       	ror	r22
    17fa:	b7 95       	ror	r27
    17fc:	f7 95       	ror	r31
    17fe:	e7 95       	ror	r30
    1800:	9f 5f       	subi	r25, 0xFF	; 255
    1802:	c1 f7       	brne	.-16     	; 0x17f4 <__mulsf3_pse+0x8c>
    1804:	fe 2b       	or	r31, r30
    1806:	88 0f       	add	r24, r24
    1808:	91 1d       	adc	r25, r1
    180a:	96 95       	lsr	r25
    180c:	87 95       	ror	r24
    180e:	97 f9       	bld	r25, 7
    1810:	08 95       	ret

00001812 <__tablejump2__>:
    1812:	ee 0f       	add	r30, r30
    1814:	ff 1f       	adc	r31, r31

00001816 <__tablejump__>:
    1816:	05 90       	lpm	r0, Z+
    1818:	f4 91       	lpm	r31, Z
    181a:	e0 2d       	mov	r30, r0
    181c:	09 94       	ijmp

0000181e <__umulhisi3>:
    181e:	a2 9f       	mul	r26, r18
    1820:	b0 01       	movw	r22, r0
    1822:	b3 9f       	mul	r27, r19
    1824:	c0 01       	movw	r24, r0
    1826:	a3 9f       	mul	r26, r19
    1828:	70 0d       	add	r23, r0
    182a:	81 1d       	adc	r24, r1
    182c:	11 24       	eor	r1, r1
    182e:	91 1d       	adc	r25, r1
    1830:	b2 9f       	mul	r27, r18
    1832:	70 0d       	add	r23, r0
    1834:	81 1d       	adc	r24, r1
    1836:	11 24       	eor	r1, r1
    1838:	91 1d       	adc	r25, r1
    183a:	08 95       	ret

0000183c <__muluhisi3>:
    183c:	0e 94 0f 0c 	call	0x181e	; 0x181e <__umulhisi3>
    1840:	a5 9f       	mul	r26, r21
    1842:	90 0d       	add	r25, r0
    1844:	b4 9f       	mul	r27, r20
    1846:	90 0d       	add	r25, r0
    1848:	a4 9f       	mul	r26, r20
    184a:	80 0d       	add	r24, r0
    184c:	91 1d       	adc	r25, r1
    184e:	11 24       	eor	r1, r1
    1850:	08 95       	ret

00001852 <printf>:
    1852:	a0 e0       	ldi	r26, 0x00	; 0
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	ef e2       	ldi	r30, 0x2F	; 47
    1858:	fc e0       	ldi	r31, 0x0C	; 12
    185a:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <__prologue_saves__+0x20>
    185e:	fe 01       	movw	r30, r28
    1860:	35 96       	adiw	r30, 0x05	; 5
    1862:	61 91       	ld	r22, Z+
    1864:	71 91       	ld	r23, Z+
    1866:	af 01       	movw	r20, r30
    1868:	80 91 71 04 	lds	r24, 0x0471
    186c:	90 91 72 04 	lds	r25, 0x0472
    1870:	0e 94 5f 0c 	call	0x18be	; 0x18be <vfprintf>
    1874:	e2 e0       	ldi	r30, 0x02	; 2
    1876:	0c 94 03 0f 	jmp	0x1e06	; 0x1e06 <__epilogue_restores__+0x20>

0000187a <sprintf>:
    187a:	ae e0       	ldi	r26, 0x0E	; 14
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e3 e4       	ldi	r30, 0x43	; 67
    1880:	fc e0       	ldi	r31, 0x0C	; 12
    1882:	0c 94 e5 0e 	jmp	0x1dca	; 0x1dca <__prologue_saves__+0x1c>
    1886:	0d 89       	ldd	r16, Y+21	; 0x15
    1888:	1e 89       	ldd	r17, Y+22	; 0x16
    188a:	86 e0       	ldi	r24, 0x06	; 6
    188c:	8c 83       	std	Y+4, r24	; 0x04
    188e:	1a 83       	std	Y+2, r17	; 0x02
    1890:	09 83       	std	Y+1, r16	; 0x01
    1892:	8f ef       	ldi	r24, 0xFF	; 255
    1894:	9f e7       	ldi	r25, 0x7F	; 127
    1896:	9e 83       	std	Y+6, r25	; 0x06
    1898:	8d 83       	std	Y+5, r24	; 0x05
    189a:	ae 01       	movw	r20, r28
    189c:	47 5e       	subi	r20, 0xE7	; 231
    189e:	5f 4f       	sbci	r21, 0xFF	; 255
    18a0:	6f 89       	ldd	r22, Y+23	; 0x17
    18a2:	78 8d       	ldd	r23, Y+24	; 0x18
    18a4:	ce 01       	movw	r24, r28
    18a6:	01 96       	adiw	r24, 0x01	; 1
    18a8:	0e 94 5f 0c 	call	0x18be	; 0x18be <vfprintf>
    18ac:	ef 81       	ldd	r30, Y+7	; 0x07
    18ae:	f8 85       	ldd	r31, Y+8	; 0x08
    18b0:	e0 0f       	add	r30, r16
    18b2:	f1 1f       	adc	r31, r17
    18b4:	10 82       	st	Z, r1
    18b6:	2e 96       	adiw	r28, 0x0e	; 14
    18b8:	e4 e0       	ldi	r30, 0x04	; 4
    18ba:	0c 94 01 0f 	jmp	0x1e02	; 0x1e02 <__epilogue_restores__+0x1c>

000018be <vfprintf>:
    18be:	ac e0       	ldi	r26, 0x0C	; 12
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	e5 e6       	ldi	r30, 0x65	; 101
    18c4:	fc e0       	ldi	r31, 0x0C	; 12
    18c6:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <__prologue_saves__>
    18ca:	7c 01       	movw	r14, r24
    18cc:	6b 01       	movw	r12, r22
    18ce:	8a 01       	movw	r16, r20
    18d0:	fc 01       	movw	r30, r24
    18d2:	17 82       	std	Z+7, r1	; 0x07
    18d4:	16 82       	std	Z+6, r1	; 0x06
    18d6:	83 81       	ldd	r24, Z+3	; 0x03
    18d8:	81 ff       	sbrs	r24, 1
    18da:	bd c1       	rjmp	.+890    	; 0x1c56 <vfprintf+0x398>
    18dc:	ce 01       	movw	r24, r28
    18de:	01 96       	adiw	r24, 0x01	; 1
    18e0:	4c 01       	movw	r8, r24
    18e2:	f7 01       	movw	r30, r14
    18e4:	93 81       	ldd	r25, Z+3	; 0x03
    18e6:	f6 01       	movw	r30, r12
    18e8:	93 fd       	sbrc	r25, 3
    18ea:	85 91       	lpm	r24, Z+
    18ec:	93 ff       	sbrs	r25, 3
    18ee:	81 91       	ld	r24, Z+
    18f0:	6f 01       	movw	r12, r30
    18f2:	88 23       	and	r24, r24
    18f4:	09 f4       	brne	.+2      	; 0x18f8 <vfprintf+0x3a>
    18f6:	ab c1       	rjmp	.+854    	; 0x1c4e <vfprintf+0x390>
    18f8:	85 32       	cpi	r24, 0x25	; 37
    18fa:	39 f4       	brne	.+14     	; 0x190a <vfprintf+0x4c>
    18fc:	93 fd       	sbrc	r25, 3
    18fe:	85 91       	lpm	r24, Z+
    1900:	93 ff       	sbrs	r25, 3
    1902:	81 91       	ld	r24, Z+
    1904:	6f 01       	movw	r12, r30
    1906:	85 32       	cpi	r24, 0x25	; 37
    1908:	29 f4       	brne	.+10     	; 0x1914 <vfprintf+0x56>
    190a:	b7 01       	movw	r22, r14
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <fputc>
    1912:	e7 cf       	rjmp	.-50     	; 0x18e2 <vfprintf+0x24>
    1914:	51 2c       	mov	r5, r1
    1916:	31 2c       	mov	r3, r1
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	20 32       	cpi	r18, 0x20	; 32
    191c:	a0 f4       	brcc	.+40     	; 0x1946 <vfprintf+0x88>
    191e:	8b 32       	cpi	r24, 0x2B	; 43
    1920:	69 f0       	breq	.+26     	; 0x193c <vfprintf+0x7e>
    1922:	30 f4       	brcc	.+12     	; 0x1930 <vfprintf+0x72>
    1924:	80 32       	cpi	r24, 0x20	; 32
    1926:	59 f0       	breq	.+22     	; 0x193e <vfprintf+0x80>
    1928:	83 32       	cpi	r24, 0x23	; 35
    192a:	69 f4       	brne	.+26     	; 0x1946 <vfprintf+0x88>
    192c:	20 61       	ori	r18, 0x10	; 16
    192e:	2c c0       	rjmp	.+88     	; 0x1988 <vfprintf+0xca>
    1930:	8d 32       	cpi	r24, 0x2D	; 45
    1932:	39 f0       	breq	.+14     	; 0x1942 <vfprintf+0x84>
    1934:	80 33       	cpi	r24, 0x30	; 48
    1936:	39 f4       	brne	.+14     	; 0x1946 <vfprintf+0x88>
    1938:	21 60       	ori	r18, 0x01	; 1
    193a:	26 c0       	rjmp	.+76     	; 0x1988 <vfprintf+0xca>
    193c:	22 60       	ori	r18, 0x02	; 2
    193e:	24 60       	ori	r18, 0x04	; 4
    1940:	23 c0       	rjmp	.+70     	; 0x1988 <vfprintf+0xca>
    1942:	28 60       	ori	r18, 0x08	; 8
    1944:	21 c0       	rjmp	.+66     	; 0x1988 <vfprintf+0xca>
    1946:	27 fd       	sbrc	r18, 7
    1948:	27 c0       	rjmp	.+78     	; 0x1998 <vfprintf+0xda>
    194a:	30 ed       	ldi	r19, 0xD0	; 208
    194c:	38 0f       	add	r19, r24
    194e:	3a 30       	cpi	r19, 0x0A	; 10
    1950:	78 f4       	brcc	.+30     	; 0x1970 <vfprintf+0xb2>
    1952:	26 ff       	sbrs	r18, 6
    1954:	06 c0       	rjmp	.+12     	; 0x1962 <vfprintf+0xa4>
    1956:	fa e0       	ldi	r31, 0x0A	; 10
    1958:	5f 9e       	mul	r5, r31
    195a:	30 0d       	add	r19, r0
    195c:	11 24       	eor	r1, r1
    195e:	53 2e       	mov	r5, r19
    1960:	13 c0       	rjmp	.+38     	; 0x1988 <vfprintf+0xca>
    1962:	8a e0       	ldi	r24, 0x0A	; 10
    1964:	38 9e       	mul	r3, r24
    1966:	30 0d       	add	r19, r0
    1968:	11 24       	eor	r1, r1
    196a:	33 2e       	mov	r3, r19
    196c:	20 62       	ori	r18, 0x20	; 32
    196e:	0c c0       	rjmp	.+24     	; 0x1988 <vfprintf+0xca>
    1970:	8e 32       	cpi	r24, 0x2E	; 46
    1972:	21 f4       	brne	.+8      	; 0x197c <vfprintf+0xbe>
    1974:	26 fd       	sbrc	r18, 6
    1976:	6b c1       	rjmp	.+726    	; 0x1c4e <vfprintf+0x390>
    1978:	20 64       	ori	r18, 0x40	; 64
    197a:	06 c0       	rjmp	.+12     	; 0x1988 <vfprintf+0xca>
    197c:	8c 36       	cpi	r24, 0x6C	; 108
    197e:	11 f4       	brne	.+4      	; 0x1984 <vfprintf+0xc6>
    1980:	20 68       	ori	r18, 0x80	; 128
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <vfprintf+0xca>
    1984:	88 36       	cpi	r24, 0x68	; 104
    1986:	41 f4       	brne	.+16     	; 0x1998 <vfprintf+0xda>
    1988:	f6 01       	movw	r30, r12
    198a:	93 fd       	sbrc	r25, 3
    198c:	85 91       	lpm	r24, Z+
    198e:	93 ff       	sbrs	r25, 3
    1990:	81 91       	ld	r24, Z+
    1992:	6f 01       	movw	r12, r30
    1994:	81 11       	cpse	r24, r1
    1996:	c1 cf       	rjmp	.-126    	; 0x191a <vfprintf+0x5c>
    1998:	98 2f       	mov	r25, r24
    199a:	9f 7d       	andi	r25, 0xDF	; 223
    199c:	95 54       	subi	r25, 0x45	; 69
    199e:	93 30       	cpi	r25, 0x03	; 3
    19a0:	28 f4       	brcc	.+10     	; 0x19ac <vfprintf+0xee>
    19a2:	0c 5f       	subi	r16, 0xFC	; 252
    19a4:	1f 4f       	sbci	r17, 0xFF	; 255
    19a6:	ff e3       	ldi	r31, 0x3F	; 63
    19a8:	f9 83       	std	Y+1, r31	; 0x01
    19aa:	0d c0       	rjmp	.+26     	; 0x19c6 <vfprintf+0x108>
    19ac:	83 36       	cpi	r24, 0x63	; 99
    19ae:	31 f0       	breq	.+12     	; 0x19bc <vfprintf+0xfe>
    19b0:	83 37       	cpi	r24, 0x73	; 115
    19b2:	71 f0       	breq	.+28     	; 0x19d0 <vfprintf+0x112>
    19b4:	83 35       	cpi	r24, 0x53	; 83
    19b6:	09 f0       	breq	.+2      	; 0x19ba <vfprintf+0xfc>
    19b8:	5b c0       	rjmp	.+182    	; 0x1a70 <vfprintf+0x1b2>
    19ba:	22 c0       	rjmp	.+68     	; 0x1a00 <vfprintf+0x142>
    19bc:	f8 01       	movw	r30, r16
    19be:	80 81       	ld	r24, Z
    19c0:	89 83       	std	Y+1, r24	; 0x01
    19c2:	0e 5f       	subi	r16, 0xFE	; 254
    19c4:	1f 4f       	sbci	r17, 0xFF	; 255
    19c6:	44 24       	eor	r4, r4
    19c8:	43 94       	inc	r4
    19ca:	51 2c       	mov	r5, r1
    19cc:	54 01       	movw	r10, r8
    19ce:	15 c0       	rjmp	.+42     	; 0x19fa <vfprintf+0x13c>
    19d0:	38 01       	movw	r6, r16
    19d2:	f2 e0       	ldi	r31, 0x02	; 2
    19d4:	6f 0e       	add	r6, r31
    19d6:	71 1c       	adc	r7, r1
    19d8:	f8 01       	movw	r30, r16
    19da:	a0 80       	ld	r10, Z
    19dc:	b1 80       	ldd	r11, Z+1	; 0x01
    19de:	26 ff       	sbrs	r18, 6
    19e0:	03 c0       	rjmp	.+6      	; 0x19e8 <vfprintf+0x12a>
    19e2:	65 2d       	mov	r22, r5
    19e4:	70 e0       	ldi	r23, 0x00	; 0
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <vfprintf+0x12e>
    19e8:	6f ef       	ldi	r22, 0xFF	; 255
    19ea:	7f ef       	ldi	r23, 0xFF	; 255
    19ec:	c5 01       	movw	r24, r10
    19ee:	2c 87       	std	Y+12, r18	; 0x0c
    19f0:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <strnlen>
    19f4:	2c 01       	movw	r4, r24
    19f6:	83 01       	movw	r16, r6
    19f8:	2c 85       	ldd	r18, Y+12	; 0x0c
    19fa:	2f 77       	andi	r18, 0x7F	; 127
    19fc:	22 2e       	mov	r2, r18
    19fe:	17 c0       	rjmp	.+46     	; 0x1a2e <vfprintf+0x170>
    1a00:	38 01       	movw	r6, r16
    1a02:	f2 e0       	ldi	r31, 0x02	; 2
    1a04:	6f 0e       	add	r6, r31
    1a06:	71 1c       	adc	r7, r1
    1a08:	f8 01       	movw	r30, r16
    1a0a:	a0 80       	ld	r10, Z
    1a0c:	b1 80       	ldd	r11, Z+1	; 0x01
    1a0e:	26 ff       	sbrs	r18, 6
    1a10:	03 c0       	rjmp	.+6      	; 0x1a18 <vfprintf+0x15a>
    1a12:	65 2d       	mov	r22, r5
    1a14:	70 e0       	ldi	r23, 0x00	; 0
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <vfprintf+0x15e>
    1a18:	6f ef       	ldi	r22, 0xFF	; 255
    1a1a:	7f ef       	ldi	r23, 0xFF	; 255
    1a1c:	c5 01       	movw	r24, r10
    1a1e:	2c 87       	std	Y+12, r18	; 0x0c
    1a20:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <strnlen_P>
    1a24:	2c 01       	movw	r4, r24
    1a26:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a28:	20 68       	ori	r18, 0x80	; 128
    1a2a:	22 2e       	mov	r2, r18
    1a2c:	83 01       	movw	r16, r6
    1a2e:	23 fc       	sbrc	r2, 3
    1a30:	1b c0       	rjmp	.+54     	; 0x1a68 <vfprintf+0x1aa>
    1a32:	83 2d       	mov	r24, r3
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	48 16       	cp	r4, r24
    1a38:	59 06       	cpc	r5, r25
    1a3a:	b0 f4       	brcc	.+44     	; 0x1a68 <vfprintf+0x1aa>
    1a3c:	b7 01       	movw	r22, r14
    1a3e:	80 e2       	ldi	r24, 0x20	; 32
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <fputc>
    1a46:	3a 94       	dec	r3
    1a48:	f4 cf       	rjmp	.-24     	; 0x1a32 <vfprintf+0x174>
    1a4a:	f5 01       	movw	r30, r10
    1a4c:	27 fc       	sbrc	r2, 7
    1a4e:	85 91       	lpm	r24, Z+
    1a50:	27 fe       	sbrs	r2, 7
    1a52:	81 91       	ld	r24, Z+
    1a54:	5f 01       	movw	r10, r30
    1a56:	b7 01       	movw	r22, r14
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <fputc>
    1a5e:	31 10       	cpse	r3, r1
    1a60:	3a 94       	dec	r3
    1a62:	f1 e0       	ldi	r31, 0x01	; 1
    1a64:	4f 1a       	sub	r4, r31
    1a66:	51 08       	sbc	r5, r1
    1a68:	41 14       	cp	r4, r1
    1a6a:	51 04       	cpc	r5, r1
    1a6c:	71 f7       	brne	.-36     	; 0x1a4a <vfprintf+0x18c>
    1a6e:	e5 c0       	rjmp	.+458    	; 0x1c3a <vfprintf+0x37c>
    1a70:	84 36       	cpi	r24, 0x64	; 100
    1a72:	11 f0       	breq	.+4      	; 0x1a78 <vfprintf+0x1ba>
    1a74:	89 36       	cpi	r24, 0x69	; 105
    1a76:	39 f5       	brne	.+78     	; 0x1ac6 <vfprintf+0x208>
    1a78:	f8 01       	movw	r30, r16
    1a7a:	27 ff       	sbrs	r18, 7
    1a7c:	07 c0       	rjmp	.+14     	; 0x1a8c <vfprintf+0x1ce>
    1a7e:	60 81       	ld	r22, Z
    1a80:	71 81       	ldd	r23, Z+1	; 0x01
    1a82:	82 81       	ldd	r24, Z+2	; 0x02
    1a84:	93 81       	ldd	r25, Z+3	; 0x03
    1a86:	0c 5f       	subi	r16, 0xFC	; 252
    1a88:	1f 4f       	sbci	r17, 0xFF	; 255
    1a8a:	08 c0       	rjmp	.+16     	; 0x1a9c <vfprintf+0x1de>
    1a8c:	60 81       	ld	r22, Z
    1a8e:	71 81       	ldd	r23, Z+1	; 0x01
    1a90:	88 27       	eor	r24, r24
    1a92:	77 fd       	sbrc	r23, 7
    1a94:	80 95       	com	r24
    1a96:	98 2f       	mov	r25, r24
    1a98:	0e 5f       	subi	r16, 0xFE	; 254
    1a9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a9c:	2f 76       	andi	r18, 0x6F	; 111
    1a9e:	b2 2e       	mov	r11, r18
    1aa0:	97 ff       	sbrs	r25, 7
    1aa2:	09 c0       	rjmp	.+18     	; 0x1ab6 <vfprintf+0x1f8>
    1aa4:	90 95       	com	r25
    1aa6:	80 95       	com	r24
    1aa8:	70 95       	com	r23
    1aaa:	61 95       	neg	r22
    1aac:	7f 4f       	sbci	r23, 0xFF	; 255
    1aae:	8f 4f       	sbci	r24, 0xFF	; 255
    1ab0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab2:	20 68       	ori	r18, 0x80	; 128
    1ab4:	b2 2e       	mov	r11, r18
    1ab6:	2a e0       	ldi	r18, 0x0A	; 10
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	a4 01       	movw	r20, r8
    1abc:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__ultoa_invert>
    1ac0:	a8 2e       	mov	r10, r24
    1ac2:	a8 18       	sub	r10, r8
    1ac4:	44 c0       	rjmp	.+136    	; 0x1b4e <vfprintf+0x290>
    1ac6:	85 37       	cpi	r24, 0x75	; 117
    1ac8:	29 f4       	brne	.+10     	; 0x1ad4 <vfprintf+0x216>
    1aca:	2f 7e       	andi	r18, 0xEF	; 239
    1acc:	b2 2e       	mov	r11, r18
    1ace:	2a e0       	ldi	r18, 0x0A	; 10
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	25 c0       	rjmp	.+74     	; 0x1b1e <vfprintf+0x260>
    1ad4:	f2 2f       	mov	r31, r18
    1ad6:	f9 7f       	andi	r31, 0xF9	; 249
    1ad8:	bf 2e       	mov	r11, r31
    1ada:	8f 36       	cpi	r24, 0x6F	; 111
    1adc:	c1 f0       	breq	.+48     	; 0x1b0e <vfprintf+0x250>
    1ade:	18 f4       	brcc	.+6      	; 0x1ae6 <vfprintf+0x228>
    1ae0:	88 35       	cpi	r24, 0x58	; 88
    1ae2:	79 f0       	breq	.+30     	; 0x1b02 <vfprintf+0x244>
    1ae4:	b4 c0       	rjmp	.+360    	; 0x1c4e <vfprintf+0x390>
    1ae6:	80 37       	cpi	r24, 0x70	; 112
    1ae8:	19 f0       	breq	.+6      	; 0x1af0 <vfprintf+0x232>
    1aea:	88 37       	cpi	r24, 0x78	; 120
    1aec:	21 f0       	breq	.+8      	; 0x1af6 <vfprintf+0x238>
    1aee:	af c0       	rjmp	.+350    	; 0x1c4e <vfprintf+0x390>
    1af0:	2f 2f       	mov	r18, r31
    1af2:	20 61       	ori	r18, 0x10	; 16
    1af4:	b2 2e       	mov	r11, r18
    1af6:	b4 fe       	sbrs	r11, 4
    1af8:	0d c0       	rjmp	.+26     	; 0x1b14 <vfprintf+0x256>
    1afa:	8b 2d       	mov	r24, r11
    1afc:	84 60       	ori	r24, 0x04	; 4
    1afe:	b8 2e       	mov	r11, r24
    1b00:	09 c0       	rjmp	.+18     	; 0x1b14 <vfprintf+0x256>
    1b02:	24 ff       	sbrs	r18, 4
    1b04:	0a c0       	rjmp	.+20     	; 0x1b1a <vfprintf+0x25c>
    1b06:	9f 2f       	mov	r25, r31
    1b08:	96 60       	ori	r25, 0x06	; 6
    1b0a:	b9 2e       	mov	r11, r25
    1b0c:	06 c0       	rjmp	.+12     	; 0x1b1a <vfprintf+0x25c>
    1b0e:	28 e0       	ldi	r18, 0x08	; 8
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	05 c0       	rjmp	.+10     	; 0x1b1e <vfprintf+0x260>
    1b14:	20 e1       	ldi	r18, 0x10	; 16
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <vfprintf+0x260>
    1b1a:	20 e1       	ldi	r18, 0x10	; 16
    1b1c:	32 e0       	ldi	r19, 0x02	; 2
    1b1e:	f8 01       	movw	r30, r16
    1b20:	b7 fe       	sbrs	r11, 7
    1b22:	07 c0       	rjmp	.+14     	; 0x1b32 <vfprintf+0x274>
    1b24:	60 81       	ld	r22, Z
    1b26:	71 81       	ldd	r23, Z+1	; 0x01
    1b28:	82 81       	ldd	r24, Z+2	; 0x02
    1b2a:	93 81       	ldd	r25, Z+3	; 0x03
    1b2c:	0c 5f       	subi	r16, 0xFC	; 252
    1b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b30:	06 c0       	rjmp	.+12     	; 0x1b3e <vfprintf+0x280>
    1b32:	60 81       	ld	r22, Z
    1b34:	71 81       	ldd	r23, Z+1	; 0x01
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	0e 5f       	subi	r16, 0xFE	; 254
    1b3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3e:	a4 01       	movw	r20, r8
    1b40:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__ultoa_invert>
    1b44:	a8 2e       	mov	r10, r24
    1b46:	a8 18       	sub	r10, r8
    1b48:	fb 2d       	mov	r31, r11
    1b4a:	ff 77       	andi	r31, 0x7F	; 127
    1b4c:	bf 2e       	mov	r11, r31
    1b4e:	b6 fe       	sbrs	r11, 6
    1b50:	0b c0       	rjmp	.+22     	; 0x1b68 <vfprintf+0x2aa>
    1b52:	2b 2d       	mov	r18, r11
    1b54:	2e 7f       	andi	r18, 0xFE	; 254
    1b56:	a5 14       	cp	r10, r5
    1b58:	50 f4       	brcc	.+20     	; 0x1b6e <vfprintf+0x2b0>
    1b5a:	b4 fe       	sbrs	r11, 4
    1b5c:	0a c0       	rjmp	.+20     	; 0x1b72 <vfprintf+0x2b4>
    1b5e:	b2 fc       	sbrc	r11, 2
    1b60:	08 c0       	rjmp	.+16     	; 0x1b72 <vfprintf+0x2b4>
    1b62:	2b 2d       	mov	r18, r11
    1b64:	2e 7e       	andi	r18, 0xEE	; 238
    1b66:	05 c0       	rjmp	.+10     	; 0x1b72 <vfprintf+0x2b4>
    1b68:	7a 2c       	mov	r7, r10
    1b6a:	2b 2d       	mov	r18, r11
    1b6c:	03 c0       	rjmp	.+6      	; 0x1b74 <vfprintf+0x2b6>
    1b6e:	7a 2c       	mov	r7, r10
    1b70:	01 c0       	rjmp	.+2      	; 0x1b74 <vfprintf+0x2b6>
    1b72:	75 2c       	mov	r7, r5
    1b74:	24 ff       	sbrs	r18, 4
    1b76:	0d c0       	rjmp	.+26     	; 0x1b92 <vfprintf+0x2d4>
    1b78:	fe 01       	movw	r30, r28
    1b7a:	ea 0d       	add	r30, r10
    1b7c:	f1 1d       	adc	r31, r1
    1b7e:	80 81       	ld	r24, Z
    1b80:	80 33       	cpi	r24, 0x30	; 48
    1b82:	11 f4       	brne	.+4      	; 0x1b88 <vfprintf+0x2ca>
    1b84:	29 7e       	andi	r18, 0xE9	; 233
    1b86:	09 c0       	rjmp	.+18     	; 0x1b9a <vfprintf+0x2dc>
    1b88:	22 ff       	sbrs	r18, 2
    1b8a:	06 c0       	rjmp	.+12     	; 0x1b98 <vfprintf+0x2da>
    1b8c:	73 94       	inc	r7
    1b8e:	73 94       	inc	r7
    1b90:	04 c0       	rjmp	.+8      	; 0x1b9a <vfprintf+0x2dc>
    1b92:	82 2f       	mov	r24, r18
    1b94:	86 78       	andi	r24, 0x86	; 134
    1b96:	09 f0       	breq	.+2      	; 0x1b9a <vfprintf+0x2dc>
    1b98:	73 94       	inc	r7
    1b9a:	23 fd       	sbrc	r18, 3
    1b9c:	13 c0       	rjmp	.+38     	; 0x1bc4 <vfprintf+0x306>
    1b9e:	20 ff       	sbrs	r18, 0
    1ba0:	06 c0       	rjmp	.+12     	; 0x1bae <vfprintf+0x2f0>
    1ba2:	5a 2c       	mov	r5, r10
    1ba4:	73 14       	cp	r7, r3
    1ba6:	18 f4       	brcc	.+6      	; 0x1bae <vfprintf+0x2f0>
    1ba8:	53 0c       	add	r5, r3
    1baa:	57 18       	sub	r5, r7
    1bac:	73 2c       	mov	r7, r3
    1bae:	73 14       	cp	r7, r3
    1bb0:	68 f4       	brcc	.+26     	; 0x1bcc <vfprintf+0x30e>
    1bb2:	b7 01       	movw	r22, r14
    1bb4:	80 e2       	ldi	r24, 0x20	; 32
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	2c 87       	std	Y+12, r18	; 0x0c
    1bba:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <fputc>
    1bbe:	73 94       	inc	r7
    1bc0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bc2:	f5 cf       	rjmp	.-22     	; 0x1bae <vfprintf+0x2f0>
    1bc4:	73 14       	cp	r7, r3
    1bc6:	10 f4       	brcc	.+4      	; 0x1bcc <vfprintf+0x30e>
    1bc8:	37 18       	sub	r3, r7
    1bca:	01 c0       	rjmp	.+2      	; 0x1bce <vfprintf+0x310>
    1bcc:	31 2c       	mov	r3, r1
    1bce:	24 ff       	sbrs	r18, 4
    1bd0:	12 c0       	rjmp	.+36     	; 0x1bf6 <vfprintf+0x338>
    1bd2:	b7 01       	movw	r22, r14
    1bd4:	80 e3       	ldi	r24, 0x30	; 48
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	2c 87       	std	Y+12, r18	; 0x0c
    1bda:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <fputc>
    1bde:	2c 85       	ldd	r18, Y+12	; 0x0c
    1be0:	22 ff       	sbrs	r18, 2
    1be2:	17 c0       	rjmp	.+46     	; 0x1c12 <vfprintf+0x354>
    1be4:	21 ff       	sbrs	r18, 1
    1be6:	03 c0       	rjmp	.+6      	; 0x1bee <vfprintf+0x330>
    1be8:	88 e5       	ldi	r24, 0x58	; 88
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <vfprintf+0x334>
    1bee:	88 e7       	ldi	r24, 0x78	; 120
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	b7 01       	movw	r22, r14
    1bf4:	0c c0       	rjmp	.+24     	; 0x1c0e <vfprintf+0x350>
    1bf6:	82 2f       	mov	r24, r18
    1bf8:	86 78       	andi	r24, 0x86	; 134
    1bfa:	59 f0       	breq	.+22     	; 0x1c12 <vfprintf+0x354>
    1bfc:	21 fd       	sbrc	r18, 1
    1bfe:	02 c0       	rjmp	.+4      	; 0x1c04 <vfprintf+0x346>
    1c00:	80 e2       	ldi	r24, 0x20	; 32
    1c02:	01 c0       	rjmp	.+2      	; 0x1c06 <vfprintf+0x348>
    1c04:	8b e2       	ldi	r24, 0x2B	; 43
    1c06:	27 fd       	sbrc	r18, 7
    1c08:	8d e2       	ldi	r24, 0x2D	; 45
    1c0a:	b7 01       	movw	r22, r14
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <fputc>
    1c12:	a5 14       	cp	r10, r5
    1c14:	38 f4       	brcc	.+14     	; 0x1c24 <vfprintf+0x366>
    1c16:	b7 01       	movw	r22, r14
    1c18:	80 e3       	ldi	r24, 0x30	; 48
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <fputc>
    1c20:	5a 94       	dec	r5
    1c22:	f7 cf       	rjmp	.-18     	; 0x1c12 <vfprintf+0x354>
    1c24:	aa 94       	dec	r10
    1c26:	f4 01       	movw	r30, r8
    1c28:	ea 0d       	add	r30, r10
    1c2a:	f1 1d       	adc	r31, r1
    1c2c:	80 81       	ld	r24, Z
    1c2e:	b7 01       	movw	r22, r14
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <fputc>
    1c36:	a1 10       	cpse	r10, r1
    1c38:	f5 cf       	rjmp	.-22     	; 0x1c24 <vfprintf+0x366>
    1c3a:	33 20       	and	r3, r3
    1c3c:	09 f4       	brne	.+2      	; 0x1c40 <vfprintf+0x382>
    1c3e:	51 ce       	rjmp	.-862    	; 0x18e2 <vfprintf+0x24>
    1c40:	b7 01       	movw	r22, r14
    1c42:	80 e2       	ldi	r24, 0x20	; 32
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <fputc>
    1c4a:	3a 94       	dec	r3
    1c4c:	f6 cf       	rjmp	.-20     	; 0x1c3a <vfprintf+0x37c>
    1c4e:	f7 01       	movw	r30, r14
    1c50:	86 81       	ldd	r24, Z+6	; 0x06
    1c52:	97 81       	ldd	r25, Z+7	; 0x07
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <vfprintf+0x39c>
    1c56:	8f ef       	ldi	r24, 0xFF	; 255
    1c58:	9f ef       	ldi	r25, 0xFF	; 255
    1c5a:	2c 96       	adiw	r28, 0x0c	; 12
    1c5c:	e2 e1       	ldi	r30, 0x12	; 18
    1c5e:	0c 94 f3 0e 	jmp	0x1de6	; 0x1de6 <__epilogue_restores__>

00001c62 <strnlen_P>:
    1c62:	fc 01       	movw	r30, r24
    1c64:	05 90       	lpm	r0, Z+
    1c66:	61 50       	subi	r22, 0x01	; 1
    1c68:	70 40       	sbci	r23, 0x00	; 0
    1c6a:	01 10       	cpse	r0, r1
    1c6c:	d8 f7       	brcc	.-10     	; 0x1c64 <strnlen_P+0x2>
    1c6e:	80 95       	com	r24
    1c70:	90 95       	com	r25
    1c72:	8e 0f       	add	r24, r30
    1c74:	9f 1f       	adc	r25, r31
    1c76:	08 95       	ret

00001c78 <strnlen>:
    1c78:	fc 01       	movw	r30, r24
    1c7a:	61 50       	subi	r22, 0x01	; 1
    1c7c:	70 40       	sbci	r23, 0x00	; 0
    1c7e:	01 90       	ld	r0, Z+
    1c80:	01 10       	cpse	r0, r1
    1c82:	d8 f7       	brcc	.-10     	; 0x1c7a <strnlen+0x2>
    1c84:	80 95       	com	r24
    1c86:	90 95       	com	r25
    1c88:	8e 0f       	add	r24, r30
    1c8a:	9f 1f       	adc	r25, r31
    1c8c:	08 95       	ret

00001c8e <fputc>:
    1c8e:	0f 93       	push	r16
    1c90:	1f 93       	push	r17
    1c92:	cf 93       	push	r28
    1c94:	df 93       	push	r29
    1c96:	18 2f       	mov	r17, r24
    1c98:	09 2f       	mov	r16, r25
    1c9a:	eb 01       	movw	r28, r22
    1c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9e:	81 fd       	sbrc	r24, 1
    1ca0:	03 c0       	rjmp	.+6      	; 0x1ca8 <fputc+0x1a>
    1ca2:	8f ef       	ldi	r24, 0xFF	; 255
    1ca4:	9f ef       	ldi	r25, 0xFF	; 255
    1ca6:	20 c0       	rjmp	.+64     	; 0x1ce8 <fputc+0x5a>
    1ca8:	82 ff       	sbrs	r24, 2
    1caa:	10 c0       	rjmp	.+32     	; 0x1ccc <fputc+0x3e>
    1cac:	4e 81       	ldd	r20, Y+6	; 0x06
    1cae:	5f 81       	ldd	r21, Y+7	; 0x07
    1cb0:	2c 81       	ldd	r18, Y+4	; 0x04
    1cb2:	3d 81       	ldd	r19, Y+5	; 0x05
    1cb4:	42 17       	cp	r20, r18
    1cb6:	53 07       	cpc	r21, r19
    1cb8:	7c f4       	brge	.+30     	; 0x1cd8 <fputc+0x4a>
    1cba:	e8 81       	ld	r30, Y
    1cbc:	f9 81       	ldd	r31, Y+1	; 0x01
    1cbe:	9f 01       	movw	r18, r30
    1cc0:	2f 5f       	subi	r18, 0xFF	; 255
    1cc2:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc4:	39 83       	std	Y+1, r19	; 0x01
    1cc6:	28 83       	st	Y, r18
    1cc8:	10 83       	st	Z, r17
    1cca:	06 c0       	rjmp	.+12     	; 0x1cd8 <fputc+0x4a>
    1ccc:	e8 85       	ldd	r30, Y+8	; 0x08
    1cce:	f9 85       	ldd	r31, Y+9	; 0x09
    1cd0:	81 2f       	mov	r24, r17
    1cd2:	09 95       	icall
    1cd4:	89 2b       	or	r24, r25
    1cd6:	29 f7       	brne	.-54     	; 0x1ca2 <fputc+0x14>
    1cd8:	2e 81       	ldd	r18, Y+6	; 0x06
    1cda:	3f 81       	ldd	r19, Y+7	; 0x07
    1cdc:	2f 5f       	subi	r18, 0xFF	; 255
    1cde:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce0:	3f 83       	std	Y+7, r19	; 0x07
    1ce2:	2e 83       	std	Y+6, r18	; 0x06
    1ce4:	81 2f       	mov	r24, r17
    1ce6:	90 2f       	mov	r25, r16
    1ce8:	df 91       	pop	r29
    1cea:	cf 91       	pop	r28
    1cec:	1f 91       	pop	r17
    1cee:	0f 91       	pop	r16
    1cf0:	08 95       	ret

00001cf2 <__ultoa_invert>:
    1cf2:	fa 01       	movw	r30, r20
    1cf4:	aa 27       	eor	r26, r26
    1cf6:	28 30       	cpi	r18, 0x08	; 8
    1cf8:	51 f1       	breq	.+84     	; 0x1d4e <__ultoa_invert+0x5c>
    1cfa:	20 31       	cpi	r18, 0x10	; 16
    1cfc:	81 f1       	breq	.+96     	; 0x1d5e <__ultoa_invert+0x6c>
    1cfe:	e8 94       	clt
    1d00:	6f 93       	push	r22
    1d02:	6e 7f       	andi	r22, 0xFE	; 254
    1d04:	6e 5f       	subi	r22, 0xFE	; 254
    1d06:	7f 4f       	sbci	r23, 0xFF	; 255
    1d08:	8f 4f       	sbci	r24, 0xFF	; 255
    1d0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0c:	af 4f       	sbci	r26, 0xFF	; 255
    1d0e:	b1 e0       	ldi	r27, 0x01	; 1
    1d10:	3e d0       	rcall	.+124    	; 0x1d8e <__ultoa_invert+0x9c>
    1d12:	b4 e0       	ldi	r27, 0x04	; 4
    1d14:	3c d0       	rcall	.+120    	; 0x1d8e <__ultoa_invert+0x9c>
    1d16:	67 0f       	add	r22, r23
    1d18:	78 1f       	adc	r23, r24
    1d1a:	89 1f       	adc	r24, r25
    1d1c:	9a 1f       	adc	r25, r26
    1d1e:	a1 1d       	adc	r26, r1
    1d20:	68 0f       	add	r22, r24
    1d22:	79 1f       	adc	r23, r25
    1d24:	8a 1f       	adc	r24, r26
    1d26:	91 1d       	adc	r25, r1
    1d28:	a1 1d       	adc	r26, r1
    1d2a:	6a 0f       	add	r22, r26
    1d2c:	71 1d       	adc	r23, r1
    1d2e:	81 1d       	adc	r24, r1
    1d30:	91 1d       	adc	r25, r1
    1d32:	a1 1d       	adc	r26, r1
    1d34:	20 d0       	rcall	.+64     	; 0x1d76 <__ultoa_invert+0x84>
    1d36:	09 f4       	brne	.+2      	; 0x1d3a <__ultoa_invert+0x48>
    1d38:	68 94       	set
    1d3a:	3f 91       	pop	r19
    1d3c:	2a e0       	ldi	r18, 0x0A	; 10
    1d3e:	26 9f       	mul	r18, r22
    1d40:	11 24       	eor	r1, r1
    1d42:	30 19       	sub	r19, r0
    1d44:	30 5d       	subi	r19, 0xD0	; 208
    1d46:	31 93       	st	Z+, r19
    1d48:	de f6       	brtc	.-74     	; 0x1d00 <__ultoa_invert+0xe>
    1d4a:	cf 01       	movw	r24, r30
    1d4c:	08 95       	ret
    1d4e:	46 2f       	mov	r20, r22
    1d50:	47 70       	andi	r20, 0x07	; 7
    1d52:	40 5d       	subi	r20, 0xD0	; 208
    1d54:	41 93       	st	Z+, r20
    1d56:	b3 e0       	ldi	r27, 0x03	; 3
    1d58:	0f d0       	rcall	.+30     	; 0x1d78 <__ultoa_invert+0x86>
    1d5a:	c9 f7       	brne	.-14     	; 0x1d4e <__ultoa_invert+0x5c>
    1d5c:	f6 cf       	rjmp	.-20     	; 0x1d4a <__ultoa_invert+0x58>
    1d5e:	46 2f       	mov	r20, r22
    1d60:	4f 70       	andi	r20, 0x0F	; 15
    1d62:	40 5d       	subi	r20, 0xD0	; 208
    1d64:	4a 33       	cpi	r20, 0x3A	; 58
    1d66:	18 f0       	brcs	.+6      	; 0x1d6e <__ultoa_invert+0x7c>
    1d68:	49 5d       	subi	r20, 0xD9	; 217
    1d6a:	31 fd       	sbrc	r19, 1
    1d6c:	40 52       	subi	r20, 0x20	; 32
    1d6e:	41 93       	st	Z+, r20
    1d70:	02 d0       	rcall	.+4      	; 0x1d76 <__ultoa_invert+0x84>
    1d72:	a9 f7       	brne	.-22     	; 0x1d5e <__ultoa_invert+0x6c>
    1d74:	ea cf       	rjmp	.-44     	; 0x1d4a <__ultoa_invert+0x58>
    1d76:	b4 e0       	ldi	r27, 0x04	; 4
    1d78:	a6 95       	lsr	r26
    1d7a:	97 95       	ror	r25
    1d7c:	87 95       	ror	r24
    1d7e:	77 95       	ror	r23
    1d80:	67 95       	ror	r22
    1d82:	ba 95       	dec	r27
    1d84:	c9 f7       	brne	.-14     	; 0x1d78 <__ultoa_invert+0x86>
    1d86:	00 97       	sbiw	r24, 0x00	; 0
    1d88:	61 05       	cpc	r22, r1
    1d8a:	71 05       	cpc	r23, r1
    1d8c:	08 95       	ret
    1d8e:	9b 01       	movw	r18, r22
    1d90:	ac 01       	movw	r20, r24
    1d92:	0a 2e       	mov	r0, r26
    1d94:	06 94       	lsr	r0
    1d96:	57 95       	ror	r21
    1d98:	47 95       	ror	r20
    1d9a:	37 95       	ror	r19
    1d9c:	27 95       	ror	r18
    1d9e:	ba 95       	dec	r27
    1da0:	c9 f7       	brne	.-14     	; 0x1d94 <__ultoa_invert+0xa2>
    1da2:	62 0f       	add	r22, r18
    1da4:	73 1f       	adc	r23, r19
    1da6:	84 1f       	adc	r24, r20
    1da8:	95 1f       	adc	r25, r21
    1daa:	a0 1d       	adc	r26, r0
    1dac:	08 95       	ret

00001dae <__prologue_saves__>:
    1dae:	2f 92       	push	r2
    1db0:	3f 92       	push	r3
    1db2:	4f 92       	push	r4
    1db4:	5f 92       	push	r5
    1db6:	6f 92       	push	r6
    1db8:	7f 92       	push	r7
    1dba:	8f 92       	push	r8
    1dbc:	9f 92       	push	r9
    1dbe:	af 92       	push	r10
    1dc0:	bf 92       	push	r11
    1dc2:	cf 92       	push	r12
    1dc4:	df 92       	push	r13
    1dc6:	ef 92       	push	r14
    1dc8:	ff 92       	push	r15
    1dca:	0f 93       	push	r16
    1dcc:	1f 93       	push	r17
    1dce:	cf 93       	push	r28
    1dd0:	df 93       	push	r29
    1dd2:	cd b7       	in	r28, 0x3d	; 61
    1dd4:	de b7       	in	r29, 0x3e	; 62
    1dd6:	ca 1b       	sub	r28, r26
    1dd8:	db 0b       	sbc	r29, r27
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	f8 94       	cli
    1dde:	de bf       	out	0x3e, r29	; 62
    1de0:	0f be       	out	0x3f, r0	; 63
    1de2:	cd bf       	out	0x3d, r28	; 61
    1de4:	09 94       	ijmp

00001de6 <__epilogue_restores__>:
    1de6:	2a 88       	ldd	r2, Y+18	; 0x12
    1de8:	39 88       	ldd	r3, Y+17	; 0x11
    1dea:	48 88       	ldd	r4, Y+16	; 0x10
    1dec:	5f 84       	ldd	r5, Y+15	; 0x0f
    1dee:	6e 84       	ldd	r6, Y+14	; 0x0e
    1df0:	7d 84       	ldd	r7, Y+13	; 0x0d
    1df2:	8c 84       	ldd	r8, Y+12	; 0x0c
    1df4:	9b 84       	ldd	r9, Y+11	; 0x0b
    1df6:	aa 84       	ldd	r10, Y+10	; 0x0a
    1df8:	b9 84       	ldd	r11, Y+9	; 0x09
    1dfa:	c8 84       	ldd	r12, Y+8	; 0x08
    1dfc:	df 80       	ldd	r13, Y+7	; 0x07
    1dfe:	ee 80       	ldd	r14, Y+6	; 0x06
    1e00:	fd 80       	ldd	r15, Y+5	; 0x05
    1e02:	0c 81       	ldd	r16, Y+4	; 0x04
    1e04:	1b 81       	ldd	r17, Y+3	; 0x03
    1e06:	aa 81       	ldd	r26, Y+2	; 0x02
    1e08:	b9 81       	ldd	r27, Y+1	; 0x01
    1e0a:	ce 0f       	add	r28, r30
    1e0c:	d1 1d       	adc	r29, r1
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	f8 94       	cli
    1e12:	de bf       	out	0x3e, r29	; 62
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	cd bf       	out	0x3d, r28	; 61
    1e18:	ed 01       	movw	r28, r26
    1e1a:	08 95       	ret

00001e1c <_exit>:
    1e1c:	f8 94       	cli

00001e1e <__stop_program>:
    1e1e:	ff cf       	rjmp	.-2      	; 0x1e1e <__stop_program>
