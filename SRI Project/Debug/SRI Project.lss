
SRI Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000031e  00800100  00001ec2  00001f56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ec2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013a  0080041e  0080041e  00002274  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002274  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002b0  00000000  00000000  000022d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002de4  00000000  00000000  00002580  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000db7  00000000  00000000  00005364  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f70  00000000  00000000  0000611b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000938  00000000  00000000  0000708c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a27  00000000  00000000  000079c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002378  00000000  00000000  000083eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000270  00000000  00000000  0000a763  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__ctors_end>
       4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
       8:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
       c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      10:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      14:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <__vector_5>
      18:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      1c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      20:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      24:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      28:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      2c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      30:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      34:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      38:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      3c:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__vector_15>
      40:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      44:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      48:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      4c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      50:	0c 94 3c 08 	jmp	0x1078	; 0x1078 <__vector_20>
      54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      58:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      5c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      60:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      64:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      68:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      6c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      70:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      74:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      78:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      7c:	e3 00       	.word	0x00e3	; ????
      7e:	b6 00       	.word	0x00b6	; ????
      80:	b9 00       	.word	0x00b9	; ????
      82:	fa 00       	.word	0x00fa	; ????
      84:	fa 00       	.word	0x00fa	; ????
      86:	fa 00       	.word	0x00fa	; ????
      88:	fa 00       	.word	0x00fa	; ????
      8a:	fa 00       	.word	0x00fa	; ????
      8c:	fa 00       	.word	0x00fa	; ????
      8e:	fa 00       	.word	0x00fa	; ????
      90:	fa 00       	.word	0x00fa	; ????
      92:	fa 00       	.word	0x00fa	; ????
      94:	fa 00       	.word	0x00fa	; ????
      96:	d9 00       	.word	0x00d9	; ????
      98:	bc 00       	.word	0x00bc	; ????
      9a:	c1 00       	.word	0x00c1	; ????
      9c:	c6 00       	.word	0x00c6	; ????
      9e:	d1 00       	.word	0x00d1	; ????
      a0:	c9 00       	.word	0x00c9	; ????
      a2:	f6 00       	.word	0x00f6	; ????
      a4:	f1 00       	.word	0x00f1	; ????
      a6:	4b 07       	cpc	r20, r27
      a8:	53 07       	cpc	r21, r19
      aa:	c6 07       	cpc	r28, r22
      ac:	be 07       	cpc	r27, r30
      ae:	b3 07       	cpc	r27, r19
      b0:	5b 07       	cpc	r21, r27
      b2:	9b 07       	cpc	r25, r27
      b4:	ac 07       	cpc	r26, r28
      b6:	d5 07       	cpc	r29, r21

000000b8 <__ctors_end>:
      b8:	11 24       	eor	r1, r1
      ba:	1f be       	out	0x3f, r1	; 63
      bc:	cf ef       	ldi	r28, 0xFF	; 255
      be:	d0 e1       	ldi	r29, 0x10	; 16
      c0:	de bf       	out	0x3e, r29	; 62
      c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_copy_data>:
      c4:	14 e0       	ldi	r17, 0x04	; 4
      c6:	a0 e0       	ldi	r26, 0x00	; 0
      c8:	b1 e0       	ldi	r27, 0x01	; 1
      ca:	e2 ec       	ldi	r30, 0xC2	; 194
      cc:	fe e1       	ldi	r31, 0x1E	; 30
      ce:	02 c0       	rjmp	.+4      	; 0xd4 <__do_copy_data+0x10>
      d0:	05 90       	lpm	r0, Z+
      d2:	0d 92       	st	X+, r0
      d4:	ae 31       	cpi	r26, 0x1E	; 30
      d6:	b1 07       	cpc	r27, r17
      d8:	d9 f7       	brne	.-10     	; 0xd0 <__do_copy_data+0xc>

000000da <__do_clear_bss>:
      da:	25 e0       	ldi	r18, 0x05	; 5
      dc:	ae e1       	ldi	r26, 0x1E	; 30
      de:	b4 e0       	ldi	r27, 0x04	; 4
      e0:	01 c0       	rjmp	.+2      	; 0xe4 <.do_clear_bss_start>

000000e2 <.do_clear_bss_loop>:
      e2:	1d 92       	st	X+, r1

000000e4 <.do_clear_bss_start>:
      e4:	a8 35       	cpi	r26, 0x58	; 88
      e6:	b2 07       	cpc	r27, r18
      e8:	e1 f7       	brne	.-8      	; 0xe2 <.do_clear_bss_loop>
      ea:	0e 94 87 08 	call	0x110e	; 0x110e <main>
      ee:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <_exit>

000000f2 <__bad_interrupt>:
      f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f6 <prelucreazaDatele>:
extern volatile uint8_t ms2p1_enabled;

void prelucreazaDatele(void){
	//BTTransmitStr("Procesez ceva!");
	//cli();
	if(actiune >= GoFront && actiune <= GoRightB){
      f6:	80 91 2a 04 	lds	r24, 0x042A
      fa:	9f ef       	ldi	r25, 0xFF	; 255
      fc:	98 0f       	add	r25, r24
      fe:	96 30       	cpi	r25, 0x06	; 6
     100:	50 f5       	brcc	.+84     	; 0x156 <prelucreazaDatele+0x60>
		unsigned char timp = date[0];
     102:	90 91 2b 04 	lds	r25, 0x042B
		unsigned char viteza = date[1];
     106:	60 91 2c 04 	lds	r22, 0x042C
		switch(actiune){
     10a:	83 30       	cpi	r24, 0x03	; 3
     10c:	a1 f0       	breq	.+40     	; 0x136 <prelucreazaDatele+0x40>
     10e:	28 f4       	brcc	.+10     	; 0x11a <prelucreazaDatele+0x24>
     110:	81 30       	cpi	r24, 0x01	; 1
     112:	49 f0       	breq	.+18     	; 0x126 <prelucreazaDatele+0x30>
     114:	82 30       	cpi	r24, 0x02	; 2
     116:	59 f0       	breq	.+22     	; 0x12e <prelucreazaDatele+0x38>
     118:	08 95       	ret
     11a:	85 30       	cpi	r24, 0x05	; 5
     11c:	81 f0       	breq	.+32     	; 0x13e <prelucreazaDatele+0x48>
     11e:	98 f0       	brcs	.+38     	; 0x146 <prelucreazaDatele+0x50>
     120:	86 30       	cpi	r24, 0x06	; 6
     122:	a9 f0       	breq	.+42     	; 0x14e <prelucreazaDatele+0x58>
     124:	08 95       	ret
			case GoFront:
			goFront(timp, viteza);
     126:	89 2f       	mov	r24, r25
     128:	0e 94 75 02 	call	0x4ea	; 0x4ea <goFront>
			break;
     12c:	08 95       	ret
			case GoBack:
			goBack(timp, viteza);
     12e:	89 2f       	mov	r24, r25
     130:	0e 94 9d 02 	call	0x53a	; 0x53a <goBack>
			break;
     134:	08 95       	ret
			case GoLeftF:
			goFrontLeft(timp, viteza);
     136:	89 2f       	mov	r24, r25
     138:	0e 94 c5 02 	call	0x58a	; 0x58a <goFrontLeft>
			break;
     13c:	08 95       	ret
			case GoLeftB:
			goBackLeft(timp, viteza);
     13e:	89 2f       	mov	r24, r25
     140:	0e 94 12 03 	call	0x624	; 0x624 <goBackLeft>
			break;
     144:	08 95       	ret
			case GoRightF:
				goFrontRight(timp, viteza);
     146:	89 2f       	mov	r24, r25
     148:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <goFrontRight>
			break;
     14c:	08 95       	ret
			case GoRightB:
				goBackRight(timp, viteza);
     14e:	89 2f       	mov	r24, r25
     150:	0e 94 37 03 	call	0x66e	; 0x66e <goBackRight>
			break;
     154:	08 95       	ret
				break;
		}
		return;
	}
	
	switch(actiune){
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	fc 01       	movw	r30, r24
     15a:	37 97       	sbiw	r30, 0x07	; 7
     15c:	e5 31       	cpi	r30, 0x15	; 21
     15e:	f1 05       	cpc	r31, r1
     160:	08 f0       	brcs	.+2      	; 0x164 <prelucreazaDatele+0x6e>
     162:	48 c0       	rjmp	.+144    	; 0x1f4 <prelucreazaDatele+0xfe>
     164:	e2 5c       	subi	r30, 0xC2	; 194
     166:	ff 4f       	sbci	r31, 0xFF	; 255
     168:	0c 94 5a 0c 	jmp	0x18b4	; 0x18b4 <__tablejump2__>
		case GoM2P2:
			completeEnclosedContour();
     16c:	0e 94 12 02 	call	0x424	; 0x424 <completeEnclosedContour>
		break;
     170:	08 95       	ret
		case GoM2P3:
			checkFreeParallelParkingPlace();
     172:	0e 94 0d 02 	call	0x41a	; 0x41a <checkFreeParallelParkingPlace>
		break;
     176:	08 95       	ret
		case Led:
			ledAction(date[0]);
     178:	80 91 2b 04 	lds	r24, 0x042B
     17c:	0e 94 cd 0b 	call	0x179a	; 0x179a <ledAction>
		break;
     180:	08 95       	ret
		case ReadSensorValue:
			toggleSensorSend(date[0]);		
     182:	80 91 2b 04 	lds	r24, 0x042B
     186:	0e 94 50 04 	call	0x8a0	; 0x8a0 <toggleSensorSend>
		break;
     18a:	08 95       	ret
		case StopEngines:
			stopEngines();
     18c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <stopEngines>
		break;
     190:	08 95       	ret
		case RotirePeLocDreapta:
			rotirePeLoc(date[0], date[1], RightEngines);
     192:	40 e0       	ldi	r20, 0x00	; 0
     194:	60 91 2c 04 	lds	r22, 0x042C
     198:	80 91 2b 04 	lds	r24, 0x042B
     19c:	0e 94 5f 03 	call	0x6be	; 0x6be <rotirePeLoc>
		break;		
     1a0:	08 95       	ret
		case RotirePeLocStanga:
			rotirePeLoc(date[0], date[1], LeftEngines);
     1a2:	41 e0       	ldi	r20, 0x01	; 1
     1a4:	60 91 2c 04 	lds	r22, 0x042C
     1a8:	80 91 2b 04 	lds	r24, 0x042B
     1ac:	0e 94 5f 03 	call	0x6be	; 0x6be <rotirePeLoc>
		break;
     1b0:	08 95       	ret
		case DisplayMessage:
			//addEntryToTimerQueue(&fctSmechera, 10UL * 1000UL, Periodic);
			//addEntryToTimerQueue(&testFct1, 500UL * 1000UL, Periodic);
			addEntryToTimerQueue(&sendEncoderCounter, 500UL * 1000UL, Once);
     1b2:	20 e0       	ldi	r18, 0x00	; 0
     1b4:	40 e2       	ldi	r20, 0x20	; 32
     1b6:	51 ea       	ldi	r21, 0xA1	; 161
     1b8:	67 e0       	ldi	r22, 0x07	; 7
     1ba:	70 e0       	ldi	r23, 0x00	; 0
     1bc:	86 ef       	ldi	r24, 0xF6	; 246
     1be:	9b e0       	ldi	r25, 0x0B	; 11
     1c0:	0e 94 03 09 	call	0x1206	; 0x1206 <addEntryToTimerQueue>
		break;
     1c4:	08 95       	ret
		case GoM2P1:
			addEntryToTimerQueue(&functieRotireStanga, 1000UL * 500UL, Periodic);
     1c6:	21 e0       	ldi	r18, 0x01	; 1
     1c8:	40 e2       	ldi	r20, 0x20	; 32
     1ca:	51 ea       	ldi	r21, 0xA1	; 161
     1cc:	67 e0       	ldi	r22, 0x07	; 7
     1ce:	70 e0       	ldi	r23, 0x00	; 0
     1d0:	8a ef       	ldi	r24, 0xFA	; 250
     1d2:	96 e0       	ldi	r25, 0x06	; 6
     1d4:	0e 94 03 09 	call	0x1206	; 0x1206 <addEntryToTimerQueue>
			iesire=date[0];
     1d8:	80 91 2b 04 	lds	r24, 0x042B
     1dc:	80 93 22 04 	sts	0x0422, r24
		break;
     1e0:	08 95       	ret
		case ResetThings:
			stopEngines();
     1e2:	0e 94 f5 01 	call	0x3ea	; 0x3ea <stopEngines>
			resetTimerQueue();
     1e6:	0e 94 c9 0b 	call	0x1792	; 0x1792 <resetTimerQueue>
		break;
     1ea:	08 95       	ret
		case GetAverageSpeed:
			getAverageSpeed(date[0]);
     1ec:	80 91 2b 04 	lds	r24, 0x042B
     1f0:	0e 94 98 03 	call	0x730	; 0x730 <getAverageSpeed>
     1f4:	08 95       	ret

000001f6 <BTTransmitStr>:
}

void BTTransmitStr(char *theString){
	uint8_t len, i;
	
	len = strlen(theString);
     1f6:	fc 01       	movw	r30, r24
     1f8:	01 90       	ld	r0, Z+
     1fa:	00 20       	and	r0, r0
     1fc:	e9 f7       	brne	.-6      	; 0x1f8 <BTTransmitStr+0x2>
     1fe:	31 97       	sbiw	r30, 0x01	; 1
     200:	e8 1b       	sub	r30, r24
     202:	f9 0b       	sbc	r31, r25
     204:	2e 2f       	mov	r18, r30
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     206:	3a ea       	ldi	r19, 0xAA	; 170
     208:	30 93 c6 00 	sts	0x00C6, r19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     20c:	af e1       	ldi	r26, 0x1F	; 31
     20e:	be e4       	ldi	r27, 0x4E	; 78
     210:	11 97       	sbiw	r26, 0x01	; 1
     212:	f1 f7       	brne	.-4      	; 0x210 <BTTransmitStr+0x1a>
     214:	00 c0       	rjmp	.+0      	; 0x216 <BTTransmitStr+0x20>
     216:	00 00       	nop
     218:	34 e1       	ldi	r19, 0x14	; 20
     21a:	30 93 c6 00 	sts	0x00C6, r19
     21e:	af e1       	ldi	r26, 0x1F	; 31
     220:	be e4       	ldi	r27, 0x4E	; 78
     222:	11 97       	sbiw	r26, 0x01	; 1
     224:	f1 f7       	brne	.-4      	; 0x222 <BTTransmitStr+0x2c>
     226:	00 c0       	rjmp	.+0      	; 0x228 <BTTransmitStr+0x32>
     228:	00 00       	nop
     22a:	e0 93 c6 00 	sts	0x00C6, r30
     22e:	ef e1       	ldi	r30, 0x1F	; 31
     230:	fe e4       	ldi	r31, 0x4E	; 78
     232:	31 97       	sbiw	r30, 0x01	; 1
     234:	f1 f7       	brne	.-4      	; 0x232 <BTTransmitStr+0x3c>
     236:	00 c0       	rjmp	.+0      	; 0x238 <BTTransmitStr+0x42>
     238:	00 00       	nop
	
	BTTransmitChar(0xAA);
	BTTransmitChar(DisplayMessage);
	BTTransmitChar(len);
	
	for(i=0;i<len;i++)
     23a:	22 23       	and	r18, r18
     23c:	89 f0       	breq	.+34     	; 0x260 <BTTransmitStr+0x6a>
     23e:	38 2f       	mov	r19, r24
     240:	e8 2f       	mov	r30, r24
     242:	f9 2f       	mov	r31, r25
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     244:	a6 ec       	ldi	r26, 0xC6	; 198
     246:	b0 e0       	ldi	r27, 0x00	; 0
	BTTransmitChar(DisplayMessage);
	BTTransmitChar(len);
	
	for(i=0;i<len;i++)
	{
		BTTransmitChar(theString[i]);
     248:	81 91       	ld	r24, Z+
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     24a:	8c 93       	st	X, r24
     24c:	8f e1       	ldi	r24, 0x1F	; 31
     24e:	9e e4       	ldi	r25, 0x4E	; 78
     250:	01 97       	sbiw	r24, 0x01	; 1
     252:	f1 f7       	brne	.-4      	; 0x250 <BTTransmitStr+0x5a>
     254:	00 c0       	rjmp	.+0      	; 0x256 <BTTransmitStr+0x60>
     256:	00 00       	nop
     258:	8e 2f       	mov	r24, r30
     25a:	83 1b       	sub	r24, r19
	
	BTTransmitChar(0xAA);
	BTTransmitChar(DisplayMessage);
	BTTransmitChar(len);
	
	for(i=0;i<len;i++)
     25c:	82 17       	cp	r24, r18
     25e:	a0 f3       	brcs	.-24     	; 0x248 <BTTransmitStr+0x52>
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     260:	85 e5       	ldi	r24, 0x55	; 85
     262:	80 93 c6 00 	sts	0x00C6, r24
     266:	af e1       	ldi	r26, 0x1F	; 31
     268:	be e4       	ldi	r27, 0x4E	; 78
     26a:	11 97       	sbiw	r26, 0x01	; 1
     26c:	f1 f7       	brne	.-4      	; 0x26a <BTTransmitStr+0x74>
     26e:	00 c0       	rjmp	.+0      	; 0x270 <BTTransmitStr+0x7a>
     270:	00 00       	nop
     272:	08 95       	ret

00000274 <BTTransmitMsg>:
	}
	BTTransmitChar(0x55);
	
}

void BTTransmitMsg(char *theString, uint8_t len){
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
	uint16_t i;
	for(i=0;i<len;i++)
     278:	70 e0       	ldi	r23, 0x00	; 0
     27a:	61 15       	cp	r22, r1
     27c:	71 05       	cpc	r23, r1
     27e:	91 f0       	breq	.+36     	; 0x2a4 <BTTransmitMsg+0x30>
     280:	e8 2f       	mov	r30, r24
     282:	f9 2f       	mov	r31, r25
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	90 e0       	ldi	r25, 0x00	; 0
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     288:	a6 ec       	ldi	r26, 0xC6	; 198
     28a:	b0 e0       	ldi	r27, 0x00	; 0

void BTTransmitMsg(char *theString, uint8_t len){
	uint16_t i;
	for(i=0;i<len;i++)
	{
		BTTransmitChar(theString[i]);
     28c:	21 91       	ld	r18, Z+
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     28e:	2c 93       	st	X, r18
     290:	cf e1       	ldi	r28, 0x1F	; 31
     292:	de e4       	ldi	r29, 0x4E	; 78
     294:	21 97       	sbiw	r28, 0x01	; 1
     296:	f1 f7       	brne	.-4      	; 0x294 <BTTransmitMsg+0x20>
     298:	00 c0       	rjmp	.+0      	; 0x29a <BTTransmitMsg+0x26>
     29a:	00 00       	nop
	
}

void BTTransmitMsg(char *theString, uint8_t len){
	uint16_t i;
	for(i=0;i<len;i++)
     29c:	01 96       	adiw	r24, 0x01	; 1
     29e:	86 17       	cp	r24, r22
     2a0:	97 07       	cpc	r25, r23
     2a2:	a0 f3       	brcs	.-24     	; 0x28c <BTTransmitMsg+0x18>
	{
		BTTransmitChar(theString[i]);
	}
}
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	08 95       	ret

000002aa <reTransmit>:
#include "../Car/Sensors.h"
#include "../functiiParcare.h"

void prelucreazaDatele(void);

void reTransmit(void){
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	00 d0       	rcall	.+0      	; 0x2b0 <reTransmit+0x6>
     2b0:	00 d0       	rcall	.+0      	; 0x2b2 <reTransmit+0x8>
     2b2:	cd b7       	in	r28, 0x3d	; 61
     2b4:	de b7       	in	r29, 0x3e	; 62
	//trimite un semnal telefonului pentru a retransmite ultimul mesaj
	printf("Trimite din nou ultimul mesaj!!!");
     2b6:	83 e0       	ldi	r24, 0x03	; 3
     2b8:	91 e0       	ldi	r25, 0x01	; 1
     2ba:	9f 93       	push	r25
     2bc:	8f 93       	push	r24
     2be:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <printf>
	char msg[] = { StartByte, ReTransmitLastMsg, 0, 0x55 };
     2c2:	8a ea       	ldi	r24, 0xAA	; 170
     2c4:	89 83       	std	Y+1, r24	; 0x01
     2c6:	83 e1       	ldi	r24, 0x13	; 19
     2c8:	8a 83       	std	Y+2, r24	; 0x02
     2ca:	1b 82       	std	Y+3, r1	; 0x03
     2cc:	85 e5       	ldi	r24, 0x55	; 85
     2ce:	8c 83       	std	Y+4, r24	; 0x04
	BTTransmitMsg(msg, 4);
     2d0:	64 e0       	ldi	r22, 0x04	; 4
     2d2:	ce 01       	movw	r24, r28
     2d4:	01 96       	adiw	r24, 0x01	; 1
     2d6:	0e 94 3a 01 	call	0x274	; 0x274 <BTTransmitMsg>
}
     2da:	0f 90       	pop	r0
     2dc:	0f 90       	pop	r0
     2de:	0f 90       	pop	r0
     2e0:	0f 90       	pop	r0
     2e2:	0f 90       	pop	r0
     2e4:	0f 90       	pop	r0
     2e6:	df 91       	pop	r29
     2e8:	cf 91       	pop	r28
     2ea:	08 95       	ret

000002ec <BTProtocolReadByte>:
}

extern volatile uint8_t debugging;
extern volatile uint8_t iesire;
void BTProtocolReadByte(unsigned char theByte){
	cli();
     2ec:	f8 94       	cli
	switch (state){
     2ee:	90 91 02 01 	lds	r25, 0x0102
     2f2:	92 30       	cpi	r25, 0x02	; 2
     2f4:	21 f1       	breq	.+72     	; 0x33e <BTProtocolReadByte+0x52>
     2f6:	28 f4       	brcc	.+10     	; 0x302 <BTProtocolReadByte+0x16>
     2f8:	99 23       	and	r25, r25
     2fa:	49 f0       	breq	.+18     	; 0x30e <BTProtocolReadByte+0x22>
     2fc:	91 30       	cpi	r25, 0x01	; 1
     2fe:	91 f0       	breq	.+36     	; 0x324 <BTProtocolReadByte+0x38>
     300:	4d c0       	rjmp	.+154    	; 0x39c <BTProtocolReadByte+0xb0>
     302:	93 30       	cpi	r25, 0x03	; 3
     304:	81 f1       	breq	.+96     	; 0x366 <BTProtocolReadByte+0x7a>
     306:	94 30       	cpi	r25, 0x04	; 4
     308:	09 f4       	brne	.+2      	; 0x30c <BTProtocolReadByte+0x20>
     30a:	3f c0       	rjmp	.+126    	; 0x38a <BTProtocolReadByte+0x9e>
     30c:	47 c0       	rjmp	.+142    	; 0x39c <BTProtocolReadByte+0xb0>
		case WaitingStartByte:
			if(theByte == StartByte){
     30e:	8a 3a       	cpi	r24, 0xAA	; 170
     310:	09 f0       	breq	.+2      	; 0x314 <BTProtocolReadByte+0x28>
     312:	44 c0       	rjmp	.+136    	; 0x39c <BTProtocolReadByte+0xb0>
				state = WaitingCarAction;
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	80 93 02 01 	sts	0x0102, r24
				debugging = 0;
     31a:	10 92 00 01 	sts	0x0100, r1
				//addEntryToTimerQueue(&resetBTProtocol, 1000UL * 1000UL * 1000UL, Once);
				debugging = 1;
     31e:	80 93 00 01 	sts	0x0100, r24
     322:	3c c0       	rjmp	.+120    	; 0x39c <BTProtocolReadByte+0xb0>
			}
			break;

		case WaitingCarAction:
			if(theByte >= NoAction && theByte < EndAction){
     324:	8c 31       	cpi	r24, 0x1C	; 28
     326:	30 f4       	brcc	.+12     	; 0x334 <BTProtocolReadByte+0x48>
				state = WaitingDataLength;
     328:	92 e0       	ldi	r25, 0x02	; 2
     32a:	90 93 02 01 	sts	0x0102, r25
				actiune = theByte;
     32e:	80 93 2a 04 	sts	0x042A, r24
     332:	34 c0       	rjmp	.+104    	; 0x39c <BTProtocolReadByte+0xb0>
			}
			else{
				state = WaitingStartByte;
     334:	10 92 02 01 	sts	0x0102, r1
				reTransmit(); // error ocurred, send retransmit signal
     338:	0e 94 55 01 	call	0x2aa	; 0x2aa <reTransmit>
     33c:	2f c0       	rjmp	.+94     	; 0x39c <BTProtocolReadByte+0xb0>
			}
			break;

		case WaitingDataLength:
			if(theByte==0){
     33e:	81 11       	cpse	r24, r1
     340:	05 c0       	rjmp	.+10     	; 0x34c <BTProtocolReadByte+0x60>
				state = WaitingEndByte;
			}
			state = ReadingData;
			len = theByte;
     342:	10 92 35 04 	sts	0x0435, r1
			dateCrtIndex = 0;
     346:	10 92 29 04 	sts	0x0429, r1
     34a:	0a c0       	rjmp	.+20     	; 0x360 <BTProtocolReadByte+0x74>

		case WaitingDataLength:
			if(theByte==0){
				state = WaitingEndByte;
			}
			state = ReadingData;
     34c:	93 e0       	ldi	r25, 0x03	; 3
     34e:	90 93 02 01 	sts	0x0102, r25
			len = theByte;
     352:	80 93 35 04 	sts	0x0435, r24
			dateCrtIndex = 0;
     356:	10 92 29 04 	sts	0x0429, r1
			if(len<=0 || len>50)
     35a:	81 50       	subi	r24, 0x01	; 1
     35c:	82 33       	cpi	r24, 0x32	; 50
     35e:	f0 f0       	brcs	.+60     	; 0x39c <BTProtocolReadByte+0xb0>
			state=WaitingStartByte;
     360:	10 92 02 01 	sts	0x0102, r1
     364:	1b c0       	rjmp	.+54     	; 0x39c <BTProtocolReadByte+0xb0>
			break;

		case ReadingData:
			date[dateCrtIndex++] = theByte;
     366:	e0 91 29 04 	lds	r30, 0x0429
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	9e 0f       	add	r25, r30
     36e:	90 93 29 04 	sts	0x0429, r25
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	e5 5d       	subi	r30, 0xD5	; 213
     376:	fb 4f       	sbci	r31, 0xFB	; 251
     378:	80 83       	st	Z, r24
			if(dateCrtIndex >= len)
     37a:	80 91 35 04 	lds	r24, 0x0435
     37e:	98 17       	cp	r25, r24
     380:	68 f0       	brcs	.+26     	; 0x39c <BTProtocolReadByte+0xb0>
			state = WaitingEndByte;
     382:	84 e0       	ldi	r24, 0x04	; 4
     384:	80 93 02 01 	sts	0x0102, r24
     388:	09 c0       	rjmp	.+18     	; 0x39c <BTProtocolReadByte+0xb0>
			break;
		case WaitingEndByte:
			if(theByte != 0x55){
     38a:	85 35       	cpi	r24, 0x55	; 85
     38c:	19 f0       	breq	.+6      	; 0x394 <BTProtocolReadByte+0xa8>
				reTransmit(); // error ocurred, send retransmit signal
     38e:	0e 94 55 01 	call	0x2aa	; 0x2aa <reTransmit>
     392:	02 c0       	rjmp	.+4      	; 0x398 <BTProtocolReadByte+0xac>
			}
			else{
				prelucreazaDatele();
     394:	0e 94 7b 00 	call	0xf6	; 0xf6 <prelucreazaDatele>
			}
			state = WaitingStartByte;
     398:	10 92 02 01 	sts	0x0102, r1
			break;

	}
	sei();
     39c:	78 94       	sei
     39e:	08 95       	ret

000003a0 <BTInit>:
}

void BTInit()
{
	/*Pentru Receive*/
	UBRR0L = 25; //baud rate 9600 bps
     3a0:	89 e1       	ldi	r24, 0x19	; 25
     3a2:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B |= _BV(RXCIE0);
     3a6:	e1 ec       	ldi	r30, 0xC1	; 193
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	80 81       	ld	r24, Z
     3ac:	80 68       	ori	r24, 0x80	; 128
     3ae:	80 83       	st	Z, r24
	UCSR0B |= _BV(RXEN0);
     3b0:	80 81       	ld	r24, Z
     3b2:	80 61       	ori	r24, 0x10	; 16
     3b4:	80 83       	st	Z, r24
	UCSR0B |= _BV(TXEN0);
     3b6:	80 81       	ld	r24, Z
     3b8:	88 60       	ori	r24, 0x08	; 8
     3ba:	80 83       	st	Z, r24
		
	state = WaitingStartByte;
     3bc:	10 92 02 01 	sts	0x0102, r1
     3c0:	08 95       	ret

000003c2 <countSeconds>:
	char strBuffer[100];
	sprintf(strBuffer, "ic %lu, timep %lu", encoder1CNT, secondsPassed);
	BTTransmitStr(strBuffer);
}
void countSeconds(){
	secondsPassed ++;
     3c2:	80 91 1e 04 	lds	r24, 0x041E
     3c6:	90 91 1f 04 	lds	r25, 0x041F
     3ca:	a0 91 20 04 	lds	r26, 0x0420
     3ce:	b0 91 21 04 	lds	r27, 0x0421
     3d2:	01 96       	adiw	r24, 0x01	; 1
     3d4:	a1 1d       	adc	r26, r1
     3d6:	b1 1d       	adc	r27, r1
     3d8:	80 93 1e 04 	sts	0x041E, r24
     3dc:	90 93 1f 04 	sts	0x041F, r25
     3e0:	a0 93 20 04 	sts	0x0420, r26
     3e4:	b0 93 21 04 	sts	0x0421, r27
     3e8:	08 95       	ret

000003ea <stopEngines>:
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
}


void stopEngines(){
	OCR0A = 0;
     3ea:	17 bc       	out	0x27, r1	; 39
	OCR2A = 0;
     3ec:	10 92 b3 00 	sts	0x00B3, r1
	
	PORTD &= ~ 1<<PIND2;
     3f0:	8b b1       	in	r24, 0x0b	; 11
     3f2:	88 7f       	andi	r24, 0xF8	; 248
     3f4:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~ 1<<PIND4;
     3f6:	8b b1       	in	r24, 0x0b	; 11
     3f8:	80 7e       	andi	r24, 0xE0	; 224
     3fa:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~ 1<<PIND3;
     3fc:	8b b1       	in	r24, 0x0b	; 11
     3fe:	80 7f       	andi	r24, 0xF0	; 240
     400:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~ 1<<PIND5;
     402:	8b b1       	in	r24, 0x0b	; 11
     404:	80 7c       	andi	r24, 0xC0	; 192
     406:	8b b9       	out	0x0b, r24	; 11
	
	removeEntryFromTimerQueue(&countSeconds);
     408:	81 ee       	ldi	r24, 0xE1	; 225
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	0e 94 04 0a 	call	0x1408	; 0x1408 <removeEntryFromTimerQueue>
		
    BTTransmitStr("M-am oprit!");
     410:	84 e2       	ldi	r24, 0x24	; 36
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <BTTransmitStr>
     418:	08 95       	ret

0000041a <checkFreeParallelParkingPlace>:
	//setEnginesSpeed(RightEngines, 1, 0);
	//setEnginesSpeed(LeftEngines, 1, 0);
}
void checkFreeParallelParkingPlace(){
	
    BTTransmitStr("Start Free P P P!");
     41a:	80 e3       	ldi	r24, 0x30	; 48
     41c:	91 e0       	ldi	r25, 0x01	; 1
     41e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <BTTransmitStr>
     422:	08 95       	ret

00000424 <completeEnclosedContour>:
}
void completeEnclosedContour(){
    BTTransmitStr("Start complete enclosed contour!");
     424:	82 e4       	ldi	r24, 0x42	; 66
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <BTTransmitStr>
     42c:	08 95       	ret

0000042e <initEngines>:


void initEngines()
{
	
	OCR0A = 0;
     42e:	17 bc       	out	0x27, r1	; 39
	OCR2A = 0;
     430:	10 92 b3 00 	sts	0x00B3, r1
	
	//PINB|=(1<<PB3);
	
	
	DDRB |=1<<PINB3;
     434:	23 9a       	sbi	0x04, 3	; 4
	TCCR0A |=3;
     436:	84 b5       	in	r24, 0x24	; 36
     438:	83 60       	ori	r24, 0x03	; 3
     43a:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0A0);
     43c:	84 b5       	in	r24, 0x24	; 36
     43e:	80 64       	ori	r24, 0x40	; 64
     440:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0A1);
     442:	84 b5       	in	r24, 0x24	; 36
     444:	80 68       	ori	r24, 0x80	; 128
     446:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS00);
     448:	85 b5       	in	r24, 0x25	; 37
     44a:	81 60       	ori	r24, 0x01	; 1
     44c:	85 bd       	out	0x25, r24	; 37
	// motor 2
	
	DDRD |= (1 << PD7);
     44e:	57 9a       	sbi	0x0a, 7	; 10
	TCCR2A|=3;
     450:	e0 eb       	ldi	r30, 0xB0	; 176
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	80 81       	ld	r24, Z
     456:	83 60       	ori	r24, 0x03	; 3
     458:	80 83       	st	Z, r24
	TCCR2A |= (1 << COM2A0);
     45a:	80 81       	ld	r24, Z
     45c:	80 64       	ori	r24, 0x40	; 64
     45e:	80 83       	st	Z, r24
	TCCR2A |= (1 << COM2A1);
     460:	80 81       	ld	r24, Z
     462:	80 68       	ori	r24, 0x80	; 128
     464:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS20);
     466:	e1 eb       	ldi	r30, 0xB1	; 177
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	80 81       	ld	r24, Z
     46c:	81 60       	ori	r24, 0x01	; 1
     46e:	80 83       	st	Z, r24
	
		/*	PORTC |= 1<<PINC1;	
			PORTC |= 1<<PINC0;	*/
		
	//enable standby
	DDRB |= 1<<PINB5;
     470:	25 9a       	sbi	0x04, 5	; 4
	PORTB |= 1<<PINB5;	
     472:	2d 9a       	sbi	0x05, 5	; 5
	DDRB |= 1<<PINB4;
     474:	24 9a       	sbi	0x04, 4	; 4
	PORTB |= 1<<PINB4;
     476:	2c 9a       	sbi	0x05, 4	; 5
	
	
	//in1 & in2 4 left engines
	DDRD |= 1<<PIND3;
     478:	53 9a       	sbi	0x0a, 3	; 10
	DDRD |= 1<<PIND5;
     47a:	55 9a       	sbi	0x0a, 5	; 10
	PORTD &= ~ 1<<PIND3;
     47c:	8b b1       	in	r24, 0x0b	; 11
     47e:	80 7f       	andi	r24, 0xF0	; 240
     480:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~ 1<<PIND5;
     482:	8b b1       	in	r24, 0x0b	; 11
     484:	80 7c       	andi	r24, 0xC0	; 192
     486:	8b b9       	out	0x0b, r24	; 11
	
	//in1 & in2 4 left engines
	DDRD |= 1<<PIND2;
     488:	52 9a       	sbi	0x0a, 2	; 10
	DDRD |= 1<<PIND4;
     48a:	54 9a       	sbi	0x0a, 4	; 10
	PORTD &= ~ 1<<PIND2;
     48c:	8b b1       	in	r24, 0x0b	; 11
     48e:	88 7f       	andi	r24, 0xF8	; 248
     490:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~ 1<<PIND4;
     492:	8b b1       	in	r24, 0x0b	; 11
     494:	80 7e       	andi	r24, 0xE0	; 224
     496:	8b b9       	out	0x0b, r24	; 11
     498:	08 95       	ret

0000049a <setEnginesSpeed>:
	
}


void setEnginesSpeed(Engines engine, Sens sens, uint8_t viteza)
{
     49a:	1f 93       	push	r17
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	d8 2f       	mov	r29, r24
     4a2:	c6 2f       	mov	r28, r22
     4a4:	14 2f       	mov	r17, r20
	//PD2 (sens driver dreapta)
	//PD3 (sens driver stanga)
	
	//if(sens == SensFata)
	addEntryIfNotExists(&countSeconds, 1000UL*1000UL, Periodic);
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	40 e4       	ldi	r20, 0x40	; 64
     4aa:	52 e4       	ldi	r21, 0x42	; 66
     4ac:	6f e0       	ldi	r22, 0x0F	; 15
     4ae:	70 e0       	ldi	r23, 0x00	; 0
     4b0:	81 ee       	ldi	r24, 0xE1	; 225
     4b2:	91 e0       	ldi	r25, 0x01	; 1
     4b4:	0e 94 ac 0a 	call	0x1558	; 0x1558 <addEntryIfNotExists>
	viteza = 255 - viteza;
     4b8:	10 95       	com	r17
		
	if(engine==RightEngines){
     4ba:	d1 11       	cpse	r29, r1
     4bc:	0a c0       	rjmp	.+20     	; 0x4d2 <setEnginesSpeed+0x38>
		if(sens != SensFata){
     4be:	cc 23       	and	r28, r28
     4c0:	19 f0       	breq	.+6      	; 0x4c8 <setEnginesSpeed+0x2e>
			PORTD &= ~ (1<<PIND2);
     4c2:	5a 98       	cbi	0x0b, 2	; 11
			PORTD |=  1<<PIND4;
     4c4:	5c 9a       	sbi	0x0b, 4	; 11
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <setEnginesSpeed+0x32>
		}			
		else{
			PORTD |=  1<<PIND2;
     4c8:	5a 9a       	sbi	0x0b, 2	; 11
			PORTD &= ~( 1<<PIND4);
     4ca:	5c 98       	cbi	0x0b, 4	; 11
		}
		OCR2A = viteza;	
     4cc:	10 93 b3 00 	sts	0x00B3, r17
     4d0:	08 c0       	rjmp	.+16     	; 0x4e2 <setEnginesSpeed+0x48>
	}
	else
	{
		if(sens != SensFata){	
     4d2:	cc 23       	and	r28, r28
     4d4:	19 f0       	breq	.+6      	; 0x4dc <setEnginesSpeed+0x42>
			PORTD |=  1<<PIND3;
     4d6:	5b 9a       	sbi	0x0b, 3	; 11
			PORTD &= ~ (1<<PIND5);
     4d8:	5d 98       	cbi	0x0b, 5	; 11
     4da:	02 c0       	rjmp	.+4      	; 0x4e0 <setEnginesSpeed+0x46>
		}			
		else{			
			PORTD &= ~ (1<<PIND3);
     4dc:	5b 98       	cbi	0x0b, 3	; 11
			PORTD |=  1<<PIND5;		
     4de:	5d 9a       	sbi	0x0b, 5	; 11
		}
		OCR0A = viteza;
     4e0:	17 bd       	out	0x27, r17	; 39
	}		
}
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	1f 91       	pop	r17
     4e8:	08 95       	ret

000004ea <goFront>:
#include "../Timing/Timing.h"

void setEnginesSpeed(Engines, Sens, uint8_t);
void countSeconds();

void goFront(uint8_t timp, uint8_t viteza){	
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	d8 2f       	mov	r29, r24
     4f0:	c6 2f       	mov	r28, r22
	setEnginesSpeed(RightEngines, SensFata, viteza);
     4f2:	46 2f       	mov	r20, r22
     4f4:	60 e0       	ldi	r22, 0x00	; 0
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	0e 94 4d 02 	call	0x49a	; 0x49a <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensFata, viteza);
     4fc:	4c 2f       	mov	r20, r28
     4fe:	60 e0       	ldi	r22, 0x00	; 0
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	0e 94 4d 02 	call	0x49a	; 0x49a <setEnginesSpeed>
	removeEntryFromTimerQueue(&stopEngines);
     506:	85 ef       	ldi	r24, 0xF5	; 245
     508:	91 e0       	ldi	r25, 0x01	; 1
     50a:	0e 94 04 0a 	call	0x1408	; 0x1408 <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);	
     50e:	ad 2f       	mov	r26, r29
     510:	b0 e0       	ldi	r27, 0x00	; 0
     512:	20 e4       	ldi	r18, 0x40	; 64
     514:	32 e4       	ldi	r19, 0x42	; 66
     516:	4f e0       	ldi	r20, 0x0F	; 15
     518:	50 e0       	ldi	r21, 0x00	; 0
     51a:	0e 94 6f 0c 	call	0x18de	; 0x18de <__muluhisi3>
     51e:	ab 01       	movw	r20, r22
     520:	bc 01       	movw	r22, r24
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	85 ef       	ldi	r24, 0xF5	; 245
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	0e 94 03 09 	call	0x1206	; 0x1206 <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inainte!");
     52c:	83 e6       	ldi	r24, 0x63	; 99
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <BTTransmitStr>
}
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	08 95       	ret

0000053a <goBack>:
void goBack(uint8_t timp, uint8_t viteza){
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	d8 2f       	mov	r29, r24
     540:	c6 2f       	mov	r28, r22
	setEnginesSpeed(RightEngines, SensSpate, viteza);
     542:	46 2f       	mov	r20, r22
     544:	61 e0       	ldi	r22, 0x01	; 1
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	0e 94 4d 02 	call	0x49a	; 0x49a <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensSpate, viteza);
     54c:	4c 2f       	mov	r20, r28
     54e:	61 e0       	ldi	r22, 0x01	; 1
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	0e 94 4d 02 	call	0x49a	; 0x49a <setEnginesSpeed>
	removeEntryFromTimerQueue(&stopEngines);
     556:	85 ef       	ldi	r24, 0xF5	; 245
     558:	91 e0       	ldi	r25, 0x01	; 1
     55a:	0e 94 04 0a 	call	0x1408	; 0x1408 <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     55e:	ad 2f       	mov	r26, r29
     560:	b0 e0       	ldi	r27, 0x00	; 0
     562:	20 e4       	ldi	r18, 0x40	; 64
     564:	32 e4       	ldi	r19, 0x42	; 66
     566:	4f e0       	ldi	r20, 0x0F	; 15
     568:	50 e0       	ldi	r21, 0x00	; 0
     56a:	0e 94 6f 0c 	call	0x18de	; 0x18de <__muluhisi3>
     56e:	ab 01       	movw	r20, r22
     570:	bc 01       	movw	r22, r24
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	85 ef       	ldi	r24, 0xF5	; 245
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	0e 94 03 09 	call	0x1206	; 0x1206 <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inapoi!");
     57c:	83 e7       	ldi	r24, 0x73	; 115
     57e:	91 e0       	ldi	r25, 0x01	; 1
     580:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <BTTransmitStr>
}
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	08 95       	ret

0000058a <goFrontLeft>:

void goFrontLeft(uint8_t timp, uint8_t viteza){
     58a:	cf 93       	push	r28
     58c:	c8 2f       	mov	r28, r24
     58e:	46 2f       	mov	r20, r22
	
	setEnginesSpeed(RightEngines, SensFata, viteza);
     590:	60 e0       	ldi	r22, 0x00	; 0
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	0e 94 4d 02 	call	0x49a	; 0x49a <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensFata, 10);
     598:	4a e0       	ldi	r20, 0x0A	; 10
     59a:	60 e0       	ldi	r22, 0x00	; 0
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	0e 94 4d 02 	call	0x49a	; 0x49a <setEnginesSpeed>
	removeEntryFromTimerQueue(&stopEngines);
     5a2:	85 ef       	ldi	r24, 0xF5	; 245
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	0e 94 04 0a 	call	0x1408	; 0x1408 <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     5aa:	ac 2f       	mov	r26, r28
     5ac:	b0 e0       	ldi	r27, 0x00	; 0
     5ae:	20 e4       	ldi	r18, 0x40	; 64
     5b0:	32 e4       	ldi	r19, 0x42	; 66
     5b2:	4f e0       	ldi	r20, 0x0F	; 15
     5b4:	50 e0       	ldi	r21, 0x00	; 0
     5b6:	0e 94 6f 0c 	call	0x18de	; 0x18de <__muluhisi3>
     5ba:	ab 01       	movw	r20, r22
     5bc:	bc 01       	movw	r22, r24
     5be:	20 e0       	ldi	r18, 0x00	; 0
     5c0:	85 ef       	ldi	r24, 0xF5	; 245
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	0e 94 03 09 	call	0x1206	; 0x1206 <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inainte stanga!");
     5c8:	82 e8       	ldi	r24, 0x82	; 130
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <BTTransmitStr>
}
     5d0:	cf 91       	pop	r28
     5d2:	08 95       	ret

000005d4 <goFrontRight>:
void goFrontRight(uint8_t timp, uint8_t viteza){
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	c8 2f       	mov	r28, r24
     5da:	d6 2f       	mov	r29, r22
	
	setEnginesSpeed(RightEngines, SensFata, 10);
     5dc:	4a e0       	ldi	r20, 0x0A	; 10
     5de:	60 e0       	ldi	r22, 0x00	; 0
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	0e 94 4d 02 	call	0x49a	; 0x49a <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensFata, viteza);
     5e6:	4d 2f       	mov	r20, r29
     5e8:	60 e0       	ldi	r22, 0x00	; 0
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	0e 94 4d 02 	call	0x49a	; 0x49a <setEnginesSpeed>
	removeEntryFromTimerQueue(&stopEngines);
     5f0:	85 ef       	ldi	r24, 0xF5	; 245
     5f2:	91 e0       	ldi	r25, 0x01	; 1
     5f4:	0e 94 04 0a 	call	0x1408	; 0x1408 <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     5f8:	ac 2f       	mov	r26, r28
     5fa:	b0 e0       	ldi	r27, 0x00	; 0
     5fc:	20 e4       	ldi	r18, 0x40	; 64
     5fe:	32 e4       	ldi	r19, 0x42	; 66
     600:	4f e0       	ldi	r20, 0x0F	; 15
     602:	50 e0       	ldi	r21, 0x00	; 0
     604:	0e 94 6f 0c 	call	0x18de	; 0x18de <__muluhisi3>
     608:	ab 01       	movw	r20, r22
     60a:	bc 01       	movw	r22, r24
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	85 ef       	ldi	r24, 0xF5	; 245
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	0e 94 03 09 	call	0x1206	; 0x1206 <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inainte dreapta!");
     616:	89 e9       	ldi	r24, 0x99	; 153
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <BTTransmitStr>
}
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	08 95       	ret

00000624 <goBackLeft>:

void goBackLeft(uint8_t timp, uint8_t viteza){
     624:	cf 93       	push	r28
     626:	c8 2f       	mov	r28, r24
     628:	46 2f       	mov	r20, r22
	
	setEnginesSpeed(RightEngines, SensSpate, viteza);
     62a:	61 e0       	ldi	r22, 0x01	; 1
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	0e 94 4d 02 	call	0x49a	; 0x49a <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensSpate, 10);
     632:	4a e0       	ldi	r20, 0x0A	; 10
     634:	61 e0       	ldi	r22, 0x01	; 1
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	0e 94 4d 02 	call	0x49a	; 0x49a <setEnginesSpeed>
	removeEntryFromTimerQueue(&stopEngines);
     63c:	85 ef       	ldi	r24, 0xF5	; 245
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	0e 94 04 0a 	call	0x1408	; 0x1408 <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     644:	ac 2f       	mov	r26, r28
     646:	b0 e0       	ldi	r27, 0x00	; 0
     648:	20 e4       	ldi	r18, 0x40	; 64
     64a:	32 e4       	ldi	r19, 0x42	; 66
     64c:	4f e0       	ldi	r20, 0x0F	; 15
     64e:	50 e0       	ldi	r21, 0x00	; 0
     650:	0e 94 6f 0c 	call	0x18de	; 0x18de <__muluhisi3>
     654:	ab 01       	movw	r20, r22
     656:	bc 01       	movw	r22, r24
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	85 ef       	ldi	r24, 0xF5	; 245
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	0e 94 03 09 	call	0x1206	; 0x1206 <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inapoi stanga!");
     662:	81 eb       	ldi	r24, 0xB1	; 177
     664:	91 e0       	ldi	r25, 0x01	; 1
     666:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <BTTransmitStr>
}
     66a:	cf 91       	pop	r28
     66c:	08 95       	ret

0000066e <goBackRight>:
void goBackRight(uint8_t timp, uint8_t viteza){
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	c8 2f       	mov	r28, r24
     674:	d6 2f       	mov	r29, r22
	
	setEnginesSpeed(RightEngines, SensSpate, 10);
     676:	4a e0       	ldi	r20, 0x0A	; 10
     678:	61 e0       	ldi	r22, 0x01	; 1
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	0e 94 4d 02 	call	0x49a	; 0x49a <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensSpate, viteza);
     680:	4d 2f       	mov	r20, r29
     682:	61 e0       	ldi	r22, 0x01	; 1
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	0e 94 4d 02 	call	0x49a	; 0x49a <setEnginesSpeed>
	removeEntryFromTimerQueue(&stopEngines);
     68a:	85 ef       	ldi	r24, 0xF5	; 245
     68c:	91 e0       	ldi	r25, 0x01	; 1
     68e:	0e 94 04 0a 	call	0x1408	; 0x1408 <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     692:	ac 2f       	mov	r26, r28
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	20 e4       	ldi	r18, 0x40	; 64
     698:	32 e4       	ldi	r19, 0x42	; 66
     69a:	4f e0       	ldi	r20, 0x0F	; 15
     69c:	50 e0       	ldi	r21, 0x00	; 0
     69e:	0e 94 6f 0c 	call	0x18de	; 0x18de <__muluhisi3>
     6a2:	ab 01       	movw	r20, r22
     6a4:	bc 01       	movw	r22, r24
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	85 ef       	ldi	r24, 0xF5	; 245
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	0e 94 03 09 	call	0x1206	; 0x1206 <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inapoi dreapta!");
     6b0:	87 ec       	ldi	r24, 0xC7	; 199
     6b2:	91 e0       	ldi	r25, 0x01	; 1
     6b4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <BTTransmitStr>
}
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	08 95       	ret

000006be <rotirePeLoc>:
void rotirePeLoc(uint8_t timp, uint8_t viteza,  uint8_t engines){
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	d8 2f       	mov	r29, r24
     6c4:	c6 2f       	mov	r28, r22
	
	if(engines == RightEngines){
     6c6:	41 11       	cpse	r20, r1
     6c8:	0f c0       	rjmp	.+30     	; 0x6e8 <rotirePeLoc+0x2a>
		setEnginesSpeed(LeftEngines, SensSpate,  viteza);
     6ca:	46 2f       	mov	r20, r22
     6cc:	61 e0       	ldi	r22, 0x01	; 1
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	0e 94 4d 02 	call	0x49a	; 0x49a <setEnginesSpeed>
		setEnginesSpeed(RightEngines, SensFata, viteza);
     6d4:	4c 2f       	mov	r20, r28
     6d6:	60 e0       	ldi	r22, 0x00	; 0
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	0e 94 4d 02 	call	0x49a	; 0x49a <setEnginesSpeed>
		BTTransmitStr("ma rotesc spre dreapta");
     6de:	8e ed       	ldi	r24, 0xDE	; 222
     6e0:	91 e0       	ldi	r25, 0x01	; 1
     6e2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <BTTransmitStr>
     6e6:	0e c0       	rjmp	.+28     	; 0x704 <rotirePeLoc+0x46>
	}
	else {
		setEnginesSpeed(LeftEngines, SensFata, viteza);
     6e8:	46 2f       	mov	r20, r22
     6ea:	60 e0       	ldi	r22, 0x00	; 0
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	0e 94 4d 02 	call	0x49a	; 0x49a <setEnginesSpeed>
		setEnginesSpeed(RightEngines, SensSpate, viteza);
     6f2:	4c 2f       	mov	r20, r28
     6f4:	61 e0       	ldi	r22, 0x01	; 1
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	0e 94 4d 02 	call	0x49a	; 0x49a <setEnginesSpeed>
		BTTransmitStr("ma rotesc spre stanga");
     6fc:	85 ef       	ldi	r24, 0xF5	; 245
     6fe:	91 e0       	ldi	r25, 0x01	; 1
     700:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <BTTransmitStr>
	}
	removeEntryFromTimerQueue(&stopEngines);
     704:	85 ef       	ldi	r24, 0xF5	; 245
     706:	91 e0       	ldi	r25, 0x01	; 1
     708:	0e 94 04 0a 	call	0x1408	; 0x1408 <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     70c:	ad 2f       	mov	r26, r29
     70e:	b0 e0       	ldi	r27, 0x00	; 0
     710:	20 e4       	ldi	r18, 0x40	; 64
     712:	32 e4       	ldi	r19, 0x42	; 66
     714:	4f e0       	ldi	r20, 0x0F	; 15
     716:	50 e0       	ldi	r21, 0x00	; 0
     718:	0e 94 6f 0c 	call	0x18de	; 0x18de <__muluhisi3>
     71c:	ab 01       	movw	r20, r22
     71e:	bc 01       	movw	r22, r24
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	85 ef       	ldi	r24, 0xF5	; 245
     724:	91 e0       	ldi	r25, 0x01	; 1
     726:	0e 94 03 09 	call	0x1206	; 0x1206 <addEntryToTimerQueue>
}
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	08 95       	ret

00000730 <getAverageSpeed>:
	}		
}

volatile uint32_t encoder1CNT, encoder2CNT;
volatile uint32_t secondsPassed = 0;
void getAverageSpeed(uint8_t reset){
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
     73c:	c4 56       	subi	r28, 0x64	; 100
     73e:	d1 09       	sbc	r29, r1
     740:	0f b6       	in	r0, 0x3f	; 63
     742:	f8 94       	cli
     744:	de bf       	out	0x3e, r29	; 62
     746:	0f be       	out	0x3f, r0	; 63
     748:	cd bf       	out	0x3d, r28	; 61
	if(reset){
     74a:	88 23       	and	r24, r24
     74c:	c9 f0       	breq	.+50     	; 0x780 <getAverageSpeed+0x50>
		encoder2CNT = encoder1CNT = 0;
     74e:	10 92 36 04 	sts	0x0436, r1
     752:	10 92 37 04 	sts	0x0437, r1
     756:	10 92 38 04 	sts	0x0438, r1
     75a:	10 92 39 04 	sts	0x0439, r1
     75e:	10 92 3a 04 	sts	0x043A, r1
     762:	10 92 3b 04 	sts	0x043B, r1
     766:	10 92 3c 04 	sts	0x043C, r1
     76a:	10 92 3d 04 	sts	0x043D, r1
		secondsPassed = 0;
     76e:	10 92 1e 04 	sts	0x041E, r1
     772:	10 92 1f 04 	sts	0x041F, r1
     776:	10 92 20 04 	sts	0x0420, r1
     77a:	10 92 21 04 	sts	0x0421, r1
     77e:	2b c0       	rjmp	.+86     	; 0x7d6 <getAverageSpeed+0xa6>
		return;
	}
	char strBuffer[100];
	sprintf(strBuffer, "ic %lu, timep %lu", encoder1CNT, secondsPassed);
     780:	40 91 1e 04 	lds	r20, 0x041E
     784:	50 91 1f 04 	lds	r21, 0x041F
     788:	60 91 20 04 	lds	r22, 0x0420
     78c:	70 91 21 04 	lds	r23, 0x0421
     790:	80 91 36 04 	lds	r24, 0x0436
     794:	90 91 37 04 	lds	r25, 0x0437
     798:	a0 91 38 04 	lds	r26, 0x0438
     79c:	b0 91 39 04 	lds	r27, 0x0439
     7a0:	7f 93       	push	r23
     7a2:	6f 93       	push	r22
     7a4:	5f 93       	push	r21
     7a6:	4f 93       	push	r20
     7a8:	bf 93       	push	r27
     7aa:	af 93       	push	r26
     7ac:	9f 93       	push	r25
     7ae:	8f 93       	push	r24
     7b0:	8b e0       	ldi	r24, 0x0B	; 11
     7b2:	92 e0       	ldi	r25, 0x02	; 2
     7b4:	9f 93       	push	r25
     7b6:	8f 93       	push	r24
     7b8:	8e 01       	movw	r16, r28
     7ba:	0f 5f       	subi	r16, 0xFF	; 255
     7bc:	1f 4f       	sbci	r17, 0xFF	; 255
     7be:	1f 93       	push	r17
     7c0:	0f 93       	push	r16
     7c2:	0e 94 8e 0c 	call	0x191c	; 0x191c <sprintf>
	BTTransmitStr(strBuffer);
     7c6:	c8 01       	movw	r24, r16
     7c8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <BTTransmitStr>
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	f8 94       	cli
     7d0:	de bf       	out	0x3e, r29	; 62
     7d2:	0f be       	out	0x3f, r0	; 63
     7d4:	cd bf       	out	0x3d, r28	; 61
}
     7d6:	cc 59       	subi	r28, 0x9C	; 156
     7d8:	df 4f       	sbci	r29, 0xFF	; 255
     7da:	0f b6       	in	r0, 0x3f	; 63
     7dc:	f8 94       	cli
     7de:	de bf       	out	0x3e, r29	; 62
     7e0:	0f be       	out	0x3f, r0	; 63
     7e2:	cd bf       	out	0x3d, r28	; 61
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
     7ec:	08 95       	ret

000007ee <resetEncoders>:
void countSeconds(){
	secondsPassed ++;
}
void resetEncoders(){
	encoder2CNT = encoder1CNT = 0;
     7ee:	10 92 36 04 	sts	0x0436, r1
     7f2:	10 92 37 04 	sts	0x0437, r1
     7f6:	10 92 38 04 	sts	0x0438, r1
     7fa:	10 92 39 04 	sts	0x0439, r1
     7fe:	10 92 3a 04 	sts	0x043A, r1
     802:	10 92 3b 04 	sts	0x043B, r1
     806:	10 92 3c 04 	sts	0x043C, r1
     80a:	10 92 3d 04 	sts	0x043D, r1
     80e:	08 95       	ret

00000810 <sendSensor>:
volatile uint8_t sensorsToRead, sensorsToSend;
char msgBuffer[50];
volatile uint16_t oldValue[4];
volatile uint32_t lastCMValue[4];

void sendSensor(){
     810:	ef 92       	push	r14
     812:	ff 92       	push	r15
     814:	0f 93       	push	r16
     816:	1f 93       	push	r17
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	c0 e0       	ldi	r28, 0x00	; 0
     81e:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	
	for(i=0;i<4;i++){		
		if(sensorsToSend & (1<<i)){			
			sprintf(msgBuffer, "sensor #%d = %lu", i, lastCMValue[i]);			
     820:	0f 2e       	mov	r0, r31
     822:	fd e1       	ldi	r31, 0x1D	; 29
     824:	ef 2e       	mov	r14, r31
     826:	f2 e0       	ldi	r31, 0x02	; 2
     828:	ff 2e       	mov	r15, r31
     82a:	f0 2d       	mov	r31, r0
     82c:	06 e5       	ldi	r16, 0x56	; 86
     82e:	14 e0       	ldi	r17, 0x04	; 4

void sendSensor(){
	uint8_t i;
	
	for(i=0;i<4;i++){		
		if(sensorsToSend & (1<<i)){			
     830:	80 91 89 04 	lds	r24, 0x0489
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	0c 2e       	mov	r0, r28
     838:	02 c0       	rjmp	.+4      	; 0x83e <sendSensor+0x2e>
     83a:	95 95       	asr	r25
     83c:	87 95       	ror	r24
     83e:	0a 94       	dec	r0
     840:	e2 f7       	brpl	.-8      	; 0x83a <sendSensor+0x2a>
     842:	80 ff       	sbrs	r24, 0
     844:	22 c0       	rjmp	.+68     	; 0x88a <sendSensor+0x7a>
			sprintf(msgBuffer, "sensor #%d = %lu", i, lastCMValue[i]);			
     846:	fe 01       	movw	r30, r28
     848:	ee 0f       	add	r30, r30
     84a:	ff 1f       	adc	r31, r31
     84c:	ee 0f       	add	r30, r30
     84e:	ff 1f       	adc	r31, r31
     850:	ea 5b       	subi	r30, 0xBA	; 186
     852:	fb 4f       	sbci	r31, 0xFB	; 251
     854:	40 81       	ld	r20, Z
     856:	51 81       	ldd	r21, Z+1	; 0x01
     858:	62 81       	ldd	r22, Z+2	; 0x02
     85a:	73 81       	ldd	r23, Z+3	; 0x03
     85c:	7f 93       	push	r23
     85e:	6f 93       	push	r22
     860:	5f 93       	push	r21
     862:	4f 93       	push	r20
     864:	df 93       	push	r29
     866:	cf 93       	push	r28
     868:	ff 92       	push	r15
     86a:	ef 92       	push	r14
     86c:	1f 93       	push	r17
     86e:	0f 93       	push	r16
     870:	0e 94 8e 0c 	call	0x191c	; 0x191c <sprintf>
			BTTransmitStr(msgBuffer);			
     874:	c8 01       	movw	r24, r16
     876:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <BTTransmitStr>
     87a:	8d b7       	in	r24, 0x3d	; 61
     87c:	9e b7       	in	r25, 0x3e	; 62
     87e:	0a 96       	adiw	r24, 0x0a	; 10
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	f8 94       	cli
     884:	9e bf       	out	0x3e, r25	; 62
     886:	0f be       	out	0x3f, r0	; 63
     888:	8d bf       	out	0x3d, r24	; 61
     88a:	21 96       	adiw	r28, 0x01	; 1
volatile uint32_t lastCMValue[4];

void sendSensor(){
	uint8_t i;
	
	for(i=0;i<4;i++){		
     88c:	c4 30       	cpi	r28, 0x04	; 4
     88e:	d1 05       	cpc	r29, r1
     890:	79 f6       	brne	.-98     	; 0x830 <sendSensor+0x20>
		if(sensorsToSend & (1<<i)){			
			sprintf(msgBuffer, "sensor #%d = %lu", i, lastCMValue[i]);			
			BTTransmitStr(msgBuffer);			
		}
	}
}
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	1f 91       	pop	r17
     898:	0f 91       	pop	r16
     89a:	ff 90       	pop	r15
     89c:	ef 90       	pop	r14
     89e:	08 95       	ret

000008a0 <toggleSensorSend>:
void readSensors();
void toggleSensorSend(Sensor sensor){
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
	sensorsToSend ^= 1<<sensor;
     8a4:	40 91 89 04 	lds	r20, 0x0489
     8a8:	21 e0       	ldi	r18, 0x01	; 1
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	b9 01       	movw	r22, r18
     8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <toggleSensorSend+0x14>
     8b0:	66 0f       	add	r22, r22
     8b2:	77 1f       	adc	r23, r23
     8b4:	8a 95       	dec	r24
     8b6:	e2 f7       	brpl	.-8      	; 0x8b0 <toggleSensorSend+0x10>
     8b8:	cb 01       	movw	r24, r22
     8ba:	84 27       	eor	r24, r20
     8bc:	80 93 89 04 	sts	0x0489, r24
	
	sprintf(msgBuffer, "sensorsToSend %d %d %d %d ", sensorsToSend&1, (sensorsToSend&2)>>1, (sensorsToSend&4)>>2, (sensorsToSend&8)>>3);
     8c0:	30 91 89 04 	lds	r19, 0x0489
     8c4:	20 91 89 04 	lds	r18, 0x0489
     8c8:	90 91 89 04 	lds	r25, 0x0489
     8cc:	80 91 89 04 	lds	r24, 0x0489
     8d0:	33 fb       	bst	r19, 3
     8d2:	33 27       	eor	r19, r19
     8d4:	30 f9       	bld	r19, 0
     8d6:	1f 92       	push	r1
     8d8:	3f 93       	push	r19
     8da:	22 fb       	bst	r18, 2
     8dc:	22 27       	eor	r18, r18
     8de:	20 f9       	bld	r18, 0
     8e0:	1f 92       	push	r1
     8e2:	2f 93       	push	r18
     8e4:	96 95       	lsr	r25
     8e6:	91 70       	andi	r25, 0x01	; 1
     8e8:	1f 92       	push	r1
     8ea:	9f 93       	push	r25
     8ec:	81 70       	andi	r24, 0x01	; 1
     8ee:	1f 92       	push	r1
     8f0:	8f 93       	push	r24
     8f2:	8e e2       	ldi	r24, 0x2E	; 46
     8f4:	92 e0       	ldi	r25, 0x02	; 2
     8f6:	9f 93       	push	r25
     8f8:	8f 93       	push	r24
     8fa:	c6 e5       	ldi	r28, 0x56	; 86
     8fc:	d4 e0       	ldi	r29, 0x04	; 4
     8fe:	df 93       	push	r29
     900:	cf 93       	push	r28
     902:	0e 94 8e 0c 	call	0x191c	; 0x191c <sprintf>
	BTTransmitStr(msgBuffer);
     906:	ce 01       	movw	r24, r28
     908:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <BTTransmitStr>
	sprintf(msgBuffer, "sensorsToRead %d %d %d %d <<--", sensorsToRead&1, (sensorsToRead&2)>>1, (sensorsToRead&4)>>2, (sensorsToRead&8)>>3);
     90c:	30 91 88 04 	lds	r19, 0x0488
     910:	20 91 88 04 	lds	r18, 0x0488
     914:	90 91 88 04 	lds	r25, 0x0488
     918:	80 91 88 04 	lds	r24, 0x0488
     91c:	33 fb       	bst	r19, 3
     91e:	33 27       	eor	r19, r19
     920:	30 f9       	bld	r19, 0
     922:	1f 92       	push	r1
     924:	3f 93       	push	r19
     926:	22 fb       	bst	r18, 2
     928:	22 27       	eor	r18, r18
     92a:	20 f9       	bld	r18, 0
     92c:	1f 92       	push	r1
     92e:	2f 93       	push	r18
     930:	96 95       	lsr	r25
     932:	91 70       	andi	r25, 0x01	; 1
     934:	1f 92       	push	r1
     936:	9f 93       	push	r25
     938:	81 70       	andi	r24, 0x01	; 1
     93a:	1f 92       	push	r1
     93c:	8f 93       	push	r24
     93e:	89 e4       	ldi	r24, 0x49	; 73
     940:	92 e0       	ldi	r25, 0x02	; 2
     942:	9f 93       	push	r25
     944:	8f 93       	push	r24
     946:	df 93       	push	r29
     948:	cf 93       	push	r28
     94a:	0e 94 8e 0c 	call	0x191c	; 0x191c <sprintf>
	BTTransmitStr(msgBuffer);
     94e:	ce 01       	movw	r24, r28
     950:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <BTTransmitStr>
	
	uint8_t existsInTimerQueue = existsEntryInTimerQueue(&sendSensor);
     954:	88 e0       	ldi	r24, 0x08	; 8
     956:	94 e0       	ldi	r25, 0x04	; 4
     958:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <existsEntryInTimerQueue>
	//toggleSensorRead(sensor);
	if(sensorsToSend && !existsInTimerQueue){
     95c:	90 91 89 04 	lds	r25, 0x0489
     960:	6d b7       	in	r22, 0x3d	; 61
     962:	7e b7       	in	r23, 0x3e	; 62
     964:	68 5e       	subi	r22, 0xE8	; 232
     966:	7f 4f       	sbci	r23, 0xFF	; 255
     968:	0f b6       	in	r0, 0x3f	; 63
     96a:	f8 94       	cli
     96c:	7e bf       	out	0x3e, r23	; 62
     96e:	0f be       	out	0x3f, r0	; 63
     970:	6d bf       	out	0x3d, r22	; 61
     972:	99 23       	and	r25, r25
     974:	61 f0       	breq	.+24     	; 0x98e <toggleSensorSend+0xee>
     976:	81 11       	cpse	r24, r1
     978:	15 c0       	rjmp	.+42     	; 0x9a4 <toggleSensorSend+0x104>
		addEntryToTimerQueue(&sendSensor, 1000UL * 1000UL, Periodic);
     97a:	21 e0       	ldi	r18, 0x01	; 1
     97c:	40 e4       	ldi	r20, 0x40	; 64
     97e:	52 e4       	ldi	r21, 0x42	; 66
     980:	6f e0       	ldi	r22, 0x0F	; 15
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	88 e0       	ldi	r24, 0x08	; 8
     986:	94 e0       	ldi	r25, 0x04	; 4
     988:	0e 94 03 09 	call	0x1206	; 0x1206 <addEntryToTimerQueue>
     98c:	0f c0       	rjmp	.+30     	; 0x9ac <toggleSensorSend+0x10c>
	}
	else{
		if(!sensorsToSend && existsInTimerQueue)
     98e:	90 91 89 04 	lds	r25, 0x0489
     992:	91 11       	cpse	r25, r1
     994:	0b c0       	rjmp	.+22     	; 0x9ac <toggleSensorSend+0x10c>
     996:	88 23       	and	r24, r24
     998:	49 f0       	breq	.+18     	; 0x9ac <toggleSensorSend+0x10c>
		removeEntryFromTimerQueue(&sendSensor);
     99a:	88 e0       	ldi	r24, 0x08	; 8
     99c:	94 e0       	ldi	r25, 0x04	; 4
     99e:	0e 94 04 0a 	call	0x1408	; 0x1408 <removeEntryFromTimerQueue>
     9a2:	04 c0       	rjmp	.+8      	; 0x9ac <toggleSensorSend+0x10c>
	//toggleSensorRead(sensor);
	if(sensorsToSend && !existsInTimerQueue){
		addEntryToTimerQueue(&sendSensor, 1000UL * 1000UL, Periodic);
	}
	else{
		if(!sensorsToSend && existsInTimerQueue)
     9a4:	80 91 89 04 	lds	r24, 0x0489
     9a8:	88 23       	and	r24, r24
     9aa:	b9 f3       	breq	.-18     	; 0x99a <toggleSensorSend+0xfa>
		removeEntryFromTimerQueue(&sendSensor);
	}
}
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	08 95       	ret

000009b2 <toggleSensorRead>:
		lastCMValue[2] = getValueOfSensor3(2);
	if(sensorsToRead & 8)
		lastCMValue[3] = getValueOfSensor3(3);
}
void toggleSensorRead(Sensor sensor){
	sensorsToRead ^= 1<<sensor;
     9b2:	40 91 88 04 	lds	r20, 0x0488
     9b6:	21 e0       	ldi	r18, 0x01	; 1
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	b9 01       	movw	r22, r18
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <toggleSensorRead+0x10>
     9be:	66 0f       	add	r22, r22
     9c0:	77 1f       	adc	r23, r23
     9c2:	8a 95       	dec	r24
     9c4:	e2 f7       	brpl	.-8      	; 0x9be <toggleSensorRead+0xc>
     9c6:	cb 01       	movw	r24, r22
     9c8:	84 27       	eor	r24, r20
     9ca:	80 93 88 04 	sts	0x0488, r24
	
	uint8_t existsInTimerQueue = existsEntryInTimerQueue(&readSensors);
     9ce:	84 e4       	ldi	r24, 0x44	; 68
     9d0:	96 e0       	ldi	r25, 0x06	; 6
     9d2:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <existsEntryInTimerQueue>
	
	if(sensorsToRead && !existsInTimerQueue){
     9d6:	90 91 88 04 	lds	r25, 0x0488
     9da:	99 23       	and	r25, r25
     9dc:	61 f0       	breq	.+24     	; 0x9f6 <toggleSensorRead+0x44>
     9de:	81 11       	cpse	r24, r1
     9e0:	15 c0       	rjmp	.+42     	; 0xa0c <toggleSensorRead+0x5a>
		addEntryToTimerQueue(&readSensors, 100UL * 1000UL, Periodic);		
     9e2:	21 e0       	ldi	r18, 0x01	; 1
     9e4:	40 ea       	ldi	r20, 0xA0	; 160
     9e6:	56 e8       	ldi	r21, 0x86	; 134
     9e8:	61 e0       	ldi	r22, 0x01	; 1
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	84 e4       	ldi	r24, 0x44	; 68
     9ee:	96 e0       	ldi	r25, 0x06	; 6
     9f0:	0e 94 03 09 	call	0x1206	; 0x1206 <addEntryToTimerQueue>
     9f4:	08 95       	ret
	}
	else{
		if(!sensorsToRead && existsInTimerQueue){
     9f6:	90 91 88 04 	lds	r25, 0x0488
     9fa:	91 11       	cpse	r25, r1
     9fc:	0b c0       	rjmp	.+22     	; 0xa14 <toggleSensorRead+0x62>
     9fe:	88 23       	and	r24, r24
     a00:	49 f0       	breq	.+18     	; 0xa14 <toggleSensorRead+0x62>
			removeEntryFromTimerQueue(&readSensors);
     a02:	84 e4       	ldi	r24, 0x44	; 68
     a04:	96 e0       	ldi	r25, 0x06	; 6
     a06:	0e 94 04 0a 	call	0x1408	; 0x1408 <removeEntryFromTimerQueue>
     a0a:	08 95       	ret
	
	if(sensorsToRead && !existsInTimerQueue){
		addEntryToTimerQueue(&readSensors, 100UL * 1000UL, Periodic);		
	}
	else{
		if(!sensorsToRead && existsInTimerQueue){
     a0c:	80 91 88 04 	lds	r24, 0x0488
     a10:	88 23       	and	r24, r24
     a12:	b9 f3       	breq	.-18     	; 0xa02 <toggleSensorRead+0x50>
     a14:	08 95       	ret

00000a16 <initSensors>:
}

void initSensors(void){
		
	//init ADC
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
     a16:	aa e7       	ldi	r26, 0x7A	; 122
     a18:	b0 e0       	ldi	r27, 0x00	; 0
     a1a:	8c 91       	ld	r24, X
     a1c:	87 60       	ori	r24, 0x07	; 7
     a1e:	8c 93       	st	X, r24

	ADMUX |= (1 << REFS0);
     a20:	ec e7       	ldi	r30, 0x7C	; 124
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	80 81       	ld	r24, Z
     a26:	80 64       	ori	r24, 0x40	; 64
     a28:	80 83       	st	Z, r24
	ADMUX &=~ (1 << REFS1); // Set ADC reference to AVCC
     a2a:	80 81       	ld	r24, Z
     a2c:	8f 77       	andi	r24, 0x7F	; 127
     a2e:	80 83       	st	Z, r24
	
	ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
     a30:	80 81       	ld	r24, Z
     a32:	80 62       	ori	r24, 0x20	; 32
     a34:	80 83       	st	Z, r24
	
	//ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running Mode
	
	ADCSRA |= (1 << ADEN);  // Enable ADC
     a36:	8c 91       	ld	r24, X
     a38:	80 68       	ori	r24, 0x80	; 128
     a3a:	8c 93       	st	X, r24
	//ADCSRA |= (1 << ADSC);  // start adc
	sensorsToRead = sensorsToSend = 0;
     a3c:	10 92 89 04 	sts	0x0489, r1
     a40:	10 92 88 04 	sts	0x0488, r1
	toggleSensorRead(0);
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <toggleSensorRead>
	toggleSensorRead(1);
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <toggleSensorRead>
	toggleSensorRead(2);
     a50:	82 e0       	ldi	r24, 0x02	; 2
     a52:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <toggleSensorRead>
	toggleSensorRead(3);
     a56:	83 e0       	ldi	r24, 0x03	; 3
     a58:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <toggleSensorRead>
     a5c:	08 95       	ret

00000a5e <startADCConversionForSensor>:
}

void startADCConversionForSensor(Sensor sensor){

	ADMUX &= ~31; // set lasts 5 bits to 00000
     a5e:	ec e7       	ldi	r30, 0x7C	; 124
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	90 81       	ld	r25, Z
     a64:	90 7e       	andi	r25, 0xE0	; 224
     a66:	90 83       	st	Z, r25
	//ADMUX |= 0; // 0-ADC0, 1-ADC1, 2-ADC2 ...    datasheet pg 249-251
	ADMUX |= sensor; // Sensor ia valorile 0,1,2,3, exact ca cele pt ADC-uri
     a68:	90 81       	ld	r25, Z
     a6a:	89 2b       	or	r24, r25
     a6c:	80 83       	st	Z, r24
	// No MUX values needed to be changed to use ADC0

	
	ADCSRA |= (1 << ADSC);  // Start A2D Conversions
     a6e:	ea e7       	ldi	r30, 0x7A	; 122
     a70:	f0 e0       	ldi	r31, 0x00	; 0
     a72:	80 81       	ld	r24, Z
     a74:	80 64       	ori	r24, 0x40	; 64
     a76:	80 83       	st	Z, r24
     a78:	08 95       	ret

00000a7a <getCurrentValueOfSensor>:
#include "../Timing/Timing.h"


uint32_t getValueOfSensor3(Sensor sensor);
uint16_t getCurrentValueOfSensor(Sensor sensor){	
	startADCConversionForSensor(sensor);	
     a7a:	0e 94 2f 05 	call	0xa5e	; 0xa5e <startADCConversionForSensor>
	while ( ADCSRA & (1 << ADSC));	
     a7e:	ea e7       	ldi	r30, 0x7A	; 122
     a80:	f0 e0       	ldi	r31, 0x00	; 0
     a82:	80 81       	ld	r24, Z
     a84:	86 fd       	sbrc	r24, 6
     a86:	fd cf       	rjmp	.-6      	; 0xa82 <getCurrentValueOfSensor+0x8>
	uint16_t val;
	val = ADCL >> 6;
     a88:	20 91 78 00 	lds	r18, 0x0078
     a8c:	22 95       	swap	r18
     a8e:	26 95       	lsr	r18
     a90:	26 95       	lsr	r18
     a92:	23 70       	andi	r18, 0x03	; 3
	val |= ADCH << 2;	
     a94:	80 91 79 00 	lds	r24, 0x0079
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	88 0f       	add	r24, r24
     a9c:	99 1f       	adc	r25, r25
     a9e:	88 0f       	add	r24, r24
     aa0:	99 1f       	adc	r25, r25
	return val;
}
     aa2:	82 2b       	or	r24, r18
     aa4:	08 95       	ret

00000aa6 <getValueOfSensor3>:
			removeEntryFromTimerQueue(&readSensors);
		}
	}
}

uint32_t getValueOfSensor3(Sensor sensor){
     aa6:	8f 92       	push	r8
     aa8:	9f 92       	push	r9
     aaa:	af 92       	push	r10
     aac:	bf 92       	push	r11
     aae:	cf 92       	push	r12
     ab0:	df 92       	push	r13
     ab2:	ef 92       	push	r14
     ab4:	ff 92       	push	r15
     ab6:	0f 93       	push	r16
     ab8:	1f 93       	push	r17
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
     abe:	cd b7       	in	r28, 0x3d	; 61
     ac0:	de b7       	in	r29, 0x3e	; 62
     ac2:	2e 97       	sbiw	r28, 0x0e	; 14
     ac4:	0f b6       	in	r0, 0x3f	; 63
     ac6:	f8 94       	cli
     ac8:	de bf       	out	0x3e, r29	; 62
     aca:	0f be       	out	0x3f, r0	; 63
     acc:	cd bf       	out	0x3d, r28	; 61
     ace:	18 2f       	mov	r17, r24
     ad0:	9e 01       	movw	r18, r28
     ad2:	2f 5f       	subi	r18, 0xFF	; 255
     ad4:	3f 4f       	sbci	r19, 0xFF	; 255
     ad6:	79 01       	movw	r14, r18
     ad8:	6e 01       	movw	r12, r28
     ada:	3f e0       	ldi	r19, 0x0F	; 15
     adc:	c3 0e       	add	r12, r19
     ade:	d1 1c       	adc	r13, r1
	uint8_t i;
	uint16_t s, sVals[7];
	
	//citesc 7 valori ale senzorului
	for(i=0;i<7;i++)
		sVals[i] = getCurrentValueOfSensor(sensor);
     ae0:	81 2f       	mov	r24, r17
     ae2:	0e 94 3d 05 	call	0xa7a	; 0xa7a <getCurrentValueOfSensor>
     ae6:	d7 01       	movw	r26, r14
     ae8:	8d 93       	st	X+, r24
     aea:	9d 93       	st	X+, r25
     aec:	7d 01       	movw	r14, r26
uint32_t getValueOfSensor3(Sensor sensor){
	uint8_t i;
	uint16_t s, sVals[7];
	
	//citesc 7 valori ale senzorului
	for(i=0;i<7;i++)
     aee:	ac 15       	cp	r26, r12
     af0:	bd 05       	cpc	r27, r13
     af2:	b1 f7       	brne	.-20     	; 0xae0 <getValueOfSensor3+0x3a>
     af4:	21 e0       	ldi	r18, 0x01	; 1
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	80 e0       	ldi	r24, 0x00	; 0
		sVals[i] = getCurrentValueOfSensor(sensor);
		
	do{ // le sortez (bubble sort)
		s=1;
     afa:	01 e0       	ldi	r16, 0x01	; 1
     afc:	f1 2c       	mov	r15, r1
		for(i=0;i<6;i++)
     afe:	90 e0       	ldi	r25, 0x00	; 0
			if(sVals[i]>sVals[i+1]){
				s = sVals[i];
				sVals[i] = sVals[i+1];
				sVals[i+1] = s;
				s=0;
     b00:	d1 2c       	mov	r13, r1
     b02:	e1 2c       	mov	r14, r1
     b04:	2d c0       	rjmp	.+90     	; 0xb60 <getValueOfSensor3+0xba>
		sVals[i] = getCurrentValueOfSensor(sensor);
		
	do{ // le sortez (bubble sort)
		s=1;
		for(i=0;i<6;i++)
			if(sVals[i]>sVals[i+1]){
     b06:	48 2f       	mov	r20, r24
     b08:	50 e0       	ldi	r21, 0x00	; 0
     b0a:	fa 01       	movw	r30, r20
     b0c:	ee 0f       	add	r30, r30
     b0e:	ff 1f       	adc	r31, r31
     b10:	aa 24       	eor	r10, r10
     b12:	a3 94       	inc	r10
     b14:	b1 2c       	mov	r11, r1
     b16:	ac 0e       	add	r10, r28
     b18:	bd 1e       	adc	r11, r29
     b1a:	ea 0d       	add	r30, r10
     b1c:	fb 1d       	adc	r31, r11
     b1e:	60 81       	ld	r22, Z
     b20:	71 81       	ldd	r23, Z+1	; 0x01
     b22:	4a 01       	movw	r8, r20
     b24:	af ef       	ldi	r26, 0xFF	; 255
     b26:	8a 1a       	sub	r8, r26
     b28:	9a 0a       	sbc	r9, r26
     b2a:	d4 01       	movw	r26, r8
     b2c:	aa 0f       	add	r26, r26
     b2e:	bb 1f       	adc	r27, r27
     b30:	aa 0d       	add	r26, r10
     b32:	bb 1d       	adc	r27, r11
     b34:	0d 90       	ld	r0, X+
     b36:	bc 91       	ld	r27, X
     b38:	a0 2d       	mov	r26, r0
     b3a:	a6 17       	cp	r26, r22
     b3c:	b7 07       	cpc	r27, r23
     b3e:	58 f4       	brcc	.+22     	; 0xb56 <getValueOfSensor3+0xb0>
				s = sVals[i];
				sVals[i] = sVals[i+1];
     b40:	b1 83       	std	Z+1, r27	; 0x01
     b42:	a0 83       	st	Z, r26
				sVals[i+1] = s;
     b44:	f4 01       	movw	r30, r8
     b46:	ee 0f       	add	r30, r30
     b48:	ff 1f       	adc	r31, r31
     b4a:	ea 0d       	add	r30, r10
     b4c:	fb 1d       	adc	r31, r11
     b4e:	71 83       	std	Z+1, r23	; 0x01
     b50:	60 83       	st	Z, r22
				s=0;
     b52:	2d 2d       	mov	r18, r13
     b54:	3e 2d       	mov	r19, r14
	for(i=0;i<7;i++)
		sVals[i] = getCurrentValueOfSensor(sensor);
		
	do{ // le sortez (bubble sort)
		s=1;
		for(i=0;i<6;i++)
     b56:	8f 5f       	subi	r24, 0xFF	; 255
     b58:	03 c0       	rjmp	.+6      	; 0xb60 <getValueOfSensor3+0xba>
	//citesc 7 valori ale senzorului
	for(i=0;i<7;i++)
		sVals[i] = getCurrentValueOfSensor(sensor);
		
	do{ // le sortez (bubble sort)
		s=1;
     b5a:	20 2f       	mov	r18, r16
     b5c:	3f 2d       	mov	r19, r15
		for(i=0;i<6;i++)
     b5e:	89 2f       	mov	r24, r25
     b60:	86 30       	cpi	r24, 0x06	; 6
     b62:	88 f2       	brcs	.-94     	; 0xb06 <getValueOfSensor3+0x60>
				s = sVals[i];
				sVals[i] = sVals[i+1];
				sVals[i+1] = s;
				s=0;
			}
	}while(!s);
     b64:	23 2b       	or	r18, r19
     b66:	c9 f3       	breq	.-14     	; 0xb5a <getValueOfSensor3+0xb4>
	
	s = sVals[2] + sVals[3] + sVals[4];
     b68:	2f 81       	ldd	r18, Y+7	; 0x07
     b6a:	38 85       	ldd	r19, Y+8	; 0x08
     b6c:	8d 81       	ldd	r24, Y+5	; 0x05
     b6e:	9e 81       	ldd	r25, Y+6	; 0x06
     b70:	28 0f       	add	r18, r24
     b72:	39 1f       	adc	r19, r25
     b74:	89 85       	ldd	r24, Y+9	; 0x09
     b76:	9a 85       	ldd	r25, Y+10	; 0x0a
     b78:	28 0f       	add	r18, r24
     b7a:	39 1f       	adc	r19, r25
	s/=3;//calculez media celor 3 din mijloc (eliminandu-le astfel pe cele mai mari si pe cele mai mici)
     b7c:	ab ea       	ldi	r26, 0xAB	; 171
     b7e:	ba ea       	ldi	r27, 0xAA	; 170
     b80:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__umulhisi3>
     b84:	96 95       	lsr	r25
     b86:	87 95       	ror	r24
	
	//valoarea noua este media ponderata a vechii valori (70%) si valorii curente(30%)
	if(!oldValue[sensor])
     b88:	41 2f       	mov	r20, r17
     b8a:	50 e0       	ldi	r21, 0x00	; 0
     b8c:	fa 01       	movw	r30, r20
     b8e:	ee 0f       	add	r30, r30
     b90:	ff 1f       	adc	r31, r31
     b92:	e2 5c       	subi	r30, 0xC2	; 194
     b94:	fb 4f       	sbci	r31, 0xFB	; 251
     b96:	20 81       	ld	r18, Z
     b98:	31 81       	ldd	r19, Z+1	; 0x01
     b9a:	23 2b       	or	r18, r19
     b9c:	41 f4       	brne	.+16     	; 0xbae <getValueOfSensor3+0x108>
		oldValue[sensor] = s;
     b9e:	fa 01       	movw	r30, r20
     ba0:	ee 0f       	add	r30, r30
     ba2:	ff 1f       	adc	r31, r31
     ba4:	e2 5c       	subi	r30, 0xC2	; 194
     ba6:	fb 4f       	sbci	r31, 0xFB	; 251
     ba8:	91 83       	std	Z+1, r25	; 0x01
     baa:	80 83       	st	Z, r24
     bac:	25 c0       	rjmp	.+74     	; 0xbf8 <getValueOfSensor3+0x152>
	else
		oldValue[sensor] = (7*oldValue[sensor] + 3*s) / 10;
     bae:	fa 01       	movw	r30, r20
     bb0:	ee 0f       	add	r30, r30
     bb2:	ff 1f       	adc	r31, r31
     bb4:	e2 5c       	subi	r30, 0xC2	; 194
     bb6:	fb 4f       	sbci	r31, 0xFB	; 251
     bb8:	20 81       	ld	r18, Z
     bba:	31 81       	ldd	r19, Z+1	; 0x01
     bbc:	b9 01       	movw	r22, r18
     bbe:	66 0f       	add	r22, r22
     bc0:	77 1f       	adc	r23, r23
     bc2:	66 0f       	add	r22, r22
     bc4:	77 1f       	adc	r23, r23
     bc6:	66 0f       	add	r22, r22
     bc8:	77 1f       	adc	r23, r23
     bca:	5b 01       	movw	r10, r22
     bcc:	a2 1a       	sub	r10, r18
     bce:	b3 0a       	sbc	r11, r19
     bd0:	95 01       	movw	r18, r10
     bd2:	bc 01       	movw	r22, r24
     bd4:	66 0f       	add	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	86 0f       	add	r24, r22
     bda:	97 1f       	adc	r25, r23
     bdc:	28 0f       	add	r18, r24
     bde:	39 1f       	adc	r19, r25
     be0:	ad ec       	ldi	r26, 0xCD	; 205
     be2:	bc ec       	ldi	r27, 0xCC	; 204
     be4:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__umulhisi3>
     be8:	96 95       	lsr	r25
     bea:	87 95       	ror	r24
     bec:	96 95       	lsr	r25
     bee:	87 95       	ror	r24
     bf0:	96 95       	lsr	r25
     bf2:	87 95       	ror	r24
     bf4:	91 83       	std	Z+1, r25	; 0x01
     bf6:	80 83       	st	Z, r24

	//f(x)=769533/((x<<4)+-520)// front
	//f(x)=24886/((x<<4)+-760) // side
	
	if(sensor<2)
     bf8:	12 30       	cpi	r17, 0x02	; 2
     bfa:	d0 f4       	brcc	.+52     	; 0xc30 <getValueOfSensor3+0x18a>
		return (322641UL/((oldValue[sensor]<<4)-315));// senzori laterali
     bfc:	fa 01       	movw	r30, r20
     bfe:	ee 0f       	add	r30, r30
     c00:	ff 1f       	adc	r31, r31
     c02:	e2 5c       	subi	r30, 0xC2	; 194
     c04:	fb 4f       	sbci	r31, 0xFB	; 251
     c06:	20 81       	ld	r18, Z
     c08:	31 81       	ldd	r19, Z+1	; 0x01
     c0a:	22 95       	swap	r18
     c0c:	32 95       	swap	r19
     c0e:	30 7f       	andi	r19, 0xF0	; 240
     c10:	32 27       	eor	r19, r18
     c12:	20 7f       	andi	r18, 0xF0	; 240
     c14:	32 27       	eor	r19, r18
     c16:	2b 53       	subi	r18, 0x3B	; 59
     c18:	31 40       	sbci	r19, 0x01	; 1
     c1a:	40 e0       	ldi	r20, 0x00	; 0
     c1c:	50 e0       	ldi	r21, 0x00	; 0
     c1e:	61 e5       	ldi	r22, 0x51	; 81
     c20:	7c ee       	ldi	r23, 0xEC	; 236
     c22:	84 e0       	ldi	r24, 0x04	; 4
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	0e 94 38 0c 	call	0x1870	; 0x1870 <__udivmodsi4>
     c2a:	ca 01       	movw	r24, r20
     c2c:	b9 01       	movw	r22, r18
     c2e:	19 c0       	rjmp	.+50     	; 0xc62 <getValueOfSensor3+0x1bc>
	else
		return (769533UL/((oldValue[sensor]<<4)-520));	// senzori frontali
     c30:	fa 01       	movw	r30, r20
     c32:	ee 0f       	add	r30, r30
     c34:	ff 1f       	adc	r31, r31
     c36:	e2 5c       	subi	r30, 0xC2	; 194
     c38:	fb 4f       	sbci	r31, 0xFB	; 251
     c3a:	20 81       	ld	r18, Z
     c3c:	31 81       	ldd	r19, Z+1	; 0x01
     c3e:	22 95       	swap	r18
     c40:	32 95       	swap	r19
     c42:	30 7f       	andi	r19, 0xF0	; 240
     c44:	32 27       	eor	r19, r18
     c46:	20 7f       	andi	r18, 0xF0	; 240
     c48:	32 27       	eor	r19, r18
     c4a:	28 50       	subi	r18, 0x08	; 8
     c4c:	32 40       	sbci	r19, 0x02	; 2
     c4e:	40 e0       	ldi	r20, 0x00	; 0
     c50:	50 e0       	ldi	r21, 0x00	; 0
     c52:	6d ef       	ldi	r22, 0xFD	; 253
     c54:	7d eb       	ldi	r23, 0xBD	; 189
     c56:	8b e0       	ldi	r24, 0x0B	; 11
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	0e 94 38 0c 	call	0x1870	; 0x1870 <__udivmodsi4>
     c5e:	ca 01       	movw	r24, r20
     c60:	b9 01       	movw	r22, r18
}
     c62:	2e 96       	adiw	r28, 0x0e	; 14
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	f8 94       	cli
     c68:	de bf       	out	0x3e, r29	; 62
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	cd bf       	out	0x3d, r28	; 61
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	1f 91       	pop	r17
     c74:	0f 91       	pop	r16
     c76:	ff 90       	pop	r15
     c78:	ef 90       	pop	r14
     c7a:	df 90       	pop	r13
     c7c:	cf 90       	pop	r12
     c7e:	bf 90       	pop	r11
     c80:	af 90       	pop	r10
     c82:	9f 90       	pop	r9
     c84:	8f 90       	pop	r8
     c86:	08 95       	ret

00000c88 <readSensors>:
		removeEntryFromTimerQueue(&sendSensor);
	}
}

void readSensors(){
	if(sensorsToRead & 1)
     c88:	80 91 88 04 	lds	r24, 0x0488
     c8c:	80 ff       	sbrs	r24, 0
     c8e:	0b c0       	rjmp	.+22     	; 0xca6 <readSensors+0x1e>
		lastCMValue[0] = getValueOfSensor3(0);
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	0e 94 53 05 	call	0xaa6	; 0xaa6 <getValueOfSensor3>
     c96:	60 93 46 04 	sts	0x0446, r22
     c9a:	70 93 47 04 	sts	0x0447, r23
     c9e:	80 93 48 04 	sts	0x0448, r24
     ca2:	90 93 49 04 	sts	0x0449, r25
	if(sensorsToRead & 2)
     ca6:	80 91 88 04 	lds	r24, 0x0488
     caa:	81 ff       	sbrs	r24, 1
     cac:	0b c0       	rjmp	.+22     	; 0xcc4 <readSensors+0x3c>
		lastCMValue[1] = getValueOfSensor3(1);
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	0e 94 53 05 	call	0xaa6	; 0xaa6 <getValueOfSensor3>
     cb4:	60 93 4a 04 	sts	0x044A, r22
     cb8:	70 93 4b 04 	sts	0x044B, r23
     cbc:	80 93 4c 04 	sts	0x044C, r24
     cc0:	90 93 4d 04 	sts	0x044D, r25
	if(sensorsToRead & 4)
     cc4:	80 91 88 04 	lds	r24, 0x0488
     cc8:	82 ff       	sbrs	r24, 2
     cca:	0b c0       	rjmp	.+22     	; 0xce2 <readSensors+0x5a>
		lastCMValue[2] = getValueOfSensor3(2);
     ccc:	82 e0       	ldi	r24, 0x02	; 2
     cce:	0e 94 53 05 	call	0xaa6	; 0xaa6 <getValueOfSensor3>
     cd2:	60 93 4e 04 	sts	0x044E, r22
     cd6:	70 93 4f 04 	sts	0x044F, r23
     cda:	80 93 50 04 	sts	0x0450, r24
     cde:	90 93 51 04 	sts	0x0451, r25
	if(sensorsToRead & 8)
     ce2:	80 91 88 04 	lds	r24, 0x0488
     ce6:	83 ff       	sbrs	r24, 3
     ce8:	0b c0       	rjmp	.+22     	; 0xd00 <readSensors+0x78>
		lastCMValue[3] = getValueOfSensor3(3);
     cea:	83 e0       	ldi	r24, 0x03	; 3
     cec:	0e 94 53 05 	call	0xaa6	; 0xaa6 <getValueOfSensor3>
     cf0:	60 93 52 04 	sts	0x0452, r22
     cf4:	70 93 53 04 	sts	0x0453, r23
     cf8:	80 93 54 04 	sts	0x0454, r24
     cfc:	90 93 55 04 	sts	0x0455, r25
     d00:	08 95       	ret

00000d02 <getValueOfSensor>:
	val = ADCL >> 6;
	val |= ADCH << 2;	
	return val;
}

uint16_t getValueOfSensor(Sensor sensor){	
     d02:	7f 92       	push	r7
     d04:	8f 92       	push	r8
     d06:	9f 92       	push	r9
     d08:	af 92       	push	r10
     d0a:	bf 92       	push	r11
     d0c:	cf 92       	push	r12
     d0e:	df 92       	push	r13
     d10:	ef 92       	push	r14
     d12:	ff 92       	push	r15
     d14:	0f 93       	push	r16
     d16:	1f 93       	push	r17
     d18:	cf 93       	push	r28
     d1a:	df 93       	push	r29
     d1c:	cd b7       	in	r28, 0x3d	; 61
     d1e:	de b7       	in	r29, 0x3e	; 62
     d20:	2e 97       	sbiw	r28, 0x0e	; 14
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	f8 94       	cli
     d26:	de bf       	out	0x3e, r29	; 62
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	cd bf       	out	0x3d, r28	; 61
     d2c:	78 2e       	mov	r7, r24
     d2e:	6e 01       	movw	r12, r28
     d30:	8f e0       	ldi	r24, 0x0F	; 15
     d32:	c8 0e       	add	r12, r24
     d34:	d1 1c       	adc	r13, r1
     d36:	fe 01       	movw	r30, r28
     d38:	31 96       	adiw	r30, 0x01	; 1
     d3a:	7f 01       	movw	r14, r30
	uint16_t s;
	
	for(i=0;i<7;i++){
		startADCConversionForSensor(sensor);
		
		while ( ADCSRA & (1 << ADSC));
     d3c:	0a e7       	ldi	r16, 0x7A	; 122
     d3e:	10 e0       	ldi	r17, 0x00	; 0
		sVals[i] = ADCL >> 6;
     d40:	0f 2e       	mov	r0, r31
     d42:	f8 e7       	ldi	r31, 0x78	; 120
     d44:	8f 2e       	mov	r8, r31
     d46:	91 2c       	mov	r9, r1
     d48:	f0 2d       	mov	r31, r0
		sVals[i] |= ADCH << 2;		
     d4a:	0f 2e       	mov	r0, r31
     d4c:	f9 e7       	ldi	r31, 0x79	; 121
     d4e:	af 2e       	mov	r10, r31
     d50:	b1 2c       	mov	r11, r1
     d52:	f0 2d       	mov	r31, r0
	uint16_t sVals[7];
	uint8_t i;
	uint16_t s;
	
	for(i=0;i<7;i++){
		startADCConversionForSensor(sensor);
     d54:	87 2d       	mov	r24, r7
     d56:	0e 94 2f 05 	call	0xa5e	; 0xa5e <startADCConversionForSensor>
		
		while ( ADCSRA & (1 << ADSC));
     d5a:	f8 01       	movw	r30, r16
     d5c:	80 81       	ld	r24, Z
     d5e:	86 fd       	sbrc	r24, 6
     d60:	fc cf       	rjmp	.-8      	; 0xd5a <getValueOfSensor+0x58>
		sVals[i] = ADCL >> 6;
     d62:	f4 01       	movw	r30, r8
     d64:	20 81       	ld	r18, Z
     d66:	22 95       	swap	r18
     d68:	26 95       	lsr	r18
     d6a:	26 95       	lsr	r18
     d6c:	23 70       	andi	r18, 0x03	; 3
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	f7 01       	movw	r30, r14
     d72:	31 83       	std	Z+1, r19	; 0x01
     d74:	20 83       	st	Z, r18
		sVals[i] |= ADCH << 2;		
     d76:	f5 01       	movw	r30, r10
     d78:	80 81       	ld	r24, Z
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	28 2b       	or	r18, r24
     d86:	39 2b       	or	r19, r25
     d88:	f7 01       	movw	r30, r14
     d8a:	21 93       	st	Z+, r18
     d8c:	31 93       	st	Z+, r19
     d8e:	7f 01       	movw	r14, r30
	
	uint16_t sVals[7];
	uint8_t i;
	uint16_t s;
	
	for(i=0;i<7;i++){
     d90:	ec 15       	cp	r30, r12
     d92:	fd 05       	cpc	r31, r13
     d94:	f9 f6       	brne	.-66     	; 0xd54 <getValueOfSensor+0x52>
     d96:	fe 01       	movw	r30, r28
     d98:	31 96       	adiw	r30, 0x01	; 1
     d9a:	40 e0       	ldi	r20, 0x00	; 0
     d9c:	50 e0       	ldi	r21, 0x00	; 0
		sVals[i] |= ADCH << 2;		
	}
	
	s=0;
	for(i=0;i<7;i++)
		s+=sVals[i];
     d9e:	81 91       	ld	r24, Z+
     da0:	91 91       	ld	r25, Z+
     da2:	48 0f       	add	r20, r24
     da4:	59 1f       	adc	r21, r25
		sVals[i] = ADCL >> 6;
		sVals[i] |= ADCH << 2;		
	}
	
	s=0;
	for(i=0;i<7;i++)
     da6:	ec 15       	cp	r30, r12
     da8:	fd 05       	cpc	r31, r13
     daa:	c9 f7       	brne	.-14     	; 0xd9e <getValueOfSensor+0x9c>
		s+=sVals[i];
		
	return s/7;
     dac:	9a 01       	movw	r18, r20
     dae:	a3 e9       	ldi	r26, 0x93	; 147
     db0:	b4 e2       	ldi	r27, 0x24	; 36
     db2:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__umulhisi3>
     db6:	48 1b       	sub	r20, r24
     db8:	59 0b       	sbc	r21, r25
     dba:	9a 01       	movw	r18, r20
     dbc:	36 95       	lsr	r19
     dbe:	27 95       	ror	r18
     dc0:	82 0f       	add	r24, r18
     dc2:	93 1f       	adc	r25, r19
}
     dc4:	96 95       	lsr	r25
     dc6:	87 95       	ror	r24
     dc8:	96 95       	lsr	r25
     dca:	87 95       	ror	r24
     dcc:	2e 96       	adiw	r28, 0x0e	; 14
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	de bf       	out	0x3e, r29	; 62
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	cd bf       	out	0x3d, r28	; 61
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	ff 90       	pop	r15
     de2:	ef 90       	pop	r14
     de4:	df 90       	pop	r13
     de6:	cf 90       	pop	r12
     de8:	bf 90       	pop	r11
     dea:	af 90       	pop	r10
     dec:	9f 90       	pop	r9
     dee:	8f 90       	pop	r8
     df0:	7f 90       	pop	r7
     df2:	08 95       	ret

00000df4 <functieRotireStanga>:
		break;
	}	
}


void functieRotireStanga(void){
     df4:	af 92       	push	r10
     df6:	bf 92       	push	r11
     df8:	cf 92       	push	r12
     dfa:	df 92       	push	r13
     dfc:	ef 92       	push	r14
     dfe:	ff 92       	push	r15
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	c4 56       	subi	r28, 0x64	; 100
     e0e:	d1 09       	sbc	r29, r1
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	cd bf       	out	0x3d, r28	; 61
	uint16_t senzorSt = getValueOfSensor(SideLeftSensor);
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	0e 94 81 06 	call	0xd02	; 0xd02 <getValueOfSensor>
     e20:	b8 2e       	mov	r11, r24
     e22:	a9 2e       	mov	r10, r25
	uint16_t senzorDr = getValueOfSensor(SideRightSensor);
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	0e 94 81 06 	call	0xd02	; 0xd02 <getValueOfSensor>
     e2a:	8c 01       	movw	r16, r24
	debugging = 0;
     e2c:	10 92 00 01 	sts	0x0100, r1
	uint16_t senzorStFata = getValueOfSensor(FrontLeftSensor);
     e30:	83 e0       	ldi	r24, 0x03	; 3
     e32:	0e 94 81 06 	call	0xd02	; 0xd02 <getValueOfSensor>
     e36:	6c 01       	movw	r12, r24
	uint16_t senzorDrFata =getValueOfSensor(FrontRightSensor);
     e38:	82 e0       	ldi	r24, 0x02	; 2
     e3a:	0e 94 81 06 	call	0xd02	; 0xd02 <getValueOfSensor>
     e3e:	7c 01       	movw	r14, r24
	
	char str[100];
	sprintf(str, "SF=%d  DF=%d  S=%d  D=%d  stare=%d", senzorStFata,senzorDrFata, senzorSt,senzorDr, stare);
     e40:	80 91 23 04 	lds	r24, 0x0423
     e44:	1f 92       	push	r1
     e46:	8f 93       	push	r24
     e48:	1f 93       	push	r17
     e4a:	0f 93       	push	r16
     e4c:	af 92       	push	r10
     e4e:	bf 92       	push	r11
     e50:	ff 92       	push	r15
     e52:	ef 92       	push	r14
     e54:	df 92       	push	r13
     e56:	cf 92       	push	r12
     e58:	8e e6       	ldi	r24, 0x6E	; 110
     e5a:	92 e0       	ldi	r25, 0x02	; 2
     e5c:	9f 93       	push	r25
     e5e:	8f 93       	push	r24
     e60:	ce 01       	movw	r24, r28
     e62:	01 96       	adiw	r24, 0x01	; 1
     e64:	5c 01       	movw	r10, r24
     e66:	bf 92       	push	r11
     e68:	8f 93       	push	r24
     e6a:	0e 94 8e 0c 	call	0x191c	; 0x191c <sprintf>
	BTTransmitStr(str);
     e6e:	c5 01       	movw	r24, r10
     e70:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <BTTransmitStr>
	
	switch(stare){
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	f8 94       	cli
     e78:	de bf       	out	0x3e, r29	; 62
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	cd bf       	out	0x3d, r28	; 61
     e7e:	80 91 23 04 	lds	r24, 0x0423
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	89 30       	cpi	r24, 0x09	; 9
     e86:	91 05       	cpc	r25, r1
     e88:	08 f0       	brcs	.+2      	; 0xe8c <functieRotireStanga+0x98>
     e8a:	99 c0       	rjmp	.+306    	; 0xfbe <functieRotireStanga+0x1ca>
     e8c:	fc 01       	movw	r30, r24
     e8e:	ed 5a       	subi	r30, 0xAD	; 173
     e90:	ff 4f       	sbci	r31, 0xFF	; 255
     e92:	0c 94 5a 0c 	jmp	0x18b4	; 0x18b4 <__tablejump2__>
		case Start:
			stare = intrareInParcare;
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	80 93 23 04 	sts	0x0423, r24
			BTTransmitStr("Sa incepem :D");
     e9c:	81 e9       	ldi	r24, 0x91	; 145
     e9e:	92 e0       	ldi	r25, 0x02	; 2
     ea0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <BTTransmitStr>
		break;
     ea4:	8c c0       	rjmp	.+280    	; 0xfbe <functieRotireStanga+0x1ca>
		case intrareInParcare:/*
			if(senzorStFata>200 && senzorDrFata>200){
				rotirePeLoc(60, 75, RightEngines);
				stare=rotireLoc;
			}*/
			goFrontRight(60,125);
     ea6:	6d e7       	ldi	r22, 0x7D	; 125
     ea8:	8c e3       	ldi	r24, 0x3C	; 60
     eaa:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <goFrontRight>
			stare = rotireMersDR;			
     eae:	83 e0       	ldi	r24, 0x03	; 3
     eb0:	80 93 23 04 	sts	0x0423, r24
		break;
     eb4:	84 c0       	rjmp	.+264    	; 0xfbe <functieRotireStanga+0x1ca>
		case mersFata: // merge in fata
			if(senzorStFata>150 && senzorDrFata>150){
     eb6:	97 e9       	ldi	r25, 0x97	; 151
     eb8:	c9 16       	cp	r12, r25
     eba:	d1 04       	cpc	r13, r1
     ebc:	60 f0       	brcs	.+24     	; 0xed6 <functieRotireStanga+0xe2>
     ebe:	87 e9       	ldi	r24, 0x97	; 151
     ec0:	e8 16       	cp	r14, r24
     ec2:	f1 04       	cpc	r15, r1
     ec4:	40 f0       	brcs	.+16     	; 0xed6 <functieRotireStanga+0xe2>
				stare = rotireLoc;
     ec6:	82 e0       	ldi	r24, 0x02	; 2
     ec8:	80 93 23 04 	sts	0x0423, r24
				//goFrontLeft(60, 250);
				rotirePeLoc(60, 75, LeftEngines);
     ecc:	41 e0       	ldi	r20, 0x01	; 1
     ece:	6b e4       	ldi	r22, 0x4B	; 75
     ed0:	8c e3       	ldi	r24, 0x3C	; 60
     ed2:	0e 94 5f 03 	call	0x6be	; 0x6be <rotirePeLoc>
			}
			if(senzorDr<100){
     ed6:	04 36       	cpi	r16, 0x64	; 100
     ed8:	11 05       	cpc	r17, r1
     eda:	a8 f4       	brcc	.+42     	; 0xf06 <functieRotireStanga+0x112>
				iesire--;
     edc:	80 91 22 04 	lds	r24, 0x0422
     ee0:	81 50       	subi	r24, 0x01	; 1
     ee2:	80 93 22 04 	sts	0x0422, r24
				if(iesire==0){
     ee6:	80 91 22 04 	lds	r24, 0x0422
     eea:	81 11       	cpse	r24, r1
     eec:	09 c0       	rjmp	.+18     	; 0xf00 <functieRotireStanga+0x10c>
					rotirePeLoc(60,75, RightEngines);
     eee:	40 e0       	ldi	r20, 0x00	; 0
     ef0:	6b e4       	ldi	r22, 0x4B	; 75
     ef2:	8c e3       	ldi	r24, 0x3C	; 60
     ef4:	0e 94 5f 03 	call	0x6be	; 0x6be <rotirePeLoc>
					stare= poarta;}
     ef8:	86 e0       	ldi	r24, 0x06	; 6
     efa:	80 93 23 04 	sts	0x0423, r24
     efe:	03 c0       	rjmp	.+6      	; 0xf06 <functieRotireStanga+0x112>
				else stare=nuPoarta;
     f00:	88 e0       	ldi	r24, 0x08	; 8
     f02:	80 93 23 04 	sts	0x0423, r24
				
			}
			if(senzorDr > 220){
     f06:	0d 3d       	cpi	r16, 0xDD	; 221
     f08:	11 05       	cpc	r17, r1
     f0a:	38 f0       	brcs	.+14     	; 0xf1a <functieRotireStanga+0x126>
				stare = rotireMersSt;
     f0c:	84 e0       	ldi	r24, 0x04	; 4
     f0e:	80 93 23 04 	sts	0x0423, r24
				goFrontLeft(60, 75);
     f12:	6b e4       	ldi	r22, 0x4B	; 75
     f14:	8c e3       	ldi	r24, 0x3C	; 60
     f16:	0e 94 c5 02 	call	0x58a	; 0x58a <goFrontLeft>
			}		
			if(senzorDr<250 && senzorDr>170){
     f1a:	0b 5a       	subi	r16, 0xAB	; 171
     f1c:	11 09       	sbc	r17, r1
     f1e:	0f 34       	cpi	r16, 0x4F	; 79
     f20:	11 05       	cpc	r17, r1
     f22:	08 f0       	brcs	.+2      	; 0xf26 <functieRotireStanga+0x132>
     f24:	4c c0       	rjmp	.+152    	; 0xfbe <functieRotireStanga+0x1ca>
				stare= rotireMersDR;
     f26:	83 e0       	ldi	r24, 0x03	; 3
     f28:	80 93 23 04 	sts	0x0423, r24
				goFrontRight(60, 75);
     f2c:	6b e4       	ldi	r22, 0x4B	; 75
     f2e:	8c e3       	ldi	r24, 0x3C	; 60
     f30:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <goFrontRight>
     f34:	44 c0       	rjmp	.+136    	; 0xfbe <functieRotireStanga+0x1ca>
			}
				
		break;
		case poarta:
			if(senzorStFata <91 && senzorDrFata <180){
     f36:	9b e5       	ldi	r25, 0x5B	; 91
     f38:	c9 16       	cp	r12, r25
     f3a:	d1 04       	cpc	r13, r1
     f3c:	08 f0       	brcs	.+2      	; 0xf40 <functieRotireStanga+0x14c>
     f3e:	3f c0       	rjmp	.+126    	; 0xfbe <functieRotireStanga+0x1ca>
     f40:	84 eb       	ldi	r24, 0xB4	; 180
     f42:	e8 16       	cp	r14, r24
     f44:	f1 04       	cpc	r15, r1
     f46:	d8 f5       	brcc	.+118    	; 0xfbe <functieRotireStanga+0x1ca>
				goFront(6,75);
     f48:	6b e4       	ldi	r22, 0x4B	; 75
     f4a:	86 e0       	ldi	r24, 0x06	; 6
     f4c:	0e 94 75 02 	call	0x4ea	; 0x4ea <goFront>
				stare=bv;
     f50:	87 e0       	ldi	r24, 0x07	; 7
     f52:	80 93 23 04 	sts	0x0423, r24
     f56:	33 c0       	rjmp	.+102    	; 0xfbe <functieRotireStanga+0x1ca>
			}
		break;	
		case bv:
			{
				stopEngines();
     f58:	0e 94 f5 01 	call	0x3ea	; 0x3ea <stopEngines>
				removeEntryFromTimerQueue(&functieRotireStanga);
     f5c:	8a ef       	ldi	r24, 0xFA	; 250
     f5e:	96 e0       	ldi	r25, 0x06	; 6
     f60:	0e 94 04 0a 	call	0x1408	; 0x1408 <removeEntryFromTimerQueue>
			}
		break;		
     f64:	2c c0       	rjmp	.+88     	; 0xfbe <functieRotireStanga+0x1ca>
		case rotireMersSt:
			if(senzorDr < 300){
     f66:	0c 32       	cpi	r16, 0x2C	; 44
     f68:	11 40       	sbci	r17, 0x01	; 1
     f6a:	48 f5       	brcc	.+82     	; 0xfbe <functieRotireStanga+0x1ca>
				stare = mersFata;
     f6c:	85 e0       	ldi	r24, 0x05	; 5
     f6e:	80 93 23 04 	sts	0x0423, r24
				goFront(60, 75);
     f72:	6b e4       	ldi	r22, 0x4B	; 75
     f74:	8c e3       	ldi	r24, 0x3C	; 60
     f76:	0e 94 75 02 	call	0x4ea	; 0x4ea <goFront>
     f7a:	21 c0       	rjmp	.+66     	; 0xfbe <functieRotireStanga+0x1ca>
			}		
		break;
		case rotireMersDR:
			//if(range(senzorDr,senzorDrFata)==0)
			{
				stare=mersFata;
     f7c:	85 e0       	ldi	r24, 0x05	; 5
     f7e:	80 93 23 04 	sts	0x0423, r24
				goFront(60, 75);
     f82:	6b e4       	ldi	r22, 0x4B	; 75
     f84:	8c e3       	ldi	r24, 0x3C	; 60
     f86:	0e 94 75 02 	call	0x4ea	; 0x4ea <goFront>
			}
		break;
     f8a:	19 c0       	rjmp	.+50     	; 0xfbe <functieRotireStanga+0x1ca>
		case rotireLoc:
			if(senzorDrFata> 100 && senzorDrFata<140){
     f8c:	85 e6       	ldi	r24, 0x65	; 101
     f8e:	e8 1a       	sub	r14, r24
     f90:	f1 08       	sbc	r15, r1
     f92:	97 e2       	ldi	r25, 0x27	; 39
     f94:	e9 16       	cp	r14, r25
     f96:	f1 04       	cpc	r15, r1
     f98:	90 f4       	brcc	.+36     	; 0xfbe <functieRotireStanga+0x1ca>
				goFront(60, 75);
     f9a:	6b e4       	ldi	r22, 0x4B	; 75
     f9c:	8c e3       	ldi	r24, 0x3C	; 60
     f9e:	0e 94 75 02 	call	0x4ea	; 0x4ea <goFront>
				stare=mersFata;				
     fa2:	85 e0       	ldi	r24, 0x05	; 5
     fa4:	80 93 23 04 	sts	0x0423, r24
     fa8:	0a c0       	rjmp	.+20     	; 0xfbe <functieRotireStanga+0x1ca>
			}
		break;
		case nuPoarta:
			if(senzorDr < 300){
     faa:	0c 32       	cpi	r16, 0x2C	; 44
     fac:	11 40       	sbci	r17, 0x01	; 1
     fae:	38 f4       	brcc	.+14     	; 0xfbe <functieRotireStanga+0x1ca>
				stare=mersFata;
     fb0:	85 e0       	ldi	r24, 0x05	; 5
     fb2:	80 93 23 04 	sts	0x0423, r24
				goFront(60,75);
     fb6:	6b e4       	ldi	r22, 0x4B	; 75
     fb8:	8c e3       	ldi	r24, 0x3C	; 60
     fba:	0e 94 75 02 	call	0x4ea	; 0x4ea <goFront>
			}
		break;
	}
	
	debugging = 1;
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	80 93 00 01 	sts	0x0100, r24
}
     fc4:	cc 59       	subi	r28, 0x9C	; 156
     fc6:	df 4f       	sbci	r29, 0xFF	; 255
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	f8 94       	cli
     fcc:	de bf       	out	0x3e, r29	; 62
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	cd bf       	out	0x3d, r28	; 61
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	1f 91       	pop	r17
     fd8:	0f 91       	pop	r16
     fda:	ff 90       	pop	r15
     fdc:	ef 90       	pop	r14
     fde:	df 90       	pop	r13
     fe0:	cf 90       	pop	r12
     fe2:	bf 90       	pop	r11
     fe4:	af 90       	pop	r10
     fe6:	08 95       	ret

00000fe8 <timer_init>:

volatile uint32_t time=0;
void timer_init()
{
	//PIND = (1 << PIND0);
	TIMSK1|=(1<<TOIE1);
     fe8:	ef e6       	ldi	r30, 0x6F	; 111
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	81 60       	ori	r24, 0x01	; 1
     ff0:	80 83       	st	Z, r24
	TCNT1 = 0x00;
     ff2:	10 92 85 00 	sts	0x0085, r1
     ff6:	10 92 84 00 	sts	0x0084, r1
	TCCR1B = 0x01;//pt ca modificam ultimu bit din datasheet
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	80 93 81 00 	sts	0x0081, r24
    1000:	08 95       	ret

00001002 <__vector_15>:
}
ISR(TIMER1_OVF_vect)// Din datasheet timerq(are 8 mh) => 8/8= 1 microsecunde
{
    1002:	1f 92       	push	r1
    1004:	0f 92       	push	r0
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	0f 92       	push	r0
    100a:	11 24       	eor	r1, r1
    100c:	2f 93       	push	r18
    100e:	3f 93       	push	r19
    1010:	4f 93       	push	r20
    1012:	5f 93       	push	r21
    1014:	6f 93       	push	r22
    1016:	7f 93       	push	r23
    1018:	8f 93       	push	r24
    101a:	9f 93       	push	r25
    101c:	af 93       	push	r26
    101e:	bf 93       	push	r27
    1020:	ef 93       	push	r30
    1022:	ff 93       	push	r31
	time++;
    1024:	80 91 24 04 	lds	r24, 0x0424
    1028:	90 91 25 04 	lds	r25, 0x0425
    102c:	a0 91 26 04 	lds	r26, 0x0426
    1030:	b0 91 27 04 	lds	r27, 0x0427
    1034:	01 96       	adiw	r24, 0x01	; 1
    1036:	a1 1d       	adc	r26, r1
    1038:	b1 1d       	adc	r27, r1
    103a:	80 93 24 04 	sts	0x0424, r24
    103e:	90 93 25 04 	sts	0x0425, r25
    1042:	a0 93 26 04 	sts	0x0426, r26
    1046:	b0 93 27 04 	sts	0x0427, r27
	//TCCR1B = 0x01; // init pentru 7.5 ms
	//TCCR1B = 0x02; // init pentru 60 ms
	//timePassed(7500); //7.5 ms = 7500 us;
	timePassed(8800);
    104a:	60 e6       	ldi	r22, 0x60	; 96
    104c:	72 e2       	ldi	r23, 0x22	; 34
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	0e 94 c9 0a 	call	0x1592	; 0x1592 <timePassed>
}
    1056:	ff 91       	pop	r31
    1058:	ef 91       	pop	r30
    105a:	bf 91       	pop	r27
    105c:	af 91       	pop	r26
    105e:	9f 91       	pop	r25
    1060:	8f 91       	pop	r24
    1062:	7f 91       	pop	r23
    1064:	6f 91       	pop	r22
    1066:	5f 91       	pop	r21
    1068:	4f 91       	pop	r20
    106a:	3f 91       	pop	r19
    106c:	2f 91       	pop	r18
    106e:	0f 90       	pop	r0
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	0f 90       	pop	r0
    1074:	1f 90       	pop	r1
    1076:	18 95       	reti

00001078 <__vector_20>:

ISR(USART0_RX_vect)
{
    1078:	1f 92       	push	r1
    107a:	0f 92       	push	r0
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	0f 92       	push	r0
    1080:	11 24       	eor	r1, r1
    1082:	2f 93       	push	r18
    1084:	3f 93       	push	r19
    1086:	4f 93       	push	r20
    1088:	5f 93       	push	r21
    108a:	6f 93       	push	r22
    108c:	7f 93       	push	r23
    108e:	8f 93       	push	r24
    1090:	9f 93       	push	r25
    1092:	af 93       	push	r26
    1094:	bf 93       	push	r27
    1096:	ef 93       	push	r30
    1098:	ff 93       	push	r31
	BTProtocolReadByte(UDR0);
    109a:	80 91 c6 00 	lds	r24, 0x00C6
    109e:	0e 94 76 01 	call	0x2ec	; 0x2ec <BTProtocolReadByte>
	//PORTD ^=( 1<<PIND2);
	//UDR0 = 66;
}
    10a2:	ff 91       	pop	r31
    10a4:	ef 91       	pop	r30
    10a6:	bf 91       	pop	r27
    10a8:	af 91       	pop	r26
    10aa:	9f 91       	pop	r25
    10ac:	8f 91       	pop	r24
    10ae:	7f 91       	pop	r23
    10b0:	6f 91       	pop	r22
    10b2:	5f 91       	pop	r21
    10b4:	4f 91       	pop	r20
    10b6:	3f 91       	pop	r19
    10b8:	2f 91       	pop	r18
    10ba:	0f 90       	pop	r0
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	0f 90       	pop	r0
    10c0:	1f 90       	pop	r1
    10c2:	18 95       	reti

000010c4 <__vector_5>:
extern volatile uint32_t encoder1CNT, encoder2CNT;
ISR(PCINT1_vect)
{
    10c4:	1f 92       	push	r1
    10c6:	0f 92       	push	r0
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	0f 92       	push	r0
    10cc:	11 24       	eor	r1, r1
    10ce:	8f 93       	push	r24
    10d0:	9f 93       	push	r25
    10d2:	af 93       	push	r26
    10d4:	bf 93       	push	r27
	//if(PORTB &( 1<<PINB0))
	encoder1CNT++;
    10d6:	80 91 36 04 	lds	r24, 0x0436
    10da:	90 91 37 04 	lds	r25, 0x0437
    10de:	a0 91 38 04 	lds	r26, 0x0438
    10e2:	b0 91 39 04 	lds	r27, 0x0439
    10e6:	01 96       	adiw	r24, 0x01	; 1
    10e8:	a1 1d       	adc	r26, r1
    10ea:	b1 1d       	adc	r27, r1
    10ec:	80 93 36 04 	sts	0x0436, r24
    10f0:	90 93 37 04 	sts	0x0437, r25
    10f4:	a0 93 38 04 	sts	0x0438, r26
    10f8:	b0 93 39 04 	sts	0x0439, r27
	//if(PORTB &( 1<<PINB7))
	//	encoder2CNT++;
}
    10fc:	bf 91       	pop	r27
    10fe:	af 91       	pop	r26
    1100:	9f 91       	pop	r25
    1102:	8f 91       	pop	r24
    1104:	0f 90       	pop	r0
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	0f 90       	pop	r0
    110a:	1f 90       	pop	r1
    110c:	18 95       	reti

0000110e <main>:

volatile uint8_t sradc0, shouldBlink=0;

int main(void)
{
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	c4 56       	subi	r28, 0x64	; 100
    1118:	d1 09       	sbc	r29, r1
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	de bf       	out	0x3e, r29	; 62
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	cd bf       	out	0x3d, r28	; 61
	sei();
    1124:	78 94       	sei
	BTInit();
    1126:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <BTInit>
	timer_init();
    112a:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <timer_init>
	initLeds();
    112e:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <initLeds>
	initEngines();
    1132:	0e 94 17 02 	call	0x42e	; 0x42e <initEngines>
	initTimeQueue();
    1136:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <initTimeQueue>
	initSensors();
    113a:	0e 94 0b 05 	call	0xa16	; 0xa16 <initSensors>
	
	//PCMSK1 |= PCINT8;
	PCMSK1 |= PCINT15;
    113e:	ec e6       	ldi	r30, 0x6C	; 108
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	87 60       	ori	r24, 0x07	; 7
    1146:	80 83       	st	Z, r24
	//DDRB &= ~(1 << PINB0);
	DDRB &= ~(1 << PINB7);    
    1148:	27 98       	cbi	0x04, 7	; 4
	PCICR |= (1<<PCIE1);
    114a:	e8 e6       	ldi	r30, 0x68	; 104
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	82 60       	ori	r24, 0x02	; 2
    1152:	80 83       	st	Z, r24
	addEntryToTimerQueue(&resetEncoders, 500UL*1000UL, Once);
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	40 e2       	ldi	r20, 0x20	; 32
    1158:	51 ea       	ldi	r21, 0xA1	; 161
    115a:	67 e0       	ldi	r22, 0x07	; 7
    115c:	70 e0       	ldi	r23, 0x00	; 0
    115e:	87 ef       	ldi	r24, 0xF7	; 247
    1160:	93 e0       	ldi	r25, 0x03	; 3
    1162:	0e 94 03 09 	call	0x1206	; 0x1206 <addEntryToTimerQueue>
	
	encoder1CNT=0;
    1166:	10 92 36 04 	sts	0x0436, r1
    116a:	10 92 37 04 	sts	0x0437, r1
    116e:	10 92 38 04 	sts	0x0438, r1
    1172:	10 92 39 04 	sts	0x0439, r1
	 encoder2CNT=0;
    1176:	10 92 3a 04 	sts	0x043A, r1
    117a:	10 92 3b 04 	sts	0x043B, r1
    117e:	10 92 3c 04 	sts	0x043C, r1
    1182:	10 92 3d 04 	sts	0x043D, r1
	
	BTTransmitStr("  >>>main start<<<  ");
    1186:	8d eb       	ldi	r24, 0xBD	; 189
    1188:	92 e0       	ldi	r25, 0x02	; 2
    118a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <BTTransmitStr>
	
	char strBuffer[100];
	sprintf(strBuffer, "ic %lu", encoder1CNT);
    118e:	80 91 36 04 	lds	r24, 0x0436
    1192:	90 91 37 04 	lds	r25, 0x0437
    1196:	a0 91 38 04 	lds	r26, 0x0438
    119a:	b0 91 39 04 	lds	r27, 0x0439
    119e:	bf 93       	push	r27
    11a0:	af 93       	push	r26
    11a2:	9f 93       	push	r25
    11a4:	8f 93       	push	r24
    11a6:	82 ed       	ldi	r24, 0xD2	; 210
    11a8:	92 e0       	ldi	r25, 0x02	; 2
    11aa:	9f 93       	push	r25
    11ac:	8f 93       	push	r24
    11ae:	8e 01       	movw	r16, r28
    11b0:	0f 5f       	subi	r16, 0xFF	; 255
    11b2:	1f 4f       	sbci	r17, 0xFF	; 255
    11b4:	1f 93       	push	r17
    11b6:	0f 93       	push	r16
    11b8:	0e 94 8e 0c 	call	0x191c	; 0x191c <sprintf>
	BTTransmitStr(strBuffer);
    11bc:	c8 01       	movw	r24, r16
    11be:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <BTTransmitStr>
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	de bf       	out	0x3e, r29	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	cd bf       	out	0x3d, r28	; 61
	
    while(1)
    {
		
		checkTimeQueue();
    11cc:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <checkTimeQueue>
    11d0:	fd cf       	rjmp	.-6      	; 0x11cc <main+0xbe>

000011d2 <initTimeQueue>:
extern uint32_t time;

void initTimeQueue(){
	uint8_t i;
	// initializez toti pointerii cu 0, adica pe fiecare pozitie din coada e o structura neocupata
	for(i=0;i<TimerQueueSize;i++)
    11d2:	40 91 01 01 	lds	r20, 0x0101
    11d6:	44 23       	and	r20, r20
    11d8:	a9 f0       	breq	.+42     	; 0x1204 <initTimeQueue+0x32>
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	90 e0       	ldi	r25, 0x00	; 0
		TimerQueue[i].pointerFct = 0;
    11de:	fc 01       	movw	r30, r24
    11e0:	ee 0f       	add	r30, r30
    11e2:	ff 1f       	adc	r31, r31
    11e4:	9c 01       	movw	r18, r24
    11e6:	22 0f       	add	r18, r18
    11e8:	33 1f       	adc	r19, r19
    11ea:	22 0f       	add	r18, r18
    11ec:	33 1f       	adc	r19, r19
    11ee:	22 0f       	add	r18, r18
    11f0:	33 1f       	adc	r19, r19
    11f2:	e2 0f       	add	r30, r18
    11f4:	f3 1f       	adc	r31, r19
    11f6:	e6 57       	subi	r30, 0x76	; 118
    11f8:	fb 4f       	sbci	r31, 0xFB	; 251
    11fa:	11 86       	std	Z+9, r1	; 0x09
    11fc:	10 86       	std	Z+8, r1	; 0x08
    11fe:	01 96       	adiw	r24, 0x01	; 1
extern uint32_t time;

void initTimeQueue(){
	uint8_t i;
	// initializez toti pointerii cu 0, adica pe fiecare pozitie din coada e o structura neocupata
	for(i=0;i<TimerQueueSize;i++)
    1200:	84 17       	cp	r24, r20
    1202:	68 f3       	brcs	.-38     	; 0x11de <initTimeQueue+0xc>
    1204:	08 95       	ret

00001206 <addEntryToTimerQueue>:
		TimerQueue[i].pointerFct = 0;
}

extern volatile uint8_t debugging;
// delay e in microsecunde (10^-6 secunde)
void addEntryToTimerQueue(void (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
    1206:	df 92       	push	r13
    1208:	ef 92       	push	r14
    120a:	ff 92       	push	r15
    120c:	0f 93       	push	r16
    120e:	1f 93       	push	r17
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    1218:	ce 56       	subi	r28, 0x6E	; 110
    121a:	d1 09       	sbc	r29, r1
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
	cli(); // dezactivare intreruperi
    1226:	f8 94       	cli
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
    1228:	d0 90 01 01 	lds	r13, 0x0101
    122c:	dd 20       	and	r13, r13
    122e:	09 f4       	brne	.+2      	; 0x1232 <addEntryToTimerQueue+0x2c>
    1230:	77 c0       	rjmp	.+238    	; 0x1320 <addEntryToTimerQueue+0x11a>
		if(TimerQueue[i].pointerFct == 0)
    1232:	e0 91 92 04 	lds	r30, 0x0492
    1236:	f0 91 93 04 	lds	r31, 0x0493
    123a:	ef 2b       	or	r30, r31
    123c:	09 f4       	brne	.+2      	; 0x1240 <addEntryToTimerQueue+0x3a>
    123e:	7a c0       	rjmp	.+244    	; 0x1334 <addEntryToTimerQueue+0x12e>
			break;
		if(TimerQueue[i].pointerFct == _theFct){
    1240:	e0 91 92 04 	lds	r30, 0x0492
    1244:	f0 91 93 04 	lds	r31, 0x0493
    1248:	e8 17       	cp	r30, r24
    124a:	f9 07       	cpc	r31, r25
    124c:	09 f0       	breq	.+2      	; 0x1250 <addEntryToTimerQueue+0x4a>
    124e:	5e c0       	rjmp	.+188    	; 0x130c <addEntryToTimerQueue+0x106>
    1250:	2d c0       	rjmp	.+90     	; 0x12ac <addEntryToTimerQueue+0xa6>
void addEntryToTimerQueue(void (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
	cli(); // dezactivare intreruperi
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct == 0)
    1252:	7f 01       	movw	r14, r30
    1254:	df 01       	movw	r26, r30
    1256:	aa 0f       	add	r26, r26
    1258:	bb 1f       	adc	r27, r27
    125a:	aa 0f       	add	r26, r26
    125c:	bb 1f       	adc	r27, r27
    125e:	aa 0f       	add	r26, r26
    1260:	bb 1f       	adc	r27, r27
    1262:	8f 01       	movw	r16, r30
    1264:	00 0f       	add	r16, r16
    1266:	11 1f       	adc	r17, r17
    1268:	a0 0f       	add	r26, r16
    126a:	b1 1f       	adc	r27, r17
    126c:	a6 57       	subi	r26, 0x76	; 118
    126e:	bb 4f       	sbci	r27, 0xFB	; 251
    1270:	18 96       	adiw	r26, 0x08	; 8
    1272:	0d 90       	ld	r0, X+
    1274:	bc 91       	ld	r27, X
    1276:	a0 2d       	mov	r26, r0
    1278:	ab 2b       	or	r26, r27
    127a:	09 f4       	brne	.+2      	; 0x127e <addEntryToTimerQueue+0x78>
    127c:	4e c0       	rjmp	.+156    	; 0x131a <addEntryToTimerQueue+0x114>
			break;
		if(TimerQueue[i].pointerFct == _theFct){
    127e:	8f 01       	movw	r16, r30
    1280:	00 0f       	add	r16, r16
    1282:	11 1f       	adc	r17, r17
    1284:	df 01       	movw	r26, r30
    1286:	aa 0f       	add	r26, r26
    1288:	bb 1f       	adc	r27, r27
    128a:	aa 0f       	add	r26, r26
    128c:	bb 1f       	adc	r27, r27
    128e:	aa 0f       	add	r26, r26
    1290:	bb 1f       	adc	r27, r27
    1292:	a0 0f       	add	r26, r16
    1294:	b1 1f       	adc	r27, r17
    1296:	a6 57       	subi	r26, 0x76	; 118
    1298:	bb 4f       	sbci	r27, 0xFB	; 251
    129a:	18 96       	adiw	r26, 0x08	; 8
    129c:	0d 90       	ld	r0, X+
    129e:	bc 91       	ld	r27, X
    12a0:	a0 2d       	mov	r26, r0
    12a2:	31 96       	adiw	r30, 0x01	; 1
    12a4:	a8 17       	cp	r26, r24
    12a6:	b9 07       	cpc	r27, r25
    12a8:	99 f5       	brne	.+102    	; 0x1310 <addEntryToTimerQueue+0x10a>
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <addEntryToTimerQueue+0xaa>
void addEntryToTimerQueue(void (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
	cli(); // dezactivare intreruperi
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct == 0)
    12ac:	e1 2c       	mov	r14, r1
    12ae:	f1 2c       	mov	r15, r1
			break;
		if(TimerQueue[i].pointerFct == _theFct){
			if(debugging){
    12b0:	80 91 00 01 	lds	r24, 0x0100
    12b4:	88 23       	and	r24, r24
    12b6:	09 f4       	brne	.+2      	; 0x12ba <addEntryToTimerQueue+0xb4>
    12b8:	98 c0       	rjmp	.+304    	; 0x13ea <addEntryToTimerQueue+0x1e4>
				char msg[100];
				sprintf(msg, "Functia asta e deja in coada! cu delay: %lu", TimerQueue[i].delay);
    12ba:	f7 01       	movw	r30, r14
    12bc:	ee 0f       	add	r30, r30
    12be:	ff 1f       	adc	r31, r31
    12c0:	ee 0c       	add	r14, r14
    12c2:	ff 1c       	adc	r15, r15
    12c4:	ee 0c       	add	r14, r14
    12c6:	ff 1c       	adc	r15, r15
    12c8:	ee 0c       	add	r14, r14
    12ca:	ff 1c       	adc	r15, r15
    12cc:	ee 0d       	add	r30, r14
    12ce:	ff 1d       	adc	r31, r15
    12d0:	e6 57       	subi	r30, 0x76	; 118
    12d2:	fb 4f       	sbci	r31, 0xFB	; 251
    12d4:	80 81       	ld	r24, Z
    12d6:	91 81       	ldd	r25, Z+1	; 0x01
    12d8:	a2 81       	ldd	r26, Z+2	; 0x02
    12da:	b3 81       	ldd	r27, Z+3	; 0x03
    12dc:	bf 93       	push	r27
    12de:	af 93       	push	r26
    12e0:	9f 93       	push	r25
    12e2:	8f 93       	push	r24
    12e4:	89 ed       	ldi	r24, 0xD9	; 217
    12e6:	92 e0       	ldi	r25, 0x02	; 2
    12e8:	9f 93       	push	r25
    12ea:	8f 93       	push	r24
    12ec:	8e 01       	movw	r16, r28
    12ee:	05 5f       	subi	r16, 0xF5	; 245
    12f0:	1f 4f       	sbci	r17, 0xFF	; 255
    12f2:	1f 93       	push	r17
    12f4:	0f 93       	push	r16
    12f6:	0e 94 8e 0c 	call	0x191c	; 0x191c <sprintf>
				BTTransmitStr(msg);
    12fa:	c8 01       	movw	r24, r16
    12fc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <BTTransmitStr>
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
    130a:	6f c0       	rjmp	.+222    	; 0x13ea <addEntryToTimerQueue+0x1e4>
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct == 0)
			break;
		if(TimerQueue[i].pointerFct == _theFct){
    130c:	e1 e0       	ldi	r30, 0x01	; 1
    130e:	f0 e0       	ldi	r31, 0x00	; 0
// delay e in microsecunde (10^-6 secunde)
void addEntryToTimerQueue(void (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
	cli(); // dezactivare intreruperi
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
    1310:	3e 2f       	mov	r19, r30
    1312:	ed 15       	cp	r30, r13
    1314:	08 f4       	brcc	.+2      	; 0x1318 <addEntryToTimerQueue+0x112>
    1316:	9d cf       	rjmp	.-198    	; 0x1252 <addEntryToTimerQueue+0x4c>
    1318:	01 c0       	rjmp	.+2      	; 0x131c <addEntryToTimerQueue+0x116>
    131a:	e3 2f       	mov	r30, r19
				BTTransmitStr(msg);
			}
			return;
		}
	}
	if(i == TimerQueueSize){
    131c:	ed 11       	cpse	r30, r13
    131e:	0b c0       	rjmp	.+22     	; 0x1336 <addEntryToTimerQueue+0x130>
		//nu mai e loc in coada
		if(debugging)
    1320:	80 91 00 01 	lds	r24, 0x0100
    1324:	88 23       	and	r24, r24
    1326:	09 f4       	brne	.+2      	; 0x132a <addEntryToTimerQueue+0x124>
    1328:	60 c0       	rjmp	.+192    	; 0x13ea <addEntryToTimerQueue+0x1e4>
			BTTransmitStr("Coada e full!");
    132a:	85 e0       	ldi	r24, 0x05	; 5
    132c:	93 e0       	ldi	r25, 0x03	; 3
    132e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <BTTransmitStr>
    1332:	5b c0       	rjmp	.+182    	; 0x13ea <addEntryToTimerQueue+0x1e4>
// delay e in microsecunde (10^-6 secunde)
void addEntryToTimerQueue(void (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
	cli(); // dezactivare intreruperi
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
    1334:	30 e0       	ldi	r19, 0x00	; 0
	}
	
	//construire entry pentru functia curenta 
	queueEntry thisEntry;
	thisEntry.delay = _delay;
	thisEntry.repeatDelay = _repeat ? _delay :0;
    1336:	21 11       	cpse	r18, r1
    1338:	04 c0       	rjmp	.+8      	; 0x1342 <addEntryToTimerQueue+0x13c>
    133a:	a0 e0       	ldi	r26, 0x00	; 0
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	e0 e0       	ldi	r30, 0x00	; 0
    1340:	04 c0       	rjmp	.+8      	; 0x134a <addEntryToTimerQueue+0x144>
    1342:	a4 2f       	mov	r26, r20
    1344:	f5 2f       	mov	r31, r21
    1346:	e6 2f       	mov	r30, r22
    1348:	27 2f       	mov	r18, r23
	thisEntry.pointerFct = _theFct;
	
	TimerQueue[i] = thisEntry;
    134a:	03 2f       	mov	r16, r19
    134c:	10 e0       	ldi	r17, 0x00	; 0
    134e:	49 83       	std	Y+1, r20	; 0x01
    1350:	5a 83       	std	Y+2, r21	; 0x02
    1352:	6b 83       	std	Y+3, r22	; 0x03
    1354:	7c 83       	std	Y+4, r23	; 0x04
    1356:	ad 83       	std	Y+5, r26	; 0x05
    1358:	fe 83       	std	Y+6, r31	; 0x06
    135a:	ef 83       	std	Y+7, r30	; 0x07
    135c:	28 87       	std	Y+8, r18	; 0x08
    135e:	9a 87       	std	Y+10, r25	; 0x0a
    1360:	89 87       	std	Y+9, r24	; 0x09
    1362:	d8 01       	movw	r26, r16
    1364:	aa 0f       	add	r26, r26
    1366:	bb 1f       	adc	r27, r27
    1368:	c8 01       	movw	r24, r16
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	a8 0f       	add	r26, r24
    1378:	b9 1f       	adc	r27, r25
    137a:	a6 57       	subi	r26, 0x76	; 118
    137c:	bb 4f       	sbci	r27, 0xFB	; 251
    137e:	8a e0       	ldi	r24, 0x0A	; 10
    1380:	fe 01       	movw	r30, r28
    1382:	31 96       	adiw	r30, 0x01	; 1
    1384:	01 90       	ld	r0, Z+
    1386:	0d 92       	st	X+, r0
    1388:	8a 95       	dec	r24
    138a:	e1 f7       	brne	.-8      	; 0x1384 <addEntryToTimerQueue+0x17e>
	
	if(debugging){
    138c:	80 91 00 01 	lds	r24, 0x0100
    1390:	88 23       	and	r24, r24
    1392:	51 f1       	breq	.+84     	; 0x13e8 <addEntryToTimerQueue+0x1e2>
		char msg[100];		
		sprintf(msg, "Entry adaugat in coada! la index %d si cu delay: %lu", i, TimerQueue[i].delay);
    1394:	f8 01       	movw	r30, r16
    1396:	ee 0f       	add	r30, r30
    1398:	ff 1f       	adc	r31, r31
    139a:	00 0f       	add	r16, r16
    139c:	11 1f       	adc	r17, r17
    139e:	00 0f       	add	r16, r16
    13a0:	11 1f       	adc	r17, r17
    13a2:	00 0f       	add	r16, r16
    13a4:	11 1f       	adc	r17, r17
    13a6:	e0 0f       	add	r30, r16
    13a8:	f1 1f       	adc	r31, r17
    13aa:	e6 57       	subi	r30, 0x76	; 118
    13ac:	fb 4f       	sbci	r31, 0xFB	; 251
    13ae:	80 81       	ld	r24, Z
    13b0:	91 81       	ldd	r25, Z+1	; 0x01
    13b2:	a2 81       	ldd	r26, Z+2	; 0x02
    13b4:	b3 81       	ldd	r27, Z+3	; 0x03
    13b6:	bf 93       	push	r27
    13b8:	af 93       	push	r26
    13ba:	9f 93       	push	r25
    13bc:	8f 93       	push	r24
    13be:	1f 92       	push	r1
    13c0:	3f 93       	push	r19
    13c2:	83 e1       	ldi	r24, 0x13	; 19
    13c4:	93 e0       	ldi	r25, 0x03	; 3
    13c6:	9f 93       	push	r25
    13c8:	8f 93       	push	r24
    13ca:	8e 01       	movw	r16, r28
    13cc:	05 5f       	subi	r16, 0xF5	; 245
    13ce:	1f 4f       	sbci	r17, 0xFF	; 255
    13d0:	1f 93       	push	r17
    13d2:	0f 93       	push	r16
    13d4:	0e 94 8e 0c 	call	0x191c	; 0x191c <sprintf>
		BTTransmitStr(msg);
    13d8:	c8 01       	movw	r24, r16
    13da:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <BTTransmitStr>
    13de:	0f b6       	in	r0, 0x3f	; 63
    13e0:	f8 94       	cli
    13e2:	de bf       	out	0x3e, r29	; 62
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	cd bf       	out	0x3d, r28	; 61
	}
	sei();
    13e8:	78 94       	sei
}
    13ea:	c2 59       	subi	r28, 0x92	; 146
    13ec:	df 4f       	sbci	r29, 0xFF	; 255
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	de bf       	out	0x3e, r29	; 62
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	cd bf       	out	0x3d, r28	; 61
    13f8:	df 91       	pop	r29
    13fa:	cf 91       	pop	r28
    13fc:	1f 91       	pop	r17
    13fe:	0f 91       	pop	r16
    1400:	ff 90       	pop	r15
    1402:	ef 90       	pop	r14
    1404:	df 90       	pop	r13
    1406:	08 95       	ret

00001408 <removeEntryFromTimerQueue>:
void removeEntryFromTimerQueue(void (*_theFct) (void)){
    1408:	bf 92       	push	r11
    140a:	cf 92       	push	r12
    140c:	df 92       	push	r13
    140e:	ef 92       	push	r14
    1410:	ff 92       	push	r15
    1412:	0f 93       	push	r16
    1414:	1f 93       	push	r17
    1416:	cf 93       	push	r28
    1418:	df 93       	push	r29
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	c4 56       	subi	r28, 0x64	; 100
    1420:	d1 09       	sbc	r29, r1
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	f8 94       	cli
    1426:	de bf       	out	0x3e, r29	; 62
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	cd bf       	out	0x3d, r28	; 61
    142c:	8c 01       	movw	r16, r24
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
    142e:	80 91 01 01 	lds	r24, 0x0101
    1432:	88 23       	and	r24, r24
    1434:	09 f4       	brne	.+2      	; 0x1438 <removeEntryFromTimerQueue+0x30>
    1436:	52 c0       	rjmp	.+164    	; 0x14dc <removeEntryFromTimerQueue+0xd4>
    1438:	b1 2c       	mov	r11, r1
			TimerQueue[i].pointerFct = 0;
			TimerQueue[i].delay = 0;
			TimerQueue[i].repeatDelay = 0;
			if(debugging){
				char msg[100];
				sprintf(msg, "Entry sters din coada. de pe pozitia %d", i);
    143a:	0f 2e       	mov	r0, r31
    143c:	f8 e4       	ldi	r31, 0x48	; 72
    143e:	cf 2e       	mov	r12, r31
    1440:	f3 e0       	ldi	r31, 0x03	; 3
    1442:	df 2e       	mov	r13, r31
    1444:	f0 2d       	mov	r31, r0
    1446:	ce 01       	movw	r24, r28
    1448:	01 96       	adiw	r24, 0x01	; 1
    144a:	7c 01       	movw	r14, r24
	sei();
}
void removeEntryFromTimerQueue(void (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct == _theFct){
    144c:	2b 2d       	mov	r18, r11
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	f9 01       	movw	r30, r18
    1452:	ee 0f       	add	r30, r30
    1454:	ff 1f       	adc	r31, r31
    1456:	c9 01       	movw	r24, r18
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	e8 0f       	add	r30, r24
    1466:	f9 1f       	adc	r31, r25
    1468:	e6 57       	subi	r30, 0x76	; 118
    146a:	fb 4f       	sbci	r31, 0xFB	; 251
    146c:	40 85       	ldd	r20, Z+8	; 0x08
    146e:	51 85       	ldd	r21, Z+9	; 0x09
    1470:	40 17       	cp	r20, r16
    1472:	51 07       	cpc	r21, r17
    1474:	69 f5       	brne	.+90     	; 0x14d0 <removeEntryFromTimerQueue+0xc8>
			TimerQueue[i].pointerFct = 0;
    1476:	c9 01       	movw	r24, r18
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	f9 01       	movw	r30, r18
    1486:	ee 0f       	add	r30, r30
    1488:	ff 1f       	adc	r31, r31
    148a:	e8 0f       	add	r30, r24
    148c:	f9 1f       	adc	r31, r25
    148e:	e6 57       	subi	r30, 0x76	; 118
    1490:	fb 4f       	sbci	r31, 0xFB	; 251
    1492:	11 86       	std	Z+9, r1	; 0x09
    1494:	10 86       	std	Z+8, r1	; 0x08
			TimerQueue[i].delay = 0;
    1496:	10 82       	st	Z, r1
    1498:	11 82       	std	Z+1, r1	; 0x01
    149a:	12 82       	std	Z+2, r1	; 0x02
    149c:	13 82       	std	Z+3, r1	; 0x03
			TimerQueue[i].repeatDelay = 0;
    149e:	14 82       	std	Z+4, r1	; 0x04
    14a0:	15 82       	std	Z+5, r1	; 0x05
    14a2:	16 82       	std	Z+6, r1	; 0x06
    14a4:	17 82       	std	Z+7, r1	; 0x07
			if(debugging){
    14a6:	80 91 00 01 	lds	r24, 0x0100
    14aa:	88 23       	and	r24, r24
    14ac:	89 f0       	breq	.+34     	; 0x14d0 <removeEntryFromTimerQueue+0xc8>
				char msg[100];
				sprintf(msg, "Entry sters din coada. de pe pozitia %d", i);
    14ae:	3f 93       	push	r19
    14b0:	bf 92       	push	r11
    14b2:	df 92       	push	r13
    14b4:	cf 92       	push	r12
    14b6:	ff 92       	push	r15
    14b8:	ef 92       	push	r14
    14ba:	0e 94 8e 0c 	call	0x191c	; 0x191c <sprintf>
				BTTransmitStr(msg);
    14be:	c7 01       	movw	r24, r14
    14c0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <BTTransmitStr>
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
	}
	sei();
}
void removeEntryFromTimerQueue(void (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
    14d0:	b3 94       	inc	r11
    14d2:	80 91 01 01 	lds	r24, 0x0101
    14d6:	b8 16       	cp	r11, r24
    14d8:	08 f4       	brcc	.+2      	; 0x14dc <removeEntryFromTimerQueue+0xd4>
    14da:	b8 cf       	rjmp	.-144    	; 0x144c <removeEntryFromTimerQueue+0x44>
				sprintf(msg, "Entry sters din coada. de pe pozitia %d", i);
				BTTransmitStr(msg);
			}
		}
	}
}
    14dc:	cc 59       	subi	r28, 0x9C	; 156
    14de:	df 4f       	sbci	r29, 0xFF	; 255
    14e0:	0f b6       	in	r0, 0x3f	; 63
    14e2:	f8 94       	cli
    14e4:	de bf       	out	0x3e, r29	; 62
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	cd bf       	out	0x3d, r28	; 61
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	1f 91       	pop	r17
    14f0:	0f 91       	pop	r16
    14f2:	ff 90       	pop	r15
    14f4:	ef 90       	pop	r14
    14f6:	df 90       	pop	r13
    14f8:	cf 90       	pop	r12
    14fa:	bf 90       	pop	r11
    14fc:	08 95       	ret

000014fe <existsEntryInTimerQueue>:

uint8_t existsEntryInTimerQueue(void (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
    14fe:	60 91 01 01 	lds	r22, 0x0101
    1502:	66 23       	and	r22, r22
    1504:	19 f1       	breq	.+70     	; 0x154c <existsEntryInTimerQueue+0x4e>
		if(TimerQueue[i].pointerFct == _theFct){
    1506:	20 91 92 04 	lds	r18, 0x0492
    150a:	30 91 93 04 	lds	r19, 0x0493
    150e:	28 17       	cp	r18, r24
    1510:	39 07       	cpc	r19, r25
    1512:	f1 f0       	breq	.+60     	; 0x1550 <existsEntryInTimerQueue+0x52>
    1514:	21 e0       	ldi	r18, 0x01	; 1
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	15 c0       	rjmp	.+42     	; 0x1544 <existsEntryInTimerQueue+0x46>
    151a:	f9 01       	movw	r30, r18
    151c:	ee 0f       	add	r30, r30
    151e:	ff 1f       	adc	r31, r31
    1520:	a9 01       	movw	r20, r18
    1522:	44 0f       	add	r20, r20
    1524:	55 1f       	adc	r21, r21
    1526:	44 0f       	add	r20, r20
    1528:	55 1f       	adc	r21, r21
    152a:	44 0f       	add	r20, r20
    152c:	55 1f       	adc	r21, r21
    152e:	e4 0f       	add	r30, r20
    1530:	f5 1f       	adc	r31, r21
    1532:	e6 57       	subi	r30, 0x76	; 118
    1534:	fb 4f       	sbci	r31, 0xFB	; 251
    1536:	40 85       	ldd	r20, Z+8	; 0x08
    1538:	51 85       	ldd	r21, Z+9	; 0x09
    153a:	2f 5f       	subi	r18, 0xFF	; 255
    153c:	3f 4f       	sbci	r19, 0xFF	; 255
    153e:	48 17       	cp	r20, r24
    1540:	59 07       	cpc	r21, r25
    1542:	41 f0       	breq	.+16     	; 0x1554 <existsEntryInTimerQueue+0x56>
	}
}

uint8_t existsEntryInTimerQueue(void (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
    1544:	26 17       	cp	r18, r22
    1546:	48 f3       	brcs	.-46     	; 0x151a <existsEntryInTimerQueue+0x1c>
		if(TimerQueue[i].pointerFct == _theFct){
			
			return 1;
		}
	}
	return 0;
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	08 95       	ret
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	08 95       	ret
uint8_t existsEntryInTimerQueue(void (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct == _theFct){
			
			return 1;
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	08 95       	ret
    1554:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    1556:	08 95       	ret

00001558 <addEntryIfNotExists>:

void addEntryIfNotExists(void (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
    1558:	cf 92       	push	r12
    155a:	df 92       	push	r13
    155c:	ef 92       	push	r14
    155e:	ff 92       	push	r15
    1560:	1f 93       	push	r17
    1562:	cf 93       	push	r28
    1564:	df 93       	push	r29
    1566:	ec 01       	movw	r28, r24
    1568:	6a 01       	movw	r12, r20
    156a:	7b 01       	movw	r14, r22
    156c:	12 2f       	mov	r17, r18
	if(!existsEntryInTimerQueue(_theFct)){
    156e:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <existsEntryInTimerQueue>
    1572:	81 11       	cpse	r24, r1
    1574:	06 c0       	rjmp	.+12     	; 0x1582 <addEntryIfNotExists+0x2a>
		addEntryToTimerQueue(_theFct, _delay, _repeat);
    1576:	21 2f       	mov	r18, r17
    1578:	b7 01       	movw	r22, r14
    157a:	a6 01       	movw	r20, r12
    157c:	ce 01       	movw	r24, r28
    157e:	0e 94 03 09 	call	0x1206	; 0x1206 <addEntryToTimerQueue>
	}	
}
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	1f 91       	pop	r17
    1588:	ff 90       	pop	r15
    158a:	ef 90       	pop	r14
    158c:	df 90       	pop	r13
    158e:	cf 90       	pop	r12
    1590:	08 95       	ret

00001592 <timePassed>:
//se apeleaza din intrerupere (cate microsecunde au trecut)
//pentru fiecare functie(valida) din queue se scade din delay numarul de microsecunde care a trecut

void timePassed(uint32_t passed_us){
    1592:	8f 92       	push	r8
    1594:	9f 92       	push	r9
    1596:	af 92       	push	r10
    1598:	bf 92       	push	r11
    159a:	df 92       	push	r13
    159c:	ef 92       	push	r14
    159e:	ff 92       	push	r15
    15a0:	0f 93       	push	r16
    15a2:	1f 93       	push	r17
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
    15a8:	10 91 01 01 	lds	r17, 0x0101
    15ac:	11 23       	and	r17, r17
    15ae:	09 f4       	brne	.+2      	; 0x15b2 <timePassed+0x20>
    15b0:	7b c0       	rjmp	.+246    	; 0x16a8 <timePassed+0x116>
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
		if(TimerQueue[i].pointerFct != 0){
			if(TimerQueue[i].delay > 0)
				TimerQueue[i].delay = TimerQueue[i].delay > passed_us ? TimerQueue[i].delay-passed_us : 0;
    15b6:	d1 2c       	mov	r13, r1
    15b8:	e1 2c       	mov	r14, r1
    15ba:	f1 2c       	mov	r15, r1
    15bc:	00 e0       	ldi	r16, 0x00	; 0
//pentru fiecare functie(valida) din queue se scade din delay numarul de microsecunde care a trecut

void timePassed(uint32_t passed_us){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct != 0){
    15be:	f9 01       	movw	r30, r18
    15c0:	a9 01       	movw	r20, r18
    15c2:	44 0f       	add	r20, r20
    15c4:	55 1f       	adc	r21, r21
    15c6:	44 0f       	add	r20, r20
    15c8:	55 1f       	adc	r21, r21
    15ca:	44 0f       	add	r20, r20
    15cc:	55 1f       	adc	r21, r21
    15ce:	d9 01       	movw	r26, r18
    15d0:	aa 0f       	add	r26, r26
    15d2:	bb 1f       	adc	r27, r27
    15d4:	a4 0f       	add	r26, r20
    15d6:	b5 1f       	adc	r27, r21
    15d8:	a6 57       	subi	r26, 0x76	; 118
    15da:	bb 4f       	sbci	r27, 0xFB	; 251
    15dc:	18 96       	adiw	r26, 0x08	; 8
    15de:	4d 91       	ld	r20, X+
    15e0:	5c 91       	ld	r21, X
    15e2:	19 97       	sbiw	r26, 0x09	; 9
    15e4:	45 2b       	or	r20, r21
    15e6:	09 f4       	brne	.+2      	; 0x15ea <timePassed+0x58>
    15e8:	5a c0       	rjmp	.+180    	; 0x169e <timePassed+0x10c>
			if(TimerQueue[i].delay > 0)
    15ea:	a9 01       	movw	r20, r18
    15ec:	44 0f       	add	r20, r20
    15ee:	55 1f       	adc	r21, r21
    15f0:	44 0f       	add	r20, r20
    15f2:	55 1f       	adc	r21, r21
    15f4:	44 0f       	add	r20, r20
    15f6:	55 1f       	adc	r21, r21
    15f8:	d9 01       	movw	r26, r18
    15fa:	aa 0f       	add	r26, r26
    15fc:	bb 1f       	adc	r27, r27
    15fe:	a4 0f       	add	r26, r20
    1600:	b5 1f       	adc	r27, r21
    1602:	a6 57       	subi	r26, 0x76	; 118
    1604:	bb 4f       	sbci	r27, 0xFB	; 251
    1606:	8d 90       	ld	r8, X+
    1608:	9d 90       	ld	r9, X+
    160a:	ad 90       	ld	r10, X+
    160c:	bc 90       	ld	r11, X
    160e:	89 28       	or	r8, r9
    1610:	8a 28       	or	r8, r10
    1612:	8b 28       	or	r8, r11
    1614:	09 f4       	brne	.+2      	; 0x1618 <timePassed+0x86>
    1616:	43 c0       	rjmp	.+134    	; 0x169e <timePassed+0x10c>
				TimerQueue[i].delay = TimerQueue[i].delay > passed_us ? TimerQueue[i].delay-passed_us : 0;
    1618:	a9 01       	movw	r20, r18
    161a:	44 0f       	add	r20, r20
    161c:	55 1f       	adc	r21, r21
    161e:	44 0f       	add	r20, r20
    1620:	55 1f       	adc	r21, r21
    1622:	44 0f       	add	r20, r20
    1624:	55 1f       	adc	r21, r21
    1626:	d9 01       	movw	r26, r18
    1628:	aa 0f       	add	r26, r26
    162a:	bb 1f       	adc	r27, r27
    162c:	a4 0f       	add	r26, r20
    162e:	b5 1f       	adc	r27, r21
    1630:	a6 57       	subi	r26, 0x76	; 118
    1632:	bb 4f       	sbci	r27, 0xFB	; 251
    1634:	8d 90       	ld	r8, X+
    1636:	9d 90       	ld	r9, X+
    1638:	ad 90       	ld	r10, X+
    163a:	bc 90       	ld	r11, X
    163c:	68 15       	cp	r22, r8
    163e:	79 05       	cpc	r23, r9
    1640:	8a 05       	cpc	r24, r10
    1642:	9b 05       	cpc	r25, r11
    1644:	b8 f4       	brcc	.+46     	; 0x1674 <timePassed+0xe2>
    1646:	a9 01       	movw	r20, r18
    1648:	44 0f       	add	r20, r20
    164a:	55 1f       	adc	r21, r21
    164c:	44 0f       	add	r20, r20
    164e:	55 1f       	adc	r21, r21
    1650:	44 0f       	add	r20, r20
    1652:	55 1f       	adc	r21, r21
    1654:	d9 01       	movw	r26, r18
    1656:	aa 0f       	add	r26, r26
    1658:	bb 1f       	adc	r27, r27
    165a:	a4 0f       	add	r26, r20
    165c:	b5 1f       	adc	r27, r21
    165e:	a6 57       	subi	r26, 0x76	; 118
    1660:	bb 4f       	sbci	r27, 0xFB	; 251
    1662:	8d 90       	ld	r8, X+
    1664:	9d 90       	ld	r9, X+
    1666:	ad 90       	ld	r10, X+
    1668:	bc 90       	ld	r11, X
    166a:	86 1a       	sub	r8, r22
    166c:	97 0a       	sbc	r9, r23
    166e:	a8 0a       	sbc	r10, r24
    1670:	b9 0a       	sbc	r11, r25
    1672:	04 c0       	rjmp	.+8      	; 0x167c <timePassed+0xea>
    1674:	8d 2c       	mov	r8, r13
    1676:	9e 2c       	mov	r9, r14
    1678:	af 2c       	mov	r10, r15
    167a:	b0 2e       	mov	r11, r16
    167c:	ef 01       	movw	r28, r30
    167e:	cc 0f       	add	r28, r28
    1680:	dd 1f       	adc	r29, r29
    1682:	ee 0f       	add	r30, r30
    1684:	ff 1f       	adc	r31, r31
    1686:	ee 0f       	add	r30, r30
    1688:	ff 1f       	adc	r31, r31
    168a:	ee 0f       	add	r30, r30
    168c:	ff 1f       	adc	r31, r31
    168e:	ec 0f       	add	r30, r28
    1690:	fd 1f       	adc	r31, r29
    1692:	e6 57       	subi	r30, 0x76	; 118
    1694:	fb 4f       	sbci	r31, 0xFB	; 251
    1696:	80 82       	st	Z, r8
    1698:	91 82       	std	Z+1, r9	; 0x01
    169a:	a2 82       	std	Z+2, r10	; 0x02
    169c:	b3 82       	std	Z+3, r11	; 0x03
    169e:	2f 5f       	subi	r18, 0xFF	; 255
    16a0:	3f 4f       	sbci	r19, 0xFF	; 255
//se apeleaza din intrerupere (cate microsecunde au trecut)
//pentru fiecare functie(valida) din queue se scade din delay numarul de microsecunde care a trecut

void timePassed(uint32_t passed_us){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
    16a2:	21 17       	cp	r18, r17
    16a4:	08 f4       	brcc	.+2      	; 0x16a8 <timePassed+0x116>
    16a6:	8b cf       	rjmp	.-234    	; 0x15be <timePassed+0x2c>
		if(TimerQueue[i].pointerFct != 0){
			if(TimerQueue[i].delay > 0)
				TimerQueue[i].delay = TimerQueue[i].delay > passed_us ? TimerQueue[i].delay-passed_us : 0;
		}
	}
}
    16a8:	df 91       	pop	r29
    16aa:	cf 91       	pop	r28
    16ac:	1f 91       	pop	r17
    16ae:	0f 91       	pop	r16
    16b0:	ff 90       	pop	r15
    16b2:	ef 90       	pop	r14
    16b4:	df 90       	pop	r13
    16b6:	bf 90       	pop	r11
    16b8:	af 90       	pop	r10
    16ba:	9f 90       	pop	r9
    16bc:	8f 90       	pop	r8
    16be:	08 95       	ret

000016c0 <checkTimeQueue>:

//se apeleaza din main loop
//verifica daca sunt functii care trebuie apelate (daca delay-ul lor a ajuns la 0)
void checkTimeQueue(void){
    16c0:	ef 92       	push	r14
    16c2:	ff 92       	push	r15
    16c4:	1f 93       	push	r17
    16c6:	cf 93       	push	r28
    16c8:	df 93       	push	r29
	cli();
    16ca:	f8 94       	cli
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
    16cc:	80 91 01 01 	lds	r24, 0x0101
    16d0:	88 23       	and	r24, r24
    16d2:	09 f4       	brne	.+2      	; 0x16d6 <checkTimeQueue+0x16>
    16d4:	57 c0       	rjmp	.+174    	; 0x1784 <checkTimeQueue+0xc4>
    16d6:	10 e0       	ldi	r17, 0x00	; 0
		if(TimerQueue[i].pointerFct != 0){
    16d8:	c1 2f       	mov	r28, r17
    16da:	d0 e0       	ldi	r29, 0x00	; 0
    16dc:	fe 01       	movw	r30, r28
    16de:	ee 0f       	add	r30, r30
    16e0:	ff 1f       	adc	r31, r31
    16e2:	ce 01       	movw	r24, r28
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	e8 0f       	add	r30, r24
    16f2:	f9 1f       	adc	r31, r25
    16f4:	e6 57       	subi	r30, 0x76	; 118
    16f6:	fb 4f       	sbci	r31, 0xFB	; 251
    16f8:	80 85       	ldd	r24, Z+8	; 0x08
    16fa:	91 85       	ldd	r25, Z+9	; 0x09
    16fc:	89 2b       	or	r24, r25
    16fe:	e1 f1       	breq	.+120    	; 0x1778 <checkTimeQueue+0xb8>
			if(TimerQueue[i].delay == 0){
    1700:	ce 01       	movw	r24, r28
    1702:	88 0f       	add	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	88 0f       	add	r24, r24
    170c:	99 1f       	adc	r25, r25
    170e:	fe 01       	movw	r30, r28
    1710:	ee 0f       	add	r30, r30
    1712:	ff 1f       	adc	r31, r31
    1714:	e8 0f       	add	r30, r24
    1716:	f9 1f       	adc	r31, r25
    1718:	e6 57       	subi	r30, 0x76	; 118
    171a:	fb 4f       	sbci	r31, 0xFB	; 251
    171c:	80 81       	ld	r24, Z
    171e:	91 81       	ldd	r25, Z+1	; 0x01
    1720:	a2 81       	ldd	r26, Z+2	; 0x02
    1722:	b3 81       	ldd	r27, Z+3	; 0x03
    1724:	89 2b       	or	r24, r25
    1726:	8a 2b       	or	r24, r26
    1728:	8b 2b       	or	r24, r27
    172a:	31 f5       	brne	.+76     	; 0x1778 <checkTimeQueue+0xb8>
				TimerQueue[i].pointerFct();
    172c:	7f 01       	movw	r14, r30
    172e:	00 84       	ldd	r0, Z+8	; 0x08
    1730:	f1 85       	ldd	r31, Z+9	; 0x09
    1732:	e0 2d       	mov	r30, r0
    1734:	09 95       	icall
				if(TimerQueue[i].repeatDelay)
    1736:	f7 01       	movw	r30, r14
    1738:	84 81       	ldd	r24, Z+4	; 0x04
    173a:	95 81       	ldd	r25, Z+5	; 0x05
    173c:	a6 81       	ldd	r26, Z+6	; 0x06
    173e:	b7 81       	ldd	r27, Z+7	; 0x07
    1740:	89 2b       	or	r24, r25
    1742:	8a 2b       	or	r24, r26
    1744:	8b 2b       	or	r24, r27
    1746:	49 f0       	breq	.+18     	; 0x175a <checkTimeQueue+0x9a>
					TimerQueue[i].delay = TimerQueue[i].repeatDelay;
    1748:	84 81       	ldd	r24, Z+4	; 0x04
    174a:	95 81       	ldd	r25, Z+5	; 0x05
    174c:	a6 81       	ldd	r26, Z+6	; 0x06
    174e:	b7 81       	ldd	r27, Z+7	; 0x07
    1750:	80 83       	st	Z, r24
    1752:	91 83       	std	Z+1, r25	; 0x01
    1754:	a2 83       	std	Z+2, r26	; 0x02
    1756:	b3 83       	std	Z+3, r27	; 0x03
    1758:	0f c0       	rjmp	.+30     	; 0x1778 <checkTimeQueue+0xb8>
				else
					TimerQueue[i].pointerFct = 0;
    175a:	ce 01       	movw	r24, r28
    175c:	88 0f       	add	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	cc 0f       	add	r28, r28
    1762:	dd 1f       	adc	r29, r29
    1764:	cc 0f       	add	r28, r28
    1766:	dd 1f       	adc	r29, r29
    1768:	cc 0f       	add	r28, r28
    176a:	dd 1f       	adc	r29, r29
    176c:	c8 0f       	add	r28, r24
    176e:	d9 1f       	adc	r29, r25
    1770:	c6 57       	subi	r28, 0x76	; 118
    1772:	db 4f       	sbci	r29, 0xFB	; 251
    1774:	19 86       	std	Y+9, r1	; 0x09
    1776:	18 86       	std	Y+8, r1	; 0x08
//se apeleaza din main loop
//verifica daca sunt functii care trebuie apelate (daca delay-ul lor a ajuns la 0)
void checkTimeQueue(void){
	cli();
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
    1778:	1f 5f       	subi	r17, 0xFF	; 255
    177a:	80 91 01 01 	lds	r24, 0x0101
    177e:	18 17       	cp	r17, r24
    1780:	08 f4       	brcc	.+2      	; 0x1784 <checkTimeQueue+0xc4>
    1782:	aa cf       	rjmp	.-172    	; 0x16d8 <checkTimeQueue+0x18>
				else
					TimerQueue[i].pointerFct = 0;
			}
		}
	}
	sei();
    1784:	78 94       	sei
}
    1786:	df 91       	pop	r29
    1788:	cf 91       	pop	r28
    178a:	1f 91       	pop	r17
    178c:	ff 90       	pop	r15
    178e:	ef 90       	pop	r14
    1790:	08 95       	ret

00001792 <resetTimerQueue>:

void resetTimerQueue(){
	initTimeQueue();	
    1792:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <initTimeQueue>
    1796:	08 95       	ret

00001798 <blinkLedD6_v1>:
#include "Car/Sensors.h"
#include "Car/Engines.h"
#include "PID/PID1.h"

volatile uint8_t e_stins = 0;
void blinkLedD6_v1(){
    1798:	08 95       	ret

0000179a <ledAction>:
void ledAction(char act){
	//char msg[] = "led action:  ";
	//msg[strlen(msg)-1]= act+'0';
	//BTTransmitStr(msg);
	
	switch(act){
    179a:	81 30       	cpi	r24, 0x01	; 1
    179c:	69 f0       	breq	.+26     	; 0x17b8 <ledAction+0x1e>
    179e:	18 f0       	brcs	.+6      	; 0x17a6 <ledAction+0xc>
    17a0:	82 30       	cpi	r24, 0x02	; 2
    17a2:	99 f0       	breq	.+38     	; 0x17ca <ledAction+0x30>
    17a4:	08 95       	ret
		case 0:
			removeEntryFromTimerQueue(&blinkLedD6_v1);
    17a6:	8c ec       	ldi	r24, 0xCC	; 204
    17a8:	9b e0       	ldi	r25, 0x0B	; 11
    17aa:	0e 94 04 0a 	call	0x1408	; 0x1408 <removeEntryFromTimerQueue>
			//PORTD &=~ (1<<PIND2);
			//shouldBlink = 0;
			BTTransmitStr("ledul a fost stins.");
    17ae:	80 e7       	ldi	r24, 0x70	; 112
    17b0:	93 e0       	ldi	r25, 0x03	; 3
    17b2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <BTTransmitStr>
			break;
    17b6:	08 95       	ret
		case 1:
			removeEntryFromTimerQueue(&blinkLedD6_v1);
    17b8:	8c ec       	ldi	r24, 0xCC	; 204
    17ba:	9b e0       	ldi	r25, 0x0B	; 11
    17bc:	0e 94 04 0a 	call	0x1408	; 0x1408 <removeEntryFromTimerQueue>
			//PORTD |= 1<<PIND2;
			//shouldBlink = 0;
			BTTransmitStr("ledul a fost aprins.");
    17c0:	84 e8       	ldi	r24, 0x84	; 132
    17c2:	93 e0       	ldi	r25, 0x03	; 3
    17c4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <BTTransmitStr>
			break;
    17c8:	08 95       	ret
		
		case 2:
			e_stins = 0;
    17ca:	10 92 28 04 	sts	0x0428, r1
			addEntryToTimerQueue(&blinkLedD6_v1, (1000UL * 1000UL), Periodic);
    17ce:	21 e0       	ldi	r18, 0x01	; 1
    17d0:	40 e4       	ldi	r20, 0x40	; 64
    17d2:	52 e4       	ldi	r21, 0x42	; 66
    17d4:	6f e0       	ldi	r22, 0x0F	; 15
    17d6:	70 e0       	ldi	r23, 0x00	; 0
    17d8:	8c ec       	ldi	r24, 0xCC	; 204
    17da:	9b e0       	ldi	r25, 0x0B	; 11
    17dc:	0e 94 03 09 	call	0x1206	; 0x1206 <addEntryToTimerQueue>
			BTTransmitStr("ledul va 'blincari'.");
    17e0:	89 e9       	ldi	r24, 0x99	; 153
    17e2:	93 e0       	ldi	r25, 0x03	; 3
    17e4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <BTTransmitStr>
    17e8:	08 95       	ret

000017ea <initLeds>:
			break;
	}
}

void initLeds(){	
    17ea:	08 95       	ret

000017ec <sendEncoderCounter>:
			state = 2;
	}
}

extern volatile uint32_t encoder1CNT, encoder2CNT;
void sendEncoderCounter(){
    17ec:	0f 93       	push	r16
    17ee:	1f 93       	push	r17
    17f0:	cf 93       	push	r28
    17f2:	df 93       	push	r29
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	a3 97       	sbiw	r28, 0x23	; 35
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	f8 94       	cli
    17fe:	de bf       	out	0x3e, r29	; 62
    1800:	0f be       	out	0x3f, r0	; 63
    1802:	cd bf       	out	0x3d, r28	; 61
	char str[35];
	sprintf(str, "enc CNT: 1:%lu  2:%lu", encoder1CNT, encoder2CNT);
    1804:	40 91 3a 04 	lds	r20, 0x043A
    1808:	50 91 3b 04 	lds	r21, 0x043B
    180c:	60 91 3c 04 	lds	r22, 0x043C
    1810:	70 91 3d 04 	lds	r23, 0x043D
    1814:	80 91 36 04 	lds	r24, 0x0436
    1818:	90 91 37 04 	lds	r25, 0x0437
    181c:	a0 91 38 04 	lds	r26, 0x0438
    1820:	b0 91 39 04 	lds	r27, 0x0439
    1824:	7f 93       	push	r23
    1826:	6f 93       	push	r22
    1828:	5f 93       	push	r21
    182a:	4f 93       	push	r20
    182c:	bf 93       	push	r27
    182e:	af 93       	push	r26
    1830:	9f 93       	push	r25
    1832:	8f 93       	push	r24
    1834:	87 e0       	ldi	r24, 0x07	; 7
    1836:	94 e0       	ldi	r25, 0x04	; 4
    1838:	9f 93       	push	r25
    183a:	8f 93       	push	r24
    183c:	8e 01       	movw	r16, r28
    183e:	0f 5f       	subi	r16, 0xFF	; 255
    1840:	1f 4f       	sbci	r17, 0xFF	; 255
    1842:	1f 93       	push	r17
    1844:	0f 93       	push	r16
    1846:	0e 94 8e 0c 	call	0x191c	; 0x191c <sprintf>
	BTTransmitStr(str);	
    184a:	c8 01       	movw	r24, r16
    184c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <BTTransmitStr>
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	f8 94       	cli
    1854:	de bf       	out	0x3e, r29	; 62
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	cd bf       	out	0x3d, r28	; 61
}
    185a:	a3 96       	adiw	r28, 0x23	; 35
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	f8 94       	cli
    1860:	de bf       	out	0x3e, r29	; 62
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	cd bf       	out	0x3d, r28	; 61
    1866:	df 91       	pop	r29
    1868:	cf 91       	pop	r28
    186a:	1f 91       	pop	r17
    186c:	0f 91       	pop	r16
    186e:	08 95       	ret

00001870 <__udivmodsi4>:
    1870:	a1 e2       	ldi	r26, 0x21	; 33
    1872:	1a 2e       	mov	r1, r26
    1874:	aa 1b       	sub	r26, r26
    1876:	bb 1b       	sub	r27, r27
    1878:	fd 01       	movw	r30, r26
    187a:	0d c0       	rjmp	.+26     	; 0x1896 <__udivmodsi4_ep>

0000187c <__udivmodsi4_loop>:
    187c:	aa 1f       	adc	r26, r26
    187e:	bb 1f       	adc	r27, r27
    1880:	ee 1f       	adc	r30, r30
    1882:	ff 1f       	adc	r31, r31
    1884:	a2 17       	cp	r26, r18
    1886:	b3 07       	cpc	r27, r19
    1888:	e4 07       	cpc	r30, r20
    188a:	f5 07       	cpc	r31, r21
    188c:	20 f0       	brcs	.+8      	; 0x1896 <__udivmodsi4_ep>
    188e:	a2 1b       	sub	r26, r18
    1890:	b3 0b       	sbc	r27, r19
    1892:	e4 0b       	sbc	r30, r20
    1894:	f5 0b       	sbc	r31, r21

00001896 <__udivmodsi4_ep>:
    1896:	66 1f       	adc	r22, r22
    1898:	77 1f       	adc	r23, r23
    189a:	88 1f       	adc	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	1a 94       	dec	r1
    18a0:	69 f7       	brne	.-38     	; 0x187c <__udivmodsi4_loop>
    18a2:	60 95       	com	r22
    18a4:	70 95       	com	r23
    18a6:	80 95       	com	r24
    18a8:	90 95       	com	r25
    18aa:	9b 01       	movw	r18, r22
    18ac:	ac 01       	movw	r20, r24
    18ae:	bd 01       	movw	r22, r26
    18b0:	cf 01       	movw	r24, r30
    18b2:	08 95       	ret

000018b4 <__tablejump2__>:
    18b4:	ee 0f       	add	r30, r30
    18b6:	ff 1f       	adc	r31, r31

000018b8 <__tablejump__>:
    18b8:	05 90       	lpm	r0, Z+
    18ba:	f4 91       	lpm	r31, Z
    18bc:	e0 2d       	mov	r30, r0
    18be:	09 94       	ijmp

000018c0 <__umulhisi3>:
    18c0:	a2 9f       	mul	r26, r18
    18c2:	b0 01       	movw	r22, r0
    18c4:	b3 9f       	mul	r27, r19
    18c6:	c0 01       	movw	r24, r0
    18c8:	a3 9f       	mul	r26, r19
    18ca:	70 0d       	add	r23, r0
    18cc:	81 1d       	adc	r24, r1
    18ce:	11 24       	eor	r1, r1
    18d0:	91 1d       	adc	r25, r1
    18d2:	b2 9f       	mul	r27, r18
    18d4:	70 0d       	add	r23, r0
    18d6:	81 1d       	adc	r24, r1
    18d8:	11 24       	eor	r1, r1
    18da:	91 1d       	adc	r25, r1
    18dc:	08 95       	ret

000018de <__muluhisi3>:
    18de:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__umulhisi3>
    18e2:	a5 9f       	mul	r26, r21
    18e4:	90 0d       	add	r25, r0
    18e6:	b4 9f       	mul	r27, r20
    18e8:	90 0d       	add	r25, r0
    18ea:	a4 9f       	mul	r26, r20
    18ec:	80 0d       	add	r24, r0
    18ee:	91 1d       	adc	r25, r1
    18f0:	11 24       	eor	r1, r1
    18f2:	08 95       	ret

000018f4 <printf>:
    18f4:	a0 e0       	ldi	r26, 0x00	; 0
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e0 e8       	ldi	r30, 0x80	; 128
    18fa:	fc e0       	ldi	r31, 0x0C	; 12
    18fc:	0c 94 38 0f 	jmp	0x1e70	; 0x1e70 <__prologue_saves__+0x20>
    1900:	fe 01       	movw	r30, r28
    1902:	35 96       	adiw	r30, 0x05	; 5
    1904:	61 91       	ld	r22, Z+
    1906:	71 91       	ld	r23, Z+
    1908:	af 01       	movw	r20, r30
    190a:	80 91 54 05 	lds	r24, 0x0554
    190e:	90 91 55 05 	lds	r25, 0x0555
    1912:	0e 94 b0 0c 	call	0x1960	; 0x1960 <vfprintf>
    1916:	e2 e0       	ldi	r30, 0x02	; 2
    1918:	0c 94 54 0f 	jmp	0x1ea8	; 0x1ea8 <__epilogue_restores__+0x20>

0000191c <sprintf>:
    191c:	ae e0       	ldi	r26, 0x0E	; 14
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	e4 e9       	ldi	r30, 0x94	; 148
    1922:	fc e0       	ldi	r31, 0x0C	; 12
    1924:	0c 94 36 0f 	jmp	0x1e6c	; 0x1e6c <__prologue_saves__+0x1c>
    1928:	0d 89       	ldd	r16, Y+21	; 0x15
    192a:	1e 89       	ldd	r17, Y+22	; 0x16
    192c:	86 e0       	ldi	r24, 0x06	; 6
    192e:	8c 83       	std	Y+4, r24	; 0x04
    1930:	1a 83       	std	Y+2, r17	; 0x02
    1932:	09 83       	std	Y+1, r16	; 0x01
    1934:	8f ef       	ldi	r24, 0xFF	; 255
    1936:	9f e7       	ldi	r25, 0x7F	; 127
    1938:	9e 83       	std	Y+6, r25	; 0x06
    193a:	8d 83       	std	Y+5, r24	; 0x05
    193c:	ae 01       	movw	r20, r28
    193e:	47 5e       	subi	r20, 0xE7	; 231
    1940:	5f 4f       	sbci	r21, 0xFF	; 255
    1942:	6f 89       	ldd	r22, Y+23	; 0x17
    1944:	78 8d       	ldd	r23, Y+24	; 0x18
    1946:	ce 01       	movw	r24, r28
    1948:	01 96       	adiw	r24, 0x01	; 1
    194a:	0e 94 b0 0c 	call	0x1960	; 0x1960 <vfprintf>
    194e:	ef 81       	ldd	r30, Y+7	; 0x07
    1950:	f8 85       	ldd	r31, Y+8	; 0x08
    1952:	e0 0f       	add	r30, r16
    1954:	f1 1f       	adc	r31, r17
    1956:	10 82       	st	Z, r1
    1958:	2e 96       	adiw	r28, 0x0e	; 14
    195a:	e4 e0       	ldi	r30, 0x04	; 4
    195c:	0c 94 52 0f 	jmp	0x1ea4	; 0x1ea4 <__epilogue_restores__+0x1c>

00001960 <vfprintf>:
    1960:	ac e0       	ldi	r26, 0x0C	; 12
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	e6 eb       	ldi	r30, 0xB6	; 182
    1966:	fc e0       	ldi	r31, 0x0C	; 12
    1968:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <__prologue_saves__>
    196c:	7c 01       	movw	r14, r24
    196e:	6b 01       	movw	r12, r22
    1970:	8a 01       	movw	r16, r20
    1972:	fc 01       	movw	r30, r24
    1974:	17 82       	std	Z+7, r1	; 0x07
    1976:	16 82       	std	Z+6, r1	; 0x06
    1978:	83 81       	ldd	r24, Z+3	; 0x03
    197a:	81 ff       	sbrs	r24, 1
    197c:	bd c1       	rjmp	.+890    	; 0x1cf8 <vfprintf+0x398>
    197e:	ce 01       	movw	r24, r28
    1980:	01 96       	adiw	r24, 0x01	; 1
    1982:	4c 01       	movw	r8, r24
    1984:	f7 01       	movw	r30, r14
    1986:	93 81       	ldd	r25, Z+3	; 0x03
    1988:	f6 01       	movw	r30, r12
    198a:	93 fd       	sbrc	r25, 3
    198c:	85 91       	lpm	r24, Z+
    198e:	93 ff       	sbrs	r25, 3
    1990:	81 91       	ld	r24, Z+
    1992:	6f 01       	movw	r12, r30
    1994:	88 23       	and	r24, r24
    1996:	09 f4       	brne	.+2      	; 0x199a <vfprintf+0x3a>
    1998:	ab c1       	rjmp	.+854    	; 0x1cf0 <vfprintf+0x390>
    199a:	85 32       	cpi	r24, 0x25	; 37
    199c:	39 f4       	brne	.+14     	; 0x19ac <vfprintf+0x4c>
    199e:	93 fd       	sbrc	r25, 3
    19a0:	85 91       	lpm	r24, Z+
    19a2:	93 ff       	sbrs	r25, 3
    19a4:	81 91       	ld	r24, Z+
    19a6:	6f 01       	movw	r12, r30
    19a8:	85 32       	cpi	r24, 0x25	; 37
    19aa:	29 f4       	brne	.+10     	; 0x19b6 <vfprintf+0x56>
    19ac:	b7 01       	movw	r22, r14
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <fputc>
    19b4:	e7 cf       	rjmp	.-50     	; 0x1984 <vfprintf+0x24>
    19b6:	51 2c       	mov	r5, r1
    19b8:	31 2c       	mov	r3, r1
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	20 32       	cpi	r18, 0x20	; 32
    19be:	a0 f4       	brcc	.+40     	; 0x19e8 <vfprintf+0x88>
    19c0:	8b 32       	cpi	r24, 0x2B	; 43
    19c2:	69 f0       	breq	.+26     	; 0x19de <vfprintf+0x7e>
    19c4:	30 f4       	brcc	.+12     	; 0x19d2 <vfprintf+0x72>
    19c6:	80 32       	cpi	r24, 0x20	; 32
    19c8:	59 f0       	breq	.+22     	; 0x19e0 <vfprintf+0x80>
    19ca:	83 32       	cpi	r24, 0x23	; 35
    19cc:	69 f4       	brne	.+26     	; 0x19e8 <vfprintf+0x88>
    19ce:	20 61       	ori	r18, 0x10	; 16
    19d0:	2c c0       	rjmp	.+88     	; 0x1a2a <vfprintf+0xca>
    19d2:	8d 32       	cpi	r24, 0x2D	; 45
    19d4:	39 f0       	breq	.+14     	; 0x19e4 <vfprintf+0x84>
    19d6:	80 33       	cpi	r24, 0x30	; 48
    19d8:	39 f4       	brne	.+14     	; 0x19e8 <vfprintf+0x88>
    19da:	21 60       	ori	r18, 0x01	; 1
    19dc:	26 c0       	rjmp	.+76     	; 0x1a2a <vfprintf+0xca>
    19de:	22 60       	ori	r18, 0x02	; 2
    19e0:	24 60       	ori	r18, 0x04	; 4
    19e2:	23 c0       	rjmp	.+70     	; 0x1a2a <vfprintf+0xca>
    19e4:	28 60       	ori	r18, 0x08	; 8
    19e6:	21 c0       	rjmp	.+66     	; 0x1a2a <vfprintf+0xca>
    19e8:	27 fd       	sbrc	r18, 7
    19ea:	27 c0       	rjmp	.+78     	; 0x1a3a <vfprintf+0xda>
    19ec:	30 ed       	ldi	r19, 0xD0	; 208
    19ee:	38 0f       	add	r19, r24
    19f0:	3a 30       	cpi	r19, 0x0A	; 10
    19f2:	78 f4       	brcc	.+30     	; 0x1a12 <vfprintf+0xb2>
    19f4:	26 ff       	sbrs	r18, 6
    19f6:	06 c0       	rjmp	.+12     	; 0x1a04 <vfprintf+0xa4>
    19f8:	fa e0       	ldi	r31, 0x0A	; 10
    19fa:	5f 9e       	mul	r5, r31
    19fc:	30 0d       	add	r19, r0
    19fe:	11 24       	eor	r1, r1
    1a00:	53 2e       	mov	r5, r19
    1a02:	13 c0       	rjmp	.+38     	; 0x1a2a <vfprintf+0xca>
    1a04:	8a e0       	ldi	r24, 0x0A	; 10
    1a06:	38 9e       	mul	r3, r24
    1a08:	30 0d       	add	r19, r0
    1a0a:	11 24       	eor	r1, r1
    1a0c:	33 2e       	mov	r3, r19
    1a0e:	20 62       	ori	r18, 0x20	; 32
    1a10:	0c c0       	rjmp	.+24     	; 0x1a2a <vfprintf+0xca>
    1a12:	8e 32       	cpi	r24, 0x2E	; 46
    1a14:	21 f4       	brne	.+8      	; 0x1a1e <vfprintf+0xbe>
    1a16:	26 fd       	sbrc	r18, 6
    1a18:	6b c1       	rjmp	.+726    	; 0x1cf0 <vfprintf+0x390>
    1a1a:	20 64       	ori	r18, 0x40	; 64
    1a1c:	06 c0       	rjmp	.+12     	; 0x1a2a <vfprintf+0xca>
    1a1e:	8c 36       	cpi	r24, 0x6C	; 108
    1a20:	11 f4       	brne	.+4      	; 0x1a26 <vfprintf+0xc6>
    1a22:	20 68       	ori	r18, 0x80	; 128
    1a24:	02 c0       	rjmp	.+4      	; 0x1a2a <vfprintf+0xca>
    1a26:	88 36       	cpi	r24, 0x68	; 104
    1a28:	41 f4       	brne	.+16     	; 0x1a3a <vfprintf+0xda>
    1a2a:	f6 01       	movw	r30, r12
    1a2c:	93 fd       	sbrc	r25, 3
    1a2e:	85 91       	lpm	r24, Z+
    1a30:	93 ff       	sbrs	r25, 3
    1a32:	81 91       	ld	r24, Z+
    1a34:	6f 01       	movw	r12, r30
    1a36:	81 11       	cpse	r24, r1
    1a38:	c1 cf       	rjmp	.-126    	; 0x19bc <vfprintf+0x5c>
    1a3a:	98 2f       	mov	r25, r24
    1a3c:	9f 7d       	andi	r25, 0xDF	; 223
    1a3e:	95 54       	subi	r25, 0x45	; 69
    1a40:	93 30       	cpi	r25, 0x03	; 3
    1a42:	28 f4       	brcc	.+10     	; 0x1a4e <vfprintf+0xee>
    1a44:	0c 5f       	subi	r16, 0xFC	; 252
    1a46:	1f 4f       	sbci	r17, 0xFF	; 255
    1a48:	ff e3       	ldi	r31, 0x3F	; 63
    1a4a:	f9 83       	std	Y+1, r31	; 0x01
    1a4c:	0d c0       	rjmp	.+26     	; 0x1a68 <vfprintf+0x108>
    1a4e:	83 36       	cpi	r24, 0x63	; 99
    1a50:	31 f0       	breq	.+12     	; 0x1a5e <vfprintf+0xfe>
    1a52:	83 37       	cpi	r24, 0x73	; 115
    1a54:	71 f0       	breq	.+28     	; 0x1a72 <vfprintf+0x112>
    1a56:	83 35       	cpi	r24, 0x53	; 83
    1a58:	09 f0       	breq	.+2      	; 0x1a5c <vfprintf+0xfc>
    1a5a:	5b c0       	rjmp	.+182    	; 0x1b12 <vfprintf+0x1b2>
    1a5c:	22 c0       	rjmp	.+68     	; 0x1aa2 <vfprintf+0x142>
    1a5e:	f8 01       	movw	r30, r16
    1a60:	80 81       	ld	r24, Z
    1a62:	89 83       	std	Y+1, r24	; 0x01
    1a64:	0e 5f       	subi	r16, 0xFE	; 254
    1a66:	1f 4f       	sbci	r17, 0xFF	; 255
    1a68:	44 24       	eor	r4, r4
    1a6a:	43 94       	inc	r4
    1a6c:	51 2c       	mov	r5, r1
    1a6e:	54 01       	movw	r10, r8
    1a70:	15 c0       	rjmp	.+42     	; 0x1a9c <vfprintf+0x13c>
    1a72:	38 01       	movw	r6, r16
    1a74:	f2 e0       	ldi	r31, 0x02	; 2
    1a76:	6f 0e       	add	r6, r31
    1a78:	71 1c       	adc	r7, r1
    1a7a:	f8 01       	movw	r30, r16
    1a7c:	a0 80       	ld	r10, Z
    1a7e:	b1 80       	ldd	r11, Z+1	; 0x01
    1a80:	26 ff       	sbrs	r18, 6
    1a82:	03 c0       	rjmp	.+6      	; 0x1a8a <vfprintf+0x12a>
    1a84:	65 2d       	mov	r22, r5
    1a86:	70 e0       	ldi	r23, 0x00	; 0
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <vfprintf+0x12e>
    1a8a:	6f ef       	ldi	r22, 0xFF	; 255
    1a8c:	7f ef       	ldi	r23, 0xFF	; 255
    1a8e:	c5 01       	movw	r24, r10
    1a90:	2c 87       	std	Y+12, r18	; 0x0c
    1a92:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <strnlen>
    1a96:	2c 01       	movw	r4, r24
    1a98:	83 01       	movw	r16, r6
    1a9a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a9c:	2f 77       	andi	r18, 0x7F	; 127
    1a9e:	22 2e       	mov	r2, r18
    1aa0:	17 c0       	rjmp	.+46     	; 0x1ad0 <vfprintf+0x170>
    1aa2:	38 01       	movw	r6, r16
    1aa4:	f2 e0       	ldi	r31, 0x02	; 2
    1aa6:	6f 0e       	add	r6, r31
    1aa8:	71 1c       	adc	r7, r1
    1aaa:	f8 01       	movw	r30, r16
    1aac:	a0 80       	ld	r10, Z
    1aae:	b1 80       	ldd	r11, Z+1	; 0x01
    1ab0:	26 ff       	sbrs	r18, 6
    1ab2:	03 c0       	rjmp	.+6      	; 0x1aba <vfprintf+0x15a>
    1ab4:	65 2d       	mov	r22, r5
    1ab6:	70 e0       	ldi	r23, 0x00	; 0
    1ab8:	02 c0       	rjmp	.+4      	; 0x1abe <vfprintf+0x15e>
    1aba:	6f ef       	ldi	r22, 0xFF	; 255
    1abc:	7f ef       	ldi	r23, 0xFF	; 255
    1abe:	c5 01       	movw	r24, r10
    1ac0:	2c 87       	std	Y+12, r18	; 0x0c
    1ac2:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <strnlen_P>
    1ac6:	2c 01       	movw	r4, r24
    1ac8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1aca:	20 68       	ori	r18, 0x80	; 128
    1acc:	22 2e       	mov	r2, r18
    1ace:	83 01       	movw	r16, r6
    1ad0:	23 fc       	sbrc	r2, 3
    1ad2:	1b c0       	rjmp	.+54     	; 0x1b0a <vfprintf+0x1aa>
    1ad4:	83 2d       	mov	r24, r3
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	48 16       	cp	r4, r24
    1ada:	59 06       	cpc	r5, r25
    1adc:	b0 f4       	brcc	.+44     	; 0x1b0a <vfprintf+0x1aa>
    1ade:	b7 01       	movw	r22, r14
    1ae0:	80 e2       	ldi	r24, 0x20	; 32
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <fputc>
    1ae8:	3a 94       	dec	r3
    1aea:	f4 cf       	rjmp	.-24     	; 0x1ad4 <vfprintf+0x174>
    1aec:	f5 01       	movw	r30, r10
    1aee:	27 fc       	sbrc	r2, 7
    1af0:	85 91       	lpm	r24, Z+
    1af2:	27 fe       	sbrs	r2, 7
    1af4:	81 91       	ld	r24, Z+
    1af6:	5f 01       	movw	r10, r30
    1af8:	b7 01       	movw	r22, r14
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <fputc>
    1b00:	31 10       	cpse	r3, r1
    1b02:	3a 94       	dec	r3
    1b04:	f1 e0       	ldi	r31, 0x01	; 1
    1b06:	4f 1a       	sub	r4, r31
    1b08:	51 08       	sbc	r5, r1
    1b0a:	41 14       	cp	r4, r1
    1b0c:	51 04       	cpc	r5, r1
    1b0e:	71 f7       	brne	.-36     	; 0x1aec <vfprintf+0x18c>
    1b10:	e5 c0       	rjmp	.+458    	; 0x1cdc <vfprintf+0x37c>
    1b12:	84 36       	cpi	r24, 0x64	; 100
    1b14:	11 f0       	breq	.+4      	; 0x1b1a <vfprintf+0x1ba>
    1b16:	89 36       	cpi	r24, 0x69	; 105
    1b18:	39 f5       	brne	.+78     	; 0x1b68 <vfprintf+0x208>
    1b1a:	f8 01       	movw	r30, r16
    1b1c:	27 ff       	sbrs	r18, 7
    1b1e:	07 c0       	rjmp	.+14     	; 0x1b2e <vfprintf+0x1ce>
    1b20:	60 81       	ld	r22, Z
    1b22:	71 81       	ldd	r23, Z+1	; 0x01
    1b24:	82 81       	ldd	r24, Z+2	; 0x02
    1b26:	93 81       	ldd	r25, Z+3	; 0x03
    1b28:	0c 5f       	subi	r16, 0xFC	; 252
    1b2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b2c:	08 c0       	rjmp	.+16     	; 0x1b3e <vfprintf+0x1de>
    1b2e:	60 81       	ld	r22, Z
    1b30:	71 81       	ldd	r23, Z+1	; 0x01
    1b32:	88 27       	eor	r24, r24
    1b34:	77 fd       	sbrc	r23, 7
    1b36:	80 95       	com	r24
    1b38:	98 2f       	mov	r25, r24
    1b3a:	0e 5f       	subi	r16, 0xFE	; 254
    1b3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3e:	2f 76       	andi	r18, 0x6F	; 111
    1b40:	b2 2e       	mov	r11, r18
    1b42:	97 ff       	sbrs	r25, 7
    1b44:	09 c0       	rjmp	.+18     	; 0x1b58 <vfprintf+0x1f8>
    1b46:	90 95       	com	r25
    1b48:	80 95       	com	r24
    1b4a:	70 95       	com	r23
    1b4c:	61 95       	neg	r22
    1b4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b50:	8f 4f       	sbci	r24, 0xFF	; 255
    1b52:	9f 4f       	sbci	r25, 0xFF	; 255
    1b54:	20 68       	ori	r18, 0x80	; 128
    1b56:	b2 2e       	mov	r11, r18
    1b58:	2a e0       	ldi	r18, 0x0A	; 10
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	a4 01       	movw	r20, r8
    1b5e:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <__ultoa_invert>
    1b62:	a8 2e       	mov	r10, r24
    1b64:	a8 18       	sub	r10, r8
    1b66:	44 c0       	rjmp	.+136    	; 0x1bf0 <vfprintf+0x290>
    1b68:	85 37       	cpi	r24, 0x75	; 117
    1b6a:	29 f4       	brne	.+10     	; 0x1b76 <vfprintf+0x216>
    1b6c:	2f 7e       	andi	r18, 0xEF	; 239
    1b6e:	b2 2e       	mov	r11, r18
    1b70:	2a e0       	ldi	r18, 0x0A	; 10
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	25 c0       	rjmp	.+74     	; 0x1bc0 <vfprintf+0x260>
    1b76:	f2 2f       	mov	r31, r18
    1b78:	f9 7f       	andi	r31, 0xF9	; 249
    1b7a:	bf 2e       	mov	r11, r31
    1b7c:	8f 36       	cpi	r24, 0x6F	; 111
    1b7e:	c1 f0       	breq	.+48     	; 0x1bb0 <vfprintf+0x250>
    1b80:	18 f4       	brcc	.+6      	; 0x1b88 <vfprintf+0x228>
    1b82:	88 35       	cpi	r24, 0x58	; 88
    1b84:	79 f0       	breq	.+30     	; 0x1ba4 <vfprintf+0x244>
    1b86:	b4 c0       	rjmp	.+360    	; 0x1cf0 <vfprintf+0x390>
    1b88:	80 37       	cpi	r24, 0x70	; 112
    1b8a:	19 f0       	breq	.+6      	; 0x1b92 <vfprintf+0x232>
    1b8c:	88 37       	cpi	r24, 0x78	; 120
    1b8e:	21 f0       	breq	.+8      	; 0x1b98 <vfprintf+0x238>
    1b90:	af c0       	rjmp	.+350    	; 0x1cf0 <vfprintf+0x390>
    1b92:	2f 2f       	mov	r18, r31
    1b94:	20 61       	ori	r18, 0x10	; 16
    1b96:	b2 2e       	mov	r11, r18
    1b98:	b4 fe       	sbrs	r11, 4
    1b9a:	0d c0       	rjmp	.+26     	; 0x1bb6 <vfprintf+0x256>
    1b9c:	8b 2d       	mov	r24, r11
    1b9e:	84 60       	ori	r24, 0x04	; 4
    1ba0:	b8 2e       	mov	r11, r24
    1ba2:	09 c0       	rjmp	.+18     	; 0x1bb6 <vfprintf+0x256>
    1ba4:	24 ff       	sbrs	r18, 4
    1ba6:	0a c0       	rjmp	.+20     	; 0x1bbc <vfprintf+0x25c>
    1ba8:	9f 2f       	mov	r25, r31
    1baa:	96 60       	ori	r25, 0x06	; 6
    1bac:	b9 2e       	mov	r11, r25
    1bae:	06 c0       	rjmp	.+12     	; 0x1bbc <vfprintf+0x25c>
    1bb0:	28 e0       	ldi	r18, 0x08	; 8
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	05 c0       	rjmp	.+10     	; 0x1bc0 <vfprintf+0x260>
    1bb6:	20 e1       	ldi	r18, 0x10	; 16
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <vfprintf+0x260>
    1bbc:	20 e1       	ldi	r18, 0x10	; 16
    1bbe:	32 e0       	ldi	r19, 0x02	; 2
    1bc0:	f8 01       	movw	r30, r16
    1bc2:	b7 fe       	sbrs	r11, 7
    1bc4:	07 c0       	rjmp	.+14     	; 0x1bd4 <vfprintf+0x274>
    1bc6:	60 81       	ld	r22, Z
    1bc8:	71 81       	ldd	r23, Z+1	; 0x01
    1bca:	82 81       	ldd	r24, Z+2	; 0x02
    1bcc:	93 81       	ldd	r25, Z+3	; 0x03
    1bce:	0c 5f       	subi	r16, 0xFC	; 252
    1bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd2:	06 c0       	rjmp	.+12     	; 0x1be0 <vfprintf+0x280>
    1bd4:	60 81       	ld	r22, Z
    1bd6:	71 81       	ldd	r23, Z+1	; 0x01
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	0e 5f       	subi	r16, 0xFE	; 254
    1bde:	1f 4f       	sbci	r17, 0xFF	; 255
    1be0:	a4 01       	movw	r20, r8
    1be2:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <__ultoa_invert>
    1be6:	a8 2e       	mov	r10, r24
    1be8:	a8 18       	sub	r10, r8
    1bea:	fb 2d       	mov	r31, r11
    1bec:	ff 77       	andi	r31, 0x7F	; 127
    1bee:	bf 2e       	mov	r11, r31
    1bf0:	b6 fe       	sbrs	r11, 6
    1bf2:	0b c0       	rjmp	.+22     	; 0x1c0a <vfprintf+0x2aa>
    1bf4:	2b 2d       	mov	r18, r11
    1bf6:	2e 7f       	andi	r18, 0xFE	; 254
    1bf8:	a5 14       	cp	r10, r5
    1bfa:	50 f4       	brcc	.+20     	; 0x1c10 <vfprintf+0x2b0>
    1bfc:	b4 fe       	sbrs	r11, 4
    1bfe:	0a c0       	rjmp	.+20     	; 0x1c14 <vfprintf+0x2b4>
    1c00:	b2 fc       	sbrc	r11, 2
    1c02:	08 c0       	rjmp	.+16     	; 0x1c14 <vfprintf+0x2b4>
    1c04:	2b 2d       	mov	r18, r11
    1c06:	2e 7e       	andi	r18, 0xEE	; 238
    1c08:	05 c0       	rjmp	.+10     	; 0x1c14 <vfprintf+0x2b4>
    1c0a:	7a 2c       	mov	r7, r10
    1c0c:	2b 2d       	mov	r18, r11
    1c0e:	03 c0       	rjmp	.+6      	; 0x1c16 <vfprintf+0x2b6>
    1c10:	7a 2c       	mov	r7, r10
    1c12:	01 c0       	rjmp	.+2      	; 0x1c16 <vfprintf+0x2b6>
    1c14:	75 2c       	mov	r7, r5
    1c16:	24 ff       	sbrs	r18, 4
    1c18:	0d c0       	rjmp	.+26     	; 0x1c34 <vfprintf+0x2d4>
    1c1a:	fe 01       	movw	r30, r28
    1c1c:	ea 0d       	add	r30, r10
    1c1e:	f1 1d       	adc	r31, r1
    1c20:	80 81       	ld	r24, Z
    1c22:	80 33       	cpi	r24, 0x30	; 48
    1c24:	11 f4       	brne	.+4      	; 0x1c2a <vfprintf+0x2ca>
    1c26:	29 7e       	andi	r18, 0xE9	; 233
    1c28:	09 c0       	rjmp	.+18     	; 0x1c3c <vfprintf+0x2dc>
    1c2a:	22 ff       	sbrs	r18, 2
    1c2c:	06 c0       	rjmp	.+12     	; 0x1c3a <vfprintf+0x2da>
    1c2e:	73 94       	inc	r7
    1c30:	73 94       	inc	r7
    1c32:	04 c0       	rjmp	.+8      	; 0x1c3c <vfprintf+0x2dc>
    1c34:	82 2f       	mov	r24, r18
    1c36:	86 78       	andi	r24, 0x86	; 134
    1c38:	09 f0       	breq	.+2      	; 0x1c3c <vfprintf+0x2dc>
    1c3a:	73 94       	inc	r7
    1c3c:	23 fd       	sbrc	r18, 3
    1c3e:	13 c0       	rjmp	.+38     	; 0x1c66 <vfprintf+0x306>
    1c40:	20 ff       	sbrs	r18, 0
    1c42:	06 c0       	rjmp	.+12     	; 0x1c50 <vfprintf+0x2f0>
    1c44:	5a 2c       	mov	r5, r10
    1c46:	73 14       	cp	r7, r3
    1c48:	18 f4       	brcc	.+6      	; 0x1c50 <vfprintf+0x2f0>
    1c4a:	53 0c       	add	r5, r3
    1c4c:	57 18       	sub	r5, r7
    1c4e:	73 2c       	mov	r7, r3
    1c50:	73 14       	cp	r7, r3
    1c52:	68 f4       	brcc	.+26     	; 0x1c6e <vfprintf+0x30e>
    1c54:	b7 01       	movw	r22, r14
    1c56:	80 e2       	ldi	r24, 0x20	; 32
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	2c 87       	std	Y+12, r18	; 0x0c
    1c5c:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <fputc>
    1c60:	73 94       	inc	r7
    1c62:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c64:	f5 cf       	rjmp	.-22     	; 0x1c50 <vfprintf+0x2f0>
    1c66:	73 14       	cp	r7, r3
    1c68:	10 f4       	brcc	.+4      	; 0x1c6e <vfprintf+0x30e>
    1c6a:	37 18       	sub	r3, r7
    1c6c:	01 c0       	rjmp	.+2      	; 0x1c70 <vfprintf+0x310>
    1c6e:	31 2c       	mov	r3, r1
    1c70:	24 ff       	sbrs	r18, 4
    1c72:	12 c0       	rjmp	.+36     	; 0x1c98 <vfprintf+0x338>
    1c74:	b7 01       	movw	r22, r14
    1c76:	80 e3       	ldi	r24, 0x30	; 48
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	2c 87       	std	Y+12, r18	; 0x0c
    1c7c:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <fputc>
    1c80:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c82:	22 ff       	sbrs	r18, 2
    1c84:	17 c0       	rjmp	.+46     	; 0x1cb4 <vfprintf+0x354>
    1c86:	21 ff       	sbrs	r18, 1
    1c88:	03 c0       	rjmp	.+6      	; 0x1c90 <vfprintf+0x330>
    1c8a:	88 e5       	ldi	r24, 0x58	; 88
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <vfprintf+0x334>
    1c90:	88 e7       	ldi	r24, 0x78	; 120
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	b7 01       	movw	r22, r14
    1c96:	0c c0       	rjmp	.+24     	; 0x1cb0 <vfprintf+0x350>
    1c98:	82 2f       	mov	r24, r18
    1c9a:	86 78       	andi	r24, 0x86	; 134
    1c9c:	59 f0       	breq	.+22     	; 0x1cb4 <vfprintf+0x354>
    1c9e:	21 fd       	sbrc	r18, 1
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <vfprintf+0x346>
    1ca2:	80 e2       	ldi	r24, 0x20	; 32
    1ca4:	01 c0       	rjmp	.+2      	; 0x1ca8 <vfprintf+0x348>
    1ca6:	8b e2       	ldi	r24, 0x2B	; 43
    1ca8:	27 fd       	sbrc	r18, 7
    1caa:	8d e2       	ldi	r24, 0x2D	; 45
    1cac:	b7 01       	movw	r22, r14
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <fputc>
    1cb4:	a5 14       	cp	r10, r5
    1cb6:	38 f4       	brcc	.+14     	; 0x1cc6 <vfprintf+0x366>
    1cb8:	b7 01       	movw	r22, r14
    1cba:	80 e3       	ldi	r24, 0x30	; 48
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <fputc>
    1cc2:	5a 94       	dec	r5
    1cc4:	f7 cf       	rjmp	.-18     	; 0x1cb4 <vfprintf+0x354>
    1cc6:	aa 94       	dec	r10
    1cc8:	f4 01       	movw	r30, r8
    1cca:	ea 0d       	add	r30, r10
    1ccc:	f1 1d       	adc	r31, r1
    1cce:	80 81       	ld	r24, Z
    1cd0:	b7 01       	movw	r22, r14
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <fputc>
    1cd8:	a1 10       	cpse	r10, r1
    1cda:	f5 cf       	rjmp	.-22     	; 0x1cc6 <vfprintf+0x366>
    1cdc:	33 20       	and	r3, r3
    1cde:	09 f4       	brne	.+2      	; 0x1ce2 <vfprintf+0x382>
    1ce0:	51 ce       	rjmp	.-862    	; 0x1984 <vfprintf+0x24>
    1ce2:	b7 01       	movw	r22, r14
    1ce4:	80 e2       	ldi	r24, 0x20	; 32
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <fputc>
    1cec:	3a 94       	dec	r3
    1cee:	f6 cf       	rjmp	.-20     	; 0x1cdc <vfprintf+0x37c>
    1cf0:	f7 01       	movw	r30, r14
    1cf2:	86 81       	ldd	r24, Z+6	; 0x06
    1cf4:	97 81       	ldd	r25, Z+7	; 0x07
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <vfprintf+0x39c>
    1cf8:	8f ef       	ldi	r24, 0xFF	; 255
    1cfa:	9f ef       	ldi	r25, 0xFF	; 255
    1cfc:	2c 96       	adiw	r28, 0x0c	; 12
    1cfe:	e2 e1       	ldi	r30, 0x12	; 18
    1d00:	0c 94 44 0f 	jmp	0x1e88	; 0x1e88 <__epilogue_restores__>

00001d04 <strnlen_P>:
    1d04:	fc 01       	movw	r30, r24
    1d06:	05 90       	lpm	r0, Z+
    1d08:	61 50       	subi	r22, 0x01	; 1
    1d0a:	70 40       	sbci	r23, 0x00	; 0
    1d0c:	01 10       	cpse	r0, r1
    1d0e:	d8 f7       	brcc	.-10     	; 0x1d06 <strnlen_P+0x2>
    1d10:	80 95       	com	r24
    1d12:	90 95       	com	r25
    1d14:	8e 0f       	add	r24, r30
    1d16:	9f 1f       	adc	r25, r31
    1d18:	08 95       	ret

00001d1a <strnlen>:
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	61 50       	subi	r22, 0x01	; 1
    1d1e:	70 40       	sbci	r23, 0x00	; 0
    1d20:	01 90       	ld	r0, Z+
    1d22:	01 10       	cpse	r0, r1
    1d24:	d8 f7       	brcc	.-10     	; 0x1d1c <strnlen+0x2>
    1d26:	80 95       	com	r24
    1d28:	90 95       	com	r25
    1d2a:	8e 0f       	add	r24, r30
    1d2c:	9f 1f       	adc	r25, r31
    1d2e:	08 95       	ret

00001d30 <fputc>:
    1d30:	0f 93       	push	r16
    1d32:	1f 93       	push	r17
    1d34:	cf 93       	push	r28
    1d36:	df 93       	push	r29
    1d38:	18 2f       	mov	r17, r24
    1d3a:	09 2f       	mov	r16, r25
    1d3c:	eb 01       	movw	r28, r22
    1d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d40:	81 fd       	sbrc	r24, 1
    1d42:	03 c0       	rjmp	.+6      	; 0x1d4a <fputc+0x1a>
    1d44:	8f ef       	ldi	r24, 0xFF	; 255
    1d46:	9f ef       	ldi	r25, 0xFF	; 255
    1d48:	20 c0       	rjmp	.+64     	; 0x1d8a <fputc+0x5a>
    1d4a:	82 ff       	sbrs	r24, 2
    1d4c:	10 c0       	rjmp	.+32     	; 0x1d6e <fputc+0x3e>
    1d4e:	4e 81       	ldd	r20, Y+6	; 0x06
    1d50:	5f 81       	ldd	r21, Y+7	; 0x07
    1d52:	2c 81       	ldd	r18, Y+4	; 0x04
    1d54:	3d 81       	ldd	r19, Y+5	; 0x05
    1d56:	42 17       	cp	r20, r18
    1d58:	53 07       	cpc	r21, r19
    1d5a:	7c f4       	brge	.+30     	; 0x1d7a <fputc+0x4a>
    1d5c:	e8 81       	ld	r30, Y
    1d5e:	f9 81       	ldd	r31, Y+1	; 0x01
    1d60:	9f 01       	movw	r18, r30
    1d62:	2f 5f       	subi	r18, 0xFF	; 255
    1d64:	3f 4f       	sbci	r19, 0xFF	; 255
    1d66:	39 83       	std	Y+1, r19	; 0x01
    1d68:	28 83       	st	Y, r18
    1d6a:	10 83       	st	Z, r17
    1d6c:	06 c0       	rjmp	.+12     	; 0x1d7a <fputc+0x4a>
    1d6e:	e8 85       	ldd	r30, Y+8	; 0x08
    1d70:	f9 85       	ldd	r31, Y+9	; 0x09
    1d72:	81 2f       	mov	r24, r17
    1d74:	09 95       	icall
    1d76:	89 2b       	or	r24, r25
    1d78:	29 f7       	brne	.-54     	; 0x1d44 <fputc+0x14>
    1d7a:	2e 81       	ldd	r18, Y+6	; 0x06
    1d7c:	3f 81       	ldd	r19, Y+7	; 0x07
    1d7e:	2f 5f       	subi	r18, 0xFF	; 255
    1d80:	3f 4f       	sbci	r19, 0xFF	; 255
    1d82:	3f 83       	std	Y+7, r19	; 0x07
    1d84:	2e 83       	std	Y+6, r18	; 0x06
    1d86:	81 2f       	mov	r24, r17
    1d88:	90 2f       	mov	r25, r16
    1d8a:	df 91       	pop	r29
    1d8c:	cf 91       	pop	r28
    1d8e:	1f 91       	pop	r17
    1d90:	0f 91       	pop	r16
    1d92:	08 95       	ret

00001d94 <__ultoa_invert>:
    1d94:	fa 01       	movw	r30, r20
    1d96:	aa 27       	eor	r26, r26
    1d98:	28 30       	cpi	r18, 0x08	; 8
    1d9a:	51 f1       	breq	.+84     	; 0x1df0 <__ultoa_invert+0x5c>
    1d9c:	20 31       	cpi	r18, 0x10	; 16
    1d9e:	81 f1       	breq	.+96     	; 0x1e00 <__ultoa_invert+0x6c>
    1da0:	e8 94       	clt
    1da2:	6f 93       	push	r22
    1da4:	6e 7f       	andi	r22, 0xFE	; 254
    1da6:	6e 5f       	subi	r22, 0xFE	; 254
    1da8:	7f 4f       	sbci	r23, 0xFF	; 255
    1daa:	8f 4f       	sbci	r24, 0xFF	; 255
    1dac:	9f 4f       	sbci	r25, 0xFF	; 255
    1dae:	af 4f       	sbci	r26, 0xFF	; 255
    1db0:	b1 e0       	ldi	r27, 0x01	; 1
    1db2:	3e d0       	rcall	.+124    	; 0x1e30 <__ultoa_invert+0x9c>
    1db4:	b4 e0       	ldi	r27, 0x04	; 4
    1db6:	3c d0       	rcall	.+120    	; 0x1e30 <__ultoa_invert+0x9c>
    1db8:	67 0f       	add	r22, r23
    1dba:	78 1f       	adc	r23, r24
    1dbc:	89 1f       	adc	r24, r25
    1dbe:	9a 1f       	adc	r25, r26
    1dc0:	a1 1d       	adc	r26, r1
    1dc2:	68 0f       	add	r22, r24
    1dc4:	79 1f       	adc	r23, r25
    1dc6:	8a 1f       	adc	r24, r26
    1dc8:	91 1d       	adc	r25, r1
    1dca:	a1 1d       	adc	r26, r1
    1dcc:	6a 0f       	add	r22, r26
    1dce:	71 1d       	adc	r23, r1
    1dd0:	81 1d       	adc	r24, r1
    1dd2:	91 1d       	adc	r25, r1
    1dd4:	a1 1d       	adc	r26, r1
    1dd6:	20 d0       	rcall	.+64     	; 0x1e18 <__ultoa_invert+0x84>
    1dd8:	09 f4       	brne	.+2      	; 0x1ddc <__ultoa_invert+0x48>
    1dda:	68 94       	set
    1ddc:	3f 91       	pop	r19
    1dde:	2a e0       	ldi	r18, 0x0A	; 10
    1de0:	26 9f       	mul	r18, r22
    1de2:	11 24       	eor	r1, r1
    1de4:	30 19       	sub	r19, r0
    1de6:	30 5d       	subi	r19, 0xD0	; 208
    1de8:	31 93       	st	Z+, r19
    1dea:	de f6       	brtc	.-74     	; 0x1da2 <__ultoa_invert+0xe>
    1dec:	cf 01       	movw	r24, r30
    1dee:	08 95       	ret
    1df0:	46 2f       	mov	r20, r22
    1df2:	47 70       	andi	r20, 0x07	; 7
    1df4:	40 5d       	subi	r20, 0xD0	; 208
    1df6:	41 93       	st	Z+, r20
    1df8:	b3 e0       	ldi	r27, 0x03	; 3
    1dfa:	0f d0       	rcall	.+30     	; 0x1e1a <__ultoa_invert+0x86>
    1dfc:	c9 f7       	brne	.-14     	; 0x1df0 <__ultoa_invert+0x5c>
    1dfe:	f6 cf       	rjmp	.-20     	; 0x1dec <__ultoa_invert+0x58>
    1e00:	46 2f       	mov	r20, r22
    1e02:	4f 70       	andi	r20, 0x0F	; 15
    1e04:	40 5d       	subi	r20, 0xD0	; 208
    1e06:	4a 33       	cpi	r20, 0x3A	; 58
    1e08:	18 f0       	brcs	.+6      	; 0x1e10 <__ultoa_invert+0x7c>
    1e0a:	49 5d       	subi	r20, 0xD9	; 217
    1e0c:	31 fd       	sbrc	r19, 1
    1e0e:	40 52       	subi	r20, 0x20	; 32
    1e10:	41 93       	st	Z+, r20
    1e12:	02 d0       	rcall	.+4      	; 0x1e18 <__ultoa_invert+0x84>
    1e14:	a9 f7       	brne	.-22     	; 0x1e00 <__ultoa_invert+0x6c>
    1e16:	ea cf       	rjmp	.-44     	; 0x1dec <__ultoa_invert+0x58>
    1e18:	b4 e0       	ldi	r27, 0x04	; 4
    1e1a:	a6 95       	lsr	r26
    1e1c:	97 95       	ror	r25
    1e1e:	87 95       	ror	r24
    1e20:	77 95       	ror	r23
    1e22:	67 95       	ror	r22
    1e24:	ba 95       	dec	r27
    1e26:	c9 f7       	brne	.-14     	; 0x1e1a <__ultoa_invert+0x86>
    1e28:	00 97       	sbiw	r24, 0x00	; 0
    1e2a:	61 05       	cpc	r22, r1
    1e2c:	71 05       	cpc	r23, r1
    1e2e:	08 95       	ret
    1e30:	9b 01       	movw	r18, r22
    1e32:	ac 01       	movw	r20, r24
    1e34:	0a 2e       	mov	r0, r26
    1e36:	06 94       	lsr	r0
    1e38:	57 95       	ror	r21
    1e3a:	47 95       	ror	r20
    1e3c:	37 95       	ror	r19
    1e3e:	27 95       	ror	r18
    1e40:	ba 95       	dec	r27
    1e42:	c9 f7       	brne	.-14     	; 0x1e36 <__ultoa_invert+0xa2>
    1e44:	62 0f       	add	r22, r18
    1e46:	73 1f       	adc	r23, r19
    1e48:	84 1f       	adc	r24, r20
    1e4a:	95 1f       	adc	r25, r21
    1e4c:	a0 1d       	adc	r26, r0
    1e4e:	08 95       	ret

00001e50 <__prologue_saves__>:
    1e50:	2f 92       	push	r2
    1e52:	3f 92       	push	r3
    1e54:	4f 92       	push	r4
    1e56:	5f 92       	push	r5
    1e58:	6f 92       	push	r6
    1e5a:	7f 92       	push	r7
    1e5c:	8f 92       	push	r8
    1e5e:	9f 92       	push	r9
    1e60:	af 92       	push	r10
    1e62:	bf 92       	push	r11
    1e64:	cf 92       	push	r12
    1e66:	df 92       	push	r13
    1e68:	ef 92       	push	r14
    1e6a:	ff 92       	push	r15
    1e6c:	0f 93       	push	r16
    1e6e:	1f 93       	push	r17
    1e70:	cf 93       	push	r28
    1e72:	df 93       	push	r29
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
    1e78:	ca 1b       	sub	r28, r26
    1e7a:	db 0b       	sbc	r29, r27
    1e7c:	0f b6       	in	r0, 0x3f	; 63
    1e7e:	f8 94       	cli
    1e80:	de bf       	out	0x3e, r29	; 62
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	cd bf       	out	0x3d, r28	; 61
    1e86:	09 94       	ijmp

00001e88 <__epilogue_restores__>:
    1e88:	2a 88       	ldd	r2, Y+18	; 0x12
    1e8a:	39 88       	ldd	r3, Y+17	; 0x11
    1e8c:	48 88       	ldd	r4, Y+16	; 0x10
    1e8e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e90:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e92:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e94:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e96:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e98:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e9a:	b9 84       	ldd	r11, Y+9	; 0x09
    1e9c:	c8 84       	ldd	r12, Y+8	; 0x08
    1e9e:	df 80       	ldd	r13, Y+7	; 0x07
    1ea0:	ee 80       	ldd	r14, Y+6	; 0x06
    1ea2:	fd 80       	ldd	r15, Y+5	; 0x05
    1ea4:	0c 81       	ldd	r16, Y+4	; 0x04
    1ea6:	1b 81       	ldd	r17, Y+3	; 0x03
    1ea8:	aa 81       	ldd	r26, Y+2	; 0x02
    1eaa:	b9 81       	ldd	r27, Y+1	; 0x01
    1eac:	ce 0f       	add	r28, r30
    1eae:	d1 1d       	adc	r29, r1
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	de bf       	out	0x3e, r29	; 62
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	cd bf       	out	0x3d, r28	; 61
    1eba:	ed 01       	movw	r28, r26
    1ebc:	08 95       	ret

00001ebe <_exit>:
    1ebe:	f8 94       	cli

00001ec0 <__stop_program>:
    1ec0:	ff cf       	rjmp	.-2      	; 0x1ec0 <__stop_program>
