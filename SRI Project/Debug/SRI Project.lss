
SRI Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000030e  00800100  00003924  000039b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003924  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001e2  0080040e  0080040e  00003cc6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003cc6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003a8  00000000  00000000  00003d22  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004306  00000000  00000000  000040ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001363  00000000  00000000  000083d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000159d  00000000  00000000  00009733  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000be8  00000000  00000000  0000acd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d54  00000000  00000000  0000b8b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002a21  00000000  00000000  0000c60c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000368  00000000  00000000  0000f02d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 86 03 	jmp	0x70c	; 0x70c <__vector_5>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      3c:	0c 94 4a 10 	jmp	0x2094	; 0x2094 <__vector_15>
      40:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      44:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      48:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      4c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      50:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__vector_20>
      54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      7c:	52 01       	movw	r10, r4
      7e:	4a 01       	movw	r8, r20
      80:	86 01       	movw	r16, r12
      82:	a4 01       	movw	r20, r8
      84:	35 01       	movw	r6, r10
      86:	38 01       	movw	r6, r16
      88:	a4 01       	movw	r20, r8
      8a:	83 01       	movw	r16, r6
      8c:	a4 01       	movw	r20, r8
      8e:	a4 01       	movw	r20, r8
      90:	a4 01       	movw	r20, r8
      92:	a4 01       	movw	r20, r8
      94:	a2 01       	movw	r20, r4
      96:	a4 01       	movw	r20, r8
      98:	a4 01       	movw	r20, r8
      9a:	a4 01       	movw	r20, r8
      9c:	5a 01       	movw	r10, r20
      9e:	3b 01       	movw	r6, r22
      a0:	42 01       	movw	r8, r4
      a2:	47 01       	movw	r8, r14
      a4:	63 01       	movw	r12, r6
      a6:	68 01       	movw	r12, r16
      a8:	5d 01       	movw	r10, r26
      aa:	9f 01       	movw	r18, r30
      ac:	96 01       	movw	r18, r12
      ae:	83 16       	cp	r8, r19
      b0:	90 16       	cp	r9, r16
      b2:	a1 16       	cp	r10, r17
      b4:	0b 17       	cp	r16, r27
      b6:	5f 17       	cp	r21, r31
      b8:	70 17       	cp	r23, r16
      ba:	80 17       	cp	r24, r16
      bc:	96 17       	cp	r25, r22
      be:	a4 17       	cp	r26, r20
      c0:	f8 17       	cp	r31, r24
      c2:	45 18       	sub	r4, r5
      c4:	9b 18       	sub	r9, r11
      c6:	35 19       	sub	r19, r5
      c8:	42 19       	sub	r20, r2
      ca:	42 19       	sub	r20, r2
      cc:	42 19       	sub	r20, r2
      ce:	42 19       	sub	r20, r2
      d0:	42 19       	sub	r20, r2
      d2:	42 19       	sub	r20, r2
      d4:	42 19       	sub	r20, r2
      d6:	42 19       	sub	r20, r2
      d8:	42 19       	sub	r20, r2
      da:	42 19       	sub	r20, r2
      dc:	42 19       	sub	r20, r2
      de:	42 19       	sub	r20, r2
      e0:	42 19       	sub	r20, r2
      e2:	42 19       	sub	r20, r2
      e4:	42 19       	sub	r20, r2
      e6:	42 19       	sub	r20, r2
      e8:	42 19       	sub	r20, r2
      ea:	42 19       	sub	r20, r2
      ec:	42 19       	sub	r20, r2
      ee:	42 19       	sub	r20, r2
      f0:	ea 15       	cp	r30, r10
      f2:	37 16       	cp	r3, r23
      f4:	42 19       	sub	r20, r2
      f6:	42 19       	sub	r20, r2
      f8:	42 19       	sub	r20, r2
      fa:	42 19       	sub	r20, r2
      fc:	42 19       	sub	r20, r2
      fe:	42 19       	sub	r20, r2
     100:	42 19       	sub	r20, r2
     102:	42 19       	sub	r20, r2
     104:	42 19       	sub	r20, r2
     106:	42 19       	sub	r20, r2
     108:	42 19       	sub	r20, r2
     10a:	42 19       	sub	r20, r2
     10c:	42 19       	sub	r20, r2
     10e:	42 19       	sub	r20, r2
     110:	42 19       	sub	r20, r2
     112:	42 19       	sub	r20, r2
     114:	42 19       	sub	r20, r2
     116:	42 19       	sub	r20, r2
     118:	42 19       	sub	r20, r2
     11a:	42 19       	sub	r20, r2
     11c:	42 19       	sub	r20, r2
     11e:	42 19       	sub	r20, r2
     120:	42 19       	sub	r20, r2
     122:	42 19       	sub	r20, r2
     124:	42 19       	sub	r20, r2
     126:	42 19       	sub	r20, r2
     128:	42 19       	sub	r20, r2
     12a:	42 19       	sub	r20, r2
     12c:	42 19       	sub	r20, r2
     12e:	42 19       	sub	r20, r2
     130:	42 19       	sub	r20, r2
     132:	42 19       	sub	r20, r2
     134:	42 19       	sub	r20, r2
     136:	42 19       	sub	r20, r2
     138:	42 19       	sub	r20, r2
     13a:	42 19       	sub	r20, r2
     13c:	42 19       	sub	r20, r2
     13e:	42 19       	sub	r20, r2
     140:	42 19       	sub	r20, r2
     142:	42 19       	sub	r20, r2
     144:	42 19       	sub	r20, r2
     146:	42 19       	sub	r20, r2
     148:	42 19       	sub	r20, r2
     14a:	42 19       	sub	r20, r2
     14c:	42 19       	sub	r20, r2
     14e:	42 19       	sub	r20, r2
     150:	42 19       	sub	r20, r2
     152:	42 19       	sub	r20, r2
     154:	42 19       	sub	r20, r2
     156:	42 19       	sub	r20, r2
     158:	42 19       	sub	r20, r2
     15a:	42 19       	sub	r20, r2
     15c:	42 19       	sub	r20, r2
     15e:	42 19       	sub	r20, r2
     160:	42 19       	sub	r20, r2
     162:	42 19       	sub	r20, r2
     164:	42 19       	sub	r20, r2
     166:	42 19       	sub	r20, r2
     168:	42 19       	sub	r20, r2
     16a:	42 19       	sub	r20, r2
     16c:	42 19       	sub	r20, r2
     16e:	42 19       	sub	r20, r2
     170:	42 19       	sub	r20, r2
     172:	42 19       	sub	r20, r2
     174:	42 19       	sub	r20, r2
     176:	b2 16       	cp	r11, r18

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d0 e1       	ldi	r29, 0x10	; 16
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_copy_data>:
     184:	14 e0       	ldi	r17, 0x04	; 4
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	e4 e2       	ldi	r30, 0x24	; 36
     18c:	f9 e3       	ldi	r31, 0x39	; 57
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
     190:	05 90       	lpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	ae 30       	cpi	r26, 0x0E	; 14
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
     19a:	25 e0       	ldi	r18, 0x05	; 5
     19c:	ae e0       	ldi	r26, 0x0E	; 14
     19e:	b4 e0       	ldi	r27, 0x04	; 4
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	a0 3f       	cpi	r26, 0xF0	; 240
     1a6:	b2 07       	cpc	r27, r18
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
     1aa:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <main>
     1ae:	0c 94 90 1c 	jmp	0x3920	; 0x3920 <_exit>

000001b2 <__bad_interrupt>:
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <resetBTProtocol>:
unsigned char len;
unsigned char date[10];
unsigned char dateCrtIndex;

uint8_t resetBTProtocol(){
	state = WaitingStartByte;
     1b6:	10 92 15 04 	sts	0x0415, r1
	return NO;
}
     1ba:	80 e0       	ldi	r24, 0x00	; 0
     1bc:	08 95       	ret

000001be <prelucreazaDatele>:
	sei();
	//printf("\nstare noua %d: ", state);
}
extern volatile uint8_t ms2p1_enabled;

void prelucreazaDatele(void){
     1be:	0f 93       	push	r16
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
	
	//BTTransmitStr("Procesez ceva!");
	//cli();
	if(actiune >= GoFront && actiune <= GoRightB){
     1c4:	80 91 1f 04 	lds	r24, 0x041F
     1c8:	9f ef       	ldi	r25, 0xFF	; 255
     1ca:	98 0f       	add	r25, r24
     1cc:	96 30       	cpi	r25, 0x06	; 6
     1ce:	08 f0       	brcs	.+2      	; 0x1d2 <prelucreazaDatele+0x14>
     1d0:	41 c0       	rjmp	.+130    	; 0x254 <prelucreazaDatele+0x96>
		unsigned char timp = date[0];
     1d2:	c0 91 20 04 	lds	r28, 0x0420
		unsigned char viteza = date[1];
     1d6:	d0 91 21 04 	lds	r29, 0x0421
		if(dateCrtIndex == 3)
     1da:	90 91 1a 04 	lds	r25, 0x041A
     1de:	93 30       	cpi	r25, 0x03	; 3
     1e0:	19 f4       	brne	.+6      	; 0x1e8 <prelucreazaDatele+0x2a>
			toggleDebuggingOff(OFF);
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <toggleDebuggingOff>
		switch(actiune){
     1e8:	90 91 1f 04 	lds	r25, 0x041F
     1ec:	93 30       	cpi	r25, 0x03	; 3
     1ee:	b1 f0       	breq	.+44     	; 0x21c <prelucreazaDatele+0x5e>
     1f0:	28 f4       	brcc	.+10     	; 0x1fc <prelucreazaDatele+0x3e>
     1f2:	91 30       	cpi	r25, 0x01	; 1
     1f4:	49 f0       	breq	.+18     	; 0x208 <prelucreazaDatele+0x4a>
     1f6:	92 30       	cpi	r25, 0x02	; 2
     1f8:	61 f0       	breq	.+24     	; 0x212 <prelucreazaDatele+0x54>
     1fa:	23 c0       	rjmp	.+70     	; 0x242 <prelucreazaDatele+0x84>
     1fc:	95 30       	cpi	r25, 0x05	; 5
     1fe:	99 f0       	breq	.+38     	; 0x226 <prelucreazaDatele+0x68>
     200:	b8 f0       	brcs	.+46     	; 0x230 <prelucreazaDatele+0x72>
     202:	96 30       	cpi	r25, 0x06	; 6
     204:	d1 f0       	breq	.+52     	; 0x23a <prelucreazaDatele+0x7c>
     206:	1d c0       	rjmp	.+58     	; 0x242 <prelucreazaDatele+0x84>
			case GoFront:
				goFront(timp, viteza);
     208:	6d 2f       	mov	r22, r29
     20a:	8c 2f       	mov	r24, r28
     20c:	0e 94 4c 05 	call	0xa98	; 0xa98 <goFront>
			break;
     210:	18 c0       	rjmp	.+48     	; 0x242 <prelucreazaDatele+0x84>
			case GoBack:
				goBack(timp, viteza);
     212:	6d 2f       	mov	r22, r29
     214:	8c 2f       	mov	r24, r28
     216:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <goBack>
			break;
     21a:	13 c0       	rjmp	.+38     	; 0x242 <prelucreazaDatele+0x84>
			case GoLeftF:
				goFrontLeft(timp, viteza);
     21c:	6d 2f       	mov	r22, r29
     21e:	8c 2f       	mov	r24, r28
     220:	0e 94 ac 05 	call	0xb58	; 0xb58 <goFrontLeft>
			break;
     224:	0e c0       	rjmp	.+28     	; 0x242 <prelucreazaDatele+0x84>
			case GoLeftB:
				goBackLeft(timp, viteza);
     226:	6d 2f       	mov	r22, r29
     228:	8c 2f       	mov	r24, r28
     22a:	0e 94 0b 06 	call	0xc16	; 0xc16 <goBackLeft>
			break;
     22e:	09 c0       	rjmp	.+18     	; 0x242 <prelucreazaDatele+0x84>
			case GoRightF:
				goFrontRight(timp, viteza);
     230:	6d 2f       	mov	r22, r29
     232:	8c 2f       	mov	r24, r28
     234:	0e 94 da 05 	call	0xbb4	; 0xbb4 <goFrontRight>
			break;
     238:	04 c0       	rjmp	.+8      	; 0x242 <prelucreazaDatele+0x84>
			case GoRightB:
				goBackRight(timp, viteza);
     23a:	6d 2f       	mov	r22, r29
     23c:	8c 2f       	mov	r24, r28
     23e:	0e 94 39 06 	call	0xc72	; 0xc72 <goBackRight>
			break;
			default:
				break;
		}
		if(dateCrtIndex == 3)
     242:	80 91 1a 04 	lds	r24, 0x041A
     246:	83 30       	cpi	r24, 0x03	; 3
     248:	09 f0       	breq	.+2      	; 0x24c <prelucreazaDatele+0x8e>
     24a:	7e c0       	rjmp	.+252    	; 0x348 <prelucreazaDatele+0x18a>
			toggleDebuggingOff(ON);
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <toggleDebuggingOff>
     252:	7a c0       	rjmp	.+244    	; 0x348 <prelucreazaDatele+0x18a>
			
		return;
	}
	
	switch(actiune){
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	fc 01       	movw	r30, r24
     258:	37 97       	sbiw	r30, 0x07	; 7
     25a:	e9 31       	cpi	r30, 0x19	; 25
     25c:	f1 05       	cpc	r31, r1
     25e:	08 f0       	brcs	.+2      	; 0x262 <prelucreazaDatele+0xa4>
     260:	73 c0       	rjmp	.+230    	; 0x348 <prelucreazaDatele+0x18a>
     262:	e2 5c       	subi	r30, 0xC2	; 194
     264:	ff 4f       	sbci	r31, 0xFF	; 255
     266:	0c 94 8b 19 	jmp	0x3316	; 0x3316 <__tablejump2__>
		case GoM2P2:
			//initDoLeftDistance();
			initFindPlaces1();
     26a:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <initFindPlaces1>
			//initParalelCheck();
		break;
     26e:	6c c0       	rjmp	.+216    	; 0x348 <prelucreazaDatele+0x18a>
		case GoM2P3:
			checkFreeParallelParkingPlace();
     270:	0e 94 f7 04 	call	0x9ee	; 0x9ee <checkFreeParallelParkingPlace>
		break;
     274:	69 c0       	rjmp	.+210    	; 0x348 <prelucreazaDatele+0x18a>
		case Led:
			ledAction(date[0], date[1]);
     276:	60 91 21 04 	lds	r22, 0x0421
     27a:	80 91 20 04 	lds	r24, 0x0420
     27e:	0e 94 4e 13 	call	0x269c	; 0x269c <ledAction>
		break;
     282:	62 c0       	rjmp	.+196    	; 0x348 <prelucreazaDatele+0x18a>
		case ReadSensorValue:
			toggleSensorSend(date[0]);		
     284:	80 91 20 04 	lds	r24, 0x0420
     288:	0e 94 14 08 	call	0x1028	; 0x1028 <toggleSensorSend>
		break;
     28c:	5d c0       	rjmp	.+186    	; 0x348 <prelucreazaDatele+0x18a>
		case StopEngines:
			stopEngines();
     28e:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <stopEngines>
		break;
     292:	5a c0       	rjmp	.+180    	; 0x348 <prelucreazaDatele+0x18a>
		case RotirePeLocDreapta:
			rotirePeLoc(date[0], date[1], LeftEngines);
     294:	41 e0       	ldi	r20, 0x01	; 1
     296:	60 91 21 04 	lds	r22, 0x0421
     29a:	80 91 20 04 	lds	r24, 0x0420
     29e:	0e 94 25 07 	call	0xe4a	; 0xe4a <rotirePeLoc>
		break;		
     2a2:	52 c0       	rjmp	.+164    	; 0x348 <prelucreazaDatele+0x18a>
		case RotirePeLocStanga:
			rotirePeLoc(date[0], date[1], RightEngines);
     2a4:	40 e0       	ldi	r20, 0x00	; 0
     2a6:	60 91 21 04 	lds	r22, 0x0421
     2aa:	80 91 20 04 	lds	r24, 0x0420
     2ae:	0e 94 25 07 	call	0xe4a	; 0xe4a <rotirePeLoc>
		break;
     2b2:	4a c0       	rjmp	.+148    	; 0x348 <prelucreazaDatele+0x18a>
		case DisplayMessage:
			//addEntryToTimerQueue(&fctSmechera, 10UL * 1000UL, Periodic);
			//addEntryToTimerQueue(&testFct1, 500UL * 1000UL, Periodic);
			initAndStartStateMachineTest1();
     2b4:	0e 94 59 13 	call	0x26b2	; 0x26b2 <initAndStartStateMachineTest1>
		break;
     2b8:	47 c0       	rjmp	.+142    	; 0x348 <prelucreazaDatele+0x18a>
		case GoM2P1:
			//addEntryToTimerQueue(&functieRotireStanga, 1000UL * 500UL, Periodic);
		break;
		case ResetThings:
			stopEngines();
     2ba:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <stopEngines>
			resetTimerQueue(1);
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	0e 94 c3 11 	call	0x2386	; 0x2386 <resetTimerQueue>
		break;
     2c4:	41 c0       	rjmp	.+130    	; 0x348 <prelucreazaDatele+0x18a>
		case GetAverageSpeed:
			getAverageSpeed(date[0]);
     2c6:	80 91 20 04 	lds	r24, 0x0420
     2ca:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <getAverageSpeed>
		break;
     2ce:	3c c0       	rjmp	.+120    	; 0x348 <prelucreazaDatele+0x18a>
		case ParcurgereDistanta:
			if(len<3)
     2d0:	80 91 2a 04 	lds	r24, 0x042A
     2d4:	83 30       	cpi	r24, 0x03	; 3
     2d6:	c0 f1       	brcs	.+112    	; 0x348 <prelucreazaDatele+0x18a>
				break;
			uint32_t distDP=0;
			distDP = date[0]*256UL + date[1];
     2d8:	60 91 20 04 	lds	r22, 0x0420
     2dc:	86 2f       	mov	r24, r22
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b0 e0       	ldi	r27, 0x00	; 0
     2e4:	ba 2f       	mov	r27, r26
     2e6:	a9 2f       	mov	r26, r25
     2e8:	98 2f       	mov	r25, r24
     2ea:	88 27       	eor	r24, r24
     2ec:	20 91 21 04 	lds	r18, 0x0421
     2f0:	bc 01       	movw	r22, r24
     2f2:	cd 01       	movw	r24, r26
     2f4:	62 0f       	add	r22, r18
     2f6:	71 1d       	adc	r23, r1
     2f8:	81 1d       	adc	r24, r1
     2fa:	91 1d       	adc	r25, r1
			initParcurgereDistanta(distDP, date[2]);
     2fc:	40 91 22 04 	lds	r20, 0x0422
     300:	0e 94 65 13 	call	0x26ca	; 0x26ca <initParcurgereDistanta>
		break;
     304:	21 c0       	rjmp	.+66     	; 0x348 <prelucreazaDatele+0x18a>
		case ParallelPark:
			initParalelParking();
     306:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <initParalelParking>
			
		break;
     30a:	1e c0       	rjmp	.+60     	; 0x348 <prelucreazaDatele+0x18a>
		case RotireSmechera:
			if(len<4)
     30c:	80 91 2a 04 	lds	r24, 0x042A
     310:	84 30       	cpi	r24, 0x04	; 4
     312:	d0 f0       	brcs	.+52     	; 0x348 <prelucreazaDatele+0x18a>
				break;
			rotireSmechera(2, date[0], date[1], date[2], date[3]);
     314:	00 91 23 04 	lds	r16, 0x0423
     318:	20 91 22 04 	lds	r18, 0x0422
     31c:	40 91 21 04 	lds	r20, 0x0421
     320:	60 91 20 04 	lds	r22, 0x0420
     324:	82 e0       	ldi	r24, 0x02	; 2
     326:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <rotireSmechera>
		break;
     32a:	0e c0       	rjmp	.+28     	; 0x348 <prelucreazaDatele+0x18a>
		case SetSettings:
			if(len==1)
     32c:	80 91 2a 04 	lds	r24, 0x042A
     330:	81 30       	cpi	r24, 0x01	; 1
     332:	51 f4       	brne	.+20     	; 0x348 <prelucreazaDatele+0x18a>
				setSettings(date[0]);
     334:	80 91 20 04 	lds	r24, 0x0420
     338:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <setSettings>
     33c:	05 c0       	rjmp	.+10     	; 0x348 <prelucreazaDatele+0x18a>
		break;
		case GetSettings:
			getSettings();
     33e:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <getSettings>
		break;
     342:	02 c0       	rjmp	.+4      	; 0x348 <prelucreazaDatele+0x18a>
		case ISensorsValues:
			sendSensors();
     344:	0e 94 c8 08 	call	0x1190	; 0x1190 <sendSensors>
		break;
	}
	
	
	//sei();
}
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	0f 91       	pop	r16
     34e:	08 95       	ret

00000350 <BTTransmitStr>:

void BTTransmitStr(char *theString){
	uint8_t len, i;
	
	len = strlen(theString);
     350:	fc 01       	movw	r30, r24
     352:	01 90       	ld	r0, Z+
     354:	00 20       	and	r0, r0
     356:	e9 f7       	brne	.-6      	; 0x352 <BTTransmitStr+0x2>
     358:	31 97       	sbiw	r30, 0x01	; 1
     35a:	e8 1b       	sub	r30, r24
     35c:	f9 0b       	sbc	r31, r25
     35e:	2e 2f       	mov	r18, r30
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     360:	3a ea       	ldi	r19, 0xAA	; 170
     362:	30 93 c6 00 	sts	0x00C6, r19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     366:	ab ed       	ldi	r26, 0xDB	; 219
     368:	b5 e0       	ldi	r27, 0x05	; 5
     36a:	11 97       	sbiw	r26, 0x01	; 1
     36c:	f1 f7       	brne	.-4      	; 0x36a <BTTransmitStr+0x1a>
     36e:	00 c0       	rjmp	.+0      	; 0x370 <BTTransmitStr+0x20>
     370:	00 00       	nop
     372:	37 e1       	ldi	r19, 0x17	; 23
     374:	30 93 c6 00 	sts	0x00C6, r19
     378:	ab ed       	ldi	r26, 0xDB	; 219
     37a:	b5 e0       	ldi	r27, 0x05	; 5
     37c:	11 97       	sbiw	r26, 0x01	; 1
     37e:	f1 f7       	brne	.-4      	; 0x37c <BTTransmitStr+0x2c>
     380:	00 c0       	rjmp	.+0      	; 0x382 <BTTransmitStr+0x32>
     382:	00 00       	nop
     384:	e0 93 c6 00 	sts	0x00C6, r30
     388:	eb ed       	ldi	r30, 0xDB	; 219
     38a:	f5 e0       	ldi	r31, 0x05	; 5
     38c:	31 97       	sbiw	r30, 0x01	; 1
     38e:	f1 f7       	brne	.-4      	; 0x38c <BTTransmitStr+0x3c>
     390:	00 c0       	rjmp	.+0      	; 0x392 <BTTransmitStr+0x42>
     392:	00 00       	nop
	
	BTTransmitChar(0xAA);
	BTTransmitChar(DisplayMessage);
	BTTransmitChar(len);
	
	for(i=0;i<len;i++)
     394:	22 23       	and	r18, r18
     396:	89 f0       	breq	.+34     	; 0x3ba <BTTransmitStr+0x6a>
     398:	38 2f       	mov	r19, r24
     39a:	e8 2f       	mov	r30, r24
     39c:	f9 2f       	mov	r31, r25
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     39e:	a6 ec       	ldi	r26, 0xC6	; 198
     3a0:	b0 e0       	ldi	r27, 0x00	; 0
	BTTransmitChar(DisplayMessage);
	BTTransmitChar(len);
	
	for(i=0;i<len;i++)
	{
		BTTransmitChar(theString[i]);
     3a2:	81 91       	ld	r24, Z+
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     3a4:	8c 93       	st	X, r24
     3a6:	8b ed       	ldi	r24, 0xDB	; 219
     3a8:	95 e0       	ldi	r25, 0x05	; 5
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	f1 f7       	brne	.-4      	; 0x3aa <BTTransmitStr+0x5a>
     3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <BTTransmitStr+0x60>
     3b0:	00 00       	nop
     3b2:	8e 2f       	mov	r24, r30
     3b4:	83 1b       	sub	r24, r19
	
	BTTransmitChar(0xAA);
	BTTransmitChar(DisplayMessage);
	BTTransmitChar(len);
	
	for(i=0;i<len;i++)
     3b6:	82 17       	cp	r24, r18
     3b8:	a0 f3       	brcs	.-24     	; 0x3a2 <BTTransmitStr+0x52>
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     3ba:	85 e5       	ldi	r24, 0x55	; 85
     3bc:	80 93 c6 00 	sts	0x00C6, r24
     3c0:	ab ed       	ldi	r26, 0xDB	; 219
     3c2:	b5 e0       	ldi	r27, 0x05	; 5
     3c4:	11 97       	sbiw	r26, 0x01	; 1
     3c6:	f1 f7       	brne	.-4      	; 0x3c4 <BTTransmitStr+0x74>
     3c8:	00 c0       	rjmp	.+0      	; 0x3ca <BTTransmitStr+0x7a>
     3ca:	00 00       	nop
     3cc:	08 95       	ret

000003ce <BTTransmitMsg>:
	}
	BTTransmitChar(0x55);
	
}

void BTTransmitMsg(char *theString, uint8_t len){
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
	uint16_t i;
	for(i=0;i<len;i++)
     3d2:	70 e0       	ldi	r23, 0x00	; 0
     3d4:	61 15       	cp	r22, r1
     3d6:	71 05       	cpc	r23, r1
     3d8:	91 f0       	breq	.+36     	; 0x3fe <BTTransmitMsg+0x30>
     3da:	e8 2f       	mov	r30, r24
     3dc:	f9 2f       	mov	r31, r25
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	90 e0       	ldi	r25, 0x00	; 0
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     3e2:	a6 ec       	ldi	r26, 0xC6	; 198
     3e4:	b0 e0       	ldi	r27, 0x00	; 0

void BTTransmitMsg(char *theString, uint8_t len){
	uint16_t i;
	for(i=0;i<len;i++)
	{
		BTTransmitChar(theString[i]);
     3e6:	21 91       	ld	r18, Z+
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     3e8:	2c 93       	st	X, r18
     3ea:	cb ed       	ldi	r28, 0xDB	; 219
     3ec:	d5 e0       	ldi	r29, 0x05	; 5
     3ee:	21 97       	sbiw	r28, 0x01	; 1
     3f0:	f1 f7       	brne	.-4      	; 0x3ee <BTTransmitMsg+0x20>
     3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <BTTransmitMsg+0x26>
     3f4:	00 00       	nop
	
}

void BTTransmitMsg(char *theString, uint8_t len){
	uint16_t i;
	for(i=0;i<len;i++)
     3f6:	01 96       	adiw	r24, 0x01	; 1
     3f8:	86 17       	cp	r24, r22
     3fa:	97 07       	cpc	r25, r23
     3fc:	a0 f3       	brcs	.-24     	; 0x3e6 <BTTransmitMsg+0x18>
	{
		BTTransmitChar(theString[i]);
	}
}
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	08 95       	ret

00000404 <reTransmit>:
{
	BTProtocolReadByte(UDR0);
}


void reTransmit(void){
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	00 d0       	rcall	.+0      	; 0x40a <reTransmit+0x6>
     40a:	00 d0       	rcall	.+0      	; 0x40c <reTransmit+0x8>
     40c:	cd b7       	in	r28, 0x3d	; 61
     40e:	de b7       	in	r29, 0x3e	; 62
	//trimite un semnal telefonului pentru a retransmite ultimul mesaj
	printf("Trimite din nou ultimul mesaj!!!");
     410:	82 e0       	ldi	r24, 0x02	; 2
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	9f 93       	push	r25
     416:	8f 93       	push	r24
     418:	0e 94 ab 19 	call	0x3356	; 0x3356 <printf>
	char msg[] = { StartByte, ReTransmitLastMsg, 0, 0x55 };
     41c:	8a ea       	ldi	r24, 0xAA	; 170
     41e:	89 83       	std	Y+1, r24	; 0x01
     420:	86 e1       	ldi	r24, 0x16	; 22
     422:	8a 83       	std	Y+2, r24	; 0x02
     424:	1b 82       	std	Y+3, r1	; 0x03
     426:	85 e5       	ldi	r24, 0x55	; 85
     428:	8c 83       	std	Y+4, r24	; 0x04
	BTTransmitMsg(msg, 4);
     42a:	64 e0       	ldi	r22, 0x04	; 4
     42c:	ce 01       	movw	r24, r28
     42e:	01 96       	adiw	r24, 0x01	; 1
     430:	0e 94 e7 01 	call	0x3ce	; 0x3ce <BTTransmitMsg>
}
     434:	0f 90       	pop	r0
     436:	0f 90       	pop	r0
     438:	0f 90       	pop	r0
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	08 95       	ret

00000446 <BTProtocolReadByte>:
}

extern volatile uint32_t timerClocks;
volatile uint32_t startTmrclk, endTmrclk;
void BTProtocolReadByte(unsigned char theByte){
	cli();
     446:	f8 94       	cli
	switch (state){
     448:	90 91 15 04 	lds	r25, 0x0415
     44c:	92 30       	cpi	r25, 0x02	; 2
     44e:	f9 f0       	breq	.+62     	; 0x48e <BTProtocolReadByte+0x48>
     450:	28 f4       	brcc	.+10     	; 0x45c <BTProtocolReadByte+0x16>
     452:	99 23       	and	r25, r25
     454:	41 f0       	breq	.+16     	; 0x466 <BTProtocolReadByte+0x20>
     456:	91 30       	cpi	r25, 0x01	; 1
     458:	69 f0       	breq	.+26     	; 0x474 <BTProtocolReadByte+0x2e>
     45a:	4a c0       	rjmp	.+148    	; 0x4f0 <BTProtocolReadByte+0xaa>
     45c:	93 30       	cpi	r25, 0x03	; 3
     45e:	49 f1       	breq	.+82     	; 0x4b2 <BTProtocolReadByte+0x6c>
     460:	94 30       	cpi	r25, 0x04	; 4
     462:	c9 f1       	breq	.+114    	; 0x4d6 <BTProtocolReadByte+0x90>
     464:	45 c0       	rjmp	.+138    	; 0x4f0 <BTProtocolReadByte+0xaa>
		case WaitingStartByte:
			if(theByte == StartByte){
     466:	8a 3a       	cpi	r24, 0xAA	; 170
     468:	09 f0       	breq	.+2      	; 0x46c <BTProtocolReadByte+0x26>
     46a:	42 c0       	rjmp	.+132    	; 0x4f0 <BTProtocolReadByte+0xaa>
				state = WaitingCarAction;
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	80 93 15 04 	sts	0x0415, r24
     472:	3e c0       	rjmp	.+124    	; 0x4f0 <BTProtocolReadByte+0xaa>
				//toggleDebuggingOff(1);
			}
			break;

		case WaitingCarAction:
			if(theByte >= NoAction && theByte < EndAction){
     474:	81 32       	cpi	r24, 0x21	; 33
     476:	30 f4       	brcc	.+12     	; 0x484 <BTProtocolReadByte+0x3e>
				state = WaitingDataLength;
     478:	92 e0       	ldi	r25, 0x02	; 2
     47a:	90 93 15 04 	sts	0x0415, r25
				actiune = theByte;
     47e:	80 93 1f 04 	sts	0x041F, r24
     482:	36 c0       	rjmp	.+108    	; 0x4f0 <BTProtocolReadByte+0xaa>
			}
			else{
				state = WaitingStartByte;
     484:	10 92 15 04 	sts	0x0415, r1
				reTransmit(); // error ocurred, send retransmit signal
     488:	0e 94 02 02 	call	0x404	; 0x404 <reTransmit>
     48c:	31 c0       	rjmp	.+98     	; 0x4f0 <BTProtocolReadByte+0xaa>
			}
			break;

		case WaitingDataLength:
			if(theByte==0){
     48e:	81 11       	cpse	r24, r1
     490:	04 c0       	rjmp	.+8      	; 0x49a <BTProtocolReadByte+0x54>
				state = WaitingEndByte;
     492:	84 e0       	ldi	r24, 0x04	; 4
     494:	80 93 15 04 	sts	0x0415, r24
				break;
     498:	2b c0       	rjmp	.+86     	; 0x4f0 <BTProtocolReadByte+0xaa>
			}
			state = ReadingData;
     49a:	93 e0       	ldi	r25, 0x03	; 3
     49c:	90 93 15 04 	sts	0x0415, r25
			len = theByte;
     4a0:	80 93 2a 04 	sts	0x042A, r24
			dateCrtIndex = 0;
     4a4:	10 92 1a 04 	sts	0x041A, r1
			if(len==0)
				state = WaitingEndByte;
			else if(len<0 || len>50)
     4a8:	83 33       	cpi	r24, 0x33	; 51
     4aa:	10 f1       	brcs	.+68     	; 0x4f0 <BTProtocolReadByte+0xaa>
				state = WaitingStartByte;
     4ac:	10 92 15 04 	sts	0x0415, r1
     4b0:	1f c0       	rjmp	.+62     	; 0x4f0 <BTProtocolReadByte+0xaa>
			break;

		case ReadingData:
			date[dateCrtIndex++] = theByte;
     4b2:	e0 91 1a 04 	lds	r30, 0x041A
     4b6:	91 e0       	ldi	r25, 0x01	; 1
     4b8:	9e 0f       	add	r25, r30
     4ba:	90 93 1a 04 	sts	0x041A, r25
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	e0 5e       	subi	r30, 0xE0	; 224
     4c2:	fb 4f       	sbci	r31, 0xFB	; 251
     4c4:	80 83       	st	Z, r24
			if(dateCrtIndex >= len)
     4c6:	80 91 2a 04 	lds	r24, 0x042A
     4ca:	98 17       	cp	r25, r24
     4cc:	88 f0       	brcs	.+34     	; 0x4f0 <BTProtocolReadByte+0xaa>
			state = WaitingEndByte;
     4ce:	84 e0       	ldi	r24, 0x04	; 4
     4d0:	80 93 15 04 	sts	0x0415, r24
     4d4:	0d c0       	rjmp	.+26     	; 0x4f0 <BTProtocolReadByte+0xaa>
			break;
		case WaitingEndByte:
			if(theByte != 0x55){
     4d6:	85 35       	cpi	r24, 0x55	; 85
     4d8:	19 f0       	breq	.+6      	; 0x4e0 <BTProtocolReadByte+0x9a>
				reTransmit(); // error ocurred, send retransmit signal
     4da:	0e 94 02 02 	call	0x404	; 0x404 <reTransmit>
     4de:	06 c0       	rjmp	.+12     	; 0x4ec <BTProtocolReadByte+0xa6>
			}
			else{				
				removeEntryFromTimerQueue(&resetBTProtocol);
     4e0:	8b ed       	ldi	r24, 0xDB	; 219
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	0e 94 bb 10 	call	0x2176	; 0x2176 <removeEntryFromTimerQueue>
				prelucreazaDatele();
     4e8:	0e 94 df 00 	call	0x1be	; 0x1be <prelucreazaDatele>
			}
			state = WaitingStartByte;
     4ec:	10 92 15 04 	sts	0x0415, r1
			break;

	}
	sei();
     4f0:	78 94       	sei
     4f2:	08 95       	ret

000004f4 <__vector_20>:

void prelucreazaDatele(void);
void BTProtocolReadByte(unsigned char theByte);

ISR(USART0_RX_vect)
{
     4f4:	1f 92       	push	r1
     4f6:	0f 92       	push	r0
     4f8:	0f b6       	in	r0, 0x3f	; 63
     4fa:	0f 92       	push	r0
     4fc:	11 24       	eor	r1, r1
     4fe:	2f 93       	push	r18
     500:	3f 93       	push	r19
     502:	4f 93       	push	r20
     504:	5f 93       	push	r21
     506:	6f 93       	push	r22
     508:	7f 93       	push	r23
     50a:	8f 93       	push	r24
     50c:	9f 93       	push	r25
     50e:	af 93       	push	r26
     510:	bf 93       	push	r27
     512:	ef 93       	push	r30
     514:	ff 93       	push	r31
	BTProtocolReadByte(UDR0);
     516:	80 91 c6 00 	lds	r24, 0x00C6
     51a:	0e 94 23 02 	call	0x446	; 0x446 <BTProtocolReadByte>
}
     51e:	ff 91       	pop	r31
     520:	ef 91       	pop	r30
     522:	bf 91       	pop	r27
     524:	af 91       	pop	r26
     526:	9f 91       	pop	r25
     528:	8f 91       	pop	r24
     52a:	7f 91       	pop	r23
     52c:	6f 91       	pop	r22
     52e:	5f 91       	pop	r21
     530:	4f 91       	pop	r20
     532:	3f 91       	pop	r19
     534:	2f 91       	pop	r18
     536:	0f 90       	pop	r0
     538:	0f be       	out	0x3f, r0	; 63
     53a:	0f 90       	pop	r0
     53c:	1f 90       	pop	r1
     53e:	18 95       	reti

00000540 <BTTransmitMsgU>:
	for(i=0;i<len;i++)
	{
		BTTransmitChar(theString[i]);
	}
}
void BTTransmitMsgU(unsigned char *theString, uint8_t len){
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
	uint16_t i;
	for(i=0;i<len;i++)
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	61 15       	cp	r22, r1
     548:	71 05       	cpc	r23, r1
     54a:	91 f0       	breq	.+36     	; 0x570 <BTTransmitMsgU+0x30>
     54c:	e8 2f       	mov	r30, r24
     54e:	f9 2f       	mov	r31, r25
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	90 e0       	ldi	r25, 0x00	; 0
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     554:	a6 ec       	ldi	r26, 0xC6	; 198
     556:	b0 e0       	ldi	r27, 0x00	; 0
}
void BTTransmitMsgU(unsigned char *theString, uint8_t len){
	uint16_t i;
	for(i=0;i<len;i++)
	{
		BTTransmitChar(theString[i]);
     558:	21 91       	ld	r18, Z+
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     55a:	2c 93       	st	X, r18
     55c:	cb ed       	ldi	r28, 0xDB	; 219
     55e:	d5 e0       	ldi	r29, 0x05	; 5
     560:	21 97       	sbiw	r28, 0x01	; 1
     562:	f1 f7       	brne	.-4      	; 0x560 <BTTransmitMsgU+0x20>
     564:	00 c0       	rjmp	.+0      	; 0x566 <BTTransmitMsgU+0x26>
     566:	00 00       	nop
		BTTransmitChar(theString[i]);
	}
}
void BTTransmitMsgU(unsigned char *theString, uint8_t len){
	uint16_t i;
	for(i=0;i<len;i++)
     568:	01 96       	adiw	r24, 0x01	; 1
     56a:	86 17       	cp	r24, r22
     56c:	97 07       	cpc	r25, r23
     56e:	a0 f3       	brcs	.-24     	; 0x558 <BTTransmitMsgU+0x18>
	{
		BTTransmitChar(theString[i]);
	}
}
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	08 95       	ret

00000576 <sendCarStartedSignal>:
void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
	_delay_us(750);
}
void sendCarStartedSignal(){
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	00 d0       	rcall	.+0      	; 0x57c <sendCarStartedSignal+0x6>
     57c:	00 d0       	rcall	.+0      	; 0x57e <sendCarStartedSignal+0x8>
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
	uint8_t bfr[4];
	bfr[0] = StartByte;
     582:	8a ea       	ldi	r24, 0xAA	; 170
     584:	89 83       	std	Y+1, r24	; 0x01
	bfr[1] = CarStarted;
     586:	80 e2       	ldi	r24, 0x20	; 32
     588:	8a 83       	std	Y+2, r24	; 0x02
	bfr[2] = 0;
     58a:	1b 82       	std	Y+3, r1	; 0x03
	bfr[3] = EndByte;
     58c:	85 e5       	ldi	r24, 0x55	; 85
     58e:	8c 83       	std	Y+4, r24	; 0x04
	BTTransmitMsgU(bfr, 4);
     590:	64 e0       	ldi	r22, 0x04	; 4
     592:	ce 01       	movw	r24, r28
     594:	01 96       	adiw	r24, 0x01	; 1
     596:	0e 94 a0 02 	call	0x540	; 0x540 <BTTransmitMsgU>
}
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	08 95       	ret

000005a8 <initBTProtocol>:
void initBTProtocol()
{
	/*Pentru Receive*/
	UBRR0L = 25; //baud rate 9600 bps
     5a8:	89 e1       	ldi	r24, 0x19	; 25
     5aa:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B |= _BV(RXCIE0);
     5ae:	e1 ec       	ldi	r30, 0xC1	; 193
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	80 81       	ld	r24, Z
     5b4:	80 68       	ori	r24, 0x80	; 128
     5b6:	80 83       	st	Z, r24
	UCSR0B |= _BV(RXEN0);
     5b8:	80 81       	ld	r24, Z
     5ba:	80 61       	ori	r24, 0x10	; 16
     5bc:	80 83       	st	Z, r24
	UCSR0B |= _BV(TXEN0);
     5be:	80 81       	ld	r24, Z
     5c0:	88 60       	ori	r24, 0x08	; 8
     5c2:	80 83       	st	Z, r24
		
	state = WaitingStartByte;
     5c4:	10 92 15 04 	sts	0x0415, r1
     5c8:	08 95       	ret

000005ca <countTimeForEncoders>:
		encoder2CNT = encoder1CNT = 0;
		deciSecondsPassed = 0;
	}
}
uint8_t countTimeForEncoders(){
	if(encSetting & 1){
     5ca:	80 91 00 01 	lds	r24, 0x0100
     5ce:	80 ff       	sbrs	r24, 0
     5d0:	22 c0       	rjmp	.+68     	; 0x616 <countTimeForEncoders+0x4c>
		deciSecondsPassed += 2;
     5d2:	80 91 0f 04 	lds	r24, 0x040F
     5d6:	90 91 10 04 	lds	r25, 0x0410
     5da:	a0 91 11 04 	lds	r26, 0x0411
     5de:	b0 91 12 04 	lds	r27, 0x0412
     5e2:	02 96       	adiw	r24, 0x02	; 2
     5e4:	a1 1d       	adc	r26, r1
     5e6:	b1 1d       	adc	r27, r1
     5e8:	80 93 0f 04 	sts	0x040F, r24
     5ec:	90 93 10 04 	sts	0x0410, r25
     5f0:	a0 93 11 04 	sts	0x0411, r26
     5f4:	b0 93 12 04 	sts	0x0412, r27
		
		cnt4Encoders++;
     5f8:	80 91 0e 04 	lds	r24, 0x040E
     5fc:	8f 5f       	subi	r24, 0xFF	; 255
     5fe:	80 93 0e 04 	sts	0x040E, r24
		if(cnt4Encoders & 3){
     602:	80 91 0e 04 	lds	r24, 0x040E
     606:	83 70       	andi	r24, 0x03	; 3
     608:	31 f0       	breq	.+12     	; 0x616 <countTimeForEncoders+0x4c>
			encSetting ^= 1;
     60a:	90 91 00 01 	lds	r25, 0x0100
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	89 27       	eor	r24, r25
     612:	80 93 00 01 	sts	0x0100, r24
		}
	}
	return 0;
}
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	08 95       	ret

0000061a <sendDistAndTimePeriodically>:
		addEntryIfNotExists(&sendDistAndTimePeriodically, 500 * 1000UL, Periodic);
	else
		removeEntryFromTimerQueue(&sendDistAndTimePeriodically);
}

uint8_t sendDistAndTimePeriodically(void){
     61a:	0f 93       	push	r16
     61c:	1f 93       	push	r17
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	cd b7       	in	r28, 0x3d	; 61
     624:	de b7       	in	r29, 0x3e	; 62
     626:	64 97       	sbiw	r28, 0x14	; 20
     628:	0f b6       	in	r0, 0x3f	; 63
     62a:	f8 94       	cli
     62c:	de bf       	out	0x3e, r29	; 62
     62e:	0f be       	out	0x3f, r0	; 63
     630:	cd bf       	out	0x3d, r28	; 61
	if((encSetting & 2) == 0)
     632:	80 91 00 01 	lds	r24, 0x0100
     636:	81 ff       	sbrs	r24, 1
     638:	5d c0       	rjmp	.+186    	; 0x6f4 <sendDistAndTimePeriodically+0xda>
		return NO;
	encSetting ^= 2;
     63a:	90 91 00 01 	lds	r25, 0x0100
     63e:	82 e0       	ldi	r24, 0x02	; 2
     640:	89 27       	eor	r24, r25
     642:	80 93 00 01 	sts	0x0100, r24
	
	uint32_t dist = DISTANTA_PARCURSA;
     646:	80 91 2b 04 	lds	r24, 0x042B
     64a:	90 91 2c 04 	lds	r25, 0x042C
     64e:	a0 91 2d 04 	lds	r26, 0x042D
     652:	b0 91 2e 04 	lds	r27, 0x042E
     656:	40 91 31 04 	lds	r20, 0x0431
     65a:	50 91 32 04 	lds	r21, 0x0432
     65e:	60 91 33 04 	lds	r22, 0x0433
     662:	70 91 34 04 	lds	r23, 0x0434
     666:	84 0f       	add	r24, r20
     668:	95 1f       	adc	r25, r21
     66a:	a6 1f       	adc	r26, r22
     66c:	b7 1f       	adc	r27, r23
     66e:	ac 01       	movw	r20, r24
     670:	bd 01       	movw	r22, r26
     672:	44 0f       	add	r20, r20
     674:	55 1f       	adc	r21, r21
     676:	66 1f       	adc	r22, r22
     678:	77 1f       	adc	r23, r23
     67a:	44 0f       	add	r20, r20
     67c:	55 1f       	adc	r21, r21
     67e:	66 1f       	adc	r22, r22
     680:	77 1f       	adc	r23, r23
     682:	8a 01       	movw	r16, r20
     684:	9b 01       	movw	r18, r22
     686:	00 0f       	add	r16, r16
     688:	11 1f       	adc	r17, r17
     68a:	22 1f       	adc	r18, r18
     68c:	33 1f       	adc	r19, r19
     68e:	00 0f       	add	r16, r16
     690:	11 1f       	adc	r17, r17
     692:	22 1f       	adc	r18, r18
     694:	33 1f       	adc	r19, r19
     696:	40 0f       	add	r20, r16
     698:	51 1f       	adc	r21, r17
     69a:	62 1f       	adc	r22, r18
     69c:	73 1f       	adc	r23, r19
     69e:	84 0f       	add	r24, r20
     6a0:	95 1f       	adc	r25, r21
     6a2:	a6 1f       	adc	r26, r22
     6a4:	b7 1f       	adc	r27, r23
     6a6:	ac 01       	movw	r20, r24
     6a8:	bd 01       	movw	r22, r26
     6aa:	76 95       	lsr	r23
     6ac:	67 95       	ror	r22
     6ae:	57 95       	ror	r21
     6b0:	47 95       	ror	r20
     6b2:	76 95       	lsr	r23
     6b4:	67 95       	ror	r22
     6b6:	57 95       	ror	r21
     6b8:	47 95       	ror	r20
	uint32_t time = deciSecondsPassed;
     6ba:	80 91 0f 04 	lds	r24, 0x040F
     6be:	90 91 10 04 	lds	r25, 0x0410
     6c2:	a0 91 11 04 	lds	r26, 0x0411
     6c6:	b0 91 12 04 	lds	r27, 0x0412
	uint8_t buffer[20];
	buffer[0] = StartByte;
     6ca:	2a ea       	ldi	r18, 0xAA	; 170
     6cc:	29 83       	std	Y+1, r18	; 0x01
	buffer[1] = InfoCarStats;
     6ce:	22 e1       	ldi	r18, 0x12	; 18
     6d0:	2a 83       	std	Y+2, r18	; 0x02
	buffer[2] = 8;
     6d2:	28 e0       	ldi	r18, 0x08	; 8
     6d4:	2b 83       	std	Y+3, r18	; 0x03
	
	buffer[3] = dist >> 24;
     6d6:	7c 83       	std	Y+4, r23	; 0x04
	buffer[4] = (uint8_t)(dist >> 16);
     6d8:	6d 83       	std	Y+5, r22	; 0x05
	buffer[5] = (uint8_t)(dist >> 8);
     6da:	5e 83       	std	Y+6, r21	; 0x06
	buffer[6] = (uint8_t)(dist);
     6dc:	4f 83       	std	Y+7, r20	; 0x07
	
	buffer[7] = time >> 24;
     6de:	b8 87       	std	Y+8, r27	; 0x08
	buffer[8] = (uint8_t)(time >> 16);
     6e0:	a9 87       	std	Y+9, r26	; 0x09
	buffer[9] = (uint8_t)(time >> 8);
     6e2:	9a 87       	std	Y+10, r25	; 0x0a
	buffer[10] = (uint8_t)(time);
     6e4:	8b 87       	std	Y+11, r24	; 0x0b
	
	buffer[11] = EndByte;
     6e6:	85 e5       	ldi	r24, 0x55	; 85
     6e8:	8c 87       	std	Y+12, r24	; 0x0c
	BTTransmitMsgU(buffer, (uint8_t)12);
     6ea:	6c e0       	ldi	r22, 0x0C	; 12
     6ec:	ce 01       	movw	r24, r28
     6ee:	01 96       	adiw	r24, 0x01	; 1
     6f0:	0e 94 a0 02 	call	0x540	; 0x540 <BTTransmitMsgU>
	return NO;
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	64 96       	adiw	r28, 0x14	; 20
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	f8 94       	cli
     6fc:	de bf       	out	0x3e, r29	; 62
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	cd bf       	out	0x3d, r28	; 61
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	1f 91       	pop	r17
     708:	0f 91       	pop	r16
     70a:	08 95       	ret

0000070c <__vector_5>:
void resetEncoders();
uint8_t countTimeForEncoders();
void toggleCountingTimeForEncoders(uint8_t on);

ISR(PCINT1_vect)
{
     70c:	1f 92       	push	r1
     70e:	0f 92       	push	r0
     710:	0f b6       	in	r0, 0x3f	; 63
     712:	0f 92       	push	r0
     714:	11 24       	eor	r1, r1
     716:	2f 93       	push	r18
     718:	3f 93       	push	r19
     71a:	4f 93       	push	r20
     71c:	5f 93       	push	r21
     71e:	6f 93       	push	r22
     720:	7f 93       	push	r23
     722:	8f 93       	push	r24
     724:	9f 93       	push	r25
     726:	af 93       	push	r26
     728:	bf 93       	push	r27
     72a:	ef 93       	push	r30
     72c:	ff 93       	push	r31
	if( (PINB & _BV(PB0)) ^ lastPB0){
     72e:	83 b1       	in	r24, 0x03	; 3
     730:	90 91 30 04 	lds	r25, 0x0430
     734:	81 70       	andi	r24, 0x01	; 1
     736:	98 17       	cp	r25, r24
     738:	b9 f0       	breq	.+46     	; 0x768 <__vector_5+0x5c>
		lastPB0 = (PINB & _BV(PB0));
     73a:	83 b1       	in	r24, 0x03	; 3
     73c:	81 70       	andi	r24, 0x01	; 1
     73e:	80 93 30 04 	sts	0x0430, r24
		encoder1CNT++;
     742:	80 91 2b 04 	lds	r24, 0x042B
     746:	90 91 2c 04 	lds	r25, 0x042C
     74a:	a0 91 2d 04 	lds	r26, 0x042D
     74e:	b0 91 2e 04 	lds	r27, 0x042E
     752:	01 96       	adiw	r24, 0x01	; 1
     754:	a1 1d       	adc	r26, r1
     756:	b1 1d       	adc	r27, r1
     758:	80 93 2b 04 	sts	0x042B, r24
     75c:	90 93 2c 04 	sts	0x042C, r25
     760:	a0 93 2d 04 	sts	0x042D, r26
     764:	b0 93 2e 04 	sts	0x042E, r27
	}
	if( (PINB & _BV(PB7)) ^ lastPB7){
     768:	93 b1       	in	r25, 0x03	; 3
     76a:	80 91 2f 04 	lds	r24, 0x042F
     76e:	90 78       	andi	r25, 0x80	; 128
     770:	98 17       	cp	r25, r24
     772:	b9 f0       	breq	.+46     	; 0x7a2 <__vector_5+0x96>
		lastPB7 = (PINB & _BV(PB7));
     774:	83 b1       	in	r24, 0x03	; 3
     776:	80 78       	andi	r24, 0x80	; 128
     778:	80 93 2f 04 	sts	0x042F, r24
		encoder2CNT++;
     77c:	80 91 31 04 	lds	r24, 0x0431
     780:	90 91 32 04 	lds	r25, 0x0432
     784:	a0 91 33 04 	lds	r26, 0x0433
     788:	b0 91 34 04 	lds	r27, 0x0434
     78c:	01 96       	adiw	r24, 0x01	; 1
     78e:	a1 1d       	adc	r26, r1
     790:	b1 1d       	adc	r27, r1
     792:	80 93 31 04 	sts	0x0431, r24
     796:	90 93 32 04 	sts	0x0432, r25
     79a:	a0 93 33 04 	sts	0x0433, r26
     79e:	b0 93 34 04 	sts	0x0434, r27
	}
	if((encSetting & 3) == 0){
     7a2:	80 91 00 01 	lds	r24, 0x0100
     7a6:	83 70       	andi	r24, 0x03	; 3
     7a8:	71 f4       	brne	.+28     	; 0x7c6 <__vector_5+0xba>
		encSetting = 5;
     7aa:	85 e0       	ldi	r24, 0x05	; 5
     7ac:	80 93 00 01 	sts	0x0100, r24
		cnt4Encoders = 0;
     7b0:	10 92 0e 04 	sts	0x040E, r1
		addEntryIfNotExists(&countTimeForEncoders, 200 * 1000UL, Periodic);
     7b4:	21 e0       	ldi	r18, 0x01	; 1
     7b6:	40 e4       	ldi	r20, 0x40	; 64
     7b8:	5d e0       	ldi	r21, 0x0D	; 13
     7ba:	63 e0       	ldi	r22, 0x03	; 3
     7bc:	70 e0       	ldi	r23, 0x00	; 0
     7be:	85 ee       	ldi	r24, 0xE5	; 229
     7c0:	92 e0       	ldi	r25, 0x02	; 2
     7c2:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <addEntryIfNotExists>
	}	
	encSetting |= 3;
     7c6:	80 91 00 01 	lds	r24, 0x0100
     7ca:	83 60       	ori	r24, 0x03	; 3
     7cc:	80 93 00 01 	sts	0x0100, r24
	cnt4Encoders = 0;
     7d0:	10 92 0e 04 	sts	0x040E, r1
} 
     7d4:	ff 91       	pop	r31
     7d6:	ef 91       	pop	r30
     7d8:	bf 91       	pop	r27
     7da:	af 91       	pop	r26
     7dc:	9f 91       	pop	r25
     7de:	8f 91       	pop	r24
     7e0:	7f 91       	pop	r23
     7e2:	6f 91       	pop	r22
     7e4:	5f 91       	pop	r21
     7e6:	4f 91       	pop	r20
     7e8:	3f 91       	pop	r19
     7ea:	2f 91       	pop	r18
     7ec:	0f 90       	pop	r0
     7ee:	0f be       	out	0x3f, r0	; 63
     7f0:	0f 90       	pop	r0
     7f2:	1f 90       	pop	r1
     7f4:	18 95       	reti

000007f6 <getAverageSpeed>:
	PCICR |= _BV(PCIE1);
	resetEncoders();
}
uint8_t sendDistAndTimePeriodically(void);

void getAverageSpeed(uint8_t reset){
     7f6:	ff 92       	push	r15
     7f8:	0f 93       	push	r16
     7fa:	1f 93       	push	r17
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
     804:	c4 56       	subi	r28, 0x64	; 100
     806:	d1 09       	sbc	r29, r1
     808:	0f b6       	in	r0, 0x3f	; 63
     80a:	f8 94       	cli
     80c:	de bf       	out	0x3e, r29	; 62
     80e:	0f be       	out	0x3f, r0	; 63
     810:	cd bf       	out	0x3d, r28	; 61
     812:	f8 2e       	mov	r15, r24
	char strBuffer[100];
	sprintf(strBuffer, "\n   dist: %lu \n   timp: %lu",  DISTANTA_PARCURSA, deciSecondsPassed);
     814:	00 91 0f 04 	lds	r16, 0x040F
     818:	10 91 10 04 	lds	r17, 0x0410
     81c:	20 91 11 04 	lds	r18, 0x0411
     820:	30 91 12 04 	lds	r19, 0x0412
     824:	80 91 2b 04 	lds	r24, 0x042B
     828:	90 91 2c 04 	lds	r25, 0x042C
     82c:	a0 91 2d 04 	lds	r26, 0x042D
     830:	b0 91 2e 04 	lds	r27, 0x042E
     834:	40 91 31 04 	lds	r20, 0x0431
     838:	50 91 32 04 	lds	r21, 0x0432
     83c:	60 91 33 04 	lds	r22, 0x0433
     840:	70 91 34 04 	lds	r23, 0x0434
     844:	3f 93       	push	r19
     846:	2f 93       	push	r18
     848:	1f 93       	push	r17
     84a:	0f 93       	push	r16
     84c:	8a 01       	movw	r16, r20
     84e:	9b 01       	movw	r18, r22
     850:	08 0f       	add	r16, r24
     852:	19 1f       	adc	r17, r25
     854:	2a 1f       	adc	r18, r26
     856:	3b 1f       	adc	r19, r27
     858:	d9 01       	movw	r26, r18
     85a:	c8 01       	movw	r24, r16
     85c:	88 0f       	add	r24, r24
     85e:	99 1f       	adc	r25, r25
     860:	aa 1f       	adc	r26, r26
     862:	bb 1f       	adc	r27, r27
     864:	88 0f       	add	r24, r24
     866:	99 1f       	adc	r25, r25
     868:	aa 1f       	adc	r26, r26
     86a:	bb 1f       	adc	r27, r27
     86c:	ac 01       	movw	r20, r24
     86e:	bd 01       	movw	r22, r26
     870:	44 0f       	add	r20, r20
     872:	55 1f       	adc	r21, r21
     874:	66 1f       	adc	r22, r22
     876:	77 1f       	adc	r23, r23
     878:	44 0f       	add	r20, r20
     87a:	55 1f       	adc	r21, r21
     87c:	66 1f       	adc	r22, r22
     87e:	77 1f       	adc	r23, r23
     880:	84 0f       	add	r24, r20
     882:	95 1f       	adc	r25, r21
     884:	a6 1f       	adc	r26, r22
     886:	b7 1f       	adc	r27, r23
     888:	08 0f       	add	r16, r24
     88a:	19 1f       	adc	r17, r25
     88c:	2a 1f       	adc	r18, r26
     88e:	3b 1f       	adc	r19, r27
     890:	b9 01       	movw	r22, r18
     892:	a8 01       	movw	r20, r16
     894:	76 95       	lsr	r23
     896:	67 95       	ror	r22
     898:	57 95       	ror	r21
     89a:	47 95       	ror	r20
     89c:	76 95       	lsr	r23
     89e:	67 95       	ror	r22
     8a0:	57 95       	ror	r21
     8a2:	47 95       	ror	r20
     8a4:	7f 93       	push	r23
     8a6:	6f 93       	push	r22
     8a8:	5f 93       	push	r21
     8aa:	4f 93       	push	r20
     8ac:	83 e2       	ldi	r24, 0x23	; 35
     8ae:	91 e0       	ldi	r25, 0x01	; 1
     8b0:	9f 93       	push	r25
     8b2:	8f 93       	push	r24
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5f       	subi	r16, 0xFF	; 255
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	1f 93       	push	r17
     8bc:	0f 93       	push	r16
     8be:	0e 94 bf 19 	call	0x337e	; 0x337e <sprintf>
	BTTransmitStr(strBuffer);
     8c2:	c8 01       	movw	r24, r16
     8c4:	0e 94 a8 01 	call	0x350	; 0x350 <BTTransmitStr>
	
	if(!existsEntryInTimerQueue(&sendDistAndTimePeriodically))
     8c8:	8d e0       	ldi	r24, 0x0D	; 13
     8ca:	93 e0       	ldi	r25, 0x03	; 3
     8cc:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <existsEntryInTimerQueue>
     8d0:	0f b6       	in	r0, 0x3f	; 63
     8d2:	f8 94       	cli
     8d4:	de bf       	out	0x3e, r29	; 62
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	cd bf       	out	0x3d, r28	; 61
     8da:	81 11       	cpse	r24, r1
     8dc:	0a c0       	rjmp	.+20     	; 0x8f2 <getAverageSpeed+0xfc>
		addEntryToTimerQueue(&sendDistAndTimePeriodically, 1001 * 1000UL, Periodic);
     8de:	21 e0       	ldi	r18, 0x01	; 1
     8e0:	48 e2       	ldi	r20, 0x28	; 40
     8e2:	56 e4       	ldi	r21, 0x46	; 70
     8e4:	6f e0       	ldi	r22, 0x0F	; 15
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	8d e0       	ldi	r24, 0x0D	; 13
     8ea:	93 e0       	ldi	r25, 0x03	; 3
     8ec:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <addEntryToTimerQueue>
     8f0:	04 c0       	rjmp	.+8      	; 0x8fa <getAverageSpeed+0x104>
	else
		removeEntryFromTimerQueue(&sendDistAndTimePeriodically);
     8f2:	8d e0       	ldi	r24, 0x0D	; 13
     8f4:	93 e0       	ldi	r25, 0x03	; 3
     8f6:	0e 94 bb 10 	call	0x2176	; 0x2176 <removeEntryFromTimerQueue>
	if(reset){
     8fa:	ff 20       	and	r15, r15
     8fc:	c1 f0       	breq	.+48     	; 0x92e <getAverageSpeed+0x138>
		encoder2CNT = encoder1CNT = 0;
     8fe:	10 92 2b 04 	sts	0x042B, r1
     902:	10 92 2c 04 	sts	0x042C, r1
     906:	10 92 2d 04 	sts	0x042D, r1
     90a:	10 92 2e 04 	sts	0x042E, r1
     90e:	10 92 31 04 	sts	0x0431, r1
     912:	10 92 32 04 	sts	0x0432, r1
     916:	10 92 33 04 	sts	0x0433, r1
     91a:	10 92 34 04 	sts	0x0434, r1
		deciSecondsPassed = 0;
     91e:	10 92 0f 04 	sts	0x040F, r1
     922:	10 92 10 04 	sts	0x0410, r1
     926:	10 92 11 04 	sts	0x0411, r1
     92a:	10 92 12 04 	sts	0x0412, r1
	}
}
     92e:	cc 59       	subi	r28, 0x9C	; 156
     930:	df 4f       	sbci	r29, 0xFF	; 255
     932:	0f b6       	in	r0, 0x3f	; 63
     934:	f8 94       	cli
     936:	de bf       	out	0x3e, r29	; 62
     938:	0f be       	out	0x3f, r0	; 63
     93a:	cd bf       	out	0x3d, r28	; 61
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	1f 91       	pop	r17
     942:	0f 91       	pop	r16
     944:	ff 90       	pop	r15
     946:	08 95       	ret

00000948 <resetEncoders>:
		}
	}
	return 0;
}
void resetEncoders(){
	encoder2CNT = encoder1CNT = 0;
     948:	10 92 2b 04 	sts	0x042B, r1
     94c:	10 92 2c 04 	sts	0x042C, r1
     950:	10 92 2d 04 	sts	0x042D, r1
     954:	10 92 2e 04 	sts	0x042E, r1
     958:	10 92 31 04 	sts	0x0431, r1
     95c:	10 92 32 04 	sts	0x0432, r1
     960:	10 92 33 04 	sts	0x0433, r1
     964:	10 92 34 04 	sts	0x0434, r1
	lastPB7 = lastPB0 = 0;
     968:	10 92 30 04 	sts	0x0430, r1
     96c:	10 92 2f 04 	sts	0x042F, r1
     970:	08 95       	ret

00000972 <initEncoders>:
	encSetting |= 3;
	cnt4Encoders = 0;
} 

void initEncoders(){		
	PCMSK1 |= _BV(PCINT8);
     972:	ec e6       	ldi	r30, 0x6C	; 108
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	80 81       	ld	r24, Z
     978:	81 60       	ori	r24, 0x01	; 1
     97a:	80 83       	st	Z, r24
	DDRB &= ~_BV(PINB0);	
     97c:	20 98       	cbi	0x04, 0	; 4
	PCMSK1 |= _BV(PCINT15);
     97e:	80 81       	ld	r24, Z
     980:	80 68       	ori	r24, 0x80	; 128
     982:	80 83       	st	Z, r24
	DDRB &= ~_BV(PINB7);	
     984:	27 98       	cbi	0x04, 7	; 4
	PCICR |= _BV(PCIE1);
     986:	e8 e6       	ldi	r30, 0x68	; 104
     988:	f0 e0       	ldi	r31, 0x00	; 0
     98a:	80 81       	ld	r24, Z
     98c:	82 60       	ori	r24, 0x02	; 2
     98e:	80 83       	st	Z, r24
	resetEncoders();
     990:	0e 94 a4 04 	call	0x948	; 0x948 <resetEncoders>
     994:	08 95       	ret

00000996 <setSendingDistAndTime>:
void resetEncoders(){
	encoder2CNT = encoder1CNT = 0;
	lastPB7 = lastPB0 = 0;
}
void setSendingDistAndTime(uint8_t on){
	if(on)
     996:	88 23       	and	r24, r24
     998:	51 f0       	breq	.+20     	; 0x9ae <setSendingDistAndTime+0x18>
		addEntryIfNotExists(&sendDistAndTimePeriodically, 500 * 1000UL, Periodic);
     99a:	21 e0       	ldi	r18, 0x01	; 1
     99c:	40 e2       	ldi	r20, 0x20	; 32
     99e:	51 ea       	ldi	r21, 0xA1	; 161
     9a0:	67 e0       	ldi	r22, 0x07	; 7
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	8d e0       	ldi	r24, 0x0D	; 13
     9a6:	93 e0       	ldi	r25, 0x03	; 3
     9a8:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <addEntryIfNotExists>
     9ac:	08 95       	ret
	else
		removeEntryFromTimerQueue(&sendDistAndTimePeriodically);
     9ae:	8d e0       	ldi	r24, 0x0D	; 13
     9b0:	93 e0       	ldi	r25, 0x03	; 3
     9b2:	0e 94 bb 10 	call	0x2176	; 0x2176 <removeEntryFromTimerQueue>
     9b6:	08 95       	ret

000009b8 <stopEngines>:
	addEntryIfNotExists(&stopEngines, 1000UL*1000UL*timp, Once);
}


uint8_t stopEngines(){
	OCR0A = 0;
     9b8:	17 bc       	out	0x27, r1	; 39
	OCR2A = 0;
     9ba:	10 92 b3 00 	sts	0x00B3, r1
	
	PORTD &= ~ 1<<PIND2;
     9be:	8b b1       	in	r24, 0x0b	; 11
     9c0:	88 7f       	andi	r24, 0xF8	; 248
     9c2:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~ 1<<PIND4;
     9c4:	8b b1       	in	r24, 0x0b	; 11
     9c6:	80 7e       	andi	r24, 0xE0	; 224
     9c8:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~ 1<<PIND3;
     9ca:	8b b1       	in	r24, 0x0b	; 11
     9cc:	80 7f       	andi	r24, 0xF0	; 240
     9ce:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~ 1<<PIND5;
     9d0:	8b b1       	in	r24, 0x0b	; 11
     9d2:	80 7c       	andi	r24, 0xC0	; 192
     9d4:	8b b9       	out	0x0b, r24	; 11
	
	//toggleCountingTimeForEncoders(OFF);	
	turnBlinkingOff();
     9d6:	0e 94 b4 07 	call	0xf68	; 0xf68 <turnBlinkingOff>
	
	if(DEBUGGING)
     9da:	80 91 13 04 	lds	r24, 0x0413
     9de:	80 ff       	sbrs	r24, 0
     9e0:	04 c0       	rjmp	.+8      	; 0x9ea <stopEngines+0x32>
		BTTransmitStr("M-am oprit!");
     9e2:	8f e3       	ldi	r24, 0x3F	; 63
     9e4:	91 e0       	ldi	r25, 0x01	; 1
     9e6:	0e 94 a8 01 	call	0x350	; 0x350 <BTTransmitStr>
	
	return NO;
}
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	08 95       	ret

000009ee <checkFreeParallelParkingPlace>:
void checkFreeParallelParkingPlace(){
    if(DEBUGGING)
     9ee:	80 91 13 04 	lds	r24, 0x0413
     9f2:	80 ff       	sbrs	r24, 0
     9f4:	04 c0       	rjmp	.+8      	; 0x9fe <checkFreeParallelParkingPlace+0x10>
		BTTransmitStr("Start Free P P P!");
     9f6:	8b e4       	ldi	r24, 0x4B	; 75
     9f8:	91 e0       	ldi	r25, 0x01	; 1
     9fa:	0e 94 a8 01 	call	0x350	; 0x350 <BTTransmitStr>
     9fe:	08 95       	ret

00000a00 <initEngines>:


void initEngines()
{
	
	OCR0A = 0;
     a00:	17 bc       	out	0x27, r1	; 39
	OCR2A = 0;
     a02:	10 92 b3 00 	sts	0x00B3, r1
	
	//PINB|=(1<<PB3);
	
	
	DDRB |=1<<PINB3;
     a06:	23 9a       	sbi	0x04, 3	; 4
	TCCR0A |=3;
     a08:	84 b5       	in	r24, 0x24	; 36
     a0a:	83 60       	ori	r24, 0x03	; 3
     a0c:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0A0);
     a0e:	84 b5       	in	r24, 0x24	; 36
     a10:	80 64       	ori	r24, 0x40	; 64
     a12:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0A1);
     a14:	84 b5       	in	r24, 0x24	; 36
     a16:	80 68       	ori	r24, 0x80	; 128
     a18:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS00);
     a1a:	85 b5       	in	r24, 0x25	; 37
     a1c:	81 60       	ori	r24, 0x01	; 1
     a1e:	85 bd       	out	0x25, r24	; 37
	// motor 2
	
	DDRD |= (1 << PD7);
     a20:	57 9a       	sbi	0x0a, 7	; 10
	TCCR2A|=3;
     a22:	e0 eb       	ldi	r30, 0xB0	; 176
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	80 81       	ld	r24, Z
     a28:	83 60       	ori	r24, 0x03	; 3
     a2a:	80 83       	st	Z, r24
	TCCR2A |= (1 << COM2A0);
     a2c:	80 81       	ld	r24, Z
     a2e:	80 64       	ori	r24, 0x40	; 64
     a30:	80 83       	st	Z, r24
	TCCR2A |= (1 << COM2A1);
     a32:	80 81       	ld	r24, Z
     a34:	80 68       	ori	r24, 0x80	; 128
     a36:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS20);
     a38:	e1 eb       	ldi	r30, 0xB1	; 177
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	80 81       	ld	r24, Z
     a3e:	81 60       	ori	r24, 0x01	; 1
     a40:	80 83       	st	Z, r24
	
		/*	PORTC |= 1<<PINC1;	
			PORTC |= 1<<PINC0;	*/
		
	//enable standby
	DDRB |= 1<<PINB5;
     a42:	25 9a       	sbi	0x04, 5	; 4
	PORTB |= 1<<PINB5;	
     a44:	2d 9a       	sbi	0x05, 5	; 5
	DDRB |= 1<<PINB4;
     a46:	24 9a       	sbi	0x04, 4	; 4
	PORTB |= 1<<PINB4;
     a48:	2c 9a       	sbi	0x05, 4	; 5
	
	
	//in1 & in2 4 left engines
	DDRD |= 1<<PIND3;
     a4a:	53 9a       	sbi	0x0a, 3	; 10
	DDRD |= 1<<PIND5;
     a4c:	55 9a       	sbi	0x0a, 5	; 10
	PORTD &= ~ 1<<PIND3;
     a4e:	8b b1       	in	r24, 0x0b	; 11
     a50:	80 7f       	andi	r24, 0xF0	; 240
     a52:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~ 1<<PIND5;
     a54:	8b b1       	in	r24, 0x0b	; 11
     a56:	80 7c       	andi	r24, 0xC0	; 192
     a58:	8b b9       	out	0x0b, r24	; 11
	
	//in1 & in2 4 left engines
	DDRD |= 1<<PIND2;
     a5a:	52 9a       	sbi	0x0a, 2	; 10
	DDRD |= 1<<PIND4;
     a5c:	54 9a       	sbi	0x0a, 4	; 10
	PORTD &= ~ 1<<PIND2;
     a5e:	8b b1       	in	r24, 0x0b	; 11
     a60:	88 7f       	andi	r24, 0xF8	; 248
     a62:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~ 1<<PIND4;
     a64:	8b b1       	in	r24, 0x0b	; 11
     a66:	80 7e       	andi	r24, 0xE0	; 224
     a68:	8b b9       	out	0x0b, r24	; 11
     a6a:	08 95       	ret

00000a6c <setEnginesSpeed>:
uint8_t lastVitLeft=0, lastVitRight=0;

void setEnginesSpeed(Engines engine, Sens sens, uint8_t viteza)
{
	//toggleCountingTimeForEncoders(ON);
	viteza = 255 - viteza;
     a6c:	40 95       	com	r20
		
	if(engine==RightEngines){
     a6e:	81 11       	cpse	r24, r1
     a70:	0a c0       	rjmp	.+20     	; 0xa86 <setEnginesSpeed+0x1a>
		if(sens != SensFata){
     a72:	66 23       	and	r22, r22
     a74:	19 f0       	breq	.+6      	; 0xa7c <setEnginesSpeed+0x10>
			PORTD |=  1<<PIND3;
     a76:	5b 9a       	sbi	0x0b, 3	; 11
			PORTD &= ~ (1<<PIND5);
     a78:	5d 98       	cbi	0x0b, 5	; 11
     a7a:	02 c0       	rjmp	.+4      	; 0xa80 <setEnginesSpeed+0x14>
		}			
		else{
			PORTD &= ~ (1<<PIND3);
     a7c:	5b 98       	cbi	0x0b, 3	; 11
			PORTD |=  1<<PIND5;
     a7e:	5d 9a       	sbi	0x0b, 5	; 11
		}
		OCR2A = viteza;	
     a80:	40 93 b3 00 	sts	0x00B3, r20
     a84:	08 95       	ret
	}
	else
	{
		if(sens != SensFata){
     a86:	66 23       	and	r22, r22
     a88:	19 f0       	breq	.+6      	; 0xa90 <setEnginesSpeed+0x24>
			PORTD &= ~ (1<<PIND2);
     a8a:	5a 98       	cbi	0x0b, 2	; 11
			PORTD |=  1<<PIND4;	
     a8c:	5c 9a       	sbi	0x0b, 4	; 11
     a8e:	02 c0       	rjmp	.+4      	; 0xa94 <setEnginesSpeed+0x28>
		}			
		else{			
			PORTD |=  1<<PIND2;
     a90:	5a 9a       	sbi	0x0b, 2	; 11
			PORTD &= ~( 1<<PIND4);	
     a92:	5c 98       	cbi	0x0b, 4	; 11
		}
		OCR0A = viteza;
     a94:	47 bd       	out	0x27, r20	; 39
     a96:	08 95       	ret

00000a98 <goFront>:
#include "Lights.h"
#include "../utile.h"

void setEnginesSpeed(Engines, Sens, uint8_t);

void goFront(uint8_t timp, uint8_t viteza){	
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	d8 2f       	mov	r29, r24
     a9e:	c6 2f       	mov	r28, r22
	setEnginesSpeed(RightEngines, SensFata, viteza);
     aa0:	46 2f       	mov	r20, r22
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	0e 94 36 05 	call	0xa6c	; 0xa6c <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensFata, viteza);
     aaa:	4c 2f       	mov	r20, r28
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	0e 94 36 05 	call	0xa6c	; 0xa6c <setEnginesSpeed>
	addEntryIfNotExists(&stopEngines, 1000UL*1000UL*timp, Once);	
     ab4:	ad 2f       	mov	r26, r29
     ab6:	b0 e0       	ldi	r27, 0x00	; 0
     ab8:	20 e4       	ldi	r18, 0x40	; 64
     aba:	32 e4       	ldi	r19, 0x42	; 66
     abc:	4f e0       	ldi	r20, 0x0F	; 15
     abe:	50 e0       	ldi	r21, 0x00	; 0
     ac0:	0e 94 a0 19 	call	0x3340	; 0x3340 <__muluhisi3>
     ac4:	ab 01       	movw	r20, r22
     ac6:	bc 01       	movw	r22, r24
     ac8:	20 e0       	ldi	r18, 0x00	; 0
     aca:	8c ed       	ldi	r24, 0xDC	; 220
     acc:	94 e0       	ldi	r25, 0x04	; 4
     ace:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <addEntryIfNotExists>
	doBlinkLeds(0, 0);
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	a9 01       	movw	r20, r18
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	cb 01       	movw	r24, r22
     ade:	0e 94 85 07 	call	0xf0a	; 0xf0a <doBlinkLeds>
	if(DEBUGGING)
     ae2:	80 91 13 04 	lds	r24, 0x0413
     ae6:	80 ff       	sbrs	r24, 0
     ae8:	04 c0       	rjmp	.+8      	; 0xaf2 <goFront+0x5a>
		BTTransmitStr("Ma duc inainte!");
     aea:	8e e7       	ldi	r24, 0x7E	; 126
     aec:	91 e0       	ldi	r25, 0x01	; 1
     aee:	0e 94 a8 01 	call	0x350	; 0x350 <BTTransmitStr>
}
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	08 95       	ret

00000af8 <goBack>:
void goBack(uint8_t timp, uint8_t viteza){
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	d8 2f       	mov	r29, r24
     afe:	c6 2f       	mov	r28, r22
	setEnginesSpeed(RightEngines, SensSpate, viteza);
     b00:	46 2f       	mov	r20, r22
     b02:	61 e0       	ldi	r22, 0x01	; 1
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	0e 94 36 05 	call	0xa6c	; 0xa6c <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensSpate, viteza);
     b0a:	4c 2f       	mov	r20, r28
     b0c:	61 e0       	ldi	r22, 0x01	; 1
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	0e 94 36 05 	call	0xa6c	; 0xa6c <setEnginesSpeed>
	addEntryIfNotExists(&stopEngines, 1000UL*1000UL*timp, Once);
     b14:	ad 2f       	mov	r26, r29
     b16:	b0 e0       	ldi	r27, 0x00	; 0
     b18:	20 e4       	ldi	r18, 0x40	; 64
     b1a:	32 e4       	ldi	r19, 0x42	; 66
     b1c:	4f e0       	ldi	r20, 0x0F	; 15
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	0e 94 a0 19 	call	0x3340	; 0x3340 <__muluhisi3>
     b24:	ab 01       	movw	r20, r22
     b26:	bc 01       	movw	r22, r24
     b28:	20 e0       	ldi	r18, 0x00	; 0
     b2a:	8c ed       	ldi	r24, 0xDC	; 220
     b2c:	94 e0       	ldi	r25, 0x04	; 4
     b2e:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <addEntryIfNotExists>
	doBlinkLeds(0, 0);
     b32:	20 e0       	ldi	r18, 0x00	; 0
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	a9 01       	movw	r20, r18
     b38:	60 e0       	ldi	r22, 0x00	; 0
     b3a:	70 e0       	ldi	r23, 0x00	; 0
     b3c:	cb 01       	movw	r24, r22
     b3e:	0e 94 85 07 	call	0xf0a	; 0xf0a <doBlinkLeds>
    if(DEBUGGING)
     b42:	80 91 13 04 	lds	r24, 0x0413
     b46:	80 ff       	sbrs	r24, 0
     b48:	04 c0       	rjmp	.+8      	; 0xb52 <goBack+0x5a>
		BTTransmitStr("Ma duc inapoi!");
     b4a:	8e e8       	ldi	r24, 0x8E	; 142
     b4c:	91 e0       	ldi	r25, 0x01	; 1
     b4e:	0e 94 a8 01 	call	0x350	; 0x350 <BTTransmitStr>
}
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	08 95       	ret

00000b58 <goFrontLeft>:

void goFrontLeft(uint8_t timp, uint8_t viteza){
     b58:	cf 93       	push	r28
     b5a:	c8 2f       	mov	r28, r24
     b5c:	46 2f       	mov	r20, r22
	
	setEnginesSpeed(RightEngines, SensFata, viteza);
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	0e 94 36 05 	call	0xa6c	; 0xa6c <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensFata, 10);
     b66:	4a e0       	ldi	r20, 0x0A	; 10
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	0e 94 36 05 	call	0xa6c	; 0xa6c <setEnginesSpeed>
	addEntryIfNotExists(&stopEngines, 1000UL*1000UL*timp, Once);
     b70:	ac 2f       	mov	r26, r28
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	20 e4       	ldi	r18, 0x40	; 64
     b76:	32 e4       	ldi	r19, 0x42	; 66
     b78:	4f e0       	ldi	r20, 0x0F	; 15
     b7a:	50 e0       	ldi	r21, 0x00	; 0
     b7c:	0e 94 a0 19 	call	0x3340	; 0x3340 <__muluhisi3>
     b80:	ab 01       	movw	r20, r22
     b82:	bc 01       	movw	r22, r24
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	8c ed       	ldi	r24, 0xDC	; 220
     b88:	94 e0       	ldi	r25, 0x04	; 4
     b8a:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <addEntryIfNotExists>
	doBlinkLeds(500*1000UL, 0);
     b8e:	20 e0       	ldi	r18, 0x00	; 0
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	a9 01       	movw	r20, r18
     b94:	60 e2       	ldi	r22, 0x20	; 32
     b96:	71 ea       	ldi	r23, 0xA1	; 161
     b98:	87 e0       	ldi	r24, 0x07	; 7
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	0e 94 85 07 	call	0xf0a	; 0xf0a <doBlinkLeds>
    if(DEBUGGING)
     ba0:	80 91 13 04 	lds	r24, 0x0413
     ba4:	80 ff       	sbrs	r24, 0
     ba6:	04 c0       	rjmp	.+8      	; 0xbb0 <goFrontLeft+0x58>
		BTTransmitStr("Ma duc inainte stanga!");
     ba8:	8d e9       	ldi	r24, 0x9D	; 157
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	0e 94 a8 01 	call	0x350	; 0x350 <BTTransmitStr>
}
     bb0:	cf 91       	pop	r28
     bb2:	08 95       	ret

00000bb4 <goFrontRight>:
void goFrontRight(uint8_t timp, uint8_t viteza){
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	c8 2f       	mov	r28, r24
     bba:	d6 2f       	mov	r29, r22
	
	setEnginesSpeed(RightEngines, SensFata, 10);
     bbc:	4a e0       	ldi	r20, 0x0A	; 10
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	0e 94 36 05 	call	0xa6c	; 0xa6c <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensFata, viteza);
     bc6:	4d 2f       	mov	r20, r29
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	0e 94 36 05 	call	0xa6c	; 0xa6c <setEnginesSpeed>
	addEntryIfNotExists(&stopEngines, 1000UL*1000UL*timp, Once);
     bd0:	ac 2f       	mov	r26, r28
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	20 e4       	ldi	r18, 0x40	; 64
     bd6:	32 e4       	ldi	r19, 0x42	; 66
     bd8:	4f e0       	ldi	r20, 0x0F	; 15
     bda:	50 e0       	ldi	r21, 0x00	; 0
     bdc:	0e 94 a0 19 	call	0x3340	; 0x3340 <__muluhisi3>
     be0:	ab 01       	movw	r20, r22
     be2:	bc 01       	movw	r22, r24
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	8c ed       	ldi	r24, 0xDC	; 220
     be8:	94 e0       	ldi	r25, 0x04	; 4
     bea:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <addEntryIfNotExists>
	doBlinkLeds(0, 500*1000UL);
     bee:	20 e2       	ldi	r18, 0x20	; 32
     bf0:	31 ea       	ldi	r19, 0xA1	; 161
     bf2:	47 e0       	ldi	r20, 0x07	; 7
     bf4:	50 e0       	ldi	r21, 0x00	; 0
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	cb 01       	movw	r24, r22
     bfc:	0e 94 85 07 	call	0xf0a	; 0xf0a <doBlinkLeds>
    if(DEBUGGING)
     c00:	80 91 13 04 	lds	r24, 0x0413
     c04:	80 ff       	sbrs	r24, 0
     c06:	04 c0       	rjmp	.+8      	; 0xc10 <goFrontRight+0x5c>
		BTTransmitStr("Ma duc inainte dreapta!");
     c08:	84 eb       	ldi	r24, 0xB4	; 180
     c0a:	91 e0       	ldi	r25, 0x01	; 1
     c0c:	0e 94 a8 01 	call	0x350	; 0x350 <BTTransmitStr>
}
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	08 95       	ret

00000c16 <goBackLeft>:

void goBackLeft(uint8_t timp, uint8_t viteza){
     c16:	cf 93       	push	r28
     c18:	c8 2f       	mov	r28, r24
     c1a:	46 2f       	mov	r20, r22
	
	setEnginesSpeed(RightEngines, SensSpate, viteza);
     c1c:	61 e0       	ldi	r22, 0x01	; 1
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	0e 94 36 05 	call	0xa6c	; 0xa6c <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensSpate, 10);
     c24:	4a e0       	ldi	r20, 0x0A	; 10
     c26:	61 e0       	ldi	r22, 0x01	; 1
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	0e 94 36 05 	call	0xa6c	; 0xa6c <setEnginesSpeed>
	addEntryIfNotExists(&stopEngines, 1000UL*1000UL*timp, Once);
     c2e:	ac 2f       	mov	r26, r28
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	20 e4       	ldi	r18, 0x40	; 64
     c34:	32 e4       	ldi	r19, 0x42	; 66
     c36:	4f e0       	ldi	r20, 0x0F	; 15
     c38:	50 e0       	ldi	r21, 0x00	; 0
     c3a:	0e 94 a0 19 	call	0x3340	; 0x3340 <__muluhisi3>
     c3e:	ab 01       	movw	r20, r22
     c40:	bc 01       	movw	r22, r24
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	8c ed       	ldi	r24, 0xDC	; 220
     c46:	94 e0       	ldi	r25, 0x04	; 4
     c48:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <addEntryIfNotExists>
	doBlinkLeds(500*1000UL, 0);
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	a9 01       	movw	r20, r18
     c52:	60 e2       	ldi	r22, 0x20	; 32
     c54:	71 ea       	ldi	r23, 0xA1	; 161
     c56:	87 e0       	ldi	r24, 0x07	; 7
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	0e 94 85 07 	call	0xf0a	; 0xf0a <doBlinkLeds>
    if(DEBUGGING)
     c5e:	80 91 13 04 	lds	r24, 0x0413
     c62:	80 ff       	sbrs	r24, 0
     c64:	04 c0       	rjmp	.+8      	; 0xc6e <goBackLeft+0x58>
		BTTransmitStr("Ma duc inapoi stanga!");
     c66:	8c ec       	ldi	r24, 0xCC	; 204
     c68:	91 e0       	ldi	r25, 0x01	; 1
     c6a:	0e 94 a8 01 	call	0x350	; 0x350 <BTTransmitStr>
}
     c6e:	cf 91       	pop	r28
     c70:	08 95       	ret

00000c72 <goBackRight>:
void goBackRight(uint8_t timp, uint8_t viteza){
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	c8 2f       	mov	r28, r24
     c78:	d6 2f       	mov	r29, r22
		
	setEnginesSpeed(RightEngines, SensSpate, 10);
     c7a:	4a e0       	ldi	r20, 0x0A	; 10
     c7c:	61 e0       	ldi	r22, 0x01	; 1
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	0e 94 36 05 	call	0xa6c	; 0xa6c <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensSpate, viteza);
     c84:	4d 2f       	mov	r20, r29
     c86:	61 e0       	ldi	r22, 0x01	; 1
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	0e 94 36 05 	call	0xa6c	; 0xa6c <setEnginesSpeed>
	addEntryIfNotExists(&stopEngines, 1000UL*1000UL*timp, Once);
     c8e:	ac 2f       	mov	r26, r28
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	20 e4       	ldi	r18, 0x40	; 64
     c94:	32 e4       	ldi	r19, 0x42	; 66
     c96:	4f e0       	ldi	r20, 0x0F	; 15
     c98:	50 e0       	ldi	r21, 0x00	; 0
     c9a:	0e 94 a0 19 	call	0x3340	; 0x3340 <__muluhisi3>
     c9e:	ab 01       	movw	r20, r22
     ca0:	bc 01       	movw	r22, r24
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	8c ed       	ldi	r24, 0xDC	; 220
     ca6:	94 e0       	ldi	r25, 0x04	; 4
     ca8:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <addEntryIfNotExists>
	doBlinkLeds(0, 500*1000UL);
     cac:	20 e2       	ldi	r18, 0x20	; 32
     cae:	31 ea       	ldi	r19, 0xA1	; 161
     cb0:	47 e0       	ldi	r20, 0x07	; 7
     cb2:	50 e0       	ldi	r21, 0x00	; 0
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	cb 01       	movw	r24, r22
     cba:	0e 94 85 07 	call	0xf0a	; 0xf0a <doBlinkLeds>
    if(DEBUGGING)
     cbe:	80 91 13 04 	lds	r24, 0x0413
     cc2:	80 ff       	sbrs	r24, 0
     cc4:	04 c0       	rjmp	.+8      	; 0xcce <goBackRight+0x5c>
		BTTransmitStr("Ma duc inapoi dreapta!");
     cc6:	82 ee       	ldi	r24, 0xE2	; 226
     cc8:	91 e0       	ldi	r25, 0x01	; 1
     cca:	0e 94 a8 01 	call	0x350	; 0x350 <BTTransmitStr>
}
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	08 95       	ret

00000cd4 <rotireSmechera>:
void rotireSmechera(uint8_t timp, Sens sensStanga, uint8_t vitezaStanga, Sens sensDreapta, uint8_t vitezaDreapta){
     cd4:	df 92       	push	r13
     cd6:	ef 92       	push	r14
     cd8:	ff 92       	push	r15
     cda:	0f 93       	push	r16
     cdc:	1f 93       	push	r17
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
     ce6:	c4 56       	subi	r28, 0x64	; 100
     ce8:	d1 09       	sbc	r29, r1
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	f8 94       	cli
     cee:	de bf       	out	0x3e, r29	; 62
     cf0:	0f be       	out	0x3f, r0	; 63
     cf2:	cd bf       	out	0x3d, r28	; 61
     cf4:	d8 2e       	mov	r13, r24
     cf6:	e6 2e       	mov	r14, r22
     cf8:	f4 2e       	mov	r15, r20
     cfa:	12 2f       	mov	r17, r18
	setEnginesSpeed(RightEngines, sensDreapta, vitezaDreapta);
     cfc:	40 2f       	mov	r20, r16
     cfe:	62 2f       	mov	r22, r18
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	0e 94 36 05 	call	0xa6c	; 0xa6c <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, sensStanga, vitezaStanga);
     d06:	4f 2d       	mov	r20, r15
     d08:	6e 2d       	mov	r22, r14
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	0e 94 36 05 	call	0xa6c	; 0xa6c <setEnginesSpeed>
	addEntryIfNotExists(&stopEngines, 1000UL*1000 * timp, Once);
     d10:	ad 2d       	mov	r26, r13
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	20 e4       	ldi	r18, 0x40	; 64
     d16:	32 e4       	ldi	r19, 0x42	; 66
     d18:	4f e0       	ldi	r20, 0x0F	; 15
     d1a:	50 e0       	ldi	r21, 0x00	; 0
     d1c:	0e 94 a0 19 	call	0x3340	; 0x3340 <__muluhisi3>
     d20:	ab 01       	movw	r20, r22
     d22:	bc 01       	movw	r22, r24
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	8c ed       	ldi	r24, 0xDC	; 220
     d28:	94 e0       	ldi	r25, 0x04	; 4
     d2a:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <addEntryIfNotExists>
	
	if(sensDreapta == SensFata && sensStanga == SensSpate){
     d2e:	11 11       	cpse	r17, r1
     d30:	0d c0       	rjmp	.+26     	; 0xd4c <rotireSmechera+0x78>
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	e8 12       	cpse	r14, r24
     d36:	18 c0       	rjmp	.+48     	; 0xd68 <rotireSmechera+0x94>
		doBlinkLeds(500*1000UL, 0);
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	a9 01       	movw	r20, r18
     d3e:	60 e2       	ldi	r22, 0x20	; 32
     d40:	71 ea       	ldi	r23, 0xA1	; 161
     d42:	87 e0       	ldi	r24, 0x07	; 7
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	0e 94 85 07 	call	0xf0a	; 0xf0a <doBlinkLeds>
     d4a:	51 c0       	rjmp	.+162    	; 0xdee <rotireSmechera+0x11a>
	}
	else if(sensDreapta == SensSpate && sensStanga == SensFata){
     d4c:	11 30       	cpi	r17, 0x01	; 1
     d4e:	79 f5       	brne	.+94     	; 0xdae <rotireSmechera+0xda>
     d50:	e1 10       	cpse	r14, r1
     d52:	2d c0       	rjmp	.+90     	; 0xdae <rotireSmechera+0xda>
		doBlinkLeds(0, 500*1000UL);
     d54:	20 e2       	ldi	r18, 0x20	; 32
     d56:	31 ea       	ldi	r19, 0xA1	; 161
     d58:	47 e0       	ldi	r20, 0x07	; 7
     d5a:	50 e0       	ldi	r21, 0x00	; 0
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	cb 01       	movw	r24, r22
     d62:	0e 94 85 07 	call	0xf0a	; 0xf0a <doBlinkLeds>
     d66:	43 c0       	rjmp	.+134    	; 0xdee <rotireSmechera+0x11a>
	}
	else if(sensDreapta == SensFata && sensStanga == SensFata){
     d68:	e1 10       	cpse	r14, r1
     d6a:	21 c0       	rjmp	.+66     	; 0xdae <rotireSmechera+0xda>
		if(vitezaStanga > vitezaDreapta)			
     d6c:	0f 15       	cp	r16, r15
     d6e:	50 f4       	brcc	.+20     	; 0xd84 <rotireSmechera+0xb0>
			doBlinkLeds(0, 500*1000UL);	
     d70:	20 e2       	ldi	r18, 0x20	; 32
     d72:	31 ea       	ldi	r19, 0xA1	; 161
     d74:	47 e0       	ldi	r20, 0x07	; 7
     d76:	50 e0       	ldi	r21, 0x00	; 0
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	cb 01       	movw	r24, r22
     d7e:	0e 94 85 07 	call	0xf0a	; 0xf0a <doBlinkLeds>
     d82:	35 c0       	rjmp	.+106    	; 0xdee <rotireSmechera+0x11a>
		else if(vitezaStanga < vitezaDreapta)
     d84:	f0 16       	cp	r15, r16
     d86:	50 f4       	brcc	.+20     	; 0xd9c <rotireSmechera+0xc8>
			doBlinkLeds(500*1000UL, 0);
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	a9 01       	movw	r20, r18
     d8e:	60 e2       	ldi	r22, 0x20	; 32
     d90:	71 ea       	ldi	r23, 0xA1	; 161
     d92:	87 e0       	ldi	r24, 0x07	; 7
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	0e 94 85 07 	call	0xf0a	; 0xf0a <doBlinkLeds>
     d9a:	29 c0       	rjmp	.+82     	; 0xdee <rotireSmechera+0x11a>
		else
			doBlinkLeds(0, 0);
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	a9 01       	movw	r20, r18
     da2:	60 e0       	ldi	r22, 0x00	; 0
     da4:	70 e0       	ldi	r23, 0x00	; 0
     da6:	cb 01       	movw	r24, r22
     da8:	0e 94 85 07 	call	0xf0a	; 0xf0a <doBlinkLeds>
     dac:	20 c0       	rjmp	.+64     	; 0xdee <rotireSmechera+0x11a>
	}
	else {
		if(vitezaStanga < vitezaDreapta)
     dae:	f0 16       	cp	r15, r16
     db0:	50 f4       	brcc	.+20     	; 0xdc6 <rotireSmechera+0xf2>
			doBlinkLeds(500*1000UL, 0);
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	a9 01       	movw	r20, r18
     db8:	60 e2       	ldi	r22, 0x20	; 32
     dba:	71 ea       	ldi	r23, 0xA1	; 161
     dbc:	87 e0       	ldi	r24, 0x07	; 7
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	0e 94 85 07 	call	0xf0a	; 0xf0a <doBlinkLeds>
     dc4:	14 c0       	rjmp	.+40     	; 0xdee <rotireSmechera+0x11a>
		else if(vitezaStanga > vitezaDreapta)
     dc6:	0f 15       	cp	r16, r15
     dc8:	50 f4       	brcc	.+20     	; 0xdde <rotireSmechera+0x10a>
			doBlinkLeds(0, 500*1000UL);
     dca:	20 e2       	ldi	r18, 0x20	; 32
     dcc:	31 ea       	ldi	r19, 0xA1	; 161
     dce:	47 e0       	ldi	r20, 0x07	; 7
     dd0:	50 e0       	ldi	r21, 0x00	; 0
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	cb 01       	movw	r24, r22
     dd8:	0e 94 85 07 	call	0xf0a	; 0xf0a <doBlinkLeds>
     ddc:	08 c0       	rjmp	.+16     	; 0xdee <rotireSmechera+0x11a>
		else
			doBlinkLeds(0, 0);
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	a9 01       	movw	r20, r18
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	cb 01       	movw	r24, r22
     dea:	0e 94 85 07 	call	0xf0a	; 0xf0a <doBlinkLeds>
	}
	
	if(DEBUGGING){
     dee:	80 91 13 04 	lds	r24, 0x0413
     df2:	80 ff       	sbrs	r24, 0
     df4:	1b c0       	rjmp	.+54     	; 0xe2c <rotireSmechera+0x158>
		char bfr[100];
		sprintf(bfr, "rotire smechera : %u %u %u %u", sensStanga, vitezaStanga, sensDreapta, vitezaDreapta);
     df6:	1f 92       	push	r1
     df8:	0f 93       	push	r16
     dfa:	1f 92       	push	r1
     dfc:	1f 93       	push	r17
     dfe:	1f 92       	push	r1
     e00:	ff 92       	push	r15
     e02:	1f 92       	push	r1
     e04:	ef 92       	push	r14
     e06:	89 ef       	ldi	r24, 0xF9	; 249
     e08:	91 e0       	ldi	r25, 0x01	; 1
     e0a:	9f 93       	push	r25
     e0c:	8f 93       	push	r24
     e0e:	8e 01       	movw	r16, r28
     e10:	0f 5f       	subi	r16, 0xFF	; 255
     e12:	1f 4f       	sbci	r17, 0xFF	; 255
     e14:	1f 93       	push	r17
     e16:	0f 93       	push	r16
     e18:	0e 94 bf 19 	call	0x337e	; 0x337e <sprintf>
		BTTransmitStr(bfr);		
     e1c:	c8 01       	movw	r24, r16
     e1e:	0e 94 a8 01 	call	0x350	; 0x350 <BTTransmitStr>
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	f8 94       	cli
     e26:	de bf       	out	0x3e, r29	; 62
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	cd bf       	out	0x3d, r28	; 61
	}
		
}
     e2c:	cc 59       	subi	r28, 0x9C	; 156
     e2e:	df 4f       	sbci	r29, 0xFF	; 255
     e30:	0f b6       	in	r0, 0x3f	; 63
     e32:	f8 94       	cli
     e34:	de bf       	out	0x3e, r29	; 62
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	cd bf       	out	0x3d, r28	; 61
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	1f 91       	pop	r17
     e40:	0f 91       	pop	r16
     e42:	ff 90       	pop	r15
     e44:	ef 90       	pop	r14
     e46:	df 90       	pop	r13
     e48:	08 95       	ret

00000e4a <rotirePeLoc>:
void rotirePeLoc(uint8_t timp, uint8_t viteza,  uint8_t engines){
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	d8 2f       	mov	r29, r24
     e50:	c6 2f       	mov	r28, r22
	
	if(engines == RightEngines){
     e52:	41 11       	cpse	r20, r1
     e54:	1c c0       	rjmp	.+56     	; 0xe8e <rotirePeLoc+0x44>
		setEnginesSpeed(LeftEngines, SensSpate,  viteza);
     e56:	46 2f       	mov	r20, r22
     e58:	61 e0       	ldi	r22, 0x01	; 1
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	0e 94 36 05 	call	0xa6c	; 0xa6c <setEnginesSpeed>
		setEnginesSpeed(RightEngines, SensFata, viteza);
     e60:	4c 2f       	mov	r20, r28
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	0e 94 36 05 	call	0xa6c	; 0xa6c <setEnginesSpeed>
		if(DEBUGGING)
     e6a:	80 91 13 04 	lds	r24, 0x0413
     e6e:	80 ff       	sbrs	r24, 0
     e70:	04 c0       	rjmp	.+8      	; 0xe7a <rotirePeLoc+0x30>
			BTTransmitStr("ma rotesc spre dreapta");
     e72:	87 e1       	ldi	r24, 0x17	; 23
     e74:	92 e0       	ldi	r25, 0x02	; 2
     e76:	0e 94 a8 01 	call	0x350	; 0x350 <BTTransmitStr>
		doBlinkLeds(500*1000UL, 0);
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	a9 01       	movw	r20, r18
     e80:	60 e2       	ldi	r22, 0x20	; 32
     e82:	71 ea       	ldi	r23, 0xA1	; 161
     e84:	87 e0       	ldi	r24, 0x07	; 7
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0e 94 85 07 	call	0xf0a	; 0xf0a <doBlinkLeds>
     e8c:	1b c0       	rjmp	.+54     	; 0xec4 <rotirePeLoc+0x7a>
	}
	else {
		setEnginesSpeed(LeftEngines, SensFata, viteza);
     e8e:	46 2f       	mov	r20, r22
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	0e 94 36 05 	call	0xa6c	; 0xa6c <setEnginesSpeed>
		setEnginesSpeed(RightEngines, SensSpate, viteza);
     e98:	4c 2f       	mov	r20, r28
     e9a:	61 e0       	ldi	r22, 0x01	; 1
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	0e 94 36 05 	call	0xa6c	; 0xa6c <setEnginesSpeed>
		if(DEBUGGING)
     ea2:	80 91 13 04 	lds	r24, 0x0413
     ea6:	80 ff       	sbrs	r24, 0
     ea8:	04 c0       	rjmp	.+8      	; 0xeb2 <rotirePeLoc+0x68>
			BTTransmitStr("ma rotesc spre stanga");
     eaa:	8e e2       	ldi	r24, 0x2E	; 46
     eac:	92 e0       	ldi	r25, 0x02	; 2
     eae:	0e 94 a8 01 	call	0x350	; 0x350 <BTTransmitStr>
		doBlinkLeds(0, 500*1000UL);
     eb2:	20 e2       	ldi	r18, 0x20	; 32
     eb4:	31 ea       	ldi	r19, 0xA1	; 161
     eb6:	47 e0       	ldi	r20, 0x07	; 7
     eb8:	50 e0       	ldi	r21, 0x00	; 0
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	cb 01       	movw	r24, r22
     ec0:	0e 94 85 07 	call	0xf0a	; 0xf0a <doBlinkLeds>
	}
	addEntryIfNotExists(&stopEngines, 1000UL*1000UL*timp, Once);
     ec4:	ad 2f       	mov	r26, r29
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	20 e4       	ldi	r18, 0x40	; 64
     eca:	32 e4       	ldi	r19, 0x42	; 66
     ecc:	4f e0       	ldi	r20, 0x0F	; 15
     ece:	50 e0       	ldi	r21, 0x00	; 0
     ed0:	0e 94 a0 19 	call	0x3340	; 0x3340 <__muluhisi3>
     ed4:	ab 01       	movw	r20, r22
     ed6:	bc 01       	movw	r22, r24
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	8c ed       	ldi	r24, 0xDC	; 220
     edc:	94 e0       	ldi	r25, 0x04	; 4
     ede:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <addEntryIfNotExists>
}
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	08 95       	ret

00000ee8 <blinkLeftLeds>:
	PORTA |= _BV(PINA4);
	PORTA |= _BV(PINA5);
}

uint8_t blinkLeftLeds(){
	PORTA ^= _BV(PINA5);
     ee8:	92 b1       	in	r25, 0x02	; 2
     eea:	80 e2       	ldi	r24, 0x20	; 32
     eec:	89 27       	eor	r24, r25
     eee:	82 b9       	out	0x02, r24	; 2
	return NO;
}
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	08 95       	ret

00000ef4 <blinkRightLeds>:

uint8_t blinkRightLeds(){
	PORTA ^= _BV(PINA4);
     ef4:	92 b1       	in	r25, 0x02	; 2
     ef6:	80 e1       	ldi	r24, 0x10	; 16
     ef8:	89 27       	eor	r24, r25
     efa:	82 b9       	out	0x02, r24	; 2
	return NO;
}
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	08 95       	ret

00000f00 <initLights>:
#include "../Timing//Timing.h"
#include "../Constants.c"
#include "../utile.h"

void initLights(){	
	DDRA |= _BV(PINA4);
     f00:	0c 9a       	sbi	0x01, 4	; 1
	DDRA |= _BV(PINA5);
     f02:	0d 9a       	sbi	0x01, 5	; 1
	PORTA |= _BV(PINA4);
     f04:	14 9a       	sbi	0x02, 4	; 2
	PORTA |= _BV(PINA5);
     f06:	15 9a       	sbi	0x02, 5	; 2
     f08:	08 95       	ret

00000f0a <doBlinkLeds>:
uint8_t blinkRightLeds(){
	PORTA ^= _BV(PINA4);
	return NO;
}

void doBlinkLeds(uint32_t perioadaStanga, uint32_t perioadaDreapta){
     f0a:	cf 92       	push	r12
     f0c:	df 92       	push	r13
     f0e:	ef 92       	push	r14
     f10:	ff 92       	push	r15
     f12:	69 01       	movw	r12, r18
     f14:	7a 01       	movw	r14, r20
	if(perioadaStanga == 0){
     f16:	61 15       	cp	r22, r1
     f18:	71 05       	cpc	r23, r1
     f1a:	81 05       	cpc	r24, r1
     f1c:	91 05       	cpc	r25, r1
     f1e:	31 f4       	brne	.+12     	; 0xf2c <doBlinkLeds+0x22>
		removeEntryFromTimerQueue(&blinkLeftLeds);
     f20:	84 e7       	ldi	r24, 0x74	; 116
     f22:	97 e0       	ldi	r25, 0x07	; 7
     f24:	0e 94 bb 10 	call	0x2176	; 0x2176 <removeEntryFromTimerQueue>
		PORTA &=~ _BV(PINA4);
     f28:	14 98       	cbi	0x02, 4	; 2
     f2a:	07 c0       	rjmp	.+14     	; 0xf3a <doBlinkLeds+0x30>
	}
	else{
		addEntryIfNotExists(&blinkLeftLeds, perioadaStanga, Periodic);
     f2c:	21 e0       	ldi	r18, 0x01	; 1
     f2e:	ab 01       	movw	r20, r22
     f30:	bc 01       	movw	r22, r24
     f32:	84 e7       	ldi	r24, 0x74	; 116
     f34:	97 e0       	ldi	r25, 0x07	; 7
     f36:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <addEntryIfNotExists>
	}
	if(perioadaDreapta == 0){
     f3a:	c1 14       	cp	r12, r1
     f3c:	d1 04       	cpc	r13, r1
     f3e:	e1 04       	cpc	r14, r1
     f40:	f1 04       	cpc	r15, r1
     f42:	31 f4       	brne	.+12     	; 0xf50 <doBlinkLeds+0x46>
		removeEntryFromTimerQueue(&blinkRightLeds);
     f44:	8a e7       	ldi	r24, 0x7A	; 122
     f46:	97 e0       	ldi	r25, 0x07	; 7
     f48:	0e 94 bb 10 	call	0x2176	; 0x2176 <removeEntryFromTimerQueue>
		PORTA &=~ _BV(PINA5);
     f4c:	15 98       	cbi	0x02, 5	; 2
     f4e:	07 c0       	rjmp	.+14     	; 0xf5e <doBlinkLeds+0x54>
	}
	else{
		addEntryIfNotExists(&blinkRightLeds, perioadaDreapta, Periodic);
     f50:	21 e0       	ldi	r18, 0x01	; 1
     f52:	b7 01       	movw	r22, r14
     f54:	a6 01       	movw	r20, r12
     f56:	8a e7       	ldi	r24, 0x7A	; 122
     f58:	97 e0       	ldi	r25, 0x07	; 7
     f5a:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <addEntryIfNotExists>
	}
}
     f5e:	ff 90       	pop	r15
     f60:	ef 90       	pop	r14
     f62:	df 90       	pop	r13
     f64:	cf 90       	pop	r12
     f66:	08 95       	ret

00000f68 <turnBlinkingOff>:

void turnBlinkingOff(){
	removeEntryFromTimerQueue(&blinkLeftLeds);
     f68:	84 e7       	ldi	r24, 0x74	; 116
     f6a:	97 e0       	ldi	r25, 0x07	; 7
     f6c:	0e 94 bb 10 	call	0x2176	; 0x2176 <removeEntryFromTimerQueue>
	removeEntryFromTimerQueue(&blinkRightLeds);
     f70:	8a e7       	ldi	r24, 0x7A	; 122
     f72:	97 e0       	ldi	r25, 0x07	; 7
     f74:	0e 94 bb 10 	call	0x2176	; 0x2176 <removeEntryFromTimerQueue>
	PORTA &=~ _BV(PINA5);
     f78:	15 98       	cbi	0x02, 5	; 2
	PORTA &=~ _BV(PINA4);		
     f7a:	14 98       	cbi	0x02, 4	; 2
     f7c:	08 95       	ret

00000f7e <sendSensor>:

uint16_t getValueOfSensor(Sensor sensor){
	return lastCMValue[sensor];
}

uint8_t sendSensor(){
     f7e:	ef 92       	push	r14
     f80:	ff 92       	push	r15
     f82:	0f 93       	push	r16
     f84:	1f 93       	push	r17
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	c0 e0       	ldi	r28, 0x00	; 0
     f8c:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	
	for(i=0;i<4;i++){		
		if(sensorsToSend & (1<<i)){			
			sprintf(msgBuffer, "sensor #%d = %lu", i, lastCMValue[i]);			
     f8e:	0f 2e       	mov	r0, r31
     f90:	f4 e4       	ldi	r31, 0x44	; 68
     f92:	ef 2e       	mov	r14, r31
     f94:	f2 e0       	ldi	r31, 0x02	; 2
     f96:	ff 2e       	mov	r15, r31
     f98:	f0 2d       	mov	r31, r0
     f9a:	0d e4       	ldi	r16, 0x4D	; 77
     f9c:	14 e0       	ldi	r17, 0x04	; 4

uint8_t sendSensor(){
	uint8_t i;
	
	for(i=0;i<4;i++){		
		if(sensorsToSend & (1<<i)){			
     f9e:	80 91 80 04 	lds	r24, 0x0480
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	0c 2e       	mov	r0, r28
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <sendSensor+0x2e>
     fa8:	95 95       	asr	r25
     faa:	87 95       	ror	r24
     fac:	0a 94       	dec	r0
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <sendSensor+0x2a>
     fb0:	80 ff       	sbrs	r24, 0
     fb2:	22 c0       	rjmp	.+68     	; 0xff8 <sendSensor+0x7a>
			sprintf(msgBuffer, "sensor #%d = %lu", i, lastCMValue[i]);			
     fb4:	fe 01       	movw	r30, r28
     fb6:	ee 0f       	add	r30, r30
     fb8:	ff 1f       	adc	r31, r31
     fba:	ee 0f       	add	r30, r30
     fbc:	ff 1f       	adc	r31, r31
     fbe:	e3 5c       	subi	r30, 0xC3	; 195
     fc0:	fb 4f       	sbci	r31, 0xFB	; 251
     fc2:	40 81       	ld	r20, Z
     fc4:	51 81       	ldd	r21, Z+1	; 0x01
     fc6:	62 81       	ldd	r22, Z+2	; 0x02
     fc8:	73 81       	ldd	r23, Z+3	; 0x03
     fca:	7f 93       	push	r23
     fcc:	6f 93       	push	r22
     fce:	5f 93       	push	r21
     fd0:	4f 93       	push	r20
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	ff 92       	push	r15
     fd8:	ef 92       	push	r14
     fda:	1f 93       	push	r17
     fdc:	0f 93       	push	r16
     fde:	0e 94 bf 19 	call	0x337e	; 0x337e <sprintf>
			BTTransmitStr(msgBuffer);			
     fe2:	c8 01       	movw	r24, r16
     fe4:	0e 94 a8 01 	call	0x350	; 0x350 <BTTransmitStr>
     fe8:	8d b7       	in	r24, 0x3d	; 61
     fea:	9e b7       	in	r25, 0x3e	; 62
     fec:	0a 96       	adiw	r24, 0x0a	; 10
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	f8 94       	cli
     ff2:	9e bf       	out	0x3e, r25	; 62
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	8d bf       	out	0x3d, r24	; 61
     ff8:	21 96       	adiw	r28, 0x01	; 1
}

uint8_t sendSensor(){
	uint8_t i;
	
	for(i=0;i<4;i++){		
     ffa:	c4 30       	cpi	r28, 0x04	; 4
     ffc:	d1 05       	cpc	r29, r1
     ffe:	79 f6       	brne	.-98     	; 0xf9e <sendSensor+0x20>
			sprintf(msgBuffer, "sensor #%d = %lu", i, lastCMValue[i]);			
			BTTransmitStr(msgBuffer);			
		}
	}
	return NO;
}
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	1f 91       	pop	r17
    1008:	0f 91       	pop	r16
    100a:	ff 90       	pop	r15
    100c:	ef 90       	pop	r14
    100e:	08 95       	ret

00001010 <getValueOfSensor>:
char msgBuffer[50];
volatile uint16_t oldValue[4];
volatile uint32_t lastCMValue[4];

uint16_t getValueOfSensor(Sensor sensor){
	return lastCMValue[sensor];
    1010:	24 e0       	ldi	r18, 0x04	; 4
    1012:	82 9f       	mul	r24, r18
    1014:	c0 01       	movw	r24, r0
    1016:	11 24       	eor	r1, r1
    1018:	fc 01       	movw	r30, r24
    101a:	e3 5c       	subi	r30, 0xC3	; 195
    101c:	fb 4f       	sbci	r31, 0xFB	; 251
    101e:	80 81       	ld	r24, Z
    1020:	91 81       	ldd	r25, Z+1	; 0x01
    1022:	a2 81       	ldd	r26, Z+2	; 0x02
    1024:	b3 81       	ldd	r27, Z+3	; 0x03
}
    1026:	08 95       	ret

00001028 <toggleSensorSend>:
		}
	}
	return NO;
}
uint8_t readSensors();
void toggleSensorSend(Sensor sensor){
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
	sensorsToSend ^= 1<<sensor;
    102c:	40 91 80 04 	lds	r20, 0x0480
    1030:	21 e0       	ldi	r18, 0x01	; 1
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	b9 01       	movw	r22, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <toggleSensorSend+0x14>
    1038:	66 0f       	add	r22, r22
    103a:	77 1f       	adc	r23, r23
    103c:	8a 95       	dec	r24
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <toggleSensorSend+0x10>
    1040:	cb 01       	movw	r24, r22
    1042:	84 27       	eor	r24, r20
    1044:	80 93 80 04 	sts	0x0480, r24
	
	sprintf(msgBuffer, "sensorsToSend %d %d %d %d ", sensorsToSend&1, (sensorsToSend&2)>>1, (sensorsToSend&4)>>2, (sensorsToSend&8)>>3);
    1048:	30 91 80 04 	lds	r19, 0x0480
    104c:	20 91 80 04 	lds	r18, 0x0480
    1050:	90 91 80 04 	lds	r25, 0x0480
    1054:	80 91 80 04 	lds	r24, 0x0480
    1058:	33 fb       	bst	r19, 3
    105a:	33 27       	eor	r19, r19
    105c:	30 f9       	bld	r19, 0
    105e:	1f 92       	push	r1
    1060:	3f 93       	push	r19
    1062:	22 fb       	bst	r18, 2
    1064:	22 27       	eor	r18, r18
    1066:	20 f9       	bld	r18, 0
    1068:	1f 92       	push	r1
    106a:	2f 93       	push	r18
    106c:	96 95       	lsr	r25
    106e:	91 70       	andi	r25, 0x01	; 1
    1070:	1f 92       	push	r1
    1072:	9f 93       	push	r25
    1074:	81 70       	andi	r24, 0x01	; 1
    1076:	1f 92       	push	r1
    1078:	8f 93       	push	r24
    107a:	85 e5       	ldi	r24, 0x55	; 85
    107c:	92 e0       	ldi	r25, 0x02	; 2
    107e:	9f 93       	push	r25
    1080:	8f 93       	push	r24
    1082:	cd e4       	ldi	r28, 0x4D	; 77
    1084:	d4 e0       	ldi	r29, 0x04	; 4
    1086:	df 93       	push	r29
    1088:	cf 93       	push	r28
    108a:	0e 94 bf 19 	call	0x337e	; 0x337e <sprintf>
	BTTransmitStr(msgBuffer);
    108e:	ce 01       	movw	r24, r28
    1090:	0e 94 a8 01 	call	0x350	; 0x350 <BTTransmitStr>
	sprintf(msgBuffer, "sensorsToRead %d %d %d %d <<--", sensorsToRead&1, (sensorsToRead&2)>>1, (sensorsToRead&4)>>2, (sensorsToRead&8)>>3);
    1094:	30 91 7f 04 	lds	r19, 0x047F
    1098:	20 91 7f 04 	lds	r18, 0x047F
    109c:	90 91 7f 04 	lds	r25, 0x047F
    10a0:	80 91 7f 04 	lds	r24, 0x047F
    10a4:	33 fb       	bst	r19, 3
    10a6:	33 27       	eor	r19, r19
    10a8:	30 f9       	bld	r19, 0
    10aa:	1f 92       	push	r1
    10ac:	3f 93       	push	r19
    10ae:	22 fb       	bst	r18, 2
    10b0:	22 27       	eor	r18, r18
    10b2:	20 f9       	bld	r18, 0
    10b4:	1f 92       	push	r1
    10b6:	2f 93       	push	r18
    10b8:	96 95       	lsr	r25
    10ba:	91 70       	andi	r25, 0x01	; 1
    10bc:	1f 92       	push	r1
    10be:	9f 93       	push	r25
    10c0:	81 70       	andi	r24, 0x01	; 1
    10c2:	1f 92       	push	r1
    10c4:	8f 93       	push	r24
    10c6:	80 e7       	ldi	r24, 0x70	; 112
    10c8:	92 e0       	ldi	r25, 0x02	; 2
    10ca:	9f 93       	push	r25
    10cc:	8f 93       	push	r24
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	0e 94 bf 19 	call	0x337e	; 0x337e <sprintf>
	BTTransmitStr(msgBuffer);
    10d6:	ce 01       	movw	r24, r28
    10d8:	0e 94 a8 01 	call	0x350	; 0x350 <BTTransmitStr>
	
	uint8_t existsInTimerQueue = existsEntryInTimerQueue(&sendSensor);
    10dc:	8f eb       	ldi	r24, 0xBF	; 191
    10de:	97 e0       	ldi	r25, 0x07	; 7
    10e0:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <existsEntryInTimerQueue>
	//toggleSensorRead(sensor);
	if(sensorsToSend && !existsInTimerQueue){
    10e4:	90 91 80 04 	lds	r25, 0x0480
    10e8:	6d b7       	in	r22, 0x3d	; 61
    10ea:	7e b7       	in	r23, 0x3e	; 62
    10ec:	68 5e       	subi	r22, 0xE8	; 232
    10ee:	7f 4f       	sbci	r23, 0xFF	; 255
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	7e bf       	out	0x3e, r23	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	6d bf       	out	0x3d, r22	; 61
    10fa:	99 23       	and	r25, r25
    10fc:	61 f0       	breq	.+24     	; 0x1116 <__stack+0x17>
    10fe:	81 11       	cpse	r24, r1
    1100:	15 c0       	rjmp	.+42     	; 0x112c <__stack+0x2d>
		addEntryToTimerQueue(&sendSensor, 1000UL * 1000UL, Periodic);
    1102:	21 e0       	ldi	r18, 0x01	; 1
    1104:	40 e4       	ldi	r20, 0x40	; 64
    1106:	52 e4       	ldi	r21, 0x42	; 66
    1108:	6f e0       	ldi	r22, 0x0F	; 15
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	8f eb       	ldi	r24, 0xBF	; 191
    110e:	97 e0       	ldi	r25, 0x07	; 7
    1110:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <addEntryToTimerQueue>
    1114:	0f c0       	rjmp	.+30     	; 0x1134 <__stack+0x35>
	}
	else{
		if(!sensorsToSend && existsInTimerQueue)
    1116:	90 91 80 04 	lds	r25, 0x0480
    111a:	91 11       	cpse	r25, r1
    111c:	0b c0       	rjmp	.+22     	; 0x1134 <__stack+0x35>
    111e:	88 23       	and	r24, r24
    1120:	49 f0       	breq	.+18     	; 0x1134 <__stack+0x35>
		removeEntryFromTimerQueue(&sendSensor);
    1122:	8f eb       	ldi	r24, 0xBF	; 191
    1124:	97 e0       	ldi	r25, 0x07	; 7
    1126:	0e 94 bb 10 	call	0x2176	; 0x2176 <removeEntryFromTimerQueue>
    112a:	04 c0       	rjmp	.+8      	; 0x1134 <__stack+0x35>
	//toggleSensorRead(sensor);
	if(sensorsToSend && !existsInTimerQueue){
		addEntryToTimerQueue(&sendSensor, 1000UL * 1000UL, Periodic);
	}
	else{
		if(!sensorsToSend && existsInTimerQueue)
    112c:	80 91 80 04 	lds	r24, 0x0480
    1130:	88 23       	and	r24, r24
    1132:	b9 f3       	breq	.-18     	; 0x1122 <__stack+0x23>
		removeEntryFromTimerQueue(&sendSensor);
	}
}
    1134:	df 91       	pop	r29
    1136:	cf 91       	pop	r28
    1138:	08 95       	ret

0000113a <setSensorsRead>:
			removeEntryFromTimerQueue(&readSensors);
		}
	}
}
void setSensorsRead(uint8_t val){
	if(val){
    113a:	88 23       	and	r24, r24
    113c:	69 f0       	breq	.+26     	; 0x1158 <setSensorsRead+0x1e>
		sensorsToRead = 15;
    113e:	8f e0       	ldi	r24, 0x0F	; 15
    1140:	80 93 7f 04 	sts	0x047F, r24
		addEntryIfNotExists(&readSensors, 50UL * 1000UL, Periodic);
    1144:	21 e0       	ldi	r18, 0x01	; 1
    1146:	40 e5       	ldi	r20, 0x50	; 80
    1148:	53 ec       	ldi	r21, 0xC3	; 195
    114a:	60 e0       	ldi	r22, 0x00	; 0
    114c:	70 e0       	ldi	r23, 0x00	; 0
    114e:	86 e4       	ldi	r24, 0x46	; 70
    1150:	9a e0       	ldi	r25, 0x0A	; 10
    1152:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <addEntryIfNotExists>
    1156:	08 95       	ret
	}
	else{
		removeEntryFromTimerQueue(&readSensors);
    1158:	86 e4       	ldi	r24, 0x46	; 70
    115a:	9a e0       	ldi	r25, 0x0A	; 10
    115c:	0e 94 bb 10 	call	0x2176	; 0x2176 <removeEntryFromTimerQueue>
    1160:	08 95       	ret

00001162 <setSensorsSend>:
	}
}

uint8_t sendSensors();
void setSensorsSend(uint8_t val){
	if(val){
    1162:	88 23       	and	r24, r24
    1164:	51 f0       	breq	.+20     	; 0x117a <setSensorsSend+0x18>
		addEntryIfNotExists(&sendSensors, 750UL*1000UL, Periodic);
    1166:	21 e0       	ldi	r18, 0x01	; 1
    1168:	40 eb       	ldi	r20, 0xB0	; 176
    116a:	51 e7       	ldi	r21, 0x71	; 113
    116c:	6b e0       	ldi	r22, 0x0B	; 11
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	88 ec       	ldi	r24, 0xC8	; 200
    1172:	98 e0       	ldi	r25, 0x08	; 8
    1174:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <addEntryIfNotExists>
    1178:	08 95       	ret
	}
	else{
		removeEntryFromTimerQueue(&sendSensors);
    117a:	88 ec       	ldi	r24, 0xC8	; 200
    117c:	98 e0       	ldi	r25, 0x08	; 8
    117e:	0e 94 bb 10 	call	0x2176	; 0x2176 <removeEntryFromTimerQueue>
    1182:	08 95       	ret

00001184 <usprintf>:
	}
}
void usprintf(uint8_t *p, uint32_t nr){
    1184:	fc 01       	movw	r30, r24
	union unionUInt32ToArray tmp;
	tmp.nr = nr;
	p[0] = tmp.array[3];
    1186:	70 83       	st	Z, r23
	p[1] = tmp.array[2];
    1188:	61 83       	std	Z+1, r22	; 0x01
	p[2] = tmp.array[1];
    118a:	52 83       	std	Z+2, r21	; 0x02
	p[3] = tmp.array[0];
    118c:	43 83       	std	Z+3, r20	; 0x03
    118e:	08 95       	ret

00001190 <sendSensors>:
}

uint8_t sendSensors(){
    1190:	cf 93       	push	r28
    1192:	df 93       	push	r29
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	64 97       	sbiw	r28, 0x14	; 20
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	de bf       	out	0x3e, r29	; 62
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	cd bf       	out	0x3d, r28	; 61
	uint8_t msg[20];	
	msg[0] = StartByte;
    11a4:	8a ea       	ldi	r24, 0xAA	; 170
    11a6:	89 83       	std	Y+1, r24	; 0x01
	msg[1] = ISensorsValues;
    11a8:	83 e1       	ldi	r24, 0x13	; 19
    11aa:	8a 83       	std	Y+2, r24	; 0x02
	msg[2] = 16;
    11ac:	80 e1       	ldi	r24, 0x10	; 16
    11ae:	8b 83       	std	Y+3, r24	; 0x03
	usprintf(msg+3, lastCMValue[0]);
    11b0:	40 91 3d 04 	lds	r20, 0x043D
    11b4:	50 91 3e 04 	lds	r21, 0x043E
    11b8:	60 91 3f 04 	lds	r22, 0x043F
    11bc:	70 91 40 04 	lds	r23, 0x0440
    11c0:	ce 01       	movw	r24, r28
    11c2:	04 96       	adiw	r24, 0x04	; 4
    11c4:	0e 94 c2 08 	call	0x1184	; 0x1184 <usprintf>
	usprintf(msg+7, lastCMValue[1]);
    11c8:	40 91 41 04 	lds	r20, 0x0441
    11cc:	50 91 42 04 	lds	r21, 0x0442
    11d0:	60 91 43 04 	lds	r22, 0x0443
    11d4:	70 91 44 04 	lds	r23, 0x0444
    11d8:	ce 01       	movw	r24, r28
    11da:	08 96       	adiw	r24, 0x08	; 8
    11dc:	0e 94 c2 08 	call	0x1184	; 0x1184 <usprintf>
	usprintf(msg+11, lastCMValue[2]);
    11e0:	40 91 45 04 	lds	r20, 0x0445
    11e4:	50 91 46 04 	lds	r21, 0x0446
    11e8:	60 91 47 04 	lds	r22, 0x0447
    11ec:	70 91 48 04 	lds	r23, 0x0448
    11f0:	ce 01       	movw	r24, r28
    11f2:	0c 96       	adiw	r24, 0x0c	; 12
    11f4:	0e 94 c2 08 	call	0x1184	; 0x1184 <usprintf>
	usprintf(msg+15, lastCMValue[3]);
    11f8:	40 91 49 04 	lds	r20, 0x0449
    11fc:	50 91 4a 04 	lds	r21, 0x044A
    1200:	60 91 4b 04 	lds	r22, 0x044B
    1204:	70 91 4c 04 	lds	r23, 0x044C
    1208:	ce 01       	movw	r24, r28
    120a:	40 96       	adiw	r24, 0x10	; 16
    120c:	0e 94 c2 08 	call	0x1184	; 0x1184 <usprintf>
	msg[19] = EndByte;
    1210:	85 e5       	ldi	r24, 0x55	; 85
    1212:	8c 8b       	std	Y+20, r24	; 0x14
	
	BTTransmitMsgU(msg, 20);
    1214:	64 e1       	ldi	r22, 0x14	; 20
    1216:	ce 01       	movw	r24, r28
    1218:	01 96       	adiw	r24, 0x01	; 1
    121a:	0e 94 a0 02 	call	0x540	; 0x540 <BTTransmitMsgU>
	return NO;
}
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	64 96       	adiw	r28, 0x14	; 20
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	f8 94       	cli
    1226:	de bf       	out	0x3e, r29	; 62
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	cd bf       	out	0x3d, r28	; 61
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	08 95       	ret

00001232 <initSensors>:


void initSensors(void){
		
	//init ADC
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
    1232:	aa e7       	ldi	r26, 0x7A	; 122
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	8c 91       	ld	r24, X
    1238:	87 60       	ori	r24, 0x07	; 7
    123a:	8c 93       	st	X, r24

	ADMUX |= (1 << REFS0);
    123c:	ec e7       	ldi	r30, 0x7C	; 124
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	80 64       	ori	r24, 0x40	; 64
    1244:	80 83       	st	Z, r24
	ADMUX &=~ (1 << REFS1); // Set ADC reference to AVCC
    1246:	80 81       	ld	r24, Z
    1248:	8f 77       	andi	r24, 0x7F	; 127
    124a:	80 83       	st	Z, r24
	
	ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
    124c:	80 81       	ld	r24, Z
    124e:	80 62       	ori	r24, 0x20	; 32
    1250:	80 83       	st	Z, r24
	
	//ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running Mode
	
	ADCSRA |= (1 << ADEN);  // Enable ADC
    1252:	8c 91       	ld	r24, X
    1254:	80 68       	ori	r24, 0x80	; 128
    1256:	8c 93       	st	X, r24
	//ADCSRA |= (1 << ADSC);  // start adc
	sensorsToRead = sensorsToSend = 0;
    1258:	10 92 80 04 	sts	0x0480, r1
    125c:	10 92 7f 04 	sts	0x047F, r1
    1260:	08 95       	ret

00001262 <startADCConversionForSensor>:
}

void startADCConversionForSensor(Sensor sensor){

	ADMUX &= ~31; // set lasts 5 bits to 00000
    1262:	ec e7       	ldi	r30, 0x7C	; 124
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	90 81       	ld	r25, Z
    1268:	90 7e       	andi	r25, 0xE0	; 224
    126a:	90 83       	st	Z, r25
	//ADMUX |= 0; // 0-ADC0, 1-ADC1, 2-ADC2 ...    datasheet pg 249-251
	ADMUX |= sensor; // Sensor ia valorile 0,1,2,3, exact ca cele pt ADC-uri
    126c:	90 81       	ld	r25, Z
    126e:	89 2b       	or	r24, r25
    1270:	80 83       	st	Z, r24
	// No MUX values needed to be changed to use ADC0

	
	ADCSRA |= (1 << ADSC);  // Start A2D Conversions
    1272:	ea e7       	ldi	r30, 0x7A	; 122
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	80 64       	ori	r24, 0x40	; 64
    127a:	80 83       	st	Z, r24
    127c:	08 95       	ret

0000127e <getCurrentValueOfSensor>:
#include "../Timing/Timing.h"


uint32_t getValueOfSensor3(Sensor sensor);
uint16_t getCurrentValueOfSensor(Sensor sensor){	
	startADCConversionForSensor(sensor);	
    127e:	0e 94 31 09 	call	0x1262	; 0x1262 <startADCConversionForSensor>
	while ( ADCSRA & (1 << ADSC));	
    1282:	ea e7       	ldi	r30, 0x7A	; 122
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	86 fd       	sbrc	r24, 6
    128a:	fd cf       	rjmp	.-6      	; 0x1286 <getCurrentValueOfSensor+0x8>
	uint16_t val;
	val = ADCL >> 6;
    128c:	20 91 78 00 	lds	r18, 0x0078
    1290:	22 95       	swap	r18
    1292:	26 95       	lsr	r18
    1294:	26 95       	lsr	r18
    1296:	23 70       	andi	r18, 0x03	; 3
	val |= ADCH << 2;	
    1298:	80 91 79 00 	lds	r24, 0x0079
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	88 0f       	add	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
	return val;
}
    12a6:	82 2b       	or	r24, r18
    12a8:	08 95       	ret

000012aa <getValueOfSensor3>:
	BTTransmitMsgU(msg, 20);
	return NO;
}


uint32_t getValueOfSensor3(Sensor sensor){
    12aa:	8f 92       	push	r8
    12ac:	9f 92       	push	r9
    12ae:	af 92       	push	r10
    12b0:	bf 92       	push	r11
    12b2:	cf 92       	push	r12
    12b4:	df 92       	push	r13
    12b6:	ef 92       	push	r14
    12b8:	ff 92       	push	r15
    12ba:	0f 93       	push	r16
    12bc:	1f 93       	push	r17
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	2e 97       	sbiw	r28, 0x0e	; 14
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	f8 94       	cli
    12cc:	de bf       	out	0x3e, r29	; 62
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	cd bf       	out	0x3d, r28	; 61
    12d2:	18 2f       	mov	r17, r24
    12d4:	9e 01       	movw	r18, r28
    12d6:	2f 5f       	subi	r18, 0xFF	; 255
    12d8:	3f 4f       	sbci	r19, 0xFF	; 255
    12da:	79 01       	movw	r14, r18
    12dc:	6e 01       	movw	r12, r28
    12de:	3f e0       	ldi	r19, 0x0F	; 15
    12e0:	c3 0e       	add	r12, r19
    12e2:	d1 1c       	adc	r13, r1
	uint8_t i;
	uint16_t s, sVals[7];
	
	//citesc 7 valori ale senzorului
	for(i=0;i<7;i++)
		sVals[i] = getCurrentValueOfSensor(sensor);
    12e4:	81 2f       	mov	r24, r17
    12e6:	0e 94 3f 09 	call	0x127e	; 0x127e <getCurrentValueOfSensor>
    12ea:	f7 01       	movw	r30, r14
    12ec:	81 93       	st	Z+, r24
    12ee:	91 93       	st	Z+, r25
    12f0:	7f 01       	movw	r14, r30
uint32_t getValueOfSensor3(Sensor sensor){
	uint8_t i;
	uint16_t s, sVals[7];
	
	//citesc 7 valori ale senzorului
	for(i=0;i<7;i++)
    12f2:	ec 15       	cp	r30, r12
    12f4:	fd 05       	cpc	r31, r13
    12f6:	b1 f7       	brne	.-20     	; 0x12e4 <getValueOfSensor3+0x3a>
    12f8:	21 e0       	ldi	r18, 0x01	; 1
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	80 e0       	ldi	r24, 0x00	; 0
		sVals[i] = getCurrentValueOfSensor(sensor);
		
	do{ // le sortez (bubble sort)
		s=1;
    12fe:	01 e0       	ldi	r16, 0x01	; 1
    1300:	f1 2c       	mov	r15, r1
		for(i=0;i<6;i++)
    1302:	90 e0       	ldi	r25, 0x00	; 0
			if(sVals[i]>sVals[i+1]){
				s = sVals[i];
				sVals[i] = sVals[i+1];
				sVals[i+1] = s;
				s=0;
    1304:	d1 2c       	mov	r13, r1
    1306:	e1 2c       	mov	r14, r1
    1308:	32 c0       	rjmp	.+100    	; 0x136e <getValueOfSensor3+0xc4>
		sVals[i] = getCurrentValueOfSensor(sensor);
		
	do{ // le sortez (bubble sort)
		s=1;
		for(i=0;i<6;i++)
			if(sVals[i]>sVals[i+1]){
    130a:	48 2f       	mov	r20, r24
    130c:	50 e0       	ldi	r21, 0x00	; 0
    130e:	fa 01       	movw	r30, r20
    1310:	ee 0f       	add	r30, r30
    1312:	ff 1f       	adc	r31, r31
    1314:	aa 24       	eor	r10, r10
    1316:	a3 94       	inc	r10
    1318:	b1 2c       	mov	r11, r1
    131a:	ac 0e       	add	r10, r28
    131c:	bd 1e       	adc	r11, r29
    131e:	ea 0d       	add	r30, r10
    1320:	fb 1d       	adc	r31, r11
    1322:	60 81       	ld	r22, Z
    1324:	71 81       	ldd	r23, Z+1	; 0x01
    1326:	4a 01       	movw	r8, r20
    1328:	ef ef       	ldi	r30, 0xFF	; 255
    132a:	8e 1a       	sub	r8, r30
    132c:	9e 0a       	sbc	r9, r30
    132e:	d4 01       	movw	r26, r8
    1330:	aa 0f       	add	r26, r26
    1332:	bb 1f       	adc	r27, r27
    1334:	aa 0d       	add	r26, r10
    1336:	bb 1d       	adc	r27, r11
    1338:	0d 90       	ld	r0, X+
    133a:	bc 91       	ld	r27, X
    133c:	a0 2d       	mov	r26, r0
    133e:	a6 17       	cp	r26, r22
    1340:	b7 07       	cpc	r27, r23
    1342:	80 f4       	brcc	.+32     	; 0x1364 <getValueOfSensor3+0xba>
				s = sVals[i];
				sVals[i] = sVals[i+1];
    1344:	44 0f       	add	r20, r20
    1346:	55 1f       	adc	r21, r21
    1348:	4a 0d       	add	r20, r10
    134a:	5b 1d       	adc	r21, r11
    134c:	fa 01       	movw	r30, r20
    134e:	b1 83       	std	Z+1, r27	; 0x01
    1350:	a0 83       	st	Z, r26
				sVals[i+1] = s;
    1352:	f4 01       	movw	r30, r8
    1354:	ee 0f       	add	r30, r30
    1356:	ff 1f       	adc	r31, r31
    1358:	ea 0d       	add	r30, r10
    135a:	fb 1d       	adc	r31, r11
    135c:	71 83       	std	Z+1, r23	; 0x01
    135e:	60 83       	st	Z, r22
				s=0;
    1360:	2d 2d       	mov	r18, r13
    1362:	3e 2d       	mov	r19, r14
	for(i=0;i<7;i++)
		sVals[i] = getCurrentValueOfSensor(sensor);
		
	do{ // le sortez (bubble sort)
		s=1;
		for(i=0;i<6;i++)
    1364:	8f 5f       	subi	r24, 0xFF	; 255
    1366:	03 c0       	rjmp	.+6      	; 0x136e <getValueOfSensor3+0xc4>
	//citesc 7 valori ale senzorului
	for(i=0;i<7;i++)
		sVals[i] = getCurrentValueOfSensor(sensor);
		
	do{ // le sortez (bubble sort)
		s=1;
    1368:	20 2f       	mov	r18, r16
    136a:	3f 2d       	mov	r19, r15
		for(i=0;i<6;i++)
    136c:	89 2f       	mov	r24, r25
    136e:	86 30       	cpi	r24, 0x06	; 6
    1370:	60 f2       	brcs	.-104    	; 0x130a <getValueOfSensor3+0x60>
				s = sVals[i];
				sVals[i] = sVals[i+1];
				sVals[i+1] = s;
				s=0;
			}
	}while(!s);
    1372:	23 2b       	or	r18, r19
    1374:	c9 f3       	breq	.-14     	; 0x1368 <getValueOfSensor3+0xbe>
	
	s = sVals[2] + sVals[3] + sVals[4];
    1376:	2f 81       	ldd	r18, Y+7	; 0x07
    1378:	38 85       	ldd	r19, Y+8	; 0x08
    137a:	8d 81       	ldd	r24, Y+5	; 0x05
    137c:	9e 81       	ldd	r25, Y+6	; 0x06
    137e:	28 0f       	add	r18, r24
    1380:	39 1f       	adc	r19, r25
    1382:	89 85       	ldd	r24, Y+9	; 0x09
    1384:	9a 85       	ldd	r25, Y+10	; 0x0a
    1386:	28 0f       	add	r18, r24
    1388:	39 1f       	adc	r19, r25
	s/=3;//calculez media celor 3 din mijloc (eliminandu-le astfel pe cele mai mari si pe cele mai mici)
    138a:	ab ea       	ldi	r26, 0xAB	; 171
    138c:	ba ea       	ldi	r27, 0xAA	; 170
    138e:	0e 94 91 19 	call	0x3322	; 0x3322 <__umulhisi3>
    1392:	96 95       	lsr	r25
    1394:	87 95       	ror	r24
	
	//valoarea noua este media ponderata a vechii valori (70%) si valorii curente(30%)
	if(!oldValue[sensor])
    1396:	41 2f       	mov	r20, r17
    1398:	50 e0       	ldi	r21, 0x00	; 0
    139a:	fa 01       	movw	r30, r20
    139c:	ee 0f       	add	r30, r30
    139e:	ff 1f       	adc	r31, r31
    13a0:	eb 5c       	subi	r30, 0xCB	; 203
    13a2:	fb 4f       	sbci	r31, 0xFB	; 251
    13a4:	60 81       	ld	r22, Z
    13a6:	71 81       	ldd	r23, Z+1	; 0x01
    13a8:	67 2b       	or	r22, r23
    13aa:	41 f4       	brne	.+16     	; 0x13bc <getValueOfSensor3+0x112>
		oldValue[sensor] = s;
    13ac:	fa 01       	movw	r30, r20
    13ae:	ee 0f       	add	r30, r30
    13b0:	ff 1f       	adc	r31, r31
    13b2:	eb 5c       	subi	r30, 0xCB	; 203
    13b4:	fb 4f       	sbci	r31, 0xFB	; 251
    13b6:	91 83       	std	Z+1, r25	; 0x01
    13b8:	80 83       	st	Z, r24
    13ba:	20 c0       	rjmp	.+64     	; 0x13fc <getValueOfSensor3+0x152>
	else
		oldValue[sensor] = (6*oldValue[sensor] + 4*s) / 10;
    13bc:	fa 01       	movw	r30, r20
    13be:	ee 0f       	add	r30, r30
    13c0:	ff 1f       	adc	r31, r31
    13c2:	eb 5c       	subi	r30, 0xCB	; 203
    13c4:	fb 4f       	sbci	r31, 0xFB	; 251
    13c6:	20 81       	ld	r18, Z
    13c8:	31 81       	ldd	r19, Z+1	; 0x01
    13ca:	b9 01       	movw	r22, r18
    13cc:	66 0f       	add	r22, r22
    13ce:	77 1f       	adc	r23, r23
    13d0:	26 0f       	add	r18, r22
    13d2:	37 1f       	adc	r19, r23
    13d4:	22 0f       	add	r18, r18
    13d6:	33 1f       	adc	r19, r19
    13d8:	88 0f       	add	r24, r24
    13da:	99 1f       	adc	r25, r25
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	28 0f       	add	r18, r24
    13e2:	39 1f       	adc	r19, r25
    13e4:	ad ec       	ldi	r26, 0xCD	; 205
    13e6:	bc ec       	ldi	r27, 0xCC	; 204
    13e8:	0e 94 91 19 	call	0x3322	; 0x3322 <__umulhisi3>
    13ec:	96 95       	lsr	r25
    13ee:	87 95       	ror	r24
    13f0:	96 95       	lsr	r25
    13f2:	87 95       	ror	r24
    13f4:	96 95       	lsr	r25
    13f6:	87 95       	ror	r24
    13f8:	91 83       	std	Z+1, r25	; 0x01
    13fa:	80 83       	st	Z, r24

	
	if(sensor<2)
    13fc:	12 30       	cpi	r17, 0x02	; 2
    13fe:	d0 f4       	brcc	.+52     	; 0x1434 <getValueOfSensor3+0x18a>
		return (322641UL/((oldValue[sensor]<<4)-315));// senzori laterali
    1400:	fa 01       	movw	r30, r20
    1402:	ee 0f       	add	r30, r30
    1404:	ff 1f       	adc	r31, r31
    1406:	eb 5c       	subi	r30, 0xCB	; 203
    1408:	fb 4f       	sbci	r31, 0xFB	; 251
    140a:	20 81       	ld	r18, Z
    140c:	31 81       	ldd	r19, Z+1	; 0x01
    140e:	22 95       	swap	r18
    1410:	32 95       	swap	r19
    1412:	30 7f       	andi	r19, 0xF0	; 240
    1414:	32 27       	eor	r19, r18
    1416:	20 7f       	andi	r18, 0xF0	; 240
    1418:	32 27       	eor	r19, r18
    141a:	2b 53       	subi	r18, 0x3B	; 59
    141c:	31 40       	sbci	r19, 0x01	; 1
    141e:	40 e0       	ldi	r20, 0x00	; 0
    1420:	50 e0       	ldi	r21, 0x00	; 0
    1422:	61 e5       	ldi	r22, 0x51	; 81
    1424:	7c ee       	ldi	r23, 0xEC	; 236
    1426:	84 e0       	ldi	r24, 0x04	; 4
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	0e 94 69 19 	call	0x32d2	; 0x32d2 <__udivmodsi4>
    142e:	ca 01       	movw	r24, r20
    1430:	b9 01       	movw	r22, r18
    1432:	19 c0       	rjmp	.+50     	; 0x1466 <getValueOfSensor3+0x1bc>
	else
		return (769533UL/((oldValue[sensor]<<4)-520));	// senzori frontali
    1434:	fa 01       	movw	r30, r20
    1436:	ee 0f       	add	r30, r30
    1438:	ff 1f       	adc	r31, r31
    143a:	eb 5c       	subi	r30, 0xCB	; 203
    143c:	fb 4f       	sbci	r31, 0xFB	; 251
    143e:	20 81       	ld	r18, Z
    1440:	31 81       	ldd	r19, Z+1	; 0x01
    1442:	22 95       	swap	r18
    1444:	32 95       	swap	r19
    1446:	30 7f       	andi	r19, 0xF0	; 240
    1448:	32 27       	eor	r19, r18
    144a:	20 7f       	andi	r18, 0xF0	; 240
    144c:	32 27       	eor	r19, r18
    144e:	28 50       	subi	r18, 0x08	; 8
    1450:	32 40       	sbci	r19, 0x02	; 2
    1452:	40 e0       	ldi	r20, 0x00	; 0
    1454:	50 e0       	ldi	r21, 0x00	; 0
    1456:	6d ef       	ldi	r22, 0xFD	; 253
    1458:	7d eb       	ldi	r23, 0xBD	; 189
    145a:	8b e0       	ldi	r24, 0x0B	; 11
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	0e 94 69 19 	call	0x32d2	; 0x32d2 <__udivmodsi4>
    1462:	ca 01       	movw	r24, r20
    1464:	b9 01       	movw	r22, r18
}
    1466:	2e 96       	adiw	r28, 0x0e	; 14
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	cd bf       	out	0x3d, r28	; 61
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	1f 91       	pop	r17
    1478:	0f 91       	pop	r16
    147a:	ff 90       	pop	r15
    147c:	ef 90       	pop	r14
    147e:	df 90       	pop	r13
    1480:	cf 90       	pop	r12
    1482:	bf 90       	pop	r11
    1484:	af 90       	pop	r10
    1486:	9f 90       	pop	r9
    1488:	8f 90       	pop	r8
    148a:	08 95       	ret

0000148c <readSensors>:
		removeEntryFromTimerQueue(&sendSensor);
	}
}

uint8_t readSensors(){
	if(sensorsToRead & 1)
    148c:	80 91 7f 04 	lds	r24, 0x047F
    1490:	80 ff       	sbrs	r24, 0
    1492:	0b c0       	rjmp	.+22     	; 0x14aa <readSensors+0x1e>
		lastCMValue[0] = getValueOfSensor3(0);
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	0e 94 55 09 	call	0x12aa	; 0x12aa <getValueOfSensor3>
    149a:	60 93 3d 04 	sts	0x043D, r22
    149e:	70 93 3e 04 	sts	0x043E, r23
    14a2:	80 93 3f 04 	sts	0x043F, r24
    14a6:	90 93 40 04 	sts	0x0440, r25
	if(sensorsToRead & 2)
    14aa:	80 91 7f 04 	lds	r24, 0x047F
    14ae:	81 ff       	sbrs	r24, 1
    14b0:	0b c0       	rjmp	.+22     	; 0x14c8 <readSensors+0x3c>
		lastCMValue[1] = getValueOfSensor3(1);
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	0e 94 55 09 	call	0x12aa	; 0x12aa <getValueOfSensor3>
    14b8:	60 93 41 04 	sts	0x0441, r22
    14bc:	70 93 42 04 	sts	0x0442, r23
    14c0:	80 93 43 04 	sts	0x0443, r24
    14c4:	90 93 44 04 	sts	0x0444, r25
	if(sensorsToRead & 4)
    14c8:	80 91 7f 04 	lds	r24, 0x047F
    14cc:	82 ff       	sbrs	r24, 2
    14ce:	0b c0       	rjmp	.+22     	; 0x14e6 <readSensors+0x5a>
		lastCMValue[2] = getValueOfSensor3(2);
    14d0:	82 e0       	ldi	r24, 0x02	; 2
    14d2:	0e 94 55 09 	call	0x12aa	; 0x12aa <getValueOfSensor3>
    14d6:	60 93 45 04 	sts	0x0445, r22
    14da:	70 93 46 04 	sts	0x0446, r23
    14de:	80 93 47 04 	sts	0x0447, r24
    14e2:	90 93 48 04 	sts	0x0448, r25
	if(sensorsToRead & 8)
    14e6:	80 91 7f 04 	lds	r24, 0x047F
    14ea:	83 ff       	sbrs	r24, 3
    14ec:	0b c0       	rjmp	.+22     	; 0x1504 <readSensors+0x78>
		lastCMValue[3] = getValueOfSensor3(3);
    14ee:	83 e0       	ldi	r24, 0x03	; 3
    14f0:	0e 94 55 09 	call	0x12aa	; 0x12aa <getValueOfSensor3>
    14f4:	60 93 49 04 	sts	0x0449, r22
    14f8:	70 93 4a 04 	sts	0x044A, r23
    14fc:	80 93 4b 04 	sts	0x044B, r24
    1500:	90 93 4c 04 	sts	0x044C, r25
	return NO;
}
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	08 95       	ret

00001508 <findPlaces1>:
	distP=0;
	distP2=0;
	addEntryIfNotExists(&findPlaces1, 150 * 1000UL, Periodic);
}

uint8_t findPlaces1(){
    1508:	4f 92       	push	r4
    150a:	5f 92       	push	r5
    150c:	6f 92       	push	r6
    150e:	7f 92       	push	r7
    1510:	8f 92       	push	r8
    1512:	9f 92       	push	r9
    1514:	af 92       	push	r10
    1516:	bf 92       	push	r11
    1518:	cf 92       	push	r12
    151a:	df 92       	push	r13
    151c:	ef 92       	push	r14
    151e:	ff 92       	push	r15
    1520:	0f 93       	push	r16
    1522:	1f 93       	push	r17
    1524:	cf 93       	push	r28
    1526:	df 93       	push	r29
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
    152c:	c4 56       	subi	r28, 0x64	; 100
    152e:	d1 09       	sbc	r29, r1
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	f8 94       	cli
    1534:	de bf       	out	0x3e, r29	; 62
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	cd bf       	out	0x3d, r28	; 61
	uint32_t sideRight = getValueOfSensor(SideRightSensor);
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	0e 94 08 08 	call	0x1010	; 0x1010 <getValueOfSensor>
    1540:	6c 01       	movw	r12, r24
    1542:	e1 2c       	mov	r14, r1
    1544:	f1 2c       	mov	r15, r1
	char msg[100];
	//sprintf(msg, "stare=%u\nlastV=%lu\nsr=%lu", stareFP1, lastVFP1, sideRight);
	//BTTransmitStr(msg);
	switch(stareFP1){
    1546:	80 91 85 04 	lds	r24, 0x0485
    154a:	82 30       	cpi	r24, 0x02	; 2
    154c:	09 f4       	brne	.+2      	; 0x1550 <findPlaces1+0x48>
    154e:	d8 c0       	rjmp	.+432    	; 0x1700 <findPlaces1+0x1f8>
    1550:	28 f4       	brcc	.+10     	; 0x155c <findPlaces1+0x54>
    1552:	88 23       	and	r24, r24
    1554:	51 f0       	breq	.+20     	; 0x156a <findPlaces1+0x62>
    1556:	81 30       	cpi	r24, 0x01	; 1
    1558:	c9 f0       	breq	.+50     	; 0x158c <findPlaces1+0x84>
    155a:	c7 c2       	rjmp	.+1422   	; 0x1aea <findPlaces1+0x5e2>
    155c:	83 30       	cpi	r24, 0x03	; 3
    155e:	09 f4       	brne	.+2      	; 0x1562 <findPlaces1+0x5a>
    1560:	71 c1       	rjmp	.+738    	; 0x1844 <findPlaces1+0x33c>
    1562:	84 30       	cpi	r24, 0x04	; 4
    1564:	09 f4       	brne	.+2      	; 0x1568 <findPlaces1+0x60>
    1566:	78 c2       	rjmp	.+1264   	; 0x1a58 <findPlaces1+0x550>
    1568:	c0 c2       	rjmp	.+1408   	; 0x1aea <findPlaces1+0x5e2>
		case 0:
			lastVFP1 = sideRight;
    156a:	c0 92 8b 04 	sts	0x048B, r12
    156e:	d0 92 8c 04 	sts	0x048C, r13
    1572:	e0 92 8d 04 	sts	0x048D, r14
    1576:	f0 92 8e 04 	sts	0x048E, r15
			goFront(60, 50);
    157a:	62 e3       	ldi	r22, 0x32	; 50
    157c:	8c e3       	ldi	r24, 0x3C	; 60
    157e:	0e 94 4c 05 	call	0xa98	; 0xa98 <goFront>
			stareFP1 = 1;		
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	80 93 85 04 	sts	0x0485, r24
				stopEngines();
				return YES;
			}		
		break;
	}
	return NO;
    1588:	80 e0       	ldi	r24, 0x00	; 0
	switch(stareFP1){
		case 0:
			lastVFP1 = sideRight;
			goFront(60, 50);
			stareFP1 = 1;		
		break;
    158a:	b4 c2       	rjmp	.+1384   	; 0x1af4 <findPlaces1+0x5ec>
		case 1:
			if(sideRight > lastVFP1 + 100){
    158c:	80 91 8b 04 	lds	r24, 0x048B
    1590:	90 91 8c 04 	lds	r25, 0x048C
    1594:	a0 91 8d 04 	lds	r26, 0x048D
    1598:	b0 91 8e 04 	lds	r27, 0x048E
    159c:	8c 59       	subi	r24, 0x9C	; 156
    159e:	9f 4f       	sbci	r25, 0xFF	; 255
    15a0:	af 4f       	sbci	r26, 0xFF	; 255
    15a2:	bf 4f       	sbci	r27, 0xFF	; 255
    15a4:	8c 15       	cp	r24, r12
    15a6:	9d 05       	cpc	r25, r13
    15a8:	ae 05       	cpc	r26, r14
    15aa:	bf 05       	cpc	r27, r15
    15ac:	08 f0       	brcs	.+2      	; 0x15b0 <findPlaces1+0xa8>
    15ae:	9e c0       	rjmp	.+316    	; 0x16ec <findPlaces1+0x1e4>
				//stopEngines();
				stareFP1 = 2;
    15b0:	82 e0       	ldi	r24, 0x02	; 2
    15b2:	80 93 85 04 	sts	0x0485, r24
				distP = DISTANTA_PARCURSA;
    15b6:	80 91 2b 04 	lds	r24, 0x042B
    15ba:	90 91 2c 04 	lds	r25, 0x042C
    15be:	a0 91 2d 04 	lds	r26, 0x042D
    15c2:	b0 91 2e 04 	lds	r27, 0x042E
    15c6:	40 91 31 04 	lds	r20, 0x0431
    15ca:	50 91 32 04 	lds	r21, 0x0432
    15ce:	60 91 33 04 	lds	r22, 0x0433
    15d2:	70 91 34 04 	lds	r23, 0x0434
    15d6:	48 0f       	add	r20, r24
    15d8:	59 1f       	adc	r21, r25
    15da:	6a 1f       	adc	r22, r26
    15dc:	7b 1f       	adc	r23, r27
    15de:	76 95       	lsr	r23
    15e0:	67 95       	ror	r22
    15e2:	57 95       	ror	r21
    15e4:	47 95       	ror	r20
    15e6:	76 95       	lsr	r23
    15e8:	67 95       	ror	r22
    15ea:	57 95       	ror	r21
    15ec:	47 95       	ror	r20
    15ee:	db 01       	movw	r26, r22
    15f0:	ca 01       	movw	r24, r20
    15f2:	88 0f       	add	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	aa 1f       	adc	r26, r26
    15f8:	bb 1f       	adc	r27, r27
    15fa:	88 0f       	add	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	aa 1f       	adc	r26, r26
    1600:	bb 1f       	adc	r27, r27
    1602:	8c 01       	movw	r16, r24
    1604:	9d 01       	movw	r18, r26
    1606:	00 0f       	add	r16, r16
    1608:	11 1f       	adc	r17, r17
    160a:	22 1f       	adc	r18, r18
    160c:	33 1f       	adc	r19, r19
    160e:	00 0f       	add	r16, r16
    1610:	11 1f       	adc	r17, r17
    1612:	22 1f       	adc	r18, r18
    1614:	33 1f       	adc	r19, r19
    1616:	80 0f       	add	r24, r16
    1618:	91 1f       	adc	r25, r17
    161a:	a2 1f       	adc	r26, r18
    161c:	b3 1f       	adc	r27, r19
    161e:	84 0f       	add	r24, r20
    1620:	95 1f       	adc	r25, r21
    1622:	a6 1f       	adc	r26, r22
    1624:	b7 1f       	adc	r27, r23
    1626:	80 93 81 04 	sts	0x0481, r24
    162a:	90 93 82 04 	sts	0x0482, r25
    162e:	a0 93 83 04 	sts	0x0483, r26
    1632:	b0 93 84 04 	sts	0x0484, r27
				//char msg[50];
				//sprintf(msg, "%lu   ", distP);
				//BTTransmitStr(msg);
				distP2 = DISTANTA_PARCURSA + 100;
    1636:	40 91 2b 04 	lds	r20, 0x042B
    163a:	50 91 2c 04 	lds	r21, 0x042C
    163e:	60 91 2d 04 	lds	r22, 0x042D
    1642:	70 91 2e 04 	lds	r23, 0x042E
    1646:	00 91 31 04 	lds	r16, 0x0431
    164a:	10 91 32 04 	lds	r17, 0x0432
    164e:	20 91 33 04 	lds	r18, 0x0433
    1652:	30 91 34 04 	lds	r19, 0x0434
    1656:	40 0f       	add	r20, r16
    1658:	51 1f       	adc	r21, r17
    165a:	62 1f       	adc	r22, r18
    165c:	73 1f       	adc	r23, r19
    165e:	76 95       	lsr	r23
    1660:	67 95       	ror	r22
    1662:	57 95       	ror	r21
    1664:	47 95       	ror	r20
    1666:	76 95       	lsr	r23
    1668:	67 95       	ror	r22
    166a:	57 95       	ror	r21
    166c:	47 95       	ror	r20
    166e:	8a 01       	movw	r16, r20
    1670:	9b 01       	movw	r18, r22
    1672:	00 0f       	add	r16, r16
    1674:	11 1f       	adc	r17, r17
    1676:	22 1f       	adc	r18, r18
    1678:	33 1f       	adc	r19, r19
    167a:	00 0f       	add	r16, r16
    167c:	11 1f       	adc	r17, r17
    167e:	22 1f       	adc	r18, r18
    1680:	33 1f       	adc	r19, r19
    1682:	48 01       	movw	r8, r16
    1684:	59 01       	movw	r10, r18
    1686:	88 0c       	add	r8, r8
    1688:	99 1c       	adc	r9, r9
    168a:	aa 1c       	adc	r10, r10
    168c:	bb 1c       	adc	r11, r11
    168e:	88 0c       	add	r8, r8
    1690:	99 1c       	adc	r9, r9
    1692:	aa 1c       	adc	r10, r10
    1694:	bb 1c       	adc	r11, r11
    1696:	08 0d       	add	r16, r8
    1698:	19 1d       	adc	r17, r9
    169a:	2a 1d       	adc	r18, r10
    169c:	3b 1d       	adc	r19, r11
    169e:	40 0f       	add	r20, r16
    16a0:	51 1f       	adc	r21, r17
    16a2:	62 1f       	adc	r22, r18
    16a4:	73 1f       	adc	r23, r19
    16a6:	4c 59       	subi	r20, 0x9C	; 156
    16a8:	5f 4f       	sbci	r21, 0xFF	; 255
    16aa:	6f 4f       	sbci	r22, 0xFF	; 255
    16ac:	7f 4f       	sbci	r23, 0xFF	; 255
    16ae:	40 93 86 04 	sts	0x0486, r20
    16b2:	50 93 87 04 	sts	0x0487, r21
    16b6:	60 93 88 04 	sts	0x0488, r22
    16ba:	70 93 89 04 	sts	0x0489, r23
				
				sprintf(msg, "stare->2  distP=%lu", distP);
    16be:	bf 93       	push	r27
    16c0:	af 93       	push	r26
    16c2:	9f 93       	push	r25
    16c4:	8f 93       	push	r24
    16c6:	8f e8       	ldi	r24, 0x8F	; 143
    16c8:	92 e0       	ldi	r25, 0x02	; 2
    16ca:	9f 93       	push	r25
    16cc:	8f 93       	push	r24
    16ce:	8e 01       	movw	r16, r28
    16d0:	0f 5f       	subi	r16, 0xFF	; 255
    16d2:	1f 4f       	sbci	r17, 0xFF	; 255
    16d4:	1f 93       	push	r17
    16d6:	0f 93       	push	r16
    16d8:	0e 94 bf 19 	call	0x337e	; 0x337e <sprintf>
				BTTransmitStr(msg);
    16dc:	c8 01       	movw	r24, r16
    16de:	0e 94 a8 01 	call	0x350	; 0x350 <BTTransmitStr>
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	f8 94       	cli
    16e6:	de bf       	out	0x3e, r29	; 62
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	cd bf       	out	0x3d, r28	; 61
				
			}
			lastVFP1 = sideRight;
    16ec:	c0 92 8b 04 	sts	0x048B, r12
    16f0:	d0 92 8c 04 	sts	0x048C, r13
    16f4:	e0 92 8d 04 	sts	0x048D, r14
    16f8:	f0 92 8e 04 	sts	0x048E, r15
				stopEngines();
				return YES;
			}		
		break;
	}
	return NO;
    16fc:	80 e0       	ldi	r24, 0x00	; 0
				sprintf(msg, "stare->2  distP=%lu", distP);
				BTTransmitStr(msg);
				
			}
			lastVFP1 = sideRight;
		break;
    16fe:	fa c1       	rjmp	.+1012   	; 0x1af4 <findPlaces1+0x5ec>
		case 2:
			if(DISTANTA_PARCURSA > distP2){
    1700:	80 91 2b 04 	lds	r24, 0x042B
    1704:	90 91 2c 04 	lds	r25, 0x042C
    1708:	a0 91 2d 04 	lds	r26, 0x042D
    170c:	b0 91 2e 04 	lds	r27, 0x042E
    1710:	40 91 31 04 	lds	r20, 0x0431
    1714:	50 91 32 04 	lds	r21, 0x0432
    1718:	60 91 33 04 	lds	r22, 0x0433
    171c:	70 91 34 04 	lds	r23, 0x0434
    1720:	84 0f       	add	r24, r20
    1722:	95 1f       	adc	r25, r21
    1724:	a6 1f       	adc	r26, r22
    1726:	b7 1f       	adc	r27, r23
    1728:	b6 95       	lsr	r27
    172a:	a7 95       	ror	r26
    172c:	97 95       	ror	r25
    172e:	87 95       	ror	r24
    1730:	b6 95       	lsr	r27
    1732:	a7 95       	ror	r26
    1734:	97 95       	ror	r25
    1736:	87 95       	ror	r24
    1738:	ac 01       	movw	r20, r24
    173a:	bd 01       	movw	r22, r26
    173c:	44 0f       	add	r20, r20
    173e:	55 1f       	adc	r21, r21
    1740:	66 1f       	adc	r22, r22
    1742:	77 1f       	adc	r23, r23
    1744:	44 0f       	add	r20, r20
    1746:	55 1f       	adc	r21, r21
    1748:	66 1f       	adc	r22, r22
    174a:	77 1f       	adc	r23, r23
    174c:	8a 01       	movw	r16, r20
    174e:	9b 01       	movw	r18, r22
    1750:	00 0f       	add	r16, r16
    1752:	11 1f       	adc	r17, r17
    1754:	22 1f       	adc	r18, r18
    1756:	33 1f       	adc	r19, r19
    1758:	00 0f       	add	r16, r16
    175a:	11 1f       	adc	r17, r17
    175c:	22 1f       	adc	r18, r18
    175e:	33 1f       	adc	r19, r19
    1760:	40 0f       	add	r20, r16
    1762:	51 1f       	adc	r21, r17
    1764:	62 1f       	adc	r22, r18
    1766:	73 1f       	adc	r23, r19
    1768:	84 0f       	add	r24, r20
    176a:	95 1f       	adc	r25, r21
    176c:	a6 1f       	adc	r26, r22
    176e:	b7 1f       	adc	r27, r23
    1770:	00 91 86 04 	lds	r16, 0x0486
    1774:	10 91 87 04 	lds	r17, 0x0487
    1778:	20 91 88 04 	lds	r18, 0x0488
    177c:	30 91 89 04 	lds	r19, 0x0489
    1780:	08 17       	cp	r16, r24
    1782:	19 07       	cpc	r17, r25
    1784:	2a 07       	cpc	r18, r26
    1786:	3b 07       	cpc	r19, r27
    1788:	08 f0       	brcs	.+2      	; 0x178c <findPlaces1+0x284>
    178a:	b1 c1       	rjmp	.+866    	; 0x1aee <findPlaces1+0x5e6>
				stareFP1= 3;
    178c:	83 e0       	ldi	r24, 0x03	; 3
    178e:	80 93 85 04 	sts	0x0485, r24
				lastVFP1 = sideRight;
    1792:	c0 92 8b 04 	sts	0x048B, r12
    1796:	d0 92 8c 04 	sts	0x048C, r13
    179a:	e0 92 8d 04 	sts	0x048D, r14
    179e:	f0 92 8e 04 	sts	0x048E, r15
				
				sprintf(msg, "stare->3  DP=%lu", DISTANTA_PARCURSA);
    17a2:	80 91 2b 04 	lds	r24, 0x042B
    17a6:	90 91 2c 04 	lds	r25, 0x042C
    17aa:	a0 91 2d 04 	lds	r26, 0x042D
    17ae:	b0 91 2e 04 	lds	r27, 0x042E
    17b2:	40 91 31 04 	lds	r20, 0x0431
    17b6:	50 91 32 04 	lds	r21, 0x0432
    17ba:	60 91 33 04 	lds	r22, 0x0433
    17be:	70 91 34 04 	lds	r23, 0x0434
    17c2:	48 0f       	add	r20, r24
    17c4:	59 1f       	adc	r21, r25
    17c6:	6a 1f       	adc	r22, r26
    17c8:	7b 1f       	adc	r23, r27
    17ca:	76 95       	lsr	r23
    17cc:	67 95       	ror	r22
    17ce:	57 95       	ror	r21
    17d0:	47 95       	ror	r20
    17d2:	76 95       	lsr	r23
    17d4:	67 95       	ror	r22
    17d6:	57 95       	ror	r21
    17d8:	47 95       	ror	r20
    17da:	db 01       	movw	r26, r22
    17dc:	ca 01       	movw	r24, r20
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	aa 1f       	adc	r26, r26
    17e4:	bb 1f       	adc	r27, r27
    17e6:	88 0f       	add	r24, r24
    17e8:	99 1f       	adc	r25, r25
    17ea:	aa 1f       	adc	r26, r26
    17ec:	bb 1f       	adc	r27, r27
    17ee:	8c 01       	movw	r16, r24
    17f0:	9d 01       	movw	r18, r26
    17f2:	00 0f       	add	r16, r16
    17f4:	11 1f       	adc	r17, r17
    17f6:	22 1f       	adc	r18, r18
    17f8:	33 1f       	adc	r19, r19
    17fa:	00 0f       	add	r16, r16
    17fc:	11 1f       	adc	r17, r17
    17fe:	22 1f       	adc	r18, r18
    1800:	33 1f       	adc	r19, r19
    1802:	80 0f       	add	r24, r16
    1804:	91 1f       	adc	r25, r17
    1806:	a2 1f       	adc	r26, r18
    1808:	b3 1f       	adc	r27, r19
    180a:	84 0f       	add	r24, r20
    180c:	95 1f       	adc	r25, r21
    180e:	a6 1f       	adc	r26, r22
    1810:	b7 1f       	adc	r27, r23
    1812:	bf 93       	push	r27
    1814:	af 93       	push	r26
    1816:	9f 93       	push	r25
    1818:	8f 93       	push	r24
    181a:	83 ea       	ldi	r24, 0xA3	; 163
    181c:	92 e0       	ldi	r25, 0x02	; 2
    181e:	9f 93       	push	r25
    1820:	8f 93       	push	r24
    1822:	8e 01       	movw	r16, r28
    1824:	0f 5f       	subi	r16, 0xFF	; 255
    1826:	1f 4f       	sbci	r17, 0xFF	; 255
    1828:	1f 93       	push	r17
    182a:	0f 93       	push	r16
    182c:	0e 94 bf 19 	call	0x337e	; 0x337e <sprintf>
				BTTransmitStr(msg);
    1830:	c8 01       	movw	r24, r16
    1832:	0e 94 a8 01 	call	0x350	; 0x350 <BTTransmitStr>
    1836:	0f b6       	in	r0, 0x3f	; 63
    1838:	f8 94       	cli
    183a:	de bf       	out	0x3e, r29	; 62
    183c:	0f be       	out	0x3f, r0	; 63
    183e:	cd bf       	out	0x3d, r28	; 61
				stopEngines();
				return YES;
			}		
		break;
	}
	return NO;
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	58 c1       	rjmp	.+688    	; 0x1af4 <findPlaces1+0x5ec>
				sprintf(msg, "stare->3  DP=%lu", DISTANTA_PARCURSA);
				BTTransmitStr(msg);
			}
		break;
		case 3:
			if(sideRight > lastVFP1 + 100){
    1844:	80 91 8b 04 	lds	r24, 0x048B
    1848:	90 91 8c 04 	lds	r25, 0x048C
    184c:	a0 91 8d 04 	lds	r26, 0x048D
    1850:	b0 91 8e 04 	lds	r27, 0x048E
    1854:	8c 59       	subi	r24, 0x9C	; 156
    1856:	9f 4f       	sbci	r25, 0xFF	; 255
    1858:	af 4f       	sbci	r26, 0xFF	; 255
    185a:	bf 4f       	sbci	r27, 0xFF	; 255
    185c:	8c 15       	cp	r24, r12
    185e:	9d 05       	cpc	r25, r13
    1860:	ae 05       	cpc	r26, r14
    1862:	bf 05       	cpc	r27, r15
    1864:	08 f0       	brcs	.+2      	; 0x1868 <findPlaces1+0x360>
    1866:	ee c0       	rjmp	.+476    	; 0x1a44 <findPlaces1+0x53c>
				//stopEngines();
				distP = (DISTANTA_PARCURSA - distP)/2 + DISTANTA_PARCURSA;
    1868:	40 91 2b 04 	lds	r20, 0x042B
    186c:	50 91 2c 04 	lds	r21, 0x042C
    1870:	60 91 2d 04 	lds	r22, 0x042D
    1874:	70 91 2e 04 	lds	r23, 0x042E
    1878:	00 91 31 04 	lds	r16, 0x0431
    187c:	10 91 32 04 	lds	r17, 0x0432
    1880:	20 91 33 04 	lds	r18, 0x0433
    1884:	30 91 34 04 	lds	r19, 0x0434
    1888:	80 90 2b 04 	lds	r8, 0x042B
    188c:	90 90 2c 04 	lds	r9, 0x042C
    1890:	a0 90 2d 04 	lds	r10, 0x042D
    1894:	b0 90 2e 04 	lds	r11, 0x042E
    1898:	80 91 31 04 	lds	r24, 0x0431
    189c:	90 91 32 04 	lds	r25, 0x0432
    18a0:	a0 91 33 04 	lds	r26, 0x0433
    18a4:	b0 91 34 04 	lds	r27, 0x0434
    18a8:	04 0f       	add	r16, r20
    18aa:	15 1f       	adc	r17, r21
    18ac:	26 1f       	adc	r18, r22
    18ae:	37 1f       	adc	r19, r23
    18b0:	36 95       	lsr	r19
    18b2:	27 95       	ror	r18
    18b4:	17 95       	ror	r17
    18b6:	07 95       	ror	r16
    18b8:	36 95       	lsr	r19
    18ba:	27 95       	ror	r18
    18bc:	17 95       	ror	r17
    18be:	07 95       	ror	r16
    18c0:	b9 01       	movw	r22, r18
    18c2:	a8 01       	movw	r20, r16
    18c4:	44 0f       	add	r20, r20
    18c6:	55 1f       	adc	r21, r21
    18c8:	66 1f       	adc	r22, r22
    18ca:	77 1f       	adc	r23, r23
    18cc:	44 0f       	add	r20, r20
    18ce:	55 1f       	adc	r21, r21
    18d0:	66 1f       	adc	r22, r22
    18d2:	77 1f       	adc	r23, r23
    18d4:	2a 01       	movw	r4, r20
    18d6:	3b 01       	movw	r6, r22
    18d8:	44 0c       	add	r4, r4
    18da:	55 1c       	adc	r5, r5
    18dc:	66 1c       	adc	r6, r6
    18de:	77 1c       	adc	r7, r7
    18e0:	44 0c       	add	r4, r4
    18e2:	55 1c       	adc	r5, r5
    18e4:	66 1c       	adc	r6, r6
    18e6:	77 1c       	adc	r7, r7
    18e8:	44 0d       	add	r20, r4
    18ea:	55 1d       	adc	r21, r5
    18ec:	66 1d       	adc	r22, r6
    18ee:	77 1d       	adc	r23, r7
    18f0:	04 0f       	add	r16, r20
    18f2:	15 1f       	adc	r17, r21
    18f4:	26 1f       	adc	r18, r22
    18f6:	37 1f       	adc	r19, r23
    18f8:	40 90 81 04 	lds	r4, 0x0481
    18fc:	50 90 82 04 	lds	r5, 0x0482
    1900:	60 90 83 04 	lds	r6, 0x0483
    1904:	70 90 84 04 	lds	r7, 0x0484
    1908:	04 19       	sub	r16, r4
    190a:	15 09       	sbc	r17, r5
    190c:	26 09       	sbc	r18, r6
    190e:	37 09       	sbc	r19, r7
    1910:	36 95       	lsr	r19
    1912:	27 95       	ror	r18
    1914:	17 95       	ror	r17
    1916:	07 95       	ror	r16
    1918:	88 0d       	add	r24, r8
    191a:	99 1d       	adc	r25, r9
    191c:	aa 1d       	adc	r26, r10
    191e:	bb 1d       	adc	r27, r11
    1920:	b6 95       	lsr	r27
    1922:	a7 95       	ror	r26
    1924:	97 95       	ror	r25
    1926:	87 95       	ror	r24
    1928:	b6 95       	lsr	r27
    192a:	a7 95       	ror	r26
    192c:	97 95       	ror	r25
    192e:	87 95       	ror	r24
    1930:	ac 01       	movw	r20, r24
    1932:	bd 01       	movw	r22, r26
    1934:	44 0f       	add	r20, r20
    1936:	55 1f       	adc	r21, r21
    1938:	66 1f       	adc	r22, r22
    193a:	77 1f       	adc	r23, r23
    193c:	44 0f       	add	r20, r20
    193e:	55 1f       	adc	r21, r21
    1940:	66 1f       	adc	r22, r22
    1942:	77 1f       	adc	r23, r23
    1944:	4a 01       	movw	r8, r20
    1946:	5b 01       	movw	r10, r22
    1948:	88 0c       	add	r8, r8
    194a:	99 1c       	adc	r9, r9
    194c:	aa 1c       	adc	r10, r10
    194e:	bb 1c       	adc	r11, r11
    1950:	88 0c       	add	r8, r8
    1952:	99 1c       	adc	r9, r9
    1954:	aa 1c       	adc	r10, r10
    1956:	bb 1c       	adc	r11, r11
    1958:	48 0d       	add	r20, r8
    195a:	59 1d       	adc	r21, r9
    195c:	6a 1d       	adc	r22, r10
    195e:	7b 1d       	adc	r23, r11
    1960:	84 0f       	add	r24, r20
    1962:	95 1f       	adc	r25, r21
    1964:	a6 1f       	adc	r26, r22
    1966:	b7 1f       	adc	r27, r23
    1968:	80 0f       	add	r24, r16
    196a:	91 1f       	adc	r25, r17
    196c:	a2 1f       	adc	r26, r18
    196e:	b3 1f       	adc	r27, r19
    1970:	80 93 81 04 	sts	0x0481, r24
    1974:	90 93 82 04 	sts	0x0482, r25
    1978:	a0 93 83 04 	sts	0x0483, r26
    197c:	b0 93 84 04 	sts	0x0484, r27
				stareFP1 = 4;
    1980:	84 e0       	ldi	r24, 0x04	; 4
    1982:	80 93 85 04 	sts	0x0485, r24
				goBack(60, 40);
    1986:	68 e2       	ldi	r22, 0x28	; 40
    1988:	8c e3       	ldi	r24, 0x3C	; 60
    198a:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <goBack>
				sprintf(msg, "stare->4 distP=%lu DP=%lu", distP, DISTANTA_PARCURSA);
    198e:	80 91 2b 04 	lds	r24, 0x042B
    1992:	90 91 2c 04 	lds	r25, 0x042C
    1996:	a0 91 2d 04 	lds	r26, 0x042D
    199a:	b0 91 2e 04 	lds	r27, 0x042E
    199e:	40 91 31 04 	lds	r20, 0x0431
    19a2:	50 91 32 04 	lds	r21, 0x0432
    19a6:	60 91 33 04 	lds	r22, 0x0433
    19aa:	70 91 34 04 	lds	r23, 0x0434
    19ae:	48 0f       	add	r20, r24
    19b0:	59 1f       	adc	r21, r25
    19b2:	6a 1f       	adc	r22, r26
    19b4:	7b 1f       	adc	r23, r27
    19b6:	76 95       	lsr	r23
    19b8:	67 95       	ror	r22
    19ba:	57 95       	ror	r21
    19bc:	47 95       	ror	r20
    19be:	76 95       	lsr	r23
    19c0:	67 95       	ror	r22
    19c2:	57 95       	ror	r21
    19c4:	47 95       	ror	r20
    19c6:	db 01       	movw	r26, r22
    19c8:	ca 01       	movw	r24, r20
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	aa 1f       	adc	r26, r26
    19d0:	bb 1f       	adc	r27, r27
    19d2:	88 0f       	add	r24, r24
    19d4:	99 1f       	adc	r25, r25
    19d6:	aa 1f       	adc	r26, r26
    19d8:	bb 1f       	adc	r27, r27
    19da:	8c 01       	movw	r16, r24
    19dc:	9d 01       	movw	r18, r26
    19de:	00 0f       	add	r16, r16
    19e0:	11 1f       	adc	r17, r17
    19e2:	22 1f       	adc	r18, r18
    19e4:	33 1f       	adc	r19, r19
    19e6:	00 0f       	add	r16, r16
    19e8:	11 1f       	adc	r17, r17
    19ea:	22 1f       	adc	r18, r18
    19ec:	33 1f       	adc	r19, r19
    19ee:	80 0f       	add	r24, r16
    19f0:	91 1f       	adc	r25, r17
    19f2:	a2 1f       	adc	r26, r18
    19f4:	b3 1f       	adc	r27, r19
    19f6:	84 0f       	add	r24, r20
    19f8:	95 1f       	adc	r25, r21
    19fa:	a6 1f       	adc	r26, r22
    19fc:	b7 1f       	adc	r27, r23
    19fe:	bf 93       	push	r27
    1a00:	af 93       	push	r26
    1a02:	9f 93       	push	r25
    1a04:	8f 93       	push	r24
    1a06:	80 91 84 04 	lds	r24, 0x0484
    1a0a:	8f 93       	push	r24
    1a0c:	80 91 83 04 	lds	r24, 0x0483
    1a10:	8f 93       	push	r24
    1a12:	80 91 82 04 	lds	r24, 0x0482
    1a16:	8f 93       	push	r24
    1a18:	80 91 81 04 	lds	r24, 0x0481
    1a1c:	8f 93       	push	r24
    1a1e:	84 eb       	ldi	r24, 0xB4	; 180
    1a20:	92 e0       	ldi	r25, 0x02	; 2
    1a22:	9f 93       	push	r25
    1a24:	8f 93       	push	r24
    1a26:	8e 01       	movw	r16, r28
    1a28:	0f 5f       	subi	r16, 0xFF	; 255
    1a2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a2c:	1f 93       	push	r17
    1a2e:	0f 93       	push	r16
    1a30:	0e 94 bf 19 	call	0x337e	; 0x337e <sprintf>
				BTTransmitStr(msg);
    1a34:	c8 01       	movw	r24, r16
    1a36:	0e 94 a8 01 	call	0x350	; 0x350 <BTTransmitStr>
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	cd bf       	out	0x3d, r28	; 61
				
			}
			lastVFP1 = sideRight;
    1a44:	c0 92 8b 04 	sts	0x048B, r12
    1a48:	d0 92 8c 04 	sts	0x048C, r13
    1a4c:	e0 92 8d 04 	sts	0x048D, r14
    1a50:	f0 92 8e 04 	sts	0x048E, r15
				stopEngines();
				return YES;
			}		
		break;
	}
	return NO;
    1a54:	80 e0       	ldi	r24, 0x00	; 0
				sprintf(msg, "stare->4 distP=%lu DP=%lu", distP, DISTANTA_PARCURSA);
				BTTransmitStr(msg);
				
			}
			lastVFP1 = sideRight;
		break;
    1a56:	4e c0       	rjmp	.+156    	; 0x1af4 <findPlaces1+0x5ec>
		case 4:
			if(DISTANTA_PARCURSA > distP){
    1a58:	80 91 2b 04 	lds	r24, 0x042B
    1a5c:	90 91 2c 04 	lds	r25, 0x042C
    1a60:	a0 91 2d 04 	lds	r26, 0x042D
    1a64:	b0 91 2e 04 	lds	r27, 0x042E
    1a68:	40 91 31 04 	lds	r20, 0x0431
    1a6c:	50 91 32 04 	lds	r21, 0x0432
    1a70:	60 91 33 04 	lds	r22, 0x0433
    1a74:	70 91 34 04 	lds	r23, 0x0434
    1a78:	84 0f       	add	r24, r20
    1a7a:	95 1f       	adc	r25, r21
    1a7c:	a6 1f       	adc	r26, r22
    1a7e:	b7 1f       	adc	r27, r23
    1a80:	b6 95       	lsr	r27
    1a82:	a7 95       	ror	r26
    1a84:	97 95       	ror	r25
    1a86:	87 95       	ror	r24
    1a88:	b6 95       	lsr	r27
    1a8a:	a7 95       	ror	r26
    1a8c:	97 95       	ror	r25
    1a8e:	87 95       	ror	r24
    1a90:	ac 01       	movw	r20, r24
    1a92:	bd 01       	movw	r22, r26
    1a94:	44 0f       	add	r20, r20
    1a96:	55 1f       	adc	r21, r21
    1a98:	66 1f       	adc	r22, r22
    1a9a:	77 1f       	adc	r23, r23
    1a9c:	44 0f       	add	r20, r20
    1a9e:	55 1f       	adc	r21, r21
    1aa0:	66 1f       	adc	r22, r22
    1aa2:	77 1f       	adc	r23, r23
    1aa4:	6a 01       	movw	r12, r20
    1aa6:	7b 01       	movw	r14, r22
    1aa8:	cc 0c       	add	r12, r12
    1aaa:	dd 1c       	adc	r13, r13
    1aac:	ee 1c       	adc	r14, r14
    1aae:	ff 1c       	adc	r15, r15
    1ab0:	cc 0c       	add	r12, r12
    1ab2:	dd 1c       	adc	r13, r13
    1ab4:	ee 1c       	adc	r14, r14
    1ab6:	ff 1c       	adc	r15, r15
    1ab8:	4c 0d       	add	r20, r12
    1aba:	5d 1d       	adc	r21, r13
    1abc:	6e 1d       	adc	r22, r14
    1abe:	7f 1d       	adc	r23, r15
    1ac0:	84 0f       	add	r24, r20
    1ac2:	95 1f       	adc	r25, r21
    1ac4:	a6 1f       	adc	r26, r22
    1ac6:	b7 1f       	adc	r27, r23
    1ac8:	c0 90 81 04 	lds	r12, 0x0481
    1acc:	d0 90 82 04 	lds	r13, 0x0482
    1ad0:	e0 90 83 04 	lds	r14, 0x0483
    1ad4:	f0 90 84 04 	lds	r15, 0x0484
    1ad8:	c8 16       	cp	r12, r24
    1ada:	d9 06       	cpc	r13, r25
    1adc:	ea 06       	cpc	r14, r26
    1ade:	fb 06       	cpc	r15, r27
    1ae0:	40 f4       	brcc	.+16     	; 0x1af2 <findPlaces1+0x5ea>
				stopEngines();
    1ae2:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <stopEngines>
				return YES;
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	05 c0       	rjmp	.+10     	; 0x1af4 <findPlaces1+0x5ec>
			}		
		break;
	}
	return NO;
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	03 c0       	rjmp	.+6      	; 0x1af4 <findPlaces1+0x5ec>
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	01 c0       	rjmp	.+2      	; 0x1af4 <findPlaces1+0x5ec>
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	cc 59       	subi	r28, 0x9C	; 156
    1af6:	df 4f       	sbci	r29, 0xFF	; 255
    1af8:	0f b6       	in	r0, 0x3f	; 63
    1afa:	f8 94       	cli
    1afc:	de bf       	out	0x3e, r29	; 62
    1afe:	0f be       	out	0x3f, r0	; 63
    1b00:	cd bf       	out	0x3d, r28	; 61
    1b02:	df 91       	pop	r29
    1b04:	cf 91       	pop	r28
    1b06:	1f 91       	pop	r17
    1b08:	0f 91       	pop	r16
    1b0a:	ff 90       	pop	r15
    1b0c:	ef 90       	pop	r14
    1b0e:	df 90       	pop	r13
    1b10:	cf 90       	pop	r12
    1b12:	bf 90       	pop	r11
    1b14:	af 90       	pop	r10
    1b16:	9f 90       	pop	r9
    1b18:	8f 90       	pop	r8
    1b1a:	7f 90       	pop	r7
    1b1c:	6f 90       	pop	r6
    1b1e:	5f 90       	pop	r5
    1b20:	4f 90       	pop	r4
    1b22:	08 95       	ret

00001b24 <initFindPlaces1>:
uint8_t stareFP1;
uint8_t findPlaces1();
uint32_t lastVFP1, distP, distP2;

void initFindPlaces1(){
	stareFP1 = 0;
    1b24:	10 92 85 04 	sts	0x0485, r1
	lastVFP1=0;
    1b28:	10 92 8b 04 	sts	0x048B, r1
    1b2c:	10 92 8c 04 	sts	0x048C, r1
    1b30:	10 92 8d 04 	sts	0x048D, r1
    1b34:	10 92 8e 04 	sts	0x048E, r1
	distP=0;
    1b38:	10 92 81 04 	sts	0x0481, r1
    1b3c:	10 92 82 04 	sts	0x0482, r1
    1b40:	10 92 83 04 	sts	0x0483, r1
    1b44:	10 92 84 04 	sts	0x0484, r1
	distP2=0;
    1b48:	10 92 86 04 	sts	0x0486, r1
    1b4c:	10 92 87 04 	sts	0x0487, r1
    1b50:	10 92 88 04 	sts	0x0488, r1
    1b54:	10 92 89 04 	sts	0x0489, r1
	addEntryIfNotExists(&findPlaces1, 150 * 1000UL, Periodic);
    1b58:	21 e0       	ldi	r18, 0x01	; 1
    1b5a:	40 ef       	ldi	r20, 0xF0	; 240
    1b5c:	59 e4       	ldi	r21, 0x49	; 73
    1b5e:	62 e0       	ldi	r22, 0x02	; 2
    1b60:	70 e0       	ldi	r23, 0x00	; 0
    1b62:	84 e8       	ldi	r24, 0x84	; 132
    1b64:	9a e0       	ldi	r25, 0x0A	; 10
    1b66:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <addEntryIfNotExists>
    1b6a:	08 95       	ret

00001b6c <main>:
#include "utile.h"
#include "Settings.h"

int main(void)
{
	initBTProtocol();
    1b6c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <initBTProtocol>
	initTiming();
    1b70:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <initTiming>
	initEngines();
    1b74:	0e 94 00 05 	call	0xa00	; 0xa00 <initEngines>
	initLights();
    1b78:	0e 94 80 07 	call	0xf00	; 0xf00 <initLights>
	initSensors();
    1b7c:	0e 94 19 09 	call	0x1232	; 0x1232 <initSensors>
	initEncoders();
    1b80:	0e 94 b9 04 	call	0x972	; 0x972 <initEncoders>
	sei();
    1b84:	78 94       	sei
	
	setDebugging(1);
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <setDebugging>
	setReadingSensors(1);
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <setReadingSensors>
	
	//addEntryIfNotExists(&blinkLeds, 500*1000UL, Periodic);
	//addEntryIfNotExists(&blinkA1, 500UL*1000UL, Periodic);
	BTTransmitStr("  >>>main start<<<  ");	
    1b92:	8e ee       	ldi	r24, 0xEE	; 238
    1b94:	92 e0       	ldi	r25, 0x02	; 2
    1b96:	0e 94 a8 01 	call	0x350	; 0x350 <BTTransmitStr>
	sendCarStartedSignal();
    1b9a:	0e 94 bb 02 	call	0x576	; 0x576 <sendCarStartedSignal>
    while(1)
    {
		checkTimeQueue();
    1b9e:	0e 94 2a 11 	call	0x2254	; 0x2254 <checkTimeQueue>
    1ba2:	fd cf       	rjmp	.-6      	; 0x1b9e <main+0x32>

00001ba4 <setDebugging>:
#define LAST_DEBUGGING (settings & 16)

volatile uint8_t settings = 0;

void setDebugging(uint8_t val){
	setBit(settings, (val&1), 0);	
    1ba4:	20 91 13 04 	lds	r18, 0x0413
    1ba8:	90 91 13 04 	lds	r25, 0x0413
    1bac:	82 27       	eor	r24, r18
    1bae:	28 2f       	mov	r18, r24
    1bb0:	21 70       	andi	r18, 0x01	; 1
    1bb2:	92 27       	eor	r25, r18
    1bb4:	90 93 13 04 	sts	0x0413, r25
    1bb8:	08 95       	ret

00001bba <setReadingSensors>:
}
void setReadingSensors(uint8_t val){
	setBit(settings, (val&1), 1);
    1bba:	30 91 13 04 	lds	r19, 0x0413
    1bbe:	20 91 13 04 	lds	r18, 0x0413
    1bc2:	98 2f       	mov	r25, r24
    1bc4:	91 70       	andi	r25, 0x01	; 1
    1bc6:	91 95       	neg	r25
    1bc8:	93 27       	eor	r25, r19
    1bca:	92 70       	andi	r25, 0x02	; 2
    1bcc:	92 27       	eor	r25, r18
    1bce:	90 93 13 04 	sts	0x0413, r25
	setSensorsRead(val);
    1bd2:	0e 94 9d 08 	call	0x113a	; 0x113a <setSensorsRead>
    1bd6:	08 95       	ret

00001bd8 <setSendingInfos>:
}
void setSendingInfos(uint8_t val){
	setBit(settings, (val&1), 2);
    1bd8:	30 91 13 04 	lds	r19, 0x0413
    1bdc:	20 91 13 04 	lds	r18, 0x0413
    1be0:	98 2f       	mov	r25, r24
    1be2:	91 70       	andi	r25, 0x01	; 1
    1be4:	91 95       	neg	r25
    1be6:	93 27       	eor	r25, r19
    1be8:	94 70       	andi	r25, 0x04	; 4
    1bea:	92 27       	eor	r25, r18
    1bec:	90 93 13 04 	sts	0x0413, r25
	setSendingDistAndTime(val);
    1bf0:	0e 94 cb 04 	call	0x996	; 0x996 <setSendingDistAndTime>
    1bf4:	08 95       	ret

00001bf6 <setSendingSensors>:
}
void setSendingSensors(uint8_t val){
	setBit(settings, (val&1), 3);
    1bf6:	30 91 13 04 	lds	r19, 0x0413
    1bfa:	20 91 13 04 	lds	r18, 0x0413
    1bfe:	98 2f       	mov	r25, r24
    1c00:	91 70       	andi	r25, 0x01	; 1
    1c02:	91 95       	neg	r25
    1c04:	93 27       	eor	r25, r19
    1c06:	98 70       	andi	r25, 0x08	; 8
    1c08:	92 27       	eor	r25, r18
    1c0a:	90 93 13 04 	sts	0x0413, r25
	setSensorsSend(val);
    1c0e:	0e 94 b1 08 	call	0x1162	; 0x1162 <setSensorsSend>
    1c12:	08 95       	ret

00001c14 <toggleDebuggingOff>:
}

void toggleDebuggingOff(uint8_t val){
	if(!val){
    1c14:	81 11       	cpse	r24, r1
    1c16:	11 c0       	rjmp	.+34     	; 0x1c3a <toggleDebuggingOff+0x26>
		if(DEBUGGING){
    1c18:	80 91 13 04 	lds	r24, 0x0413
    1c1c:	80 ff       	sbrs	r24, 0
    1c1e:	1c c0       	rjmp	.+56     	; 0x1c58 <toggleDebuggingOff+0x44>
			setDebugging(0);
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <setDebugging>
			setBit(settings, 1, 4);
    1c26:	80 91 13 04 	lds	r24, 0x0413
    1c2a:	90 91 13 04 	lds	r25, 0x0413
    1c2e:	80 95       	com	r24
    1c30:	80 71       	andi	r24, 0x10	; 16
    1c32:	89 27       	eor	r24, r25
    1c34:	80 93 13 04 	sts	0x0413, r24
    1c38:	08 95       	ret
		}
	}
	else
		if(LAST_DEBUGGING){
    1c3a:	80 91 13 04 	lds	r24, 0x0413
    1c3e:	84 ff       	sbrs	r24, 4
    1c40:	0b c0       	rjmp	.+22     	; 0x1c58 <toggleDebuggingOff+0x44>
			setDebugging(1);
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <setDebugging>
			setBit(settings, 0, 4);
    1c48:	80 91 13 04 	lds	r24, 0x0413
    1c4c:	90 91 13 04 	lds	r25, 0x0413
    1c50:	80 71       	andi	r24, 0x10	; 16
    1c52:	89 27       	eor	r24, r25
    1c54:	80 93 13 04 	sts	0x0413, r24
    1c58:	08 95       	ret

00001c5a <getSettings>:
		}
}

void getSettings(){
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	00 d0       	rcall	.+0      	; 0x1c60 <getSettings+0x6>
    1c60:	00 d0       	rcall	.+0      	; 0x1c62 <getSettings+0x8>
    1c62:	00 d0       	rcall	.+0      	; 0x1c64 <getSettings+0xa>
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
	uint8_t msgtt[6];
	msgtt[0] = StartByte;
    1c68:	8a ea       	ldi	r24, 0xAA	; 170
    1c6a:	89 83       	std	Y+1, r24	; 0x01
	msgtt[1] = ICarSettings;
    1c6c:	84 e1       	ldi	r24, 0x14	; 20
    1c6e:	8a 83       	std	Y+2, r24	; 0x02
	msgtt[2] = 1;
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	8b 83       	std	Y+3, r24	; 0x03
	msgtt[3] = settings;
    1c74:	80 91 13 04 	lds	r24, 0x0413
    1c78:	8c 83       	std	Y+4, r24	; 0x04
	msgtt[4] = EndByte;
    1c7a:	85 e5       	ldi	r24, 0x55	; 85
    1c7c:	8d 83       	std	Y+5, r24	; 0x05
	BTTransmitMsgU(msgtt, 5);
    1c7e:	65 e0       	ldi	r22, 0x05	; 5
    1c80:	ce 01       	movw	r24, r28
    1c82:	01 96       	adiw	r24, 0x01	; 1
    1c84:	0e 94 a0 02 	call	0x540	; 0x540 <BTTransmitMsgU>
}
    1c88:	26 96       	adiw	r28, 0x06	; 6
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	f8 94       	cli
    1c8e:	de bf       	out	0x3e, r29	; 62
    1c90:	0f be       	out	0x3f, r0	; 63
    1c92:	cd bf       	out	0x3d, r28	; 61
    1c94:	df 91       	pop	r29
    1c96:	cf 91       	pop	r28
    1c98:	08 95       	ret

00001c9a <setSettings>:
void setSettings(uint8_t _setting){
    1c9a:	cf 93       	push	r28
    1c9c:	c8 2f       	mov	r28, r24
	setDebugging( _setting & 1 );
    1c9e:	81 70       	andi	r24, 0x01	; 1
    1ca0:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <setDebugging>
	setReadingSensors( (_setting>>1) & 1 );
    1ca4:	c1 fb       	bst	r28, 1
    1ca6:	88 27       	eor	r24, r24
    1ca8:	80 f9       	bld	r24, 0
    1caa:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <setReadingSensors>
	setSendingInfos( (_setting>>2) & 1 );
    1cae:	c2 fb       	bst	r28, 2
    1cb0:	88 27       	eor	r24, r24
    1cb2:	80 f9       	bld	r24, 0
    1cb4:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <setSendingInfos>
	setSendingSensors( (_setting >>3) & 1);
    1cb8:	c3 fb       	bst	r28, 3
    1cba:	88 27       	eor	r24, r24
    1cbc:	80 f9       	bld	r24, 0
    1cbe:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <setSendingSensors>
	getSettings();
    1cc2:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <getSettings>
}
    1cc6:	cf 91       	pop	r28
    1cc8:	08 95       	ret

00001cca <initTimeQueue>:
}
volatile queueEntry TimerQueue[TimingQueueSize+1];
volatile uint8_t TimingQueueTop;


void initTimeQueue(){
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	// initializez toti pointerii cu 0, adica pe fiecare pozitie din coada e o structura neocupata
	for(i=0;i<TimingQueueSize;i++)
		TimerQueue[i].pointerFct = NULL;
    1cce:	fc 01       	movw	r30, r24
    1cd0:	ee 0f       	add	r30, r30
    1cd2:	ff 1f       	adc	r31, r31
    1cd4:	9c 01       	movw	r18, r24
    1cd6:	22 0f       	add	r18, r18
    1cd8:	33 1f       	adc	r19, r19
    1cda:	22 0f       	add	r18, r18
    1cdc:	33 1f       	adc	r19, r19
    1cde:	22 0f       	add	r18, r18
    1ce0:	33 1f       	adc	r19, r19
    1ce2:	e2 0f       	add	r30, r18
    1ce4:	f3 1f       	adc	r31, r19
    1ce6:	e8 56       	subi	r30, 0x68	; 104
    1ce8:	fb 4f       	sbci	r31, 0xFB	; 251
    1cea:	11 86       	std	Z+9, r1	; 0x09
    1cec:	10 86       	std	Z+8, r1	; 0x08
    1cee:	01 96       	adiw	r24, 0x01	; 1


void initTimeQueue(){
	uint8_t i;
	// initializez toti pointerii cu 0, adica pe fiecare pozitie din coada e o structura neocupata
	for(i=0;i<TimingQueueSize;i++)
    1cf0:	84 31       	cpi	r24, 0x14	; 20
    1cf2:	91 05       	cpc	r25, r1
    1cf4:	61 f7       	brne	.-40     	; 0x1cce <initTimeQueue+0x4>
		TimerQueue[i].pointerFct = NULL;
	TimingQueueTop = 0;
    1cf6:	10 92 6a 05 	sts	0x056A, r1
    1cfa:	08 95       	ret

00001cfc <initTiming>:
	//blinkA1();
}

void initTiming()
{
	timerClocks=0;
    1cfc:	10 92 94 04 	sts	0x0494, r1
    1d00:	10 92 95 04 	sts	0x0495, r1
    1d04:	10 92 96 04 	sts	0x0496, r1
    1d08:	10 92 97 04 	sts	0x0497, r1
	initTimeQueue();
    1d0c:	0e 94 65 0e 	call	0x1cca	; 0x1cca <initTimeQueue>
	TIMSK1|=(1<<TOIE1);
    1d10:	ef e6       	ldi	r30, 0x6F	; 111
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	81 60       	ori	r24, 0x01	; 1
    1d18:	80 83       	st	Z, r24
	TCNT1 = 0x00;
    1d1a:	10 92 85 00 	sts	0x0085, r1
    1d1e:	10 92 84 00 	sts	0x0084, r1
	TCCR1B = 0x01;
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	80 93 81 00 	sts	0x0081, r24
    1d28:	08 95       	ret

00001d2a <addEntryToTimerQueue>:
		TimerQueue[i].pointerFct = NULL;
	TimingQueueTop = 0;
}

// delay e in microsecunde (10^-6 secunde)
void addEntryToTimerQueue(uint8_t (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
    1d2a:	0f 93       	push	r16
    1d2c:	1f 93       	push	r17
    1d2e:	cf 93       	push	r28
    1d30:	df 93       	push	r29
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	ce 56       	subi	r28, 0x6E	; 110
    1d38:	d1 09       	sbc	r29, r1
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	de bf       	out	0x3e, r29	; 62
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	cd bf       	out	0x3d, r28	; 61
	cli(); // dezactivare intreruperi
    1d44:	f8 94       	cli
	
	
	//construire entry pentru functia curenta 
	queueEntry thisEntry;
	thisEntry.delay = _delay;
	thisEntry.repeatDelay = _repeat ? _delay : 0;
    1d46:	21 11       	cpse	r18, r1
    1d48:	05 c0       	rjmp	.+10     	; 0x1d54 <addEntryToTimerQueue+0x2a>
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	a0 e0       	ldi	r26, 0x00	; 0
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	e0 e0       	ldi	r30, 0x00	; 0
    1d52:	04 c0       	rjmp	.+8      	; 0x1d5c <addEntryToTimerQueue+0x32>
    1d54:	b4 2f       	mov	r27, r20
    1d56:	a5 2f       	mov	r26, r21
    1d58:	f6 2f       	mov	r31, r22
    1d5a:	e7 2f       	mov	r30, r23
	thisEntry.pointerFct = _theFct;	
	TimerQueue[TimingQueueTop] = thisEntry;
    1d5c:	20 91 6a 05 	lds	r18, 0x056A
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	49 83       	std	Y+1, r20	; 0x01
    1d64:	5a 83       	std	Y+2, r21	; 0x02
    1d66:	6b 83       	std	Y+3, r22	; 0x03
    1d68:	7c 83       	std	Y+4, r23	; 0x04
    1d6a:	bd 83       	std	Y+5, r27	; 0x05
    1d6c:	ae 83       	std	Y+6, r26	; 0x06
    1d6e:	ff 83       	std	Y+7, r31	; 0x07
    1d70:	e8 87       	std	Y+8, r30	; 0x08
    1d72:	9a 87       	std	Y+10, r25	; 0x0a
    1d74:	89 87       	std	Y+9, r24	; 0x09
    1d76:	d9 01       	movw	r26, r18
    1d78:	aa 0f       	add	r26, r26
    1d7a:	bb 1f       	adc	r27, r27
    1d7c:	22 0f       	add	r18, r18
    1d7e:	33 1f       	adc	r19, r19
    1d80:	22 0f       	add	r18, r18
    1d82:	33 1f       	adc	r19, r19
    1d84:	22 0f       	add	r18, r18
    1d86:	33 1f       	adc	r19, r19
    1d88:	a2 0f       	add	r26, r18
    1d8a:	b3 1f       	adc	r27, r19
    1d8c:	a8 56       	subi	r26, 0x68	; 104
    1d8e:	bb 4f       	sbci	r27, 0xFB	; 251
    1d90:	8a e0       	ldi	r24, 0x0A	; 10
    1d92:	fe 01       	movw	r30, r28
    1d94:	31 96       	adiw	r30, 0x01	; 1
    1d96:	01 90       	ld	r0, Z+
    1d98:	0d 92       	st	X+, r0
    1d9a:	8a 95       	dec	r24
    1d9c:	e1 f7       	brne	.-8      	; 0x1d96 <addEntryToTimerQueue+0x6c>
	
	TimingQueueTop++;
    1d9e:	80 91 6a 05 	lds	r24, 0x056A
    1da2:	8f 5f       	subi	r24, 0xFF	; 255
    1da4:	80 93 6a 05 	sts	0x056A, r24
	
	if(DEBUGGING){
    1da8:	80 91 13 04 	lds	r24, 0x0413
    1dac:	80 ff       	sbrs	r24, 0
    1dae:	33 c0       	rjmp	.+102    	; 0x1e16 <addEntryToTimerQueue+0xec>
		char msg[100];		
		sprintf(msg, "Entry adaugat in coada! la index %d si cu delay: %lu", TimingQueueTop-1, TimerQueue[TimingQueueTop-1].delay);
    1db0:	80 91 6a 05 	lds	r24, 0x056A
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	fc 01       	movw	r30, r24
    1dba:	ee 0f       	add	r30, r30
    1dbc:	ff 1f       	adc	r31, r31
    1dbe:	88 0f       	add	r24, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	88 0f       	add	r24, r24
    1dc4:	99 1f       	adc	r25, r25
    1dc6:	88 0f       	add	r24, r24
    1dc8:	99 1f       	adc	r25, r25
    1dca:	e8 0f       	add	r30, r24
    1dcc:	f9 1f       	adc	r31, r25
    1dce:	e8 56       	subi	r30, 0x68	; 104
    1dd0:	fb 4f       	sbci	r31, 0xFB	; 251
    1dd2:	80 81       	ld	r24, Z
    1dd4:	91 81       	ldd	r25, Z+1	; 0x01
    1dd6:	a2 81       	ldd	r26, Z+2	; 0x02
    1dd8:	b3 81       	ldd	r27, Z+3	; 0x03
    1dda:	20 91 6a 05 	lds	r18, 0x056A
    1dde:	bf 93       	push	r27
    1de0:	af 93       	push	r26
    1de2:	9f 93       	push	r25
    1de4:	8f 93       	push	r24
    1de6:	82 2f       	mov	r24, r18
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	9f 93       	push	r25
    1dee:	8f 93       	push	r24
    1df0:	83 e0       	ldi	r24, 0x03	; 3
    1df2:	93 e0       	ldi	r25, 0x03	; 3
    1df4:	9f 93       	push	r25
    1df6:	8f 93       	push	r24
    1df8:	8e 01       	movw	r16, r28
    1dfa:	05 5f       	subi	r16, 0xF5	; 245
    1dfc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfe:	1f 93       	push	r17
    1e00:	0f 93       	push	r16
    1e02:	0e 94 bf 19 	call	0x337e	; 0x337e <sprintf>
		BTTransmitStr(msg);
    1e06:	c8 01       	movw	r24, r16
    1e08:	0e 94 a8 01 	call	0x350	; 0x350 <BTTransmitStr>
    1e0c:	0f b6       	in	r0, 0x3f	; 63
    1e0e:	f8 94       	cli
    1e10:	de bf       	out	0x3e, r29	; 62
    1e12:	0f be       	out	0x3f, r0	; 63
    1e14:	cd bf       	out	0x3d, r28	; 61
	}
	sei();
    1e16:	78 94       	sei
}
    1e18:	c2 59       	subi	r28, 0x92	; 146
    1e1a:	df 4f       	sbci	r29, 0xFF	; 255
    1e1c:	0f b6       	in	r0, 0x3f	; 63
    1e1e:	f8 94       	cli
    1e20:	de bf       	out	0x3e, r29	; 62
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	cd bf       	out	0x3d, r28	; 61
    1e26:	df 91       	pop	r29
    1e28:	cf 91       	pop	r28
    1e2a:	1f 91       	pop	r17
    1e2c:	0f 91       	pop	r16
    1e2e:	08 95       	ret

00001e30 <existsEntryInTimerQueue>:
	return c;
}

uint8_t existsEntryInTimerQueue(uint8_t (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
    1e30:	20 91 6a 05 	lds	r18, 0x056A
    1e34:	22 23       	and	r18, r18
    1e36:	21 f1       	breq	.+72     	; 0x1e80 <existsEntryInTimerQueue+0x50>
		if(TimerQueue[i].pointerFct == _theFct){			
    1e38:	20 91 a0 04 	lds	r18, 0x04A0
    1e3c:	30 91 a1 04 	lds	r19, 0x04A1
    1e40:	28 17       	cp	r18, r24
    1e42:	39 07       	cpc	r19, r25
    1e44:	f9 f0       	breq	.+62     	; 0x1e84 <existsEntryInTimerQueue+0x54>
	return c;
}

uint8_t existsEntryInTimerQueue(uint8_t (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
    1e46:	40 e0       	ldi	r20, 0x00	; 0
    1e48:	14 c0       	rjmp	.+40     	; 0x1e72 <existsEntryInTimerQueue+0x42>
		if(TimerQueue[i].pointerFct == _theFct){			
    1e4a:	24 2f       	mov	r18, r20
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	f9 01       	movw	r30, r18
    1e50:	ee 0f       	add	r30, r30
    1e52:	ff 1f       	adc	r31, r31
    1e54:	22 0f       	add	r18, r18
    1e56:	33 1f       	adc	r19, r19
    1e58:	22 0f       	add	r18, r18
    1e5a:	33 1f       	adc	r19, r19
    1e5c:	22 0f       	add	r18, r18
    1e5e:	33 1f       	adc	r19, r19
    1e60:	e2 0f       	add	r30, r18
    1e62:	f3 1f       	adc	r31, r19
    1e64:	e8 56       	subi	r30, 0x68	; 104
    1e66:	fb 4f       	sbci	r31, 0xFB	; 251
    1e68:	20 85       	ldd	r18, Z+8	; 0x08
    1e6a:	31 85       	ldd	r19, Z+9	; 0x09
    1e6c:	28 17       	cp	r18, r24
    1e6e:	39 07       	cpc	r19, r25
    1e70:	59 f0       	breq	.+22     	; 0x1e88 <existsEntryInTimerQueue+0x58>
	return c;
}

uint8_t existsEntryInTimerQueue(uint8_t (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
    1e72:	4f 5f       	subi	r20, 0xFF	; 255
    1e74:	20 91 6a 05 	lds	r18, 0x056A
    1e78:	42 17       	cp	r20, r18
    1e7a:	38 f3       	brcs	.-50     	; 0x1e4a <existsEntryInTimerQueue+0x1a>
		if(TimerQueue[i].pointerFct == _theFct){			
			return YES;
		}
	}
	return NO;
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	08 95       	ret
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	08 95       	ret

uint8_t existsEntryInTimerQueue(uint8_t (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
		if(TimerQueue[i].pointerFct == _theFct){			
			return YES;
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	08 95       	ret
    1e88:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return NO;
}
    1e8a:	08 95       	ret

00001e8c <addEntryIfNotExists>:

void addEntryIfNotExists(uint8_t (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
    1e8c:	0f 93       	push	r16
    1e8e:	1f 93       	push	r17
    1e90:	cf 93       	push	r28
    1e92:	df 93       	push	r29
    1e94:	c2 2f       	mov	r28, r18
	cli();
    1e96:	f8 94       	cli
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
    1e98:	20 91 6a 05 	lds	r18, 0x056A
    1e9c:	22 23       	and	r18, r18
    1e9e:	09 f4       	brne	.+2      	; 0x1ea2 <addEntryIfNotExists+0x16>
    1ea0:	59 c0       	rjmp	.+178    	; 0x1f54 <addEntryIfNotExists+0xc8>
		if(TimerQueue[i].pointerFct == _theFct){
    1ea2:	e0 91 a0 04 	lds	r30, 0x04A0
    1ea6:	f0 91 a1 04 	lds	r31, 0x04A1
    1eaa:	e8 17       	cp	r30, r24
    1eac:	f9 07       	cpc	r31, r25
    1eae:	09 f0       	breq	.+2      	; 0x1eb2 <addEntryIfNotExists+0x26>
    1eb0:	49 c0       	rjmp	.+146    	; 0x1f44 <addEntryIfNotExists+0xb8>
    1eb2:	18 c0       	rjmp	.+48     	; 0x1ee4 <addEntryIfNotExists+0x58>
    1eb4:	ed 2f       	mov	r30, r29
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	8f 01       	movw	r16, r30
    1eba:	00 0f       	add	r16, r16
    1ebc:	11 1f       	adc	r17, r17
    1ebe:	df 01       	movw	r26, r30
    1ec0:	aa 0f       	add	r26, r26
    1ec2:	bb 1f       	adc	r27, r27
    1ec4:	aa 0f       	add	r26, r26
    1ec6:	bb 1f       	adc	r27, r27
    1ec8:	aa 0f       	add	r26, r26
    1eca:	bb 1f       	adc	r27, r27
    1ecc:	a0 0f       	add	r26, r16
    1ece:	b1 1f       	adc	r27, r17
    1ed0:	a8 56       	subi	r26, 0x68	; 104
    1ed2:	bb 4f       	sbci	r27, 0xFB	; 251
    1ed4:	18 96       	adiw	r26, 0x08	; 8
    1ed6:	0d 90       	ld	r0, X+
    1ed8:	bc 91       	ld	r27, X
    1eda:	a0 2d       	mov	r26, r0
    1edc:	a8 17       	cp	r26, r24
    1ede:	b9 07       	cpc	r27, r25
    1ee0:	91 f5       	brne	.+100    	; 0x1f46 <addEntryIfNotExists+0xba>
    1ee2:	03 c0       	rjmp	.+6      	; 0x1eea <addEntryIfNotExists+0x5e>
    1ee4:	e0 e0       	ldi	r30, 0x00	; 0
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
}

void addEntryIfNotExists(uint8_t (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
	cli();
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
    1ee8:	d0 e0       	ldi	r29, 0x00	; 0
		if(TimerQueue[i].pointerFct == _theFct){
			TimerQueue[i].delay = _delay;
    1eea:	9f 01       	movw	r18, r30
    1eec:	22 0f       	add	r18, r18
    1eee:	33 1f       	adc	r19, r19
    1ef0:	22 0f       	add	r18, r18
    1ef2:	33 1f       	adc	r19, r19
    1ef4:	22 0f       	add	r18, r18
    1ef6:	33 1f       	adc	r19, r19
    1ef8:	df 01       	movw	r26, r30
    1efa:	aa 0f       	add	r26, r26
    1efc:	bb 1f       	adc	r27, r27
    1efe:	a2 0f       	add	r26, r18
    1f00:	b3 1f       	adc	r27, r19
    1f02:	a8 56       	subi	r26, 0x68	; 104
    1f04:	bb 4f       	sbci	r27, 0xFB	; 251
    1f06:	4d 93       	st	X+, r20
    1f08:	5d 93       	st	X+, r21
    1f0a:	6d 93       	st	X+, r22
    1f0c:	7c 93       	st	X, r23
    1f0e:	13 97       	sbiw	r26, 0x03	; 3
			TimerQueue[i].repeatDelay = _repeat?_delay:0;
    1f10:	c1 11       	cpse	r28, r1
    1f12:	04 c0       	rjmp	.+8      	; 0x1f1c <addEntryIfNotExists+0x90>
    1f14:	00 e0       	ldi	r16, 0x00	; 0
    1f16:	10 e0       	ldi	r17, 0x00	; 0
    1f18:	98 01       	movw	r18, r16
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <addEntryIfNotExists+0x94>
    1f1c:	8a 01       	movw	r16, r20
    1f1e:	9b 01       	movw	r18, r22
    1f20:	df 01       	movw	r26, r30
    1f22:	aa 0f       	add	r26, r26
    1f24:	bb 1f       	adc	r27, r27
    1f26:	ee 0f       	add	r30, r30
    1f28:	ff 1f       	adc	r31, r31
    1f2a:	ee 0f       	add	r30, r30
    1f2c:	ff 1f       	adc	r31, r31
    1f2e:	ee 0f       	add	r30, r30
    1f30:	ff 1f       	adc	r31, r31
    1f32:	ea 0f       	add	r30, r26
    1f34:	fb 1f       	adc	r31, r27
    1f36:	e8 56       	subi	r30, 0x68	; 104
    1f38:	fb 4f       	sbci	r31, 0xFB	; 251
    1f3a:	04 83       	std	Z+4, r16	; 0x04
    1f3c:	15 83       	std	Z+5, r17	; 0x05
    1f3e:	26 83       	std	Z+6, r18	; 0x06
    1f40:	37 83       	std	Z+7, r19	; 0x07
			break;
    1f42:	09 c0       	rjmp	.+18     	; 0x1f56 <addEntryIfNotExists+0xca>
}

void addEntryIfNotExists(uint8_t (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
	cli();
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
    1f44:	d0 e0       	ldi	r29, 0x00	; 0
    1f46:	df 5f       	subi	r29, 0xFF	; 255
    1f48:	20 91 6a 05 	lds	r18, 0x056A
    1f4c:	d2 17       	cp	r29, r18
    1f4e:	08 f4       	brcc	.+2      	; 0x1f52 <addEntryIfNotExists+0xc6>
    1f50:	b1 cf       	rjmp	.-158    	; 0x1eb4 <addEntryIfNotExists+0x28>
    1f52:	01 c0       	rjmp	.+2      	; 0x1f56 <addEntryIfNotExists+0xca>
    1f54:	d0 e0       	ldi	r29, 0x00	; 0
			TimerQueue[i].delay = _delay;
			TimerQueue[i].repeatDelay = _repeat?_delay:0;
			break;
		}
	}	
	if(i==TimingQueueTop)
    1f56:	20 91 6a 05 	lds	r18, 0x056A
    1f5a:	d2 13       	cpse	r29, r18
    1f5c:	03 c0       	rjmp	.+6      	; 0x1f64 <addEntryIfNotExists+0xd8>
		addEntryToTimerQueue(_theFct, _delay, _repeat);
    1f5e:	2c 2f       	mov	r18, r28
    1f60:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <addEntryToTimerQueue>
	sei();
    1f64:	78 94       	sei
}
    1f66:	df 91       	pop	r29
    1f68:	cf 91       	pop	r28
    1f6a:	1f 91       	pop	r17
    1f6c:	0f 91       	pop	r16
    1f6e:	08 95       	ret

00001f70 <timePassed>:


//se apeleaza din intrerupere (cate microsecunde au trecut)
//pentru fiecare functie(valida) din queue se scade din delay numarul de microsecunde care a trecut

void timePassed(uint32_t passed_us){
    1f70:	8f 92       	push	r8
    1f72:	9f 92       	push	r9
    1f74:	af 92       	push	r10
    1f76:	bf 92       	push	r11
    1f78:	ff 92       	push	r15
    1f7a:	0f 93       	push	r16
    1f7c:	1f 93       	push	r17
    1f7e:	cf 93       	push	r28
    1f80:	df 93       	push	r29
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
    1f82:	20 91 6a 05 	lds	r18, 0x056A
    1f86:	22 23       	and	r18, r18
    1f88:	09 f4       	brne	.+2      	; 0x1f8c <timePassed+0x1c>
    1f8a:	7a c0       	rjmp	.+244    	; 0x2080 <timePassed+0x110>
    1f8c:	c0 e0       	ldi	r28, 0x00	; 0
		if(TimerQueue[i].pointerFct != NULL){
			if(TimerQueue[i].delay > 0)
				TimerQueue[i].delay = TimerQueue[i].delay > passed_us ? TimerQueue[i].delay - passed_us : 0;
    1f8e:	f1 2c       	mov	r15, r1
    1f90:	00 e0       	ldi	r16, 0x00	; 0
    1f92:	10 e0       	ldi	r17, 0x00	; 0
    1f94:	d0 e0       	ldi	r29, 0x00	; 0
//pentru fiecare functie(valida) din queue se scade din delay numarul de microsecunde care a trecut

void timePassed(uint32_t passed_us){
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
		if(TimerQueue[i].pointerFct != NULL){
    1f96:	2c 2f       	mov	r18, r28
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	f9 01       	movw	r30, r18
    1f9c:	ee 0f       	add	r30, r30
    1f9e:	ff 1f       	adc	r31, r31
    1fa0:	a9 01       	movw	r20, r18
    1fa2:	44 0f       	add	r20, r20
    1fa4:	55 1f       	adc	r21, r21
    1fa6:	44 0f       	add	r20, r20
    1fa8:	55 1f       	adc	r21, r21
    1faa:	44 0f       	add	r20, r20
    1fac:	55 1f       	adc	r21, r21
    1fae:	e4 0f       	add	r30, r20
    1fb0:	f5 1f       	adc	r31, r21
    1fb2:	e8 56       	subi	r30, 0x68	; 104
    1fb4:	fb 4f       	sbci	r31, 0xFB	; 251
    1fb6:	40 85       	ldd	r20, Z+8	; 0x08
    1fb8:	51 85       	ldd	r21, Z+9	; 0x09
    1fba:	45 2b       	or	r20, r21
    1fbc:	09 f4       	brne	.+2      	; 0x1fc0 <timePassed+0x50>
    1fbe:	5a c0       	rjmp	.+180    	; 0x2074 <timePassed+0x104>
			if(TimerQueue[i].delay > 0)
    1fc0:	a9 01       	movw	r20, r18
    1fc2:	44 0f       	add	r20, r20
    1fc4:	55 1f       	adc	r21, r21
    1fc6:	44 0f       	add	r20, r20
    1fc8:	55 1f       	adc	r21, r21
    1fca:	44 0f       	add	r20, r20
    1fcc:	55 1f       	adc	r21, r21
    1fce:	f9 01       	movw	r30, r18
    1fd0:	ee 0f       	add	r30, r30
    1fd2:	ff 1f       	adc	r31, r31
    1fd4:	e4 0f       	add	r30, r20
    1fd6:	f5 1f       	adc	r31, r21
    1fd8:	e8 56       	subi	r30, 0x68	; 104
    1fda:	fb 4f       	sbci	r31, 0xFB	; 251
    1fdc:	80 80       	ld	r8, Z
    1fde:	91 80       	ldd	r9, Z+1	; 0x01
    1fe0:	a2 80       	ldd	r10, Z+2	; 0x02
    1fe2:	b3 80       	ldd	r11, Z+3	; 0x03
    1fe4:	89 28       	or	r8, r9
    1fe6:	8a 28       	or	r8, r10
    1fe8:	8b 28       	or	r8, r11
    1fea:	09 f4       	brne	.+2      	; 0x1fee <timePassed+0x7e>
    1fec:	43 c0       	rjmp	.+134    	; 0x2074 <timePassed+0x104>
				TimerQueue[i].delay = TimerQueue[i].delay > passed_us ? TimerQueue[i].delay - passed_us : 0;
    1fee:	a9 01       	movw	r20, r18
    1ff0:	44 0f       	add	r20, r20
    1ff2:	55 1f       	adc	r21, r21
    1ff4:	44 0f       	add	r20, r20
    1ff6:	55 1f       	adc	r21, r21
    1ff8:	44 0f       	add	r20, r20
    1ffa:	55 1f       	adc	r21, r21
    1ffc:	f9 01       	movw	r30, r18
    1ffe:	ee 0f       	add	r30, r30
    2000:	ff 1f       	adc	r31, r31
    2002:	e4 0f       	add	r30, r20
    2004:	f5 1f       	adc	r31, r21
    2006:	e8 56       	subi	r30, 0x68	; 104
    2008:	fb 4f       	sbci	r31, 0xFB	; 251
    200a:	80 80       	ld	r8, Z
    200c:	91 80       	ldd	r9, Z+1	; 0x01
    200e:	a2 80       	ldd	r10, Z+2	; 0x02
    2010:	b3 80       	ldd	r11, Z+3	; 0x03
    2012:	68 15       	cp	r22, r8
    2014:	79 05       	cpc	r23, r9
    2016:	8a 05       	cpc	r24, r10
    2018:	9b 05       	cpc	r25, r11
    201a:	b8 f4       	brcc	.+46     	; 0x204a <timePassed+0xda>
    201c:	a9 01       	movw	r20, r18
    201e:	44 0f       	add	r20, r20
    2020:	55 1f       	adc	r21, r21
    2022:	44 0f       	add	r20, r20
    2024:	55 1f       	adc	r21, r21
    2026:	44 0f       	add	r20, r20
    2028:	55 1f       	adc	r21, r21
    202a:	f9 01       	movw	r30, r18
    202c:	ee 0f       	add	r30, r30
    202e:	ff 1f       	adc	r31, r31
    2030:	e4 0f       	add	r30, r20
    2032:	f5 1f       	adc	r31, r21
    2034:	e8 56       	subi	r30, 0x68	; 104
    2036:	fb 4f       	sbci	r31, 0xFB	; 251
    2038:	80 80       	ld	r8, Z
    203a:	91 80       	ldd	r9, Z+1	; 0x01
    203c:	a2 80       	ldd	r10, Z+2	; 0x02
    203e:	b3 80       	ldd	r11, Z+3	; 0x03
    2040:	86 1a       	sub	r8, r22
    2042:	97 0a       	sbc	r9, r23
    2044:	a8 0a       	sbc	r10, r24
    2046:	b9 0a       	sbc	r11, r25
    2048:	04 c0       	rjmp	.+8      	; 0x2052 <timePassed+0xe2>
    204a:	8f 2c       	mov	r8, r15
    204c:	90 2e       	mov	r9, r16
    204e:	a1 2e       	mov	r10, r17
    2050:	bd 2e       	mov	r11, r29
    2052:	f9 01       	movw	r30, r18
    2054:	ee 0f       	add	r30, r30
    2056:	ff 1f       	adc	r31, r31
    2058:	22 0f       	add	r18, r18
    205a:	33 1f       	adc	r19, r19
    205c:	22 0f       	add	r18, r18
    205e:	33 1f       	adc	r19, r19
    2060:	22 0f       	add	r18, r18
    2062:	33 1f       	adc	r19, r19
    2064:	e2 0f       	add	r30, r18
    2066:	f3 1f       	adc	r31, r19
    2068:	e8 56       	subi	r30, 0x68	; 104
    206a:	fb 4f       	sbci	r31, 0xFB	; 251
    206c:	80 82       	st	Z, r8
    206e:	91 82       	std	Z+1, r9	; 0x01
    2070:	a2 82       	std	Z+2, r10	; 0x02
    2072:	b3 82       	std	Z+3, r11	; 0x03
//se apeleaza din intrerupere (cate microsecunde au trecut)
//pentru fiecare functie(valida) din queue se scade din delay numarul de microsecunde care a trecut

void timePassed(uint32_t passed_us){
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
    2074:	cf 5f       	subi	r28, 0xFF	; 255
    2076:	20 91 6a 05 	lds	r18, 0x056A
    207a:	c2 17       	cp	r28, r18
    207c:	08 f4       	brcc	.+2      	; 0x2080 <timePassed+0x110>
    207e:	8b cf       	rjmp	.-234    	; 0x1f96 <timePassed+0x26>
		if(TimerQueue[i].pointerFct != NULL){
			if(TimerQueue[i].delay > 0)
				TimerQueue[i].delay = TimerQueue[i].delay > passed_us ? TimerQueue[i].delay - passed_us : 0;
		}
	}
}
    2080:	df 91       	pop	r29
    2082:	cf 91       	pop	r28
    2084:	1f 91       	pop	r17
    2086:	0f 91       	pop	r16
    2088:	ff 90       	pop	r15
    208a:	bf 90       	pop	r11
    208c:	af 90       	pop	r10
    208e:	9f 90       	pop	r9
    2090:	8f 90       	pop	r8
    2092:	08 95       	ret

00002094 <__vector_15>:
void timePassed(uint32_t passed_us);
void shiftTimeQueue(uint8_t i, char *reason);
void initTimeQueue();
volatile uint32_t timerClocks;
ISR(TIMER1_OVF_vect)// Din datasheet timerq(are 8 mh) => 8/8= 1 microsecunde
{
    2094:	1f 92       	push	r1
    2096:	0f 92       	push	r0
    2098:	0f b6       	in	r0, 0x3f	; 63
    209a:	0f 92       	push	r0
    209c:	11 24       	eor	r1, r1
    209e:	2f 93       	push	r18
    20a0:	3f 93       	push	r19
    20a2:	4f 93       	push	r20
    20a4:	5f 93       	push	r21
    20a6:	6f 93       	push	r22
    20a8:	7f 93       	push	r23
    20aa:	8f 93       	push	r24
    20ac:	9f 93       	push	r25
    20ae:	af 93       	push	r26
    20b0:	bf 93       	push	r27
    20b2:	ef 93       	push	r30
    20b4:	ff 93       	push	r31
	timerClocks++;
    20b6:	80 91 94 04 	lds	r24, 0x0494
    20ba:	90 91 95 04 	lds	r25, 0x0495
    20be:	a0 91 96 04 	lds	r26, 0x0496
    20c2:	b0 91 97 04 	lds	r27, 0x0497
    20c6:	01 96       	adiw	r24, 0x01	; 1
    20c8:	a1 1d       	adc	r26, r1
    20ca:	b1 1d       	adc	r27, r1
    20cc:	80 93 94 04 	sts	0x0494, r24
    20d0:	90 93 95 04 	sts	0x0495, r25
    20d4:	a0 93 96 04 	sts	0x0496, r26
    20d8:	b0 93 97 04 	sts	0x0497, r27
	timePassed(8210);
    20dc:	62 e1       	ldi	r22, 0x12	; 18
    20de:	70 e2       	ldi	r23, 0x20	; 32
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <timePassed>
	//blinkA1();
}
    20e8:	ff 91       	pop	r31
    20ea:	ef 91       	pop	r30
    20ec:	bf 91       	pop	r27
    20ee:	af 91       	pop	r26
    20f0:	9f 91       	pop	r25
    20f2:	8f 91       	pop	r24
    20f4:	7f 91       	pop	r23
    20f6:	6f 91       	pop	r22
    20f8:	5f 91       	pop	r21
    20fa:	4f 91       	pop	r20
    20fc:	3f 91       	pop	r19
    20fe:	2f 91       	pop	r18
    2100:	0f 90       	pop	r0
    2102:	0f be       	out	0x3f, r0	; 63
    2104:	0f 90       	pop	r0
    2106:	1f 90       	pop	r1
    2108:	18 95       	reti

0000210a <shiftTimeQueue>:
		}
	}
	sei();
}
void shiftTimeQueue(uint8_t i, char *reason){
	if(DEBUGGING){
    210a:	90 91 13 04 	lds	r25, 0x0413
		//char str[50];
		//sprintf(str, "shift i=%d (%s)", i, reason);
		//BTTransmitStr(str);
	}
	for(; i<TimingQueueTop; i++)
    210e:	90 91 6a 05 	lds	r25, 0x056A
    2112:	89 17       	cp	r24, r25
    2114:	50 f5       	brcc	.+84     	; 0x216a <shiftTimeQueue+0x60>
		TimerQueue[i] = TimerQueue[i+1];
    2116:	6a e0       	ldi	r22, 0x0A	; 10
    2118:	28 2f       	mov	r18, r24
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	a9 01       	movw	r20, r18
    211e:	4f 5f       	subi	r20, 0xFF	; 255
    2120:	5f 4f       	sbci	r21, 0xFF	; 255
    2122:	d9 01       	movw	r26, r18
    2124:	aa 0f       	add	r26, r26
    2126:	bb 1f       	adc	r27, r27
    2128:	22 0f       	add	r18, r18
    212a:	33 1f       	adc	r19, r19
    212c:	22 0f       	add	r18, r18
    212e:	33 1f       	adc	r19, r19
    2130:	22 0f       	add	r18, r18
    2132:	33 1f       	adc	r19, r19
    2134:	a2 0f       	add	r26, r18
    2136:	b3 1f       	adc	r27, r19
    2138:	a8 56       	subi	r26, 0x68	; 104
    213a:	bb 4f       	sbci	r27, 0xFB	; 251
    213c:	fa 01       	movw	r30, r20
    213e:	ee 0f       	add	r30, r30
    2140:	ff 1f       	adc	r31, r31
    2142:	44 0f       	add	r20, r20
    2144:	55 1f       	adc	r21, r21
    2146:	44 0f       	add	r20, r20
    2148:	55 1f       	adc	r21, r21
    214a:	44 0f       	add	r20, r20
    214c:	55 1f       	adc	r21, r21
    214e:	e4 0f       	add	r30, r20
    2150:	f5 1f       	adc	r31, r21
    2152:	e8 56       	subi	r30, 0x68	; 104
    2154:	fb 4f       	sbci	r31, 0xFB	; 251
    2156:	96 2f       	mov	r25, r22
    2158:	01 90       	ld	r0, Z+
    215a:	0d 92       	st	X+, r0
    215c:	9a 95       	dec	r25
    215e:	e1 f7       	brne	.-8      	; 0x2158 <shiftTimeQueue+0x4e>
	if(DEBUGGING){
		//char str[50];
		//sprintf(str, "shift i=%d (%s)", i, reason);
		//BTTransmitStr(str);
	}
	for(; i<TimingQueueTop; i++)
    2160:	8f 5f       	subi	r24, 0xFF	; 255
    2162:	90 91 6a 05 	lds	r25, 0x056A
    2166:	89 17       	cp	r24, r25
    2168:	b8 f2       	brcs	.-82     	; 0x2118 <shiftTimeQueue+0xe>
		TimerQueue[i] = TimerQueue[i+1];
	TimingQueueTop--;
    216a:	80 91 6a 05 	lds	r24, 0x056A
    216e:	81 50       	subi	r24, 0x01	; 1
    2170:	80 93 6a 05 	sts	0x056A, r24
    2174:	08 95       	ret

00002176 <removeEntryFromTimerQueue>:
		sprintf(msg, "Entry adaugat in coada! la index %d si cu delay: %lu", TimingQueueTop-1, TimerQueue[TimingQueueTop-1].delay);
		BTTransmitStr(msg);
	}
	sei();
}
uint8_t removeEntryFromTimerQueue(uint8_t (*_theFct) (void)){
    2176:	af 92       	push	r10
    2178:	bf 92       	push	r11
    217a:	cf 92       	push	r12
    217c:	df 92       	push	r13
    217e:	ef 92       	push	r14
    2180:	ff 92       	push	r15
    2182:	0f 93       	push	r16
    2184:	1f 93       	push	r17
    2186:	cf 93       	push	r28
    2188:	df 93       	push	r29
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
    218e:	c4 56       	subi	r28, 0x64	; 100
    2190:	d1 09       	sbc	r29, r1
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	f8 94       	cli
    2196:	de bf       	out	0x3e, r29	; 62
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	cd bf       	out	0x3d, r28	; 61
    219c:	8c 01       	movw	r16, r24
	uint8_t i, c=0;
	for(i=0; i<TimingQueueTop; i++){
    219e:	80 91 6a 05 	lds	r24, 0x056A
    21a2:	88 23       	and	r24, r24
    21a4:	09 f4       	brne	.+2      	; 0x21a8 <removeEntryFromTimerQueue+0x32>
    21a6:	42 c0       	rjmp	.+132    	; 0x222c <removeEntryFromTimerQueue+0xb6>
		BTTransmitStr(msg);
	}
	sei();
}
uint8_t removeEntryFromTimerQueue(uint8_t (*_theFct) (void)){
	uint8_t i, c=0;
    21a8:	a1 2c       	mov	r10, r1
	for(i=0; i<TimingQueueTop; i++){
    21aa:	b1 2c       	mov	r11, r1
		if(TimerQueue[i].pointerFct == _theFct){
			if(DEBUGGING){
				char msg[100];
				sprintf(msg, "Entry sters din coada. de pe pozitia %u", i);
    21ac:	0f 2e       	mov	r0, r31
    21ae:	f8 e3       	ldi	r31, 0x38	; 56
    21b0:	cf 2e       	mov	r12, r31
    21b2:	f3 e0       	ldi	r31, 0x03	; 3
    21b4:	df 2e       	mov	r13, r31
    21b6:	f0 2d       	mov	r31, r0
    21b8:	ce 01       	movw	r24, r28
    21ba:	01 96       	adiw	r24, 0x01	; 1
    21bc:	7c 01       	movw	r14, r24
	sei();
}
uint8_t removeEntryFromTimerQueue(uint8_t (*_theFct) (void)){
	uint8_t i, c=0;
	for(i=0; i<TimingQueueTop; i++){
		if(TimerQueue[i].pointerFct == _theFct){
    21be:	2b 2d       	mov	r18, r11
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	f9 01       	movw	r30, r18
    21c4:	ee 0f       	add	r30, r30
    21c6:	ff 1f       	adc	r31, r31
    21c8:	c9 01       	movw	r24, r18
    21ca:	88 0f       	add	r24, r24
    21cc:	99 1f       	adc	r25, r25
    21ce:	88 0f       	add	r24, r24
    21d0:	99 1f       	adc	r25, r25
    21d2:	88 0f       	add	r24, r24
    21d4:	99 1f       	adc	r25, r25
    21d6:	e8 0f       	add	r30, r24
    21d8:	f9 1f       	adc	r31, r25
    21da:	e8 56       	subi	r30, 0x68	; 104
    21dc:	fb 4f       	sbci	r31, 0xFB	; 251
    21de:	40 85       	ldd	r20, Z+8	; 0x08
    21e0:	51 85       	ldd	r21, Z+9	; 0x09
    21e2:	40 17       	cp	r20, r16
    21e4:	51 07       	cpc	r21, r17
    21e6:	e1 f4       	brne	.+56     	; 0x2220 <removeEntryFromTimerQueue+0xaa>
			if(DEBUGGING){
    21e8:	80 91 13 04 	lds	r24, 0x0413
    21ec:	80 ff       	sbrs	r24, 0
    21ee:	11 c0       	rjmp	.+34     	; 0x2212 <removeEntryFromTimerQueue+0x9c>
				char msg[100];
				sprintf(msg, "Entry sters din coada. de pe pozitia %u", i);
    21f0:	3f 93       	push	r19
    21f2:	bf 92       	push	r11
    21f4:	df 92       	push	r13
    21f6:	cf 92       	push	r12
    21f8:	ff 92       	push	r15
    21fa:	ef 92       	push	r14
    21fc:	0e 94 bf 19 	call	0x337e	; 0x337e <sprintf>
				BTTransmitStr(msg);
    2200:	c7 01       	movw	r24, r14
    2202:	0e 94 a8 01 	call	0x350	; 0x350 <BTTransmitStr>
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	0f 90       	pop	r0
    220e:	0f 90       	pop	r0
    2210:	0f 90       	pop	r0
			}
			shiftTimeQueue(i, "remove function"); 
    2212:	60 e6       	ldi	r22, 0x60	; 96
    2214:	73 e0       	ldi	r23, 0x03	; 3
    2216:	8b 2d       	mov	r24, r11
    2218:	0e 94 85 10 	call	0x210a	; 0x210a <shiftTimeQueue>
			i--;
    221c:	ba 94       	dec	r11
			c++;
    221e:	a3 94       	inc	r10
	}
	sei();
}
uint8_t removeEntryFromTimerQueue(uint8_t (*_theFct) (void)){
	uint8_t i, c=0;
	for(i=0; i<TimingQueueTop; i++){
    2220:	b3 94       	inc	r11
    2222:	80 91 6a 05 	lds	r24, 0x056A
    2226:	b8 16       	cp	r11, r24
    2228:	50 f2       	brcs	.-108    	; 0x21be <removeEntryFromTimerQueue+0x48>
    222a:	01 c0       	rjmp	.+2      	; 0x222e <removeEntryFromTimerQueue+0xb8>
		BTTransmitStr(msg);
	}
	sei();
}
uint8_t removeEntryFromTimerQueue(uint8_t (*_theFct) (void)){
	uint8_t i, c=0;
    222c:	a1 2c       	mov	r10, r1
			i--;
			c++;
		}
	}
	return c;
}
    222e:	8a 2d       	mov	r24, r10
    2230:	cc 59       	subi	r28, 0x9C	; 156
    2232:	df 4f       	sbci	r29, 0xFF	; 255
    2234:	0f b6       	in	r0, 0x3f	; 63
    2236:	f8 94       	cli
    2238:	de bf       	out	0x3e, r29	; 62
    223a:	0f be       	out	0x3f, r0	; 63
    223c:	cd bf       	out	0x3d, r28	; 61
    223e:	df 91       	pop	r29
    2240:	cf 91       	pop	r28
    2242:	1f 91       	pop	r17
    2244:	0f 91       	pop	r16
    2246:	ff 90       	pop	r15
    2248:	ef 90       	pop	r14
    224a:	df 90       	pop	r13
    224c:	cf 90       	pop	r12
    224e:	bf 90       	pop	r11
    2250:	af 90       	pop	r10
    2252:	08 95       	ret

00002254 <checkTimeQueue>:
	}
}

//se apeleaza din main loop
//verifica daca sunt functii care trebuie apelate (daca delay-ul lor a ajuns la 0)
void checkTimeQueue(void){
    2254:	1f 93       	push	r17
    2256:	cf 93       	push	r28
    2258:	df 93       	push	r29
	cli();
    225a:	f8 94       	cli
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
    225c:	80 91 6a 05 	lds	r24, 0x056A
    2260:	88 23       	and	r24, r24
    2262:	09 f4       	brne	.+2      	; 0x2266 <checkTimeQueue+0x12>
    2264:	8b c0       	rjmp	.+278    	; 0x237c <checkTimeQueue+0x128>
    2266:	10 e0       	ldi	r17, 0x00	; 0
		if(TimerQueue[i].pointerFct != NULL){
    2268:	c1 2f       	mov	r28, r17
    226a:	d0 e0       	ldi	r29, 0x00	; 0
    226c:	fe 01       	movw	r30, r28
    226e:	ee 0f       	add	r30, r30
    2270:	ff 1f       	adc	r31, r31
    2272:	ce 01       	movw	r24, r28
    2274:	88 0f       	add	r24, r24
    2276:	99 1f       	adc	r25, r25
    2278:	88 0f       	add	r24, r24
    227a:	99 1f       	adc	r25, r25
    227c:	88 0f       	add	r24, r24
    227e:	99 1f       	adc	r25, r25
    2280:	e8 0f       	add	r30, r24
    2282:	f9 1f       	adc	r31, r25
    2284:	e8 56       	subi	r30, 0x68	; 104
    2286:	fb 4f       	sbci	r31, 0xFB	; 251
    2288:	20 85       	ldd	r18, Z+8	; 0x08
    228a:	31 85       	ldd	r19, Z+9	; 0x09
    228c:	23 2b       	or	r18, r19
    228e:	09 f4       	brne	.+2      	; 0x2292 <checkTimeQueue+0x3e>
    2290:	6f c0       	rjmp	.+222    	; 0x2370 <checkTimeQueue+0x11c>
			if(TimerQueue[i].delay == 0){
    2292:	ce 01       	movw	r24, r28
    2294:	88 0f       	add	r24, r24
    2296:	99 1f       	adc	r25, r25
    2298:	88 0f       	add	r24, r24
    229a:	99 1f       	adc	r25, r25
    229c:	88 0f       	add	r24, r24
    229e:	99 1f       	adc	r25, r25
    22a0:	fe 01       	movw	r30, r28
    22a2:	ee 0f       	add	r30, r30
    22a4:	ff 1f       	adc	r31, r31
    22a6:	e8 0f       	add	r30, r24
    22a8:	f9 1f       	adc	r31, r25
    22aa:	e8 56       	subi	r30, 0x68	; 104
    22ac:	fb 4f       	sbci	r31, 0xFB	; 251
    22ae:	40 81       	ld	r20, Z
    22b0:	51 81       	ldd	r21, Z+1	; 0x01
    22b2:	62 81       	ldd	r22, Z+2	; 0x02
    22b4:	73 81       	ldd	r23, Z+3	; 0x03
    22b6:	45 2b       	or	r20, r21
    22b8:	46 2b       	or	r20, r22
    22ba:	47 2b       	or	r20, r23
    22bc:	09 f0       	breq	.+2      	; 0x22c0 <checkTimeQueue+0x6c>
    22be:	58 c0       	rjmp	.+176    	; 0x2370 <checkTimeQueue+0x11c>
				if(TimerQueue[i].pointerFct()){
    22c0:	ce 01       	movw	r24, r28
    22c2:	88 0f       	add	r24, r24
    22c4:	99 1f       	adc	r25, r25
    22c6:	88 0f       	add	r24, r24
    22c8:	99 1f       	adc	r25, r25
    22ca:	88 0f       	add	r24, r24
    22cc:	99 1f       	adc	r25, r25
    22ce:	fe 01       	movw	r30, r28
    22d0:	ee 0f       	add	r30, r30
    22d2:	ff 1f       	adc	r31, r31
    22d4:	e8 0f       	add	r30, r24
    22d6:	f9 1f       	adc	r31, r25
    22d8:	e8 56       	subi	r30, 0x68	; 104
    22da:	fb 4f       	sbci	r31, 0xFB	; 251
    22dc:	00 84       	ldd	r0, Z+8	; 0x08
    22de:	f1 85       	ldd	r31, Z+9	; 0x09
    22e0:	e0 2d       	mov	r30, r0
    22e2:	09 95       	icall
    22e4:	88 23       	and	r24, r24
    22e6:	39 f0       	breq	.+14     	; 0x22f6 <checkTimeQueue+0xa2>
					shiftTimeQueue(i, "returned true");
    22e8:	60 e7       	ldi	r22, 0x70	; 112
    22ea:	73 e0       	ldi	r23, 0x03	; 3
    22ec:	81 2f       	mov	r24, r17
    22ee:	0e 94 85 10 	call	0x210a	; 0x210a <shiftTimeQueue>
					i--;
    22f2:	11 50       	subi	r17, 0x01	; 1
    22f4:	3d c0       	rjmp	.+122    	; 0x2370 <checkTimeQueue+0x11c>
				}
				else
					if(TimerQueue[i].repeatDelay)
    22f6:	ce 01       	movw	r24, r28
    22f8:	88 0f       	add	r24, r24
    22fa:	99 1f       	adc	r25, r25
    22fc:	88 0f       	add	r24, r24
    22fe:	99 1f       	adc	r25, r25
    2300:	88 0f       	add	r24, r24
    2302:	99 1f       	adc	r25, r25
    2304:	fe 01       	movw	r30, r28
    2306:	ee 0f       	add	r30, r30
    2308:	ff 1f       	adc	r31, r31
    230a:	e8 0f       	add	r30, r24
    230c:	f9 1f       	adc	r31, r25
    230e:	e8 56       	subi	r30, 0x68	; 104
    2310:	fb 4f       	sbci	r31, 0xFB	; 251
    2312:	44 81       	ldd	r20, Z+4	; 0x04
    2314:	55 81       	ldd	r21, Z+5	; 0x05
    2316:	66 81       	ldd	r22, Z+6	; 0x06
    2318:	77 81       	ldd	r23, Z+7	; 0x07
    231a:	45 2b       	or	r20, r21
    231c:	46 2b       	or	r20, r22
    231e:	47 2b       	or	r20, r23
    2320:	49 f0       	breq	.+18     	; 0x2334 <checkTimeQueue+0xe0>
						TimerQueue[i].delay = TimerQueue[i].repeatDelay;
    2322:	44 81       	ldd	r20, Z+4	; 0x04
    2324:	55 81       	ldd	r21, Z+5	; 0x05
    2326:	66 81       	ldd	r22, Z+6	; 0x06
    2328:	77 81       	ldd	r23, Z+7	; 0x07
    232a:	40 83       	st	Z, r20
    232c:	51 83       	std	Z+1, r21	; 0x01
    232e:	62 83       	std	Z+2, r22	; 0x02
    2330:	73 83       	std	Z+3, r23	; 0x03
    2332:	1e c0       	rjmp	.+60     	; 0x2370 <checkTimeQueue+0x11c>
					else{
						if(TimerQueue[i].pointerFct ==  &stopEngines)
    2334:	ce 01       	movw	r24, r28
    2336:	88 0f       	add	r24, r24
    2338:	99 1f       	adc	r25, r25
    233a:	cc 0f       	add	r28, r28
    233c:	dd 1f       	adc	r29, r29
    233e:	cc 0f       	add	r28, r28
    2340:	dd 1f       	adc	r29, r29
    2342:	cc 0f       	add	r28, r28
    2344:	dd 1f       	adc	r29, r29
    2346:	c8 0f       	add	r28, r24
    2348:	d9 1f       	adc	r29, r25
    234a:	c8 56       	subi	r28, 0x68	; 104
    234c:	db 4f       	sbci	r29, 0xFB	; 251
    234e:	88 85       	ldd	r24, Y+8	; 0x08
    2350:	99 85       	ldd	r25, Y+9	; 0x09
    2352:	8c 5d       	subi	r24, 0xDC	; 220
    2354:	94 40       	sbci	r25, 0x04	; 4
    2356:	31 f4       	brne	.+12     	; 0x2364 <checkTimeQueue+0x110>
							i -= removeEntryFromTimerQueue(&stopEngines);
    2358:	8c ed       	ldi	r24, 0xDC	; 220
    235a:	94 e0       	ldi	r25, 0x04	; 4
    235c:	0e 94 bb 10 	call	0x2176	; 0x2176 <removeEntryFromTimerQueue>
    2360:	18 1b       	sub	r17, r24
    2362:	06 c0       	rjmp	.+12     	; 0x2370 <checkTimeQueue+0x11c>
						else
							shiftTimeQueue(i, "not periodic"),
    2364:	6e e7       	ldi	r22, 0x7E	; 126
    2366:	73 e0       	ldi	r23, 0x03	; 3
    2368:	81 2f       	mov	r24, r17
    236a:	0e 94 85 10 	call	0x210a	; 0x210a <shiftTimeQueue>
							i--;
    236e:	11 50       	subi	r17, 0x01	; 1
//se apeleaza din main loop
//verifica daca sunt functii care trebuie apelate (daca delay-ul lor a ajuns la 0)
void checkTimeQueue(void){
	cli();
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
    2370:	1f 5f       	subi	r17, 0xFF	; 255
    2372:	80 91 6a 05 	lds	r24, 0x056A
    2376:	18 17       	cp	r17, r24
    2378:	08 f4       	brcc	.+2      	; 0x237c <checkTimeQueue+0x128>
    237a:	76 cf       	rjmp	.-276    	; 0x2268 <checkTimeQueue+0x14>
							i--;
					}
			}
		}
	}
	sei();
    237c:	78 94       	sei
}
    237e:	df 91       	pop	r29
    2380:	cf 91       	pop	r28
    2382:	1f 91       	pop	r17
    2384:	08 95       	ret

00002386 <resetTimerQueue>:
	for(; i<TimingQueueTop; i++)
		TimerQueue[i] = TimerQueue[i+1];
	TimingQueueTop--;
}

void resetTimerQueue(uint8_t keepReadSensors){
    2386:	1f 93       	push	r17
    2388:	cf 93       	push	r28
    238a:	df 93       	push	r29
    238c:	18 2f       	mov	r17, r24
    238e:	c0 e0       	ldi	r28, 0x00	; 0
    2390:	d0 e0       	ldi	r29, 0x00	; 0
    2392:	8c 2f       	mov	r24, r28
	uint8_t i;
	for(i=0;i<TimingQueueSize;i++){
		if( TimerQueue[i].pointerFct != &readSensors || !keepReadSensors )
    2394:	9e 01       	movw	r18, r28
    2396:	22 0f       	add	r18, r18
    2398:	33 1f       	adc	r19, r19
    239a:	22 0f       	add	r18, r18
    239c:	33 1f       	adc	r19, r19
    239e:	22 0f       	add	r18, r18
    23a0:	33 1f       	adc	r19, r19
    23a2:	fe 01       	movw	r30, r28
    23a4:	ee 0f       	add	r30, r30
    23a6:	ff 1f       	adc	r31, r31
    23a8:	e2 0f       	add	r30, r18
    23aa:	f3 1f       	adc	r31, r19
    23ac:	e8 56       	subi	r30, 0x68	; 104
    23ae:	fb 4f       	sbci	r31, 0xFB	; 251
    23b0:	20 85       	ldd	r18, Z+8	; 0x08
    23b2:	31 85       	ldd	r19, Z+9	; 0x09
    23b4:	26 54       	subi	r18, 0x46	; 70
    23b6:	3a 40       	sbci	r19, 0x0A	; 10
    23b8:	11 f4       	brne	.+4      	; 0x23be <resetTimerQueue+0x38>
    23ba:	11 11       	cpse	r17, r1
    23bc:	04 c0       	rjmp	.+8      	; 0x23c6 <resetTimerQueue+0x40>
			shiftTimeQueue(i, "reset timer queue");
    23be:	6b e8       	ldi	r22, 0x8B	; 139
    23c0:	73 e0       	ldi	r23, 0x03	; 3
    23c2:	0e 94 85 10 	call	0x210a	; 0x210a <shiftTimeQueue>
    23c6:	21 96       	adiw	r28, 0x01	; 1
	TimingQueueTop--;
}

void resetTimerQueue(uint8_t keepReadSensors){
	uint8_t i;
	for(i=0;i<TimingQueueSize;i++){
    23c8:	c4 31       	cpi	r28, 0x14	; 20
    23ca:	d1 05       	cpc	r29, r1
    23cc:	11 f7       	brne	.-60     	; 0x2392 <resetTimerQueue+0xc>
		if( TimerQueue[i].pointerFct != &readSensors || !keepReadSensors )
			shiftTimeQueue(i, "reset timer queue");
	}
	TimingQueueTop = 1;
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	80 93 6a 05 	sts	0x056A, r24
    23d4:	df 91       	pop	r29
    23d6:	cf 91       	pop	r28
    23d8:	1f 91       	pop	r17
    23da:	08 95       	ret

000023dc <stateMachineTest1>:
uint8_t stareSMT1 = 0;
void initAndStartStateMachineTest1(){
	stareSMT1 = 0;
	addEntryToTimerQueue(&stateMachineTest1, 100UL * 1000UL, Periodic);
}
uint8_t stateMachineTest1(){
    23dc:	8f 92       	push	r8
    23de:	9f 92       	push	r9
    23e0:	af 92       	push	r10
    23e2:	bf 92       	push	r11
    23e4:	cf 92       	push	r12
    23e6:	df 92       	push	r13
    23e8:	ef 92       	push	r14
    23ea:	ff 92       	push	r15
    23ec:	0f 93       	push	r16
    23ee:	1f 93       	push	r17
    23f0:	cf 93       	push	r28
    23f2:	df 93       	push	r29
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
    23f8:	c4 56       	subi	r28, 0x64	; 100
    23fa:	d1 09       	sbc	r29, r1
    23fc:	0f b6       	in	r0, 0x3f	; 63
    23fe:	f8 94       	cli
    2400:	de bf       	out	0x3e, r29	; 62
    2402:	0f be       	out	0x3f, r0	; 63
    2404:	cd bf       	out	0x3d, r28	; 61
	uint32_t fl, fr;//, sl, sr;
	fl = getValueOfSensor(FrontLeftSensor);
    2406:	83 e0       	ldi	r24, 0x03	; 3
    2408:	0e 94 08 08 	call	0x1010	; 0x1010 <getValueOfSensor>
    240c:	6c 01       	movw	r12, r24
    240e:	e1 2c       	mov	r14, r1
    2410:	f1 2c       	mov	r15, r1
	fr = getValueOfSensor(FrontRightSensor);
    2412:	82 e0       	ldi	r24, 0x02	; 2
    2414:	0e 94 08 08 	call	0x1010	; 0x1010 <getValueOfSensor>
    2418:	4c 01       	movw	r8, r24
    241a:	a1 2c       	mov	r10, r1
    241c:	b1 2c       	mov	r11, r1
	//sl = getValueOfSensor(SideLeftSensor);
	//sr = getValueOfSensor(SideRightSensor);
	if(DEBUGGING){
    241e:	80 91 13 04 	lds	r24, 0x0413
    2422:	80 ff       	sbrs	r24, 0
    2424:	1b c0       	rjmp	.+54     	; 0x245c <stateMachineTest1+0x80>
		char bfr[100];
		sprintf(bfr, "fl:%lu  fr:%lu", fl, fr);
    2426:	1f 92       	push	r1
    2428:	1f 92       	push	r1
    242a:	9f 92       	push	r9
    242c:	8f 92       	push	r8
    242e:	1f 92       	push	r1
    2430:	1f 92       	push	r1
    2432:	df 92       	push	r13
    2434:	cf 92       	push	r12
    2436:	8d e9       	ldi	r24, 0x9D	; 157
    2438:	93 e0       	ldi	r25, 0x03	; 3
    243a:	9f 93       	push	r25
    243c:	8f 93       	push	r24
    243e:	8e 01       	movw	r16, r28
    2440:	0f 5f       	subi	r16, 0xFF	; 255
    2442:	1f 4f       	sbci	r17, 0xFF	; 255
    2444:	1f 93       	push	r17
    2446:	0f 93       	push	r16
    2448:	0e 94 bf 19 	call	0x337e	; 0x337e <sprintf>
		BTTransmitStr(bfr);
    244c:	c8 01       	movw	r24, r16
    244e:	0e 94 a8 01 	call	0x350	; 0x350 <BTTransmitStr>
    2452:	0f b6       	in	r0, 0x3f	; 63
    2454:	f8 94       	cli
    2456:	de bf       	out	0x3e, r29	; 62
    2458:	0f be       	out	0x3f, r0	; 63
    245a:	cd bf       	out	0x3d, r28	; 61
	}
	
	switch(stareSMT1){
    245c:	80 91 14 04 	lds	r24, 0x0414
    2460:	81 30       	cpi	r24, 0x01	; 1
    2462:	69 f0       	breq	.+26     	; 0x247e <stateMachineTest1+0xa2>
    2464:	18 f0       	brcs	.+6      	; 0x246c <stateMachineTest1+0x90>
    2466:	82 30       	cpi	r24, 0x02	; 2
    2468:	f9 f0       	breq	.+62     	; 0x24a8 <stateMachineTest1+0xcc>
    246a:	22 c0       	rjmp	.+68     	; 0x24b0 <stateMachineTest1+0xd4>
		case 0:
			stareSMT1 = 1;
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	80 93 14 04 	sts	0x0414, r24
			goFront(30, 150);
    2472:	66 e9       	ldi	r22, 0x96	; 150
    2474:	8e e1       	ldi	r24, 0x1E	; 30
    2476:	0e 94 4c 05 	call	0xa98	; 0xa98 <goFront>
		case 2:
			stopEngines();
			return YES;		
		break;
	}
	return NO;	
    247a:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(stareSMT1){
		case 0:
			stareSMT1 = 1;
			goFront(30, 150);
		break;
    247c:	1e c0       	rjmp	.+60     	; 0x24ba <stateMachineTest1+0xde>
		case 1:
			if(fl<130 && fr<130)
    247e:	92 e8       	ldi	r25, 0x82	; 130
    2480:	c9 16       	cp	r12, r25
    2482:	d1 04       	cpc	r13, r1
    2484:	e1 04       	cpc	r14, r1
    2486:	f1 04       	cpc	r15, r1
    2488:	a8 f4       	brcc	.+42     	; 0x24b4 <stateMachineTest1+0xd8>
    248a:	82 e8       	ldi	r24, 0x82	; 130
    248c:	88 16       	cp	r8, r24
    248e:	91 04       	cpc	r9, r1
    2490:	a1 04       	cpc	r10, r1
    2492:	b1 04       	cpc	r11, r1
    2494:	88 f4       	brcc	.+34     	; 0x24b8 <stateMachineTest1+0xdc>
				stareSMT1 = 2,
    2496:	82 e0       	ldi	r24, 0x02	; 2
    2498:	80 93 14 04 	sts	0x0414, r24
				goBack(1, 150);
    249c:	66 e9       	ldi	r22, 0x96	; 150
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <goBack>
		case 2:
			stopEngines();
			return YES;		
		break;
	}
	return NO;	
    24a4:	80 e0       	ldi	r24, 0x00	; 0
    24a6:	09 c0       	rjmp	.+18     	; 0x24ba <stateMachineTest1+0xde>
			if(fl<130 && fr<130)
				stareSMT1 = 2,
				goBack(1, 150);
		break;
		case 2:
			stopEngines();
    24a8:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <stopEngines>
			return YES;		
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	05 c0       	rjmp	.+10     	; 0x24ba <stateMachineTest1+0xde>
		break;
	}
	return NO;	
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	03 c0       	rjmp	.+6      	; 0x24ba <stateMachineTest1+0xde>
    24b4:	80 e0       	ldi	r24, 0x00	; 0
    24b6:	01 c0       	rjmp	.+2      	; 0x24ba <stateMachineTest1+0xde>
    24b8:	80 e0       	ldi	r24, 0x00	; 0
}
    24ba:	cc 59       	subi	r28, 0x9C	; 156
    24bc:	df 4f       	sbci	r29, 0xFF	; 255
    24be:	0f b6       	in	r0, 0x3f	; 63
    24c0:	f8 94       	cli
    24c2:	de bf       	out	0x3e, r29	; 62
    24c4:	0f be       	out	0x3f, r0	; 63
    24c6:	cd bf       	out	0x3d, r28	; 61
    24c8:	df 91       	pop	r29
    24ca:	cf 91       	pop	r28
    24cc:	1f 91       	pop	r17
    24ce:	0f 91       	pop	r16
    24d0:	ff 90       	pop	r15
    24d2:	ef 90       	pop	r14
    24d4:	df 90       	pop	r13
    24d6:	cf 90       	pop	r12
    24d8:	bf 90       	pop	r11
    24da:	af 90       	pop	r10
    24dc:	9f 90       	pop	r9
    24de:	8f 90       	pop	r8
    24e0:	08 95       	ret

000024e2 <SMFParcurgereDistanta>:
	vitezaCuCareParcurg = viteza;
	addEntryIfNotExists(&SMFParcurgereDistanta, 10*1000UL, Periodic);
}

extern volatile uint32_t deciSecondsPassed;
uint8_t SMFParcurgereDistanta(){
    24e2:	0f 93       	push	r16
    24e4:	1f 93       	push	r17
    24e6:	cf 93       	push	r28
    24e8:	df 93       	push	r29
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
    24ee:	c4 56       	subi	r28, 0x64	; 100
    24f0:	d1 09       	sbc	r29, r1
    24f2:	0f b6       	in	r0, 0x3f	; 63
    24f4:	f8 94       	cli
    24f6:	de bf       	out	0x3e, r29	; 62
    24f8:	0f be       	out	0x3f, r0	; 63
    24fa:	cd bf       	out	0x3d, r28	; 61
	//char buffer[100];
	//sprintf(buffer, "dp: %lu  time:%lu", DISTANTA_PARCURSA, deciSecondsPassed);
	//BTTransmitStr(buffer);
	
	switch(starePD){
    24fc:	80 91 d6 05 	lds	r24, 0x05D6
    2500:	81 30       	cpi	r24, 0x01	; 1
    2502:	71 f0       	breq	.+28     	; 0x2520 <SMFParcurgereDistanta+0x3e>
    2504:	20 f0       	brcs	.+8      	; 0x250e <SMFParcurgereDistanta+0x2c>
    2506:	82 30       	cpi	r24, 0x02	; 2
    2508:	09 f4       	brne	.+2      	; 0x250c <SMFParcurgereDistanta+0x2a>
    250a:	58 c0       	rjmp	.+176    	; 0x25bc <SMFParcurgereDistanta+0xda>
    250c:	ba c0       	rjmp	.+372    	; 0x2682 <SMFParcurgereDistanta+0x1a0>
		case 0:
			goFront(100, vitezaCuCareParcurg);
    250e:	60 91 e5 05 	lds	r22, 0x05E5
    2512:	84 e6       	ldi	r24, 0x64	; 100
    2514:	0e 94 4c 05 	call	0xa98	; 0xa98 <goFront>
			starePD = 1;
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	80 93 d6 05 	sts	0x05D6, r24
		break;
    251e:	af c0       	rjmp	.+350    	; 0x267e <SMFParcurgereDistanta+0x19c>
		case 1:
			if(DISTANTA_PARCURSA > distantaDeParcurs){
    2520:	80 91 2b 04 	lds	r24, 0x042B
    2524:	90 91 2c 04 	lds	r25, 0x042C
    2528:	a0 91 2d 04 	lds	r26, 0x042D
    252c:	b0 91 2e 04 	lds	r27, 0x042E
    2530:	40 91 31 04 	lds	r20, 0x0431
    2534:	50 91 32 04 	lds	r21, 0x0432
    2538:	60 91 33 04 	lds	r22, 0x0433
    253c:	70 91 34 04 	lds	r23, 0x0434
    2540:	84 0f       	add	r24, r20
    2542:	95 1f       	adc	r25, r21
    2544:	a6 1f       	adc	r26, r22
    2546:	b7 1f       	adc	r27, r23
    2548:	b6 95       	lsr	r27
    254a:	a7 95       	ror	r26
    254c:	97 95       	ror	r25
    254e:	87 95       	ror	r24
    2550:	b6 95       	lsr	r27
    2552:	a7 95       	ror	r26
    2554:	97 95       	ror	r25
    2556:	87 95       	ror	r24
    2558:	ac 01       	movw	r20, r24
    255a:	bd 01       	movw	r22, r26
    255c:	44 0f       	add	r20, r20
    255e:	55 1f       	adc	r21, r21
    2560:	66 1f       	adc	r22, r22
    2562:	77 1f       	adc	r23, r23
    2564:	44 0f       	add	r20, r20
    2566:	55 1f       	adc	r21, r21
    2568:	66 1f       	adc	r22, r22
    256a:	77 1f       	adc	r23, r23
    256c:	8a 01       	movw	r16, r20
    256e:	9b 01       	movw	r18, r22
    2570:	00 0f       	add	r16, r16
    2572:	11 1f       	adc	r17, r17
    2574:	22 1f       	adc	r18, r18
    2576:	33 1f       	adc	r19, r19
    2578:	00 0f       	add	r16, r16
    257a:	11 1f       	adc	r17, r17
    257c:	22 1f       	adc	r18, r18
    257e:	33 1f       	adc	r19, r19
    2580:	40 0f       	add	r20, r16
    2582:	51 1f       	adc	r21, r17
    2584:	62 1f       	adc	r22, r18
    2586:	73 1f       	adc	r23, r19
    2588:	84 0f       	add	r24, r20
    258a:	95 1f       	adc	r25, r21
    258c:	a6 1f       	adc	r26, r22
    258e:	b7 1f       	adc	r27, r23
    2590:	00 91 d8 05 	lds	r16, 0x05D8
    2594:	10 91 d9 05 	lds	r17, 0x05D9
    2598:	20 91 da 05 	lds	r18, 0x05DA
    259c:	30 91 db 05 	lds	r19, 0x05DB
    25a0:	08 17       	cp	r16, r24
    25a2:	19 07       	cpc	r17, r25
    25a4:	2a 07       	cpc	r18, r26
    25a6:	3b 07       	cpc	r19, r27
    25a8:	08 f0       	brcs	.+2      	; 0x25ac <SMFParcurgereDistanta+0xca>
    25aa:	69 c0       	rjmp	.+210    	; 0x267e <SMFParcurgereDistanta+0x19c>
				goBack(1, 130);
    25ac:	62 e8       	ldi	r22, 0x82	; 130
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <goBack>
				starePD = 2;
    25b4:	82 e0       	ldi	r24, 0x02	; 2
    25b6:	80 93 d6 05 	sts	0x05D6, r24
    25ba:	61 c0       	rjmp	.+194    	; 0x267e <SMFParcurgereDistanta+0x19c>
			}
		break;
		case 2:
			stopEngines();
    25bc:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <stopEngines>
			char buffer[100];
			sprintf(buffer, "dp: %lu  time:%lu", DISTANTA_PARCURSA, deciSecondsPassed);
    25c0:	40 91 0f 04 	lds	r20, 0x040F
    25c4:	50 91 10 04 	lds	r21, 0x0410
    25c8:	60 91 11 04 	lds	r22, 0x0411
    25cc:	70 91 12 04 	lds	r23, 0x0412
    25d0:	80 91 2b 04 	lds	r24, 0x042B
    25d4:	90 91 2c 04 	lds	r25, 0x042C
    25d8:	a0 91 2d 04 	lds	r26, 0x042D
    25dc:	b0 91 2e 04 	lds	r27, 0x042E
    25e0:	00 91 31 04 	lds	r16, 0x0431
    25e4:	10 91 32 04 	lds	r17, 0x0432
    25e8:	20 91 33 04 	lds	r18, 0x0433
    25ec:	30 91 34 04 	lds	r19, 0x0434
    25f0:	7f 93       	push	r23
    25f2:	6f 93       	push	r22
    25f4:	5f 93       	push	r21
    25f6:	4f 93       	push	r20
    25f8:	b9 01       	movw	r22, r18
    25fa:	a8 01       	movw	r20, r16
    25fc:	48 0f       	add	r20, r24
    25fe:	59 1f       	adc	r21, r25
    2600:	6a 1f       	adc	r22, r26
    2602:	7b 1f       	adc	r23, r27
    2604:	76 95       	lsr	r23
    2606:	67 95       	ror	r22
    2608:	57 95       	ror	r21
    260a:	47 95       	ror	r20
    260c:	76 95       	lsr	r23
    260e:	67 95       	ror	r22
    2610:	57 95       	ror	r21
    2612:	47 95       	ror	r20
    2614:	db 01       	movw	r26, r22
    2616:	ca 01       	movw	r24, r20
    2618:	88 0f       	add	r24, r24
    261a:	99 1f       	adc	r25, r25
    261c:	aa 1f       	adc	r26, r26
    261e:	bb 1f       	adc	r27, r27
    2620:	88 0f       	add	r24, r24
    2622:	99 1f       	adc	r25, r25
    2624:	aa 1f       	adc	r26, r26
    2626:	bb 1f       	adc	r27, r27
    2628:	8c 01       	movw	r16, r24
    262a:	9d 01       	movw	r18, r26
    262c:	00 0f       	add	r16, r16
    262e:	11 1f       	adc	r17, r17
    2630:	22 1f       	adc	r18, r18
    2632:	33 1f       	adc	r19, r19
    2634:	00 0f       	add	r16, r16
    2636:	11 1f       	adc	r17, r17
    2638:	22 1f       	adc	r18, r18
    263a:	33 1f       	adc	r19, r19
    263c:	80 0f       	add	r24, r16
    263e:	91 1f       	adc	r25, r17
    2640:	a2 1f       	adc	r26, r18
    2642:	b3 1f       	adc	r27, r19
    2644:	84 0f       	add	r24, r20
    2646:	95 1f       	adc	r25, r21
    2648:	a6 1f       	adc	r26, r22
    264a:	b7 1f       	adc	r27, r23
    264c:	bf 93       	push	r27
    264e:	af 93       	push	r26
    2650:	9f 93       	push	r25
    2652:	8f 93       	push	r24
    2654:	8c ea       	ldi	r24, 0xAC	; 172
    2656:	93 e0       	ldi	r25, 0x03	; 3
    2658:	9f 93       	push	r25
    265a:	8f 93       	push	r24
    265c:	8e 01       	movw	r16, r28
    265e:	0f 5f       	subi	r16, 0xFF	; 255
    2660:	1f 4f       	sbci	r17, 0xFF	; 255
    2662:	1f 93       	push	r17
    2664:	0f 93       	push	r16
    2666:	0e 94 bf 19 	call	0x337e	; 0x337e <sprintf>
			BTTransmitStr(buffer);
    266a:	c8 01       	movw	r24, r16
    266c:	0e 94 a8 01 	call	0x350	; 0x350 <BTTransmitStr>
			return YES;
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	f8 94       	cli
    2674:	de bf       	out	0x3e, r29	; 62
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	cd bf       	out	0x3d, r28	; 61
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	03 c0       	rjmp	.+6      	; 0x2684 <SMFParcurgereDistanta+0x1a2>
		break;
	}	
	return NO;
    267e:	80 e0       	ldi	r24, 0x00	; 0
    2680:	01 c0       	rjmp	.+2      	; 0x2684 <SMFParcurgereDistanta+0x1a2>
    2682:	80 e0       	ldi	r24, 0x00	; 0
}
    2684:	cc 59       	subi	r28, 0x9C	; 156
    2686:	df 4f       	sbci	r29, 0xFF	; 255
    2688:	0f b6       	in	r0, 0x3f	; 63
    268a:	f8 94       	cli
    268c:	de bf       	out	0x3e, r29	; 62
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	cd bf       	out	0x3d, r28	; 61
    2692:	df 91       	pop	r29
    2694:	cf 91       	pop	r28
    2696:	1f 91       	pop	r17
    2698:	0f 91       	pop	r16
    269a:	08 95       	ret

0000269c <ledAction>:
	//BTTransmitStr(msg);
	
	a1 = (a1!=0);
	a2 = (a2!=0);
	
	if(a1)
    269c:	88 23       	and	r24, r24
    269e:	11 f0       	breq	.+4      	; 0x26a4 <ledAction+0x8>
		PORTA |= _BV(PINA5);
    26a0:	15 9a       	sbi	0x02, 5	; 2
    26a2:	01 c0       	rjmp	.+2      	; 0x26a6 <ledAction+0xa>
	else
		PORTA &= ~_BV(PINA5);
    26a4:	15 98       	cbi	0x02, 5	; 2
	if(a2)
    26a6:	66 23       	and	r22, r22
    26a8:	11 f0       	breq	.+4      	; 0x26ae <ledAction+0x12>
		PORTA |= _BV(PINA4);
    26aa:	14 9a       	sbi	0x02, 4	; 2
    26ac:	08 95       	ret
	else
		PORTA &= ~_BV(PINA4);
    26ae:	14 98       	cbi	0x02, 4	; 2
    26b0:	08 95       	ret

000026b2 <initAndStartStateMachineTest1>:
extern uint32_t time;

uint8_t stateMachineTest1();
uint8_t stareSMT1 = 0;
void initAndStartStateMachineTest1(){
	stareSMT1 = 0;
    26b2:	10 92 14 04 	sts	0x0414, r1
	addEntryToTimerQueue(&stateMachineTest1, 100UL * 1000UL, Periodic);
    26b6:	21 e0       	ldi	r18, 0x01	; 1
    26b8:	40 ea       	ldi	r20, 0xA0	; 160
    26ba:	56 e8       	ldi	r21, 0x86	; 134
    26bc:	61 e0       	ldi	r22, 0x01	; 1
    26be:	70 e0       	ldi	r23, 0x00	; 0
    26c0:	8e ee       	ldi	r24, 0xEE	; 238
    26c2:	91 e1       	ldi	r25, 0x11	; 17
    26c4:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <addEntryToTimerQueue>
    26c8:	08 95       	ret

000026ca <initParcurgereDistanta>:

uint8_t SMFParcurgereDistanta();
uint8_t starePD;
uint32_t distantaDeParcurs;
uint8_t vitezaCuCareParcurg;
void initParcurgereDistanta(uint32_t distanta, uint8_t viteza){
    26ca:	8f 92       	push	r8
    26cc:	9f 92       	push	r9
    26ce:	af 92       	push	r10
    26d0:	bf 92       	push	r11
    26d2:	cf 92       	push	r12
    26d4:	df 92       	push	r13
    26d6:	ef 92       	push	r14
    26d8:	ff 92       	push	r15
    26da:	0f 93       	push	r16
    26dc:	1f 93       	push	r17
	starePD = 0;
    26de:	10 92 d6 05 	sts	0x05D6, r1
	distantaDeParcurs = distanta + DISTANTA_PARCURSA;
    26e2:	c0 90 2b 04 	lds	r12, 0x042B
    26e6:	d0 90 2c 04 	lds	r13, 0x042C
    26ea:	e0 90 2d 04 	lds	r14, 0x042D
    26ee:	f0 90 2e 04 	lds	r15, 0x042E
    26f2:	00 91 31 04 	lds	r16, 0x0431
    26f6:	10 91 32 04 	lds	r17, 0x0432
    26fa:	20 91 33 04 	lds	r18, 0x0433
    26fe:	30 91 34 04 	lds	r19, 0x0434
    2702:	0c 0d       	add	r16, r12
    2704:	1d 1d       	adc	r17, r13
    2706:	2e 1d       	adc	r18, r14
    2708:	3f 1d       	adc	r19, r15
    270a:	68 01       	movw	r12, r16
    270c:	79 01       	movw	r14, r18
    270e:	f6 94       	lsr	r15
    2710:	e7 94       	ror	r14
    2712:	d7 94       	ror	r13
    2714:	c7 94       	ror	r12
    2716:	f6 94       	lsr	r15
    2718:	e7 94       	ror	r14
    271a:	d7 94       	ror	r13
    271c:	c7 94       	ror	r12
    271e:	97 01       	movw	r18, r14
    2720:	86 01       	movw	r16, r12
    2722:	00 0f       	add	r16, r16
    2724:	11 1f       	adc	r17, r17
    2726:	22 1f       	adc	r18, r18
    2728:	33 1f       	adc	r19, r19
    272a:	00 0f       	add	r16, r16
    272c:	11 1f       	adc	r17, r17
    272e:	22 1f       	adc	r18, r18
    2730:	33 1f       	adc	r19, r19
    2732:	48 01       	movw	r8, r16
    2734:	59 01       	movw	r10, r18
    2736:	88 0c       	add	r8, r8
    2738:	99 1c       	adc	r9, r9
    273a:	aa 1c       	adc	r10, r10
    273c:	bb 1c       	adc	r11, r11
    273e:	88 0c       	add	r8, r8
    2740:	99 1c       	adc	r9, r9
    2742:	aa 1c       	adc	r10, r10
    2744:	bb 1c       	adc	r11, r11
    2746:	08 0d       	add	r16, r8
    2748:	19 1d       	adc	r17, r9
    274a:	2a 1d       	adc	r18, r10
    274c:	3b 1d       	adc	r19, r11
    274e:	0c 0d       	add	r16, r12
    2750:	1d 1d       	adc	r17, r13
    2752:	2e 1d       	adc	r18, r14
    2754:	3f 1d       	adc	r19, r15
    2756:	6b 01       	movw	r12, r22
    2758:	7c 01       	movw	r14, r24
    275a:	c0 0e       	add	r12, r16
    275c:	d1 1e       	adc	r13, r17
    275e:	e2 1e       	adc	r14, r18
    2760:	f3 1e       	adc	r15, r19
    2762:	c0 92 d8 05 	sts	0x05D8, r12
    2766:	d0 92 d9 05 	sts	0x05D9, r13
    276a:	e0 92 da 05 	sts	0x05DA, r14
    276e:	f0 92 db 05 	sts	0x05DB, r15
	vitezaCuCareParcurg = viteza;
    2772:	40 93 e5 05 	sts	0x05E5, r20
	addEntryIfNotExists(&SMFParcurgereDistanta, 10*1000UL, Periodic);
    2776:	21 e0       	ldi	r18, 0x01	; 1
    2778:	40 e1       	ldi	r20, 0x10	; 16
    277a:	57 e2       	ldi	r21, 0x27	; 39
    277c:	60 e0       	ldi	r22, 0x00	; 0
    277e:	70 e0       	ldi	r23, 0x00	; 0
    2780:	81 e7       	ldi	r24, 0x71	; 113
    2782:	92 e1       	ldi	r25, 0x12	; 18
    2784:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <addEntryIfNotExists>
}
    2788:	1f 91       	pop	r17
    278a:	0f 91       	pop	r16
    278c:	ff 90       	pop	r15
    278e:	ef 90       	pop	r14
    2790:	df 90       	pop	r13
    2792:	cf 90       	pop	r12
    2794:	bf 90       	pop	r11
    2796:	af 90       	pop	r10
    2798:	9f 90       	pop	r9
    279a:	8f 90       	pop	r8
    279c:	08 95       	ret

0000279e <isParalel>:
}



ParallelResult isParalel(uint32_t sideValue, uint32_t frontValue, uint32_t sensorOffset, uint32_t epsilon, uint32_t warningEpsilon)
{
    279e:	4f 92       	push	r4
    27a0:	5f 92       	push	r5
    27a2:	6f 92       	push	r6
    27a4:	7f 92       	push	r7
    27a6:	af 92       	push	r10
    27a8:	bf 92       	push	r11
    27aa:	cf 92       	push	r12
    27ac:	df 92       	push	r13
    27ae:	ef 92       	push	r14
    27b0:	ff 92       	push	r15
    27b2:	0f 93       	push	r16
    27b4:	1f 93       	push	r17
    27b6:	cf 93       	push	r28
    27b8:	df 93       	push	r29
    27ba:	00 d0       	rcall	.+0      	; 0x27bc <isParalel+0x1e>
    27bc:	00 d0       	rcall	.+0      	; 0x27be <isParalel+0x20>
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
    27c2:	2b 01       	movw	r4, r22
    27c4:	3c 01       	movw	r6, r24
    27c6:	29 83       	std	Y+1, r18	; 0x01
    27c8:	3a 83       	std	Y+2, r19	; 0x02
    27ca:	4b 83       	std	Y+3, r20	; 0x03
    27cc:	5c 83       	std	Y+4, r21	; 0x04
	uint32_t sideCalculated = (frontValue - (sensorOffset * (1<<9) / 362)) * 362 / (1<<9);
    27ce:	c8 01       	movw	r24, r16
    27d0:	b7 01       	movw	r22, r14
    27d2:	05 2e       	mov	r0, r21
    27d4:	59 e0       	ldi	r21, 0x09	; 9
    27d6:	66 0f       	add	r22, r22
    27d8:	77 1f       	adc	r23, r23
    27da:	88 1f       	adc	r24, r24
    27dc:	99 1f       	adc	r25, r25
    27de:	5a 95       	dec	r21
    27e0:	d1 f7       	brne	.-12     	; 0x27d6 <isParalel+0x38>
    27e2:	50 2d       	mov	r21, r0
    27e4:	2a e6       	ldi	r18, 0x6A	; 106
    27e6:	31 e0       	ldi	r19, 0x01	; 1
    27e8:	40 e0       	ldi	r20, 0x00	; 0
    27ea:	50 e0       	ldi	r21, 0x00	; 0
    27ec:	0e 94 69 19 	call	0x32d2	; 0x32d2 <__udivmodsi4>
    27f0:	89 81       	ldd	r24, Y+1	; 0x01
    27f2:	9a 81       	ldd	r25, Y+2	; 0x02
    27f4:	ab 81       	ldd	r26, Y+3	; 0x03
    27f6:	bc 81       	ldd	r27, Y+4	; 0x04
    27f8:	82 1b       	sub	r24, r18
    27fa:	93 0b       	sbc	r25, r19
    27fc:	a4 0b       	sbc	r26, r20
    27fe:	b5 0b       	sbc	r27, r21
    2800:	9c 01       	movw	r18, r24
    2802:	ad 01       	movw	r20, r26
    2804:	aa e6       	ldi	r26, 0x6A	; 106
    2806:	b1 e0       	ldi	r27, 0x01	; 1
    2808:	0e 94 a0 19 	call	0x3340	; 0x3340 <__muluhisi3>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	07 2e       	mov	r0, r23
    2812:	79 e0       	ldi	r23, 0x09	; 9
    2814:	b6 95       	lsr	r27
    2816:	a7 95       	ror	r26
    2818:	97 95       	ror	r25
    281a:	87 95       	ror	r24
    281c:	7a 95       	dec	r23
    281e:	d1 f7       	brne	.-12     	; 0x2814 <isParalel+0x76>
    2820:	70 2d       	mov	r23, r0
	
	if(sideCalculated > sideValue)
    2822:	48 16       	cp	r4, r24
    2824:	59 06       	cpc	r5, r25
    2826:	6a 06       	cpc	r6, r26
    2828:	7b 06       	cpc	r7, r27
    282a:	a0 f4       	brcc	.+40     	; 0x2854 <isParalel+0xb6>
		if(sideCalculated - sideValue > warningEpsilon)
    282c:	84 19       	sub	r24, r4
    282e:	95 09       	sbc	r25, r5
    2830:	a6 09       	sbc	r26, r6
    2832:	b7 09       	sbc	r27, r7
    2834:	2d 89       	ldd	r18, Y+21	; 0x15
    2836:	3e 89       	ldd	r19, Y+22	; 0x16
    2838:	4f 89       	ldd	r20, Y+23	; 0x17
    283a:	58 8d       	ldd	r21, Y+24	; 0x18
    283c:	28 17       	cp	r18, r24
    283e:	39 07       	cpc	r19, r25
    2840:	4a 07       	cpc	r20, r26
    2842:	5b 07       	cpc	r21, r27
    2844:	d8 f0       	brcs	.+54     	; 0x287c <isParalel+0xde>
			return PreaDepartat;
		else if(sideCalculated - sideValue > epsilon)
    2846:	a8 16       	cp	r10, r24
    2848:	b9 06       	cpc	r11, r25
    284a:	ca 06       	cpc	r12, r26
    284c:	db 06       	cpc	r13, r27
    284e:	c0 f4       	brcc	.+48     	; 0x2880 <isParalel+0xe2>
			return Departat;
    2850:	83 e0       	ldi	r24, 0x03	; 3
    2852:	1b c0       	rjmp	.+54     	; 0x288a <isParalel+0xec>
		else
			return Paralel;
	else
		if(sideValue - sideCalculated > warningEpsilon)
    2854:	48 1a       	sub	r4, r24
    2856:	59 0a       	sbc	r5, r25
    2858:	6a 0a       	sbc	r6, r26
    285a:	7b 0a       	sbc	r7, r27
    285c:	8d 89       	ldd	r24, Y+21	; 0x15
    285e:	9e 89       	ldd	r25, Y+22	; 0x16
    2860:	af 89       	ldd	r26, Y+23	; 0x17
    2862:	b8 8d       	ldd	r27, Y+24	; 0x18
    2864:	84 15       	cp	r24, r4
    2866:	95 05       	cpc	r25, r5
    2868:	a6 05       	cpc	r26, r6
    286a:	b7 05       	cpc	r27, r7
    286c:	58 f0       	brcs	.+22     	; 0x2884 <isParalel+0xe6>
			return PreaApropiat;
		else if(sideValue - sideCalculated > epsilon)
    286e:	a4 14       	cp	r10, r4
    2870:	b5 04       	cpc	r11, r5
    2872:	c6 04       	cpc	r12, r6
    2874:	d7 04       	cpc	r13, r7
    2876:	40 f4       	brcc	.+16     	; 0x2888 <isParalel+0xea>
			return Apropiat;
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	07 c0       	rjmp	.+14     	; 0x288a <isParalel+0xec>
{
	uint32_t sideCalculated = (frontValue - (sensorOffset * (1<<9) / 362)) * 362 / (1<<9);
	
	if(sideCalculated > sideValue)
		if(sideCalculated - sideValue > warningEpsilon)
			return PreaDepartat;
    287c:	84 e0       	ldi	r24, 0x04	; 4
    287e:	05 c0       	rjmp	.+10     	; 0x288a <isParalel+0xec>
		else if(sideCalculated - sideValue > epsilon)
			return Departat;
		else
			return Paralel;
    2880:	82 e0       	ldi	r24, 0x02	; 2
    2882:	03 c0       	rjmp	.+6      	; 0x288a <isParalel+0xec>
	else
		if(sideValue - sideCalculated > warningEpsilon)
			return PreaApropiat;
    2884:	80 e0       	ldi	r24, 0x00	; 0
    2886:	01 c0       	rjmp	.+2      	; 0x288a <isParalel+0xec>
		else if(sideValue - sideCalculated > epsilon)
			return Apropiat;
		else 
			return Paralel;
    2888:	82 e0       	ldi	r24, 0x02	; 2
}
    288a:	0f 90       	pop	r0
    288c:	0f 90       	pop	r0
    288e:	0f 90       	pop	r0
    2890:	0f 90       	pop	r0
    2892:	df 91       	pop	r29
    2894:	cf 91       	pop	r28
    2896:	1f 91       	pop	r17
    2898:	0f 91       	pop	r16
    289a:	ff 90       	pop	r15
    289c:	ef 90       	pop	r14
    289e:	df 90       	pop	r13
    28a0:	cf 90       	pop	r12
    28a2:	bf 90       	pop	r11
    28a4:	af 90       	pop	r10
    28a6:	7f 90       	pop	r7
    28a8:	6f 90       	pop	r6
    28aa:	5f 90       	pop	r5
    28ac:	4f 90       	pop	r4
    28ae:	08 95       	ret

000028b0 <SMPcheck>:
		addEntryIfNotExists(&SMPcheck, 250UL * 1000UL, Periodic),
		BTTransmitStr("added paralel check fct");
}

volatile ParallelResult lastParallelResult = Paralel;
uint8_t SMPcheck(){
    28b0:	af 92       	push	r10
    28b2:	bf 92       	push	r11
    28b4:	cf 92       	push	r12
    28b6:	df 92       	push	r13
    28b8:	ef 92       	push	r14
    28ba:	ff 92       	push	r15
    28bc:	0f 93       	push	r16
    28be:	1f 93       	push	r17
    28c0:	cf 93       	push	r28
    28c2:	df 93       	push	r29
	//sensor offset 95 mm;	
	uint32_t fr, sr;
	fr = getValueOfSensor(FrontRightSensor);
    28c4:	82 e0       	ldi	r24, 0x02	; 2
    28c6:	0e 94 08 08 	call	0x1010	; 0x1010 <getValueOfSensor>
    28ca:	ec 01       	movw	r28, r24
	//fr = getValueOfSensor(FrontRightSensor);
	sr = getValueOfSensor(SideRightSensor);
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	0e 94 08 08 	call	0x1010	; 0x1010 <getValueOfSensor>

volatile ParallelResult lastParallelResult = Paralel;
uint8_t SMPcheck(){
	//sensor offset 95 mm;	
	uint32_t fr, sr;
	fr = getValueOfSensor(FrontRightSensor);
    28d2:	9e 01       	movw	r18, r28
    28d4:	40 e0       	ldi	r20, 0x00	; 0
    28d6:	50 e0       	ldi	r21, 0x00	; 0
	//fr = getValueOfSensor(FrontRightSensor);
	sr = getValueOfSensor(SideRightSensor);
    28d8:	bc 01       	movw	r22, r24
    28da:	80 e0       	ldi	r24, 0x00	; 0
    28dc:	90 e0       	ldi	r25, 0x00	; 0
	//sr = getValueOfSensor(SideRightSensor);
	
	ParallelResult rez = isParalel(sr, fr, 95, 22, 45);
    28de:	1f 92       	push	r1
    28e0:	1f 92       	push	r1
    28e2:	1f 92       	push	r1
    28e4:	ed e2       	ldi	r30, 0x2D	; 45
    28e6:	ef 93       	push	r30
    28e8:	0f 2e       	mov	r0, r31
    28ea:	f6 e1       	ldi	r31, 0x16	; 22
    28ec:	af 2e       	mov	r10, r31
    28ee:	b1 2c       	mov	r11, r1
    28f0:	c1 2c       	mov	r12, r1
    28f2:	d1 2c       	mov	r13, r1
    28f4:	f0 2d       	mov	r31, r0
    28f6:	1f e5       	ldi	r17, 0x5F	; 95
    28f8:	e1 2e       	mov	r14, r17
    28fa:	f1 2c       	mov	r15, r1
    28fc:	00 e0       	ldi	r16, 0x00	; 0
    28fe:	10 e0       	ldi	r17, 0x00	; 0
    2900:	0e 94 cf 13 	call	0x279e	; 0x279e <isParalel>
    2904:	0f 90       	pop	r0
    2906:	0f 90       	pop	r0
    2908:	0f 90       	pop	r0
    290a:	0f 90       	pop	r0
    290c:	c8 2f       	mov	r28, r24
	
	//char msg[50];
	//sprintf(msg, "is paralel: %d sr:%lu  fr:%lu", rez, sr, fr);
	//BTTransmitStr(msg);
	if(rez == Paralel && lastParallelResult == Paralel)
    290e:	82 30       	cpi	r24, 0x02	; 2
    2910:	29 f4       	brne	.+10     	; 0x291c <SMPcheck+0x6c>
    2912:	80 91 01 01 	lds	r24, 0x0101
    2916:	82 30       	cpi	r24, 0x02	; 2
    2918:	a9 f5       	brne	.+106    	; 0x2984 <SMPcheck+0xd4>
    291a:	30 c0       	rjmp	.+96     	; 0x297c <SMPcheck+0xcc>
		return YES;
	if(rez != lastParallelResult){
    291c:	80 91 01 01 	lds	r24, 0x0101
    2920:	c8 17       	cp	r28, r24
    2922:	71 f1       	breq	.+92     	; 0x2980 <SMPcheck+0xd0>
		switch(rez){
    2924:	c2 30       	cpi	r28, 0x02	; 2
    2926:	b9 f0       	breq	.+46     	; 0x2956 <SMPcheck+0xa6>
    2928:	28 f4       	brcc	.+10     	; 0x2934 <SMPcheck+0x84>
    292a:	cc 23       	and	r28, r28
    292c:	41 f0       	breq	.+16     	; 0x293e <SMPcheck+0x8e>
    292e:	c1 30       	cpi	r28, 0x01	; 1
    2930:	61 f0       	breq	.+24     	; 0x294a <SMPcheck+0x9a>
    2932:	20 c0       	rjmp	.+64     	; 0x2974 <SMPcheck+0xc4>
    2934:	c3 30       	cpi	r28, 0x03	; 3
    2936:	99 f0       	breq	.+38     	; 0x295e <SMPcheck+0xae>
    2938:	c4 30       	cpi	r28, 0x04	; 4
    293a:	b9 f0       	breq	.+46     	; 0x296a <SMPcheck+0xba>
    293c:	1b c0       	rjmp	.+54     	; 0x2974 <SMPcheck+0xc4>
			case PreaApropiat:
				rotirePeLoc(10, 75, RightEngines);
    293e:	40 e0       	ldi	r20, 0x00	; 0
    2940:	6b e4       	ldi	r22, 0x4B	; 75
    2942:	8a e0       	ldi	r24, 0x0A	; 10
    2944:	0e 94 25 07 	call	0xe4a	; 0xe4a <rotirePeLoc>
			break;		
    2948:	15 c0       	rjmp	.+42     	; 0x2974 <SMPcheck+0xc4>
			case Apropiat:
				rotirePeLoc(10, 60, RightEngines);
    294a:	40 e0       	ldi	r20, 0x00	; 0
    294c:	6c e3       	ldi	r22, 0x3C	; 60
    294e:	8a e0       	ldi	r24, 0x0A	; 10
    2950:	0e 94 25 07 	call	0xe4a	; 0xe4a <rotirePeLoc>
			break;		
    2954:	0f c0       	rjmp	.+30     	; 0x2974 <SMPcheck+0xc4>
			case Paralel:
				stopEngines();
    2956:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <stopEngines>
				return YES;
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	18 c0       	rjmp	.+48     	; 0x298e <SMPcheck+0xde>
			break;
			case Departat:
				rotirePeLoc(10, 60, LeftEngines);
    295e:	41 e0       	ldi	r20, 0x01	; 1
    2960:	6c e3       	ldi	r22, 0x3C	; 60
    2962:	8a e0       	ldi	r24, 0x0A	; 10
    2964:	0e 94 25 07 	call	0xe4a	; 0xe4a <rotirePeLoc>
			break;
    2968:	05 c0       	rjmp	.+10     	; 0x2974 <SMPcheck+0xc4>
			case PreaDepartat:
				rotirePeLoc(10, 75, LeftEngines);
    296a:	41 e0       	ldi	r20, 0x01	; 1
    296c:	6b e4       	ldi	r22, 0x4B	; 75
    296e:	8a e0       	ldi	r24, 0x0A	; 10
    2970:	0e 94 25 07 	call	0xe4a	; 0xe4a <rotirePeLoc>
			break;
		}
		lastParallelResult = rez;
    2974:	c0 93 01 01 	sts	0x0101, r28
	}	
	return NO;
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	09 c0       	rjmp	.+18     	; 0x298e <SMPcheck+0xde>
	
	//char msg[50];
	//sprintf(msg, "is paralel: %d sr:%lu  fr:%lu", rez, sr, fr);
	//BTTransmitStr(msg);
	if(rez == Paralel && lastParallelResult == Paralel)
		return YES;
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	07 c0       	rjmp	.+14     	; 0x298e <SMPcheck+0xde>
				rotirePeLoc(10, 75, LeftEngines);
			break;
		}
		lastParallelResult = rez;
	}	
	return NO;
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	05 c0       	rjmp	.+10     	; 0x298e <SMPcheck+0xde>
	//char msg[50];
	//sprintf(msg, "is paralel: %d sr:%lu  fr:%lu", rez, sr, fr);
	//BTTransmitStr(msg);
	if(rez == Paralel && lastParallelResult == Paralel)
		return YES;
	if(rez != lastParallelResult){
    2984:	80 91 01 01 	lds	r24, 0x0101
    2988:	82 30       	cpi	r24, 0x02	; 2
    298a:	29 f7       	brne	.-54     	; 0x2956 <SMPcheck+0xa6>
				rotirePeLoc(10, 75, LeftEngines);
			break;
		}
		lastParallelResult = rez;
	}	
	return NO;
    298c:	80 e0       	ldi	r24, 0x00	; 0
}
    298e:	df 91       	pop	r29
    2990:	cf 91       	pop	r28
    2992:	1f 91       	pop	r17
    2994:	0f 91       	pop	r16
    2996:	ff 90       	pop	r15
    2998:	ef 90       	pop	r14
    299a:	df 90       	pop	r13
    299c:	cf 90       	pop	r12
    299e:	bf 90       	pop	r11
    29a0:	af 90       	pop	r10
    29a2:	08 95       	ret

000029a4 <initParalelParking>:

uint32_t srTmp;
uint8_t lastState;

void initParalelParking(){
	statePP = 33;
    29a4:	81 e2       	ldi	r24, 0x21	; 33
    29a6:	80 93 70 05 	sts	0x0570, r24
	secsCounter = 0;
    29aa:	10 92 e0 05 	sts	0x05E0, r1
	//statePP = 7;
	lastState = 0;
    29ae:	10 92 d7 05 	sts	0x05D7, r1
	srTmp = 0;
    29b2:	10 92 e1 05 	sts	0x05E1, r1
    29b6:	10 92 e2 05 	sts	0x05E2, r1
    29ba:	10 92 e3 05 	sts	0x05E3, r1
    29be:	10 92 e4 05 	sts	0x05E4, r1
	addEntryIfNotExists(&paralelParkingSMF, 250*1000UL, Periodic);
    29c2:	21 e0       	ldi	r18, 0x01	; 1
    29c4:	40 e9       	ldi	r20, 0x90	; 144
    29c6:	50 ed       	ldi	r21, 0xD0	; 208
    29c8:	63 e0       	ldi	r22, 0x03	; 3
    29ca:	70 e0       	ldi	r23, 0x00	; 0
    29cc:	89 ec       	ldi	r24, 0xC9	; 201
    29ce:	95 e1       	ldi	r25, 0x15	; 21
    29d0:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <addEntryIfNotExists>
    29d4:	08 95       	ret

000029d6 <checkMinim>:
}
char msg[100];
uint8_t tmpCnt;
uint32_t minTest;
uint8_t checkMinim(void)
{
    29d6:	cf 92       	push	r12
    29d8:	df 92       	push	r13
    29da:	ef 92       	push	r14
    29dc:	ff 92       	push	r15
	uint32_t sr;
	sr = getValueOfSensor(SideRightSensor);	
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	0e 94 08 08 	call	0x1010	; 0x1010 <getValueOfSensor>
    29e4:	6c 01       	movw	r12, r24
    29e6:	e1 2c       	mov	r14, r1
    29e8:	f1 2c       	mov	r15, r1
	
	sprintf(msg, "cm st:%u ", lastState);
    29ea:	80 91 d7 05 	lds	r24, 0x05D7
    29ee:	1f 92       	push	r1
    29f0:	8f 93       	push	r24
    29f2:	80 ef       	ldi	r24, 0xF0	; 240
    29f4:	93 e0       	ldi	r25, 0x03	; 3
    29f6:	9f 93       	push	r25
    29f8:	8f 93       	push	r24
    29fa:	82 e7       	ldi	r24, 0x72	; 114
    29fc:	95 e0       	ldi	r25, 0x05	; 5
    29fe:	9f 93       	push	r25
    2a00:	8f 93       	push	r24
    2a02:	0e 94 bf 19 	call	0x337e	; 0x337e <sprintf>
	BTTransmitStr(msg);
    2a06:	82 e7       	ldi	r24, 0x72	; 114
    2a08:	95 e0       	ldi	r25, 0x05	; 5
    2a0a:	0e 94 a8 01 	call	0x350	; 0x350 <BTTransmitStr>
	
	switch(lastState){
    2a0e:	0f 90       	pop	r0
    2a10:	0f 90       	pop	r0
    2a12:	0f 90       	pop	r0
    2a14:	0f 90       	pop	r0
    2a16:	0f 90       	pop	r0
    2a18:	0f 90       	pop	r0
    2a1a:	80 91 d7 05 	lds	r24, 0x05D7
    2a1e:	82 30       	cpi	r24, 0x02	; 2
    2a20:	09 f4       	brne	.+2      	; 0x2a24 <checkMinim+0x4e>
    2a22:	4c c0       	rjmp	.+152    	; 0x2abc <checkMinim+0xe6>
    2a24:	28 f4       	brcc	.+10     	; 0x2a30 <checkMinim+0x5a>
    2a26:	88 23       	and	r24, r24
    2a28:	51 f0       	breq	.+20     	; 0x2a3e <checkMinim+0x68>
    2a2a:	81 30       	cpi	r24, 0x01	; 1
    2a2c:	d1 f0       	breq	.+52     	; 0x2a62 <checkMinim+0x8c>
    2a2e:	a5 c0       	rjmp	.+330    	; 0x2b7a <checkMinim+0x1a4>
    2a30:	83 30       	cpi	r24, 0x03	; 3
    2a32:	09 f4       	brne	.+2      	; 0x2a36 <checkMinim+0x60>
    2a34:	60 c0       	rjmp	.+192    	; 0x2af6 <checkMinim+0x120>
    2a36:	84 30       	cpi	r24, 0x04	; 4
    2a38:	09 f4       	brne	.+2      	; 0x2a3c <checkMinim+0x66>
    2a3a:	94 c0       	rjmp	.+296    	; 0x2b64 <checkMinim+0x18e>
    2a3c:	9e c0       	rjmp	.+316    	; 0x2b7a <checkMinim+0x1a4>
		case 0:
			lastState = 1;
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	80 93 d7 05 	sts	0x05D7, r24
			srTmp = sr;
    2a44:	c0 92 e1 05 	sts	0x05E1, r12
    2a48:	d0 92 e2 05 	sts	0x05E2, r13
    2a4c:	e0 92 e3 05 	sts	0x05E3, r14
    2a50:	f0 92 e4 05 	sts	0x05E4, r15
			rotirePeLoc(15, 90, RightEngines);
    2a54:	40 e0       	ldi	r20, 0x00	; 0
    2a56:	6a e5       	ldi	r22, 0x5A	; 90
    2a58:	8f e0       	ldi	r24, 0x0F	; 15
    2a5a:	0e 94 25 07 	call	0xe4a	; 0xe4a <rotirePeLoc>
		break;
		
		
	}
	
	return NO;
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
	switch(lastState){
		case 0:
			lastState = 1;
			srTmp = sr;
			rotirePeLoc(15, 90, RightEngines);
		break;
    2a60:	93 c0       	rjmp	.+294    	; 0x2b88 <checkMinim+0x1b2>
		case 1:
			if( sr > srTmp + 5){
    2a62:	80 91 e1 05 	lds	r24, 0x05E1
    2a66:	90 91 e2 05 	lds	r25, 0x05E2
    2a6a:	a0 91 e3 05 	lds	r26, 0x05E3
    2a6e:	b0 91 e4 05 	lds	r27, 0x05E4
    2a72:	ac 01       	movw	r20, r24
    2a74:	bd 01       	movw	r22, r26
    2a76:	4b 5f       	subi	r20, 0xFB	; 251
    2a78:	5f 4f       	sbci	r21, 0xFF	; 255
    2a7a:	6f 4f       	sbci	r22, 0xFF	; 255
    2a7c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a7e:	4c 15       	cp	r20, r12
    2a80:	5d 05       	cpc	r21, r13
    2a82:	6e 05       	cpc	r22, r14
    2a84:	7f 05       	cpc	r23, r15
    2a86:	50 f4       	brcc	.+20     	; 0x2a9c <checkMinim+0xc6>
				srTmp = sr;
    2a88:	c0 92 e1 05 	sts	0x05E1, r12
    2a8c:	d0 92 e2 05 	sts	0x05E2, r13
    2a90:	e0 92 e3 05 	sts	0x05E3, r14
    2a94:	f0 92 e4 05 	sts	0x05E4, r15
		break;
		
		
	}
	
	return NO;
    2a98:	80 e0       	ldi	r24, 0x00	; 0
    2a9a:	76 c0       	rjmp	.+236    	; 0x2b88 <checkMinim+0x1b2>
		break;
		case 1:
			if( sr > srTmp + 5){
				srTmp = sr;
			}
			else if(sr < srTmp - 5){
    2a9c:	05 97       	sbiw	r24, 0x05	; 5
    2a9e:	a1 09       	sbc	r26, r1
    2aa0:	b1 09       	sbc	r27, r1
    2aa2:	c8 16       	cp	r12, r24
    2aa4:	d9 06       	cpc	r13, r25
    2aa6:	ea 06       	cpc	r14, r26
    2aa8:	fb 06       	cpc	r15, r27
    2aaa:	08 f0       	brcs	.+2      	; 0x2aae <checkMinim+0xd8>
    2aac:	68 c0       	rjmp	.+208    	; 0x2b7e <checkMinim+0x1a8>
				lastState = 2;
    2aae:	82 e0       	ldi	r24, 0x02	; 2
    2ab0:	80 93 d7 05 	sts	0x05D7, r24
				tmpCnt=0;
    2ab4:	10 92 71 05 	sts	0x0571, r1
		break;
		
		
	}
	
	return NO;
    2ab8:	80 e0       	ldi	r24, 0x00	; 0
    2aba:	66 c0       	rjmp	.+204    	; 0x2b88 <checkMinim+0x1b2>
				lastState = 2;
				tmpCnt=0;
			}
		break;
		case 2:
			tmpCnt++;
    2abc:	80 91 71 05 	lds	r24, 0x0571
    2ac0:	8f 5f       	subi	r24, 0xFF	; 255
    2ac2:	80 93 71 05 	sts	0x0571, r24
			srTmp = sr;
    2ac6:	c0 92 e1 05 	sts	0x05E1, r12
    2aca:	d0 92 e2 05 	sts	0x05E2, r13
    2ace:	e0 92 e3 05 	sts	0x05E3, r14
    2ad2:	f0 92 e4 05 	sts	0x05E4, r15
			if(tmpCnt>3){
    2ad6:	84 30       	cpi	r24, 0x04	; 4
    2ad8:	08 f4       	brcc	.+2      	; 0x2adc <checkMinim+0x106>
    2ada:	53 c0       	rjmp	.+166    	; 0x2b82 <checkMinim+0x1ac>
				lastState = 3;
    2adc:	83 e0       	ldi	r24, 0x03	; 3
    2ade:	80 93 d7 05 	sts	0x05D7, r24
				minTest = sr;	
    2ae2:	c0 92 6b 05 	sts	0x056B, r12
    2ae6:	d0 92 6c 05 	sts	0x056C, r13
    2aea:	e0 92 6d 05 	sts	0x056D, r14
    2aee:	f0 92 6e 05 	sts	0x056E, r15
		break;
		
		
	}
	
	return NO;
    2af2:	80 e0       	ldi	r24, 0x00	; 0
    2af4:	49 c0       	rjmp	.+146    	; 0x2b88 <checkMinim+0x1b2>
				lastState = 3;
				minTest = sr;	
			}
		break;
		case 3:
			if( sr > srTmp )
    2af6:	80 91 e1 05 	lds	r24, 0x05E1
    2afa:	90 91 e2 05 	lds	r25, 0x05E2
    2afe:	a0 91 e3 05 	lds	r26, 0x05E3
    2b02:	b0 91 e4 05 	lds	r27, 0x05E4
    2b06:	8c 15       	cp	r24, r12
    2b08:	9d 05       	cpc	r25, r13
    2b0a:	ae 05       	cpc	r26, r14
    2b0c:	bf 05       	cpc	r27, r15
    2b0e:	48 f4       	brcc	.+18     	; 0x2b22 <checkMinim+0x14c>
			{
				lastState = 4;
    2b10:	84 e0       	ldi	r24, 0x04	; 4
    2b12:	80 93 d7 05 	sts	0x05D7, r24
				tmpCnt = 0;
    2b16:	10 92 71 05 	sts	0x0571, r1
				rotirePeLoc(4, 65, LeftEngines);
    2b1a:	41 e0       	ldi	r20, 0x01	; 1
    2b1c:	61 e4       	ldi	r22, 0x41	; 65
    2b1e:	0e 94 25 07 	call	0xe4a	; 0xe4a <rotirePeLoc>
			}
			srTmp = sr;
    2b22:	c0 92 e1 05 	sts	0x05E1, r12
    2b26:	d0 92 e2 05 	sts	0x05E2, r13
    2b2a:	e0 92 e3 05 	sts	0x05E3, r14
    2b2e:	f0 92 e4 05 	sts	0x05E4, r15
			minTest = minTest>sr?sr:minTest;
    2b32:	80 91 6b 05 	lds	r24, 0x056B
    2b36:	90 91 6c 05 	lds	r25, 0x056C
    2b3a:	a0 91 6d 05 	lds	r26, 0x056D
    2b3e:	b0 91 6e 05 	lds	r27, 0x056E
    2b42:	8c 15       	cp	r24, r12
    2b44:	9d 05       	cpc	r25, r13
    2b46:	ae 05       	cpc	r26, r14
    2b48:	bf 05       	cpc	r27, r15
    2b4a:	10 f4       	brcc	.+4      	; 0x2b50 <checkMinim+0x17a>
    2b4c:	6c 01       	movw	r12, r24
    2b4e:	7d 01       	movw	r14, r26
    2b50:	c0 92 6b 05 	sts	0x056B, r12
    2b54:	d0 92 6c 05 	sts	0x056C, r13
    2b58:	e0 92 6d 05 	sts	0x056D, r14
    2b5c:	f0 92 6e 05 	sts	0x056E, r15
		break;
		
		
	}
	
	return NO;
    2b60:	80 e0       	ldi	r24, 0x00	; 0
				tmpCnt = 0;
				rotirePeLoc(4, 65, LeftEngines);
			}
			srTmp = sr;
			minTest = minTest>sr?sr:minTest;
		break;
    2b62:	12 c0       	rjmp	.+36     	; 0x2b88 <checkMinim+0x1b2>
		case 4:
			tmpCnt++;
    2b64:	80 91 71 05 	lds	r24, 0x0571
    2b68:	8f 5f       	subi	r24, 0xFF	; 255
    2b6a:	80 93 71 05 	sts	0x0571, r24
			if(tmpCnt>4){
    2b6e:	85 30       	cpi	r24, 0x05	; 5
    2b70:	50 f0       	brcs	.+20     	; 0x2b86 <checkMinim+0x1b0>
				stopEngines();
    2b72:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <stopEngines>
				return YES;
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	07 c0       	rjmp	.+14     	; 0x2b88 <checkMinim+0x1b2>
		break;
		
		
	}
	
	return NO;
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	05 c0       	rjmp	.+10     	; 0x2b88 <checkMinim+0x1b2>
    2b7e:	80 e0       	ldi	r24, 0x00	; 0
    2b80:	03 c0       	rjmp	.+6      	; 0x2b88 <checkMinim+0x1b2>
    2b82:	80 e0       	ldi	r24, 0x00	; 0
    2b84:	01 c0       	rjmp	.+2      	; 0x2b88 <checkMinim+0x1b2>
    2b86:	80 e0       	ldi	r24, 0x00	; 0
	
    2b88:	ff 90       	pop	r15
    2b8a:	ef 90       	pop	r14
    2b8c:	df 90       	pop	r13
    2b8e:	cf 90       	pop	r12
    2b90:	08 95       	ret

00002b92 <paralelParkingSMF>:
uint32_t distDeParcurs;

uint8_t checkMinim(void);
uint32_t xx;
uint8_t cnt2;
uint8_t paralelParkingSMF(){
    2b92:	8f 92       	push	r8
    2b94:	9f 92       	push	r9
    2b96:	af 92       	push	r10
    2b98:	bf 92       	push	r11
    2b9a:	cf 92       	push	r12
    2b9c:	df 92       	push	r13
    2b9e:	ef 92       	push	r14
    2ba0:	ff 92       	push	r15
    2ba2:	0f 93       	push	r16
	uint32_t fr, sr;
	fr = getValueOfSensor(FrontRightSensor);
    2ba4:	82 e0       	ldi	r24, 0x02	; 2
    2ba6:	0e 94 08 08 	call	0x1010	; 0x1010 <getValueOfSensor>
    2baa:	4c 01       	movw	r8, r24
    2bac:	a1 2c       	mov	r10, r1
    2bae:	b1 2c       	mov	r11, r1
	//fr = getValueOfSensor(FrontRightSensor);
	sr = getValueOfSensor(SideRightSensor);
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	0e 94 08 08 	call	0x1010	; 0x1010 <getValueOfSensor>
    2bb6:	6c 01       	movw	r12, r24
    2bb8:	e1 2c       	mov	r14, r1
    2bba:	f1 2c       	mov	r15, r1
	switch(statePP){
    2bbc:	40 91 70 05 	lds	r20, 0x0570
    2bc0:	50 e0       	ldi	r21, 0x00	; 0
    2bc2:	45 36       	cpi	r20, 0x65	; 101
    2bc4:	51 05       	cpc	r21, r1
    2bc6:	08 f0       	brcs	.+2      	; 0x2bca <paralelParkingSMF+0x38>
    2bc8:	5d c3       	rjmp	.+1722   	; 0x3284 <paralelParkingSMF+0x6f2>
    2bca:	fa 01       	movw	r30, r20
    2bcc:	e9 5a       	subi	r30, 0xA9	; 169
    2bce:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd0:	0c 94 8b 19 	jmp	0x3316	; 0x3316 <__tablejump2__>
		case 33:
			goFront(30, 160);
    2bd4:	60 ea       	ldi	r22, 0xA0	; 160
    2bd6:	8e e1       	ldi	r24, 0x1E	; 30
    2bd8:	0e 94 4c 05 	call	0xa98	; 0xa98 <goFront>
			distDeParcurs = DISTANTA_PARCURSA + 200;
    2bdc:	80 91 2b 04 	lds	r24, 0x042B
    2be0:	90 91 2c 04 	lds	r25, 0x042C
    2be4:	a0 91 2d 04 	lds	r26, 0x042D
    2be8:	b0 91 2e 04 	lds	r27, 0x042E
    2bec:	40 91 31 04 	lds	r20, 0x0431
    2bf0:	50 91 32 04 	lds	r21, 0x0432
    2bf4:	60 91 33 04 	lds	r22, 0x0433
    2bf8:	70 91 34 04 	lds	r23, 0x0434
    2bfc:	84 0f       	add	r24, r20
    2bfe:	95 1f       	adc	r25, r21
    2c00:	a6 1f       	adc	r26, r22
    2c02:	b7 1f       	adc	r27, r23
    2c04:	b6 95       	lsr	r27
    2c06:	a7 95       	ror	r26
    2c08:	97 95       	ror	r25
    2c0a:	87 95       	ror	r24
    2c0c:	b6 95       	lsr	r27
    2c0e:	a7 95       	ror	r26
    2c10:	97 95       	ror	r25
    2c12:	87 95       	ror	r24
    2c14:	ac 01       	movw	r20, r24
    2c16:	bd 01       	movw	r22, r26
    2c18:	44 0f       	add	r20, r20
    2c1a:	55 1f       	adc	r21, r21
    2c1c:	66 1f       	adc	r22, r22
    2c1e:	77 1f       	adc	r23, r23
    2c20:	44 0f       	add	r20, r20
    2c22:	55 1f       	adc	r21, r21
    2c24:	66 1f       	adc	r22, r22
    2c26:	77 1f       	adc	r23, r23
    2c28:	6a 01       	movw	r12, r20
    2c2a:	7b 01       	movw	r14, r22
    2c2c:	cc 0c       	add	r12, r12
    2c2e:	dd 1c       	adc	r13, r13
    2c30:	ee 1c       	adc	r14, r14
    2c32:	ff 1c       	adc	r15, r15
    2c34:	cc 0c       	add	r12, r12
    2c36:	dd 1c       	adc	r13, r13
    2c38:	ee 1c       	adc	r14, r14
    2c3a:	ff 1c       	adc	r15, r15
    2c3c:	4c 0d       	add	r20, r12
    2c3e:	5d 1d       	adc	r21, r13
    2c40:	6e 1d       	adc	r22, r14
    2c42:	7f 1d       	adc	r23, r15
    2c44:	84 0f       	add	r24, r20
    2c46:	95 1f       	adc	r25, r21
    2c48:	a6 1f       	adc	r26, r22
    2c4a:	b7 1f       	adc	r27, r23
    2c4c:	88 53       	subi	r24, 0x38	; 56
    2c4e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c50:	af 4f       	sbci	r26, 0xFF	; 255
    2c52:	bf 4f       	sbci	r27, 0xFF	; 255
    2c54:	80 93 e6 05 	sts	0x05E6, r24
    2c58:	90 93 e7 05 	sts	0x05E7, r25
    2c5c:	a0 93 e8 05 	sts	0x05E8, r26
    2c60:	b0 93 e9 05 	sts	0x05E9, r27
			statePP = 34;
    2c64:	82 e2       	ldi	r24, 0x22	; 34
    2c66:	80 93 70 05 	sts	0x0570, r24
				}
			//}
		
		break;
	}
	return NO;	
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
	switch(statePP){
		case 33:
			goFront(30, 160);
			distDeParcurs = DISTANTA_PARCURSA + 200;
			statePP = 34;
		break;
    2c6c:	28 c3       	rjmp	.+1616   	; 0x32be <paralelParkingSMF+0x72c>
		case 34:
			if(DISTANTA_PARCURSA > distDeParcurs){
    2c6e:	80 91 2b 04 	lds	r24, 0x042B
    2c72:	90 91 2c 04 	lds	r25, 0x042C
    2c76:	a0 91 2d 04 	lds	r26, 0x042D
    2c7a:	b0 91 2e 04 	lds	r27, 0x042E
    2c7e:	40 91 31 04 	lds	r20, 0x0431
    2c82:	50 91 32 04 	lds	r21, 0x0432
    2c86:	60 91 33 04 	lds	r22, 0x0433
    2c8a:	70 91 34 04 	lds	r23, 0x0434
    2c8e:	84 0f       	add	r24, r20
    2c90:	95 1f       	adc	r25, r21
    2c92:	a6 1f       	adc	r26, r22
    2c94:	b7 1f       	adc	r27, r23
    2c96:	b6 95       	lsr	r27
    2c98:	a7 95       	ror	r26
    2c9a:	97 95       	ror	r25
    2c9c:	87 95       	ror	r24
    2c9e:	b6 95       	lsr	r27
    2ca0:	a7 95       	ror	r26
    2ca2:	97 95       	ror	r25
    2ca4:	87 95       	ror	r24
    2ca6:	ac 01       	movw	r20, r24
    2ca8:	bd 01       	movw	r22, r26
    2caa:	44 0f       	add	r20, r20
    2cac:	55 1f       	adc	r21, r21
    2cae:	66 1f       	adc	r22, r22
    2cb0:	77 1f       	adc	r23, r23
    2cb2:	44 0f       	add	r20, r20
    2cb4:	55 1f       	adc	r21, r21
    2cb6:	66 1f       	adc	r22, r22
    2cb8:	77 1f       	adc	r23, r23
    2cba:	6a 01       	movw	r12, r20
    2cbc:	7b 01       	movw	r14, r22
    2cbe:	cc 0c       	add	r12, r12
    2cc0:	dd 1c       	adc	r13, r13
    2cc2:	ee 1c       	adc	r14, r14
    2cc4:	ff 1c       	adc	r15, r15
    2cc6:	cc 0c       	add	r12, r12
    2cc8:	dd 1c       	adc	r13, r13
    2cca:	ee 1c       	adc	r14, r14
    2ccc:	ff 1c       	adc	r15, r15
    2cce:	4c 0d       	add	r20, r12
    2cd0:	5d 1d       	adc	r21, r13
    2cd2:	6e 1d       	adc	r22, r14
    2cd4:	7f 1d       	adc	r23, r15
    2cd6:	84 0f       	add	r24, r20
    2cd8:	95 1f       	adc	r25, r21
    2cda:	a6 1f       	adc	r26, r22
    2cdc:	b7 1f       	adc	r27, r23
    2cde:	c0 90 e6 05 	lds	r12, 0x05E6
    2ce2:	d0 90 e7 05 	lds	r13, 0x05E7
    2ce6:	e0 90 e8 05 	lds	r14, 0x05E8
    2cea:	f0 90 e9 05 	lds	r15, 0x05E9
    2cee:	c8 16       	cp	r12, r24
    2cf0:	d9 06       	cpc	r13, r25
    2cf2:	ea 06       	cpc	r14, r26
    2cf4:	fb 06       	cpc	r15, r27
    2cf6:	08 f0       	brcs	.+2      	; 0x2cfa <paralelParkingSMF+0x168>
    2cf8:	c7 c2       	rjmp	.+1422   	; 0x3288 <paralelParkingSMF+0x6f6>
				statePP = 0;
    2cfa:	10 92 70 05 	sts	0x0570, r1
				stopEngines();
    2cfe:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <stopEngines>
				}
			//}
		
		break;
	}
	return NO;	
    2d02:	80 e0       	ldi	r24, 0x00	; 0
    2d04:	dc c2       	rjmp	.+1464   	; 0x32be <paralelParkingSMF+0x72c>
				statePP = 0;
				stopEngines();
			}		
		break;
		case 0:
			if(SMPcheck() == 1){
    2d06:	0e 94 58 14 	call	0x28b0	; 0x28b0 <SMPcheck>
    2d0a:	81 30       	cpi	r24, 0x01	; 1
    2d0c:	09 f0       	breq	.+2      	; 0x2d10 <paralelParkingSMF+0x17e>
    2d0e:	be c2       	rjmp	.+1404   	; 0x328c <paralelParkingSMF+0x6fa>
				statePP = 1;
    2d10:	80 93 70 05 	sts	0x0570, r24
				goFront(30, 60);
    2d14:	6c e3       	ldi	r22, 0x3C	; 60
    2d16:	8e e1       	ldi	r24, 0x1E	; 30
    2d18:	0e 94 4c 05 	call	0xa98	; 0xa98 <goFront>
				}
			//}
		
		break;
	}
	return NO;	
    2d1c:	80 e0       	ldi	r24, 0x00	; 0
    2d1e:	cf c2       	rjmp	.+1438   	; 0x32be <paralelParkingSMF+0x72c>
				statePP = 1;
				goFront(30, 60);
			}
		break;
		case 1:
			if(sr<130 && sr>40){
    2d20:	29 e2       	ldi	r18, 0x29	; 41
    2d22:	c2 1a       	sub	r12, r18
    2d24:	d1 08       	sbc	r13, r1
    2d26:	e1 08       	sbc	r14, r1
    2d28:	f1 08       	sbc	r15, r1
    2d2a:	39 e5       	ldi	r19, 0x59	; 89
    2d2c:	c3 16       	cp	r12, r19
    2d2e:	d1 04       	cpc	r13, r1
    2d30:	e1 04       	cpc	r14, r1
    2d32:	f1 04       	cpc	r15, r1
    2d34:	08 f0       	brcs	.+2      	; 0x2d38 <paralelParkingSMF+0x1a6>
    2d36:	ac c2       	rjmp	.+1368   	; 0x3290 <paralelParkingSMF+0x6fe>
				statePP = 2;
    2d38:	82 e0       	ldi	r24, 0x02	; 2
    2d3a:	80 93 70 05 	sts	0x0570, r24
				}
			//}
		
		break;
	}
	return NO;	
    2d3e:	80 e0       	ldi	r24, 0x00	; 0
    2d40:	be c2       	rjmp	.+1404   	; 0x32be <paralelParkingSMF+0x72c>
			if(sr<130 && sr>40){
				statePP = 2;
			}
		break;
		case 2:
			if(sr > 300){
    2d42:	4d e2       	ldi	r20, 0x2D	; 45
    2d44:	c4 16       	cp	r12, r20
    2d46:	41 e0       	ldi	r20, 0x01	; 1
    2d48:	d4 06       	cpc	r13, r20
    2d4a:	e1 04       	cpc	r14, r1
    2d4c:	f1 04       	cpc	r15, r1
    2d4e:	08 f4       	brcc	.+2      	; 0x2d52 <paralelParkingSMF+0x1c0>
    2d50:	a1 c2       	rjmp	.+1346   	; 0x3294 <paralelParkingSMF+0x702>
				statePP = 100;
    2d52:	84 e6       	ldi	r24, 0x64	; 100
    2d54:	80 93 70 05 	sts	0x0570, r24
				goBack(10, 30);				
    2d58:	6e e1       	ldi	r22, 0x1E	; 30
    2d5a:	8a e0       	ldi	r24, 0x0A	; 10
    2d5c:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <goBack>
				}
			//}
		
		break;
	}
	return NO;	
    2d60:	80 e0       	ldi	r24, 0x00	; 0
		break;
		case 2:
			if(sr > 300){
				statePP = 100;
				goBack(10, 30);				
				break;
    2d62:	ad c2       	rjmp	.+1370   	; 0x32be <paralelParkingSMF+0x72c>
				//stopEngines();
			}
			
		break;
		case 100:
			if(sr<130 && sr>40){
    2d64:	59 e2       	ldi	r21, 0x29	; 41
    2d66:	c5 1a       	sub	r12, r21
    2d68:	d1 08       	sbc	r13, r1
    2d6a:	e1 08       	sbc	r14, r1
    2d6c:	f1 08       	sbc	r15, r1
    2d6e:	89 e5       	ldi	r24, 0x59	; 89
    2d70:	c8 16       	cp	r12, r24
    2d72:	d1 04       	cpc	r13, r1
    2d74:	e1 04       	cpc	r14, r1
    2d76:	f1 04       	cpc	r15, r1
    2d78:	08 f0       	brcs	.+2      	; 0x2d7c <paralelParkingSMF+0x1ea>
    2d7a:	8e c2       	rjmp	.+1308   	; 0x3298 <paralelParkingSMF+0x706>
				//stopEngines();
				goFront(20, 50);
    2d7c:	62 e3       	ldi	r22, 0x32	; 50
    2d7e:	84 e1       	ldi	r24, 0x14	; 20
    2d80:	0e 94 4c 05 	call	0xa98	; 0xa98 <goFront>
				distDeParcurs = DISTANTA_PARCURSA + 110;
    2d84:	80 91 2b 04 	lds	r24, 0x042B
    2d88:	90 91 2c 04 	lds	r25, 0x042C
    2d8c:	a0 91 2d 04 	lds	r26, 0x042D
    2d90:	b0 91 2e 04 	lds	r27, 0x042E
    2d94:	40 91 31 04 	lds	r20, 0x0431
    2d98:	50 91 32 04 	lds	r21, 0x0432
    2d9c:	60 91 33 04 	lds	r22, 0x0433
    2da0:	70 91 34 04 	lds	r23, 0x0434
    2da4:	84 0f       	add	r24, r20
    2da6:	95 1f       	adc	r25, r21
    2da8:	a6 1f       	adc	r26, r22
    2daa:	b7 1f       	adc	r27, r23
    2dac:	b6 95       	lsr	r27
    2dae:	a7 95       	ror	r26
    2db0:	97 95       	ror	r25
    2db2:	87 95       	ror	r24
    2db4:	b6 95       	lsr	r27
    2db6:	a7 95       	ror	r26
    2db8:	97 95       	ror	r25
    2dba:	87 95       	ror	r24
    2dbc:	ac 01       	movw	r20, r24
    2dbe:	bd 01       	movw	r22, r26
    2dc0:	44 0f       	add	r20, r20
    2dc2:	55 1f       	adc	r21, r21
    2dc4:	66 1f       	adc	r22, r22
    2dc6:	77 1f       	adc	r23, r23
    2dc8:	44 0f       	add	r20, r20
    2dca:	55 1f       	adc	r21, r21
    2dcc:	66 1f       	adc	r22, r22
    2dce:	77 1f       	adc	r23, r23
    2dd0:	6a 01       	movw	r12, r20
    2dd2:	7b 01       	movw	r14, r22
    2dd4:	cc 0c       	add	r12, r12
    2dd6:	dd 1c       	adc	r13, r13
    2dd8:	ee 1c       	adc	r14, r14
    2dda:	ff 1c       	adc	r15, r15
    2ddc:	cc 0c       	add	r12, r12
    2dde:	dd 1c       	adc	r13, r13
    2de0:	ee 1c       	adc	r14, r14
    2de2:	ff 1c       	adc	r15, r15
    2de4:	4c 0d       	add	r20, r12
    2de6:	5d 1d       	adc	r21, r13
    2de8:	6e 1d       	adc	r22, r14
    2dea:	7f 1d       	adc	r23, r15
    2dec:	84 0f       	add	r24, r20
    2dee:	95 1f       	adc	r25, r21
    2df0:	a6 1f       	adc	r26, r22
    2df2:	b7 1f       	adc	r27, r23
    2df4:	82 59       	subi	r24, 0x92	; 146
    2df6:	9f 4f       	sbci	r25, 0xFF	; 255
    2df8:	af 4f       	sbci	r26, 0xFF	; 255
    2dfa:	bf 4f       	sbci	r27, 0xFF	; 255
    2dfc:	80 93 e6 05 	sts	0x05E6, r24
    2e00:	90 93 e7 05 	sts	0x05E7, r25
    2e04:	a0 93 e8 05 	sts	0x05E8, r26
    2e08:	b0 93 e9 05 	sts	0x05E9, r27
				statePP = 3;
    2e0c:	83 e0       	ldi	r24, 0x03	; 3
    2e0e:	80 93 70 05 	sts	0x0570, r24
				}
			//}
		
		break;
	}
	return NO;	
    2e12:	80 e0       	ldi	r24, 0x00	; 0
			if(sr<130 && sr>40){
				//stopEngines();
				goFront(20, 50);
				distDeParcurs = DISTANTA_PARCURSA + 110;
				statePP = 3;
				break;
    2e14:	54 c2       	rjmp	.+1192   	; 0x32be <paralelParkingSMF+0x72c>
				stopEngines();				
				//return YES;
			}
		break;*/
		case 3:
			if(DISTANTA_PARCURSA > distDeParcurs){
    2e16:	80 91 2b 04 	lds	r24, 0x042B
    2e1a:	90 91 2c 04 	lds	r25, 0x042C
    2e1e:	a0 91 2d 04 	lds	r26, 0x042D
    2e22:	b0 91 2e 04 	lds	r27, 0x042E
    2e26:	40 91 31 04 	lds	r20, 0x0431
    2e2a:	50 91 32 04 	lds	r21, 0x0432
    2e2e:	60 91 33 04 	lds	r22, 0x0433
    2e32:	70 91 34 04 	lds	r23, 0x0434
    2e36:	84 0f       	add	r24, r20
    2e38:	95 1f       	adc	r25, r21
    2e3a:	a6 1f       	adc	r26, r22
    2e3c:	b7 1f       	adc	r27, r23
    2e3e:	b6 95       	lsr	r27
    2e40:	a7 95       	ror	r26
    2e42:	97 95       	ror	r25
    2e44:	87 95       	ror	r24
    2e46:	b6 95       	lsr	r27
    2e48:	a7 95       	ror	r26
    2e4a:	97 95       	ror	r25
    2e4c:	87 95       	ror	r24
    2e4e:	ac 01       	movw	r20, r24
    2e50:	bd 01       	movw	r22, r26
    2e52:	44 0f       	add	r20, r20
    2e54:	55 1f       	adc	r21, r21
    2e56:	66 1f       	adc	r22, r22
    2e58:	77 1f       	adc	r23, r23
    2e5a:	44 0f       	add	r20, r20
    2e5c:	55 1f       	adc	r21, r21
    2e5e:	66 1f       	adc	r22, r22
    2e60:	77 1f       	adc	r23, r23
    2e62:	6a 01       	movw	r12, r20
    2e64:	7b 01       	movw	r14, r22
    2e66:	cc 0c       	add	r12, r12
    2e68:	dd 1c       	adc	r13, r13
    2e6a:	ee 1c       	adc	r14, r14
    2e6c:	ff 1c       	adc	r15, r15
    2e6e:	cc 0c       	add	r12, r12
    2e70:	dd 1c       	adc	r13, r13
    2e72:	ee 1c       	adc	r14, r14
    2e74:	ff 1c       	adc	r15, r15
    2e76:	4c 0d       	add	r20, r12
    2e78:	5d 1d       	adc	r21, r13
    2e7a:	6e 1d       	adc	r22, r14
    2e7c:	7f 1d       	adc	r23, r15
    2e7e:	84 0f       	add	r24, r20
    2e80:	95 1f       	adc	r25, r21
    2e82:	a6 1f       	adc	r26, r22
    2e84:	b7 1f       	adc	r27, r23
    2e86:	c0 90 e6 05 	lds	r12, 0x05E6
    2e8a:	d0 90 e7 05 	lds	r13, 0x05E7
    2e8e:	e0 90 e8 05 	lds	r14, 0x05E8
    2e92:	f0 90 e9 05 	lds	r15, 0x05E9
    2e96:	c8 16       	cp	r12, r24
    2e98:	d9 06       	cpc	r13, r25
    2e9a:	ea 06       	cpc	r14, r26
    2e9c:	fb 06       	cpc	r15, r27
    2e9e:	08 f0       	brcs	.+2      	; 0x2ea2 <paralelParkingSMF+0x310>
    2ea0:	fd c1       	rjmp	.+1018   	; 0x329c <paralelParkingSMF+0x70a>
				stopEngines();
    2ea2:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <stopEngines>
				statePP = 4;
    2ea6:	84 e0       	ldi	r24, 0x04	; 4
    2ea8:	80 93 70 05 	sts	0x0570, r24
				rotireSmechera(5, 0, 170, 1, 50);
    2eac:	02 e3       	ldi	r16, 0x32	; 50
    2eae:	21 e0       	ldi	r18, 0x01	; 1
    2eb0:	4a ea       	ldi	r20, 0xAA	; 170
    2eb2:	60 e0       	ldi	r22, 0x00	; 0
    2eb4:	85 e0       	ldi	r24, 0x05	; 5
    2eb6:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <rotireSmechera>
				}
			//}
		
		break;
	}
	return NO;	
    2eba:	80 e0       	ldi	r24, 0x00	; 0
    2ebc:	00 c2       	rjmp	.+1024   	; 0x32be <paralelParkingSMF+0x72c>
				statePP = 4;
				rotireSmechera(5, 0, 170, 1, 50);
			}
		break;
		case 4:
			if(sr<200){
    2ebe:	28 ec       	ldi	r18, 0xC8	; 200
    2ec0:	c2 16       	cp	r12, r18
    2ec2:	d1 04       	cpc	r13, r1
    2ec4:	e1 04       	cpc	r14, r1
    2ec6:	f1 04       	cpc	r15, r1
    2ec8:	08 f0       	brcs	.+2      	; 0x2ecc <paralelParkingSMF+0x33a>
    2eca:	ea c1       	rjmp	.+980    	; 0x32a0 <paralelParkingSMF+0x70e>
				statePP = 5;
    2ecc:	85 e0       	ldi	r24, 0x05	; 5
    2ece:	80 93 70 05 	sts	0x0570, r24
				rotirePeLoc(10, 50, LeftEngines);
    2ed2:	41 e0       	ldi	r20, 0x01	; 1
    2ed4:	62 e3       	ldi	r22, 0x32	; 50
    2ed6:	8a e0       	ldi	r24, 0x0A	; 10
    2ed8:	0e 94 25 07 	call	0xe4a	; 0xe4a <rotirePeLoc>
				}
			//}
		
		break;
	}
	return NO;	
    2edc:	80 e0       	ldi	r24, 0x00	; 0
    2ede:	ef c1       	rjmp	.+990    	; 0x32be <paralelParkingSMF+0x72c>
				statePP = 5;
				rotirePeLoc(10, 50, LeftEngines);
			}
		break;
		case 5:
			if(sr>220)
    2ee0:	3d ed       	ldi	r19, 0xDD	; 221
    2ee2:	c3 16       	cp	r12, r19
    2ee4:	d1 04       	cpc	r13, r1
    2ee6:	e1 04       	cpc	r14, r1
    2ee8:	f1 04       	cpc	r15, r1
    2eea:	08 f4       	brcc	.+2      	; 0x2eee <paralelParkingSMF+0x35c>
    2eec:	db c1       	rjmp	.+950    	; 0x32a4 <paralelParkingSMF+0x712>
			{
				goFront(15, 50);
    2eee:	62 e3       	ldi	r22, 0x32	; 50
    2ef0:	8f e0       	ldi	r24, 0x0F	; 15
    2ef2:	0e 94 4c 05 	call	0xa98	; 0xa98 <goFront>
				statePP = 6;
    2ef6:	86 e0       	ldi	r24, 0x06	; 6
    2ef8:	80 93 70 05 	sts	0x0570, r24
				}
			//}
		
		break;
	}
	return NO;	
    2efc:	80 e0       	ldi	r24, 0x00	; 0
    2efe:	df c1       	rjmp	.+958    	; 0x32be <paralelParkingSMF+0x72c>
				goFront(15, 50);
				statePP = 6;
			}
		break;
		case 6:
			if(fr < 170){
    2f00:	4a ea       	ldi	r20, 0xAA	; 170
    2f02:	84 16       	cp	r8, r20
    2f04:	91 04       	cpc	r9, r1
    2f06:	a1 04       	cpc	r10, r1
    2f08:	b1 04       	cpc	r11, r1
    2f0a:	08 f0       	brcs	.+2      	; 0x2f0e <paralelParkingSMF+0x37c>
    2f0c:	cd c1       	rjmp	.+922    	; 0x32a8 <paralelParkingSMF+0x716>
				statePP = 7;
    2f0e:	87 e0       	ldi	r24, 0x07	; 7
    2f10:	80 93 70 05 	sts	0x0570, r24
				lastState = 0;
    2f14:	10 92 d7 05 	sts	0x05D7, r1
				srTmp = 0;
    2f18:	10 92 e1 05 	sts	0x05E1, r1
    2f1c:	10 92 e2 05 	sts	0x05E2, r1
    2f20:	10 92 e3 05 	sts	0x05E3, r1
    2f24:	10 92 e4 05 	sts	0x05E4, r1
				}
			//}
		
		break;
	}
	return NO;	
    2f28:	80 e0       	ldi	r24, 0x00	; 0
    2f2a:	c9 c1       	rjmp	.+914    	; 0x32be <paralelParkingSMF+0x72c>
				lastState = 0;
				srTmp = 0;
			}
		break;
		case 7:
			if(checkMinim()){
    2f2c:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <checkMinim>
    2f30:	88 23       	and	r24, r24
    2f32:	09 f4       	brne	.+2      	; 0x2f36 <paralelParkingSMF+0x3a4>
    2f34:	bb c1       	rjmp	.+886    	; 0x32ac <paralelParkingSMF+0x71a>
				//stopEngines();
				statePP = 8;
    2f36:	88 e0       	ldi	r24, 0x08	; 8
    2f38:	80 93 70 05 	sts	0x0570, r24
				goFront(15, 40);
    2f3c:	68 e2       	ldi	r22, 0x28	; 40
    2f3e:	8f e0       	ldi	r24, 0x0F	; 15
    2f40:	0e 94 4c 05 	call	0xa98	; 0xa98 <goFront>
				}
			//}
		
		break;
	}
	return NO;	
    2f44:	80 e0       	ldi	r24, 0x00	; 0
    2f46:	bb c1       	rjmp	.+886    	; 0x32be <paralelParkingSMF+0x72c>
				statePP = 8;
				goFront(15, 40);
			}		
		break;
		case 8:
			if(fr<100){
    2f48:	54 e6       	ldi	r21, 0x64	; 100
    2f4a:	85 16       	cp	r8, r21
    2f4c:	91 04       	cpc	r9, r1
    2f4e:	a1 04       	cpc	r10, r1
    2f50:	b1 04       	cpc	r11, r1
    2f52:	08 f0       	brcs	.+2      	; 0x2f56 <paralelParkingSMF+0x3c4>
    2f54:	ad c1       	rjmp	.+858    	; 0x32b0 <paralelParkingSMF+0x71e>
				//stopEngines();
				//return YES;
				distDeParcurs = DISTANTA_PARCURSA + 100;
    2f56:	80 91 2b 04 	lds	r24, 0x042B
    2f5a:	90 91 2c 04 	lds	r25, 0x042C
    2f5e:	a0 91 2d 04 	lds	r26, 0x042D
    2f62:	b0 91 2e 04 	lds	r27, 0x042E
    2f66:	40 91 31 04 	lds	r20, 0x0431
    2f6a:	50 91 32 04 	lds	r21, 0x0432
    2f6e:	60 91 33 04 	lds	r22, 0x0433
    2f72:	70 91 34 04 	lds	r23, 0x0434
    2f76:	84 0f       	add	r24, r20
    2f78:	95 1f       	adc	r25, r21
    2f7a:	a6 1f       	adc	r26, r22
    2f7c:	b7 1f       	adc	r27, r23
    2f7e:	b6 95       	lsr	r27
    2f80:	a7 95       	ror	r26
    2f82:	97 95       	ror	r25
    2f84:	87 95       	ror	r24
    2f86:	b6 95       	lsr	r27
    2f88:	a7 95       	ror	r26
    2f8a:	97 95       	ror	r25
    2f8c:	87 95       	ror	r24
    2f8e:	ac 01       	movw	r20, r24
    2f90:	bd 01       	movw	r22, r26
    2f92:	44 0f       	add	r20, r20
    2f94:	55 1f       	adc	r21, r21
    2f96:	66 1f       	adc	r22, r22
    2f98:	77 1f       	adc	r23, r23
    2f9a:	44 0f       	add	r20, r20
    2f9c:	55 1f       	adc	r21, r21
    2f9e:	66 1f       	adc	r22, r22
    2fa0:	77 1f       	adc	r23, r23
    2fa2:	6a 01       	movw	r12, r20
    2fa4:	7b 01       	movw	r14, r22
    2fa6:	cc 0c       	add	r12, r12
    2fa8:	dd 1c       	adc	r13, r13
    2faa:	ee 1c       	adc	r14, r14
    2fac:	ff 1c       	adc	r15, r15
    2fae:	cc 0c       	add	r12, r12
    2fb0:	dd 1c       	adc	r13, r13
    2fb2:	ee 1c       	adc	r14, r14
    2fb4:	ff 1c       	adc	r15, r15
    2fb6:	4c 0d       	add	r20, r12
    2fb8:	5d 1d       	adc	r21, r13
    2fba:	6e 1d       	adc	r22, r14
    2fbc:	7f 1d       	adc	r23, r15
    2fbe:	84 0f       	add	r24, r20
    2fc0:	95 1f       	adc	r25, r21
    2fc2:	a6 1f       	adc	r26, r22
    2fc4:	b7 1f       	adc	r27, r23
    2fc6:	8c 59       	subi	r24, 0x9C	; 156
    2fc8:	9f 4f       	sbci	r25, 0xFF	; 255
    2fca:	af 4f       	sbci	r26, 0xFF	; 255
    2fcc:	bf 4f       	sbci	r27, 0xFF	; 255
    2fce:	80 93 e6 05 	sts	0x05E6, r24
    2fd2:	90 93 e7 05 	sts	0x05E7, r25
    2fd6:	a0 93 e8 05 	sts	0x05E8, r26
    2fda:	b0 93 e9 05 	sts	0x05E9, r27
				statePP = 9;
    2fde:	89 e0       	ldi	r24, 0x09	; 9
    2fe0:	80 93 70 05 	sts	0x0570, r24
				goBack(10, 50);				
    2fe4:	62 e3       	ldi	r22, 0x32	; 50
    2fe6:	8a e0       	ldi	r24, 0x0A	; 10
    2fe8:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <goBack>
				}
			//}
		
		break;
	}
	return NO;	
    2fec:	80 e0       	ldi	r24, 0x00	; 0
    2fee:	67 c1       	rjmp	.+718    	; 0x32be <paralelParkingSMF+0x72c>
				statePP = 9;
				goBack(10, 50);				
			}
		break;
		case 9:
			if(DISTANTA_PARCURSA > distDeParcurs){
    2ff0:	80 91 2b 04 	lds	r24, 0x042B
    2ff4:	90 91 2c 04 	lds	r25, 0x042C
    2ff8:	a0 91 2d 04 	lds	r26, 0x042D
    2ffc:	b0 91 2e 04 	lds	r27, 0x042E
    3000:	40 91 31 04 	lds	r20, 0x0431
    3004:	50 91 32 04 	lds	r21, 0x0432
    3008:	60 91 33 04 	lds	r22, 0x0433
    300c:	70 91 34 04 	lds	r23, 0x0434
    3010:	84 0f       	add	r24, r20
    3012:	95 1f       	adc	r25, r21
    3014:	a6 1f       	adc	r26, r22
    3016:	b7 1f       	adc	r27, r23
    3018:	b6 95       	lsr	r27
    301a:	a7 95       	ror	r26
    301c:	97 95       	ror	r25
    301e:	87 95       	ror	r24
    3020:	b6 95       	lsr	r27
    3022:	a7 95       	ror	r26
    3024:	97 95       	ror	r25
    3026:	87 95       	ror	r24
    3028:	ac 01       	movw	r20, r24
    302a:	bd 01       	movw	r22, r26
    302c:	44 0f       	add	r20, r20
    302e:	55 1f       	adc	r21, r21
    3030:	66 1f       	adc	r22, r22
    3032:	77 1f       	adc	r23, r23
    3034:	44 0f       	add	r20, r20
    3036:	55 1f       	adc	r21, r21
    3038:	66 1f       	adc	r22, r22
    303a:	77 1f       	adc	r23, r23
    303c:	6a 01       	movw	r12, r20
    303e:	7b 01       	movw	r14, r22
    3040:	cc 0c       	add	r12, r12
    3042:	dd 1c       	adc	r13, r13
    3044:	ee 1c       	adc	r14, r14
    3046:	ff 1c       	adc	r15, r15
    3048:	cc 0c       	add	r12, r12
    304a:	dd 1c       	adc	r13, r13
    304c:	ee 1c       	adc	r14, r14
    304e:	ff 1c       	adc	r15, r15
    3050:	4c 0d       	add	r20, r12
    3052:	5d 1d       	adc	r21, r13
    3054:	6e 1d       	adc	r22, r14
    3056:	7f 1d       	adc	r23, r15
    3058:	84 0f       	add	r24, r20
    305a:	95 1f       	adc	r25, r21
    305c:	a6 1f       	adc	r26, r22
    305e:	b7 1f       	adc	r27, r23
    3060:	c0 90 e6 05 	lds	r12, 0x05E6
    3064:	d0 90 e7 05 	lds	r13, 0x05E7
    3068:	e0 90 e8 05 	lds	r14, 0x05E8
    306c:	f0 90 e9 05 	lds	r15, 0x05E9
    3070:	c8 16       	cp	r12, r24
    3072:	d9 06       	cpc	r13, r25
    3074:	ea 06       	cpc	r14, r26
    3076:	fb 06       	cpc	r15, r27
    3078:	08 f0       	brcs	.+2      	; 0x307c <paralelParkingSMF+0x4ea>
    307a:	1c c1       	rjmp	.+568    	; 0x32b4 <paralelParkingSMF+0x722>
				stopEngines();
    307c:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <stopEngines>
				//return YES;
				statePP = 10;
    3080:	8a e0       	ldi	r24, 0x0A	; 10
    3082:	80 93 70 05 	sts	0x0570, r24
				}
			//}
		
		break;
	}
	return NO;	
    3086:	80 e0       	ldi	r24, 0x00	; 0
    3088:	1a c1       	rjmp	.+564    	; 0x32be <paralelParkingSMF+0x72c>
			}
		
		break;
		case 10:
			if( 1 || SMPcheck()){
				stopEngines();
    308a:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <stopEngines>
				distDeParcurs = DISTANTA_PARCURSA + 30;
    308e:	80 91 2b 04 	lds	r24, 0x042B
    3092:	90 91 2c 04 	lds	r25, 0x042C
    3096:	a0 91 2d 04 	lds	r26, 0x042D
    309a:	b0 91 2e 04 	lds	r27, 0x042E
    309e:	40 91 31 04 	lds	r20, 0x0431
    30a2:	50 91 32 04 	lds	r21, 0x0432
    30a6:	60 91 33 04 	lds	r22, 0x0433
    30aa:	70 91 34 04 	lds	r23, 0x0434
    30ae:	84 0f       	add	r24, r20
    30b0:	95 1f       	adc	r25, r21
    30b2:	a6 1f       	adc	r26, r22
    30b4:	b7 1f       	adc	r27, r23
    30b6:	b6 95       	lsr	r27
    30b8:	a7 95       	ror	r26
    30ba:	97 95       	ror	r25
    30bc:	87 95       	ror	r24
    30be:	b6 95       	lsr	r27
    30c0:	a7 95       	ror	r26
    30c2:	97 95       	ror	r25
    30c4:	87 95       	ror	r24
    30c6:	ac 01       	movw	r20, r24
    30c8:	bd 01       	movw	r22, r26
    30ca:	44 0f       	add	r20, r20
    30cc:	55 1f       	adc	r21, r21
    30ce:	66 1f       	adc	r22, r22
    30d0:	77 1f       	adc	r23, r23
    30d2:	44 0f       	add	r20, r20
    30d4:	55 1f       	adc	r21, r21
    30d6:	66 1f       	adc	r22, r22
    30d8:	77 1f       	adc	r23, r23
    30da:	4a 01       	movw	r8, r20
    30dc:	5b 01       	movw	r10, r22
    30de:	88 0c       	add	r8, r8
    30e0:	99 1c       	adc	r9, r9
    30e2:	aa 1c       	adc	r10, r10
    30e4:	bb 1c       	adc	r11, r11
    30e6:	88 0c       	add	r8, r8
    30e8:	99 1c       	adc	r9, r9
    30ea:	aa 1c       	adc	r10, r10
    30ec:	bb 1c       	adc	r11, r11
    30ee:	48 0d       	add	r20, r8
    30f0:	59 1d       	adc	r21, r9
    30f2:	6a 1d       	adc	r22, r10
    30f4:	7b 1d       	adc	r23, r11
    30f6:	84 0f       	add	r24, r20
    30f8:	95 1f       	adc	r25, r21
    30fa:	a6 1f       	adc	r26, r22
    30fc:	b7 1f       	adc	r27, r23
    30fe:	4e 96       	adiw	r24, 0x1e	; 30
    3100:	a1 1d       	adc	r26, r1
    3102:	b1 1d       	adc	r27, r1
    3104:	80 93 e6 05 	sts	0x05E6, r24
    3108:	90 93 e7 05 	sts	0x05E7, r25
    310c:	a0 93 e8 05 	sts	0x05E8, r26
    3110:	b0 93 e9 05 	sts	0x05E9, r27
				statePP = 11;
    3114:	8b e0       	ldi	r24, 0x0B	; 11
    3116:	80 93 70 05 	sts	0x0570, r24
				goFront(10, 50);
    311a:	62 e3       	ldi	r22, 0x32	; 50
    311c:	8a e0       	ldi	r24, 0x0A	; 10
    311e:	0e 94 4c 05 	call	0xa98	; 0xa98 <goFront>
				xx = sr;
    3122:	c0 92 dc 05 	sts	0x05DC, r12
    3126:	d0 92 dd 05 	sts	0x05DD, r13
    312a:	e0 92 de 05 	sts	0x05DE, r14
    312e:	f0 92 df 05 	sts	0x05DF, r15
				}
			//}
		
		break;
	}
	return NO;	
    3132:	80 e0       	ldi	r24, 0x00	; 0
				goFront(10, 50);
				xx = sr;
				//return YES;
			}
		
		break;
    3134:	c4 c0       	rjmp	.+392    	; 0x32be <paralelParkingSMF+0x72c>
		case 11:
			if(DISTANTA_PARCURSA > distDeParcurs){
    3136:	80 91 2b 04 	lds	r24, 0x042B
    313a:	90 91 2c 04 	lds	r25, 0x042C
    313e:	a0 91 2d 04 	lds	r26, 0x042D
    3142:	b0 91 2e 04 	lds	r27, 0x042E
    3146:	40 91 31 04 	lds	r20, 0x0431
    314a:	50 91 32 04 	lds	r21, 0x0432
    314e:	60 91 33 04 	lds	r22, 0x0433
    3152:	70 91 34 04 	lds	r23, 0x0434
    3156:	84 0f       	add	r24, r20
    3158:	95 1f       	adc	r25, r21
    315a:	a6 1f       	adc	r26, r22
    315c:	b7 1f       	adc	r27, r23
    315e:	b6 95       	lsr	r27
    3160:	a7 95       	ror	r26
    3162:	97 95       	ror	r25
    3164:	87 95       	ror	r24
    3166:	b6 95       	lsr	r27
    3168:	a7 95       	ror	r26
    316a:	97 95       	ror	r25
    316c:	87 95       	ror	r24
    316e:	ac 01       	movw	r20, r24
    3170:	bd 01       	movw	r22, r26
    3172:	44 0f       	add	r20, r20
    3174:	55 1f       	adc	r21, r21
    3176:	66 1f       	adc	r22, r22
    3178:	77 1f       	adc	r23, r23
    317a:	44 0f       	add	r20, r20
    317c:	55 1f       	adc	r21, r21
    317e:	66 1f       	adc	r22, r22
    3180:	77 1f       	adc	r23, r23
    3182:	4a 01       	movw	r8, r20
    3184:	5b 01       	movw	r10, r22
    3186:	88 0c       	add	r8, r8
    3188:	99 1c       	adc	r9, r9
    318a:	aa 1c       	adc	r10, r10
    318c:	bb 1c       	adc	r11, r11
    318e:	88 0c       	add	r8, r8
    3190:	99 1c       	adc	r9, r9
    3192:	aa 1c       	adc	r10, r10
    3194:	bb 1c       	adc	r11, r11
    3196:	48 0d       	add	r20, r8
    3198:	59 1d       	adc	r21, r9
    319a:	6a 1d       	adc	r22, r10
    319c:	7b 1d       	adc	r23, r11
    319e:	84 0f       	add	r24, r20
    31a0:	95 1f       	adc	r25, r21
    31a2:	a6 1f       	adc	r26, r22
    31a4:	b7 1f       	adc	r27, r23
    31a6:	80 90 e6 05 	lds	r8, 0x05E6
    31aa:	90 90 e7 05 	lds	r9, 0x05E7
    31ae:	a0 90 e8 05 	lds	r10, 0x05E8
    31b2:	b0 90 e9 05 	lds	r11, 0x05E9
    31b6:	88 16       	cp	r8, r24
    31b8:	99 06       	cpc	r9, r25
    31ba:	aa 06       	cpc	r10, r26
    31bc:	bb 06       	cpc	r11, r27
    31be:	08 f0       	brcs	.+2      	; 0x31c2 <paralelParkingSMF+0x630>
    31c0:	7b c0       	rjmp	.+246    	; 0x32b8 <paralelParkingSMF+0x726>
				if(xx > sr +5){
    31c2:	80 91 dc 05 	lds	r24, 0x05DC
    31c6:	90 91 dd 05 	lds	r25, 0x05DD
    31ca:	a0 91 de 05 	lds	r26, 0x05DE
    31ce:	b0 91 df 05 	lds	r27, 0x05DF
    31d2:	46 01       	movw	r8, r12
    31d4:	57 01       	movw	r10, r14
    31d6:	25 e0       	ldi	r18, 0x05	; 5
    31d8:	82 0e       	add	r8, r18
    31da:	91 1c       	adc	r9, r1
    31dc:	a1 1c       	adc	r10, r1
    31de:	b1 1c       	adc	r11, r1
    31e0:	88 16       	cp	r8, r24
    31e2:	99 06       	cpc	r9, r25
    31e4:	aa 06       	cpc	r10, r26
    31e6:	bb 06       	cpc	r11, r27
    31e8:	a0 f4       	brcc	.+40     	; 0x3212 <paralelParkingSMF+0x680>
					cnt2 = (xx-sr)%10;
    31ea:	bc 01       	movw	r22, r24
    31ec:	cd 01       	movw	r24, r26
    31ee:	6c 19       	sub	r22, r12
    31f0:	7d 09       	sbc	r23, r13
    31f2:	8e 09       	sbc	r24, r14
    31f4:	9f 09       	sbc	r25, r15
    31f6:	2a e0       	ldi	r18, 0x0A	; 10
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	40 e0       	ldi	r20, 0x00	; 0
    31fc:	50 e0       	ldi	r21, 0x00	; 0
    31fe:	0e 94 69 19 	call	0x32d2	; 0x32d2 <__udivmodsi4>
    3202:	60 93 6f 05 	sts	0x056F, r22
					rotirePeLoc(2, 75, RightEngines);
    3206:	40 e0       	ldi	r20, 0x00	; 0
    3208:	6b e4       	ldi	r22, 0x4B	; 75
    320a:	82 e0       	ldi	r24, 0x02	; 2
    320c:	0e 94 25 07 	call	0xe4a	; 0xe4a <rotirePeLoc>
    3210:	27 c0       	rjmp	.+78     	; 0x3260 <paralelParkingSMF+0x6ce>
				}
				else if(sr > xx + 5){
    3212:	4c 01       	movw	r8, r24
    3214:	5d 01       	movw	r10, r26
    3216:	35 e0       	ldi	r19, 0x05	; 5
    3218:	83 0e       	add	r8, r19
    321a:	91 1c       	adc	r9, r1
    321c:	a1 1c       	adc	r10, r1
    321e:	b1 1c       	adc	r11, r1
    3220:	8c 14       	cp	r8, r12
    3222:	9d 04       	cpc	r9, r13
    3224:	ae 04       	cpc	r10, r14
    3226:	bf 04       	cpc	r11, r15
    3228:	b0 f4       	brcc	.+44     	; 0x3256 <paralelParkingSMF+0x6c4>
					cnt2 = (sr-xx)%10;
    322a:	a7 01       	movw	r20, r14
    322c:	96 01       	movw	r18, r12
    322e:	28 1b       	sub	r18, r24
    3230:	39 0b       	sbc	r19, r25
    3232:	4a 0b       	sbc	r20, r26
    3234:	5b 0b       	sbc	r21, r27
    3236:	ca 01       	movw	r24, r20
    3238:	b9 01       	movw	r22, r18
    323a:	2a e0       	ldi	r18, 0x0A	; 10
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	40 e0       	ldi	r20, 0x00	; 0
    3240:	50 e0       	ldi	r21, 0x00	; 0
    3242:	0e 94 69 19 	call	0x32d2	; 0x32d2 <__udivmodsi4>
    3246:	60 93 6f 05 	sts	0x056F, r22
					rotirePeLoc(2, 75, LeftEngines);
    324a:	41 e0       	ldi	r20, 0x01	; 1
    324c:	6b e4       	ldi	r22, 0x4B	; 75
    324e:	82 e0       	ldi	r24, 0x02	; 2
    3250:	0e 94 25 07 	call	0xe4a	; 0xe4a <rotirePeLoc>
    3254:	05 c0       	rjmp	.+10     	; 0x3260 <paralelParkingSMF+0x6ce>
				}else{
					cnt2 = 1;
    3256:	81 e0       	ldi	r24, 0x01	; 1
    3258:	80 93 6f 05 	sts	0x056F, r24
					stopEngines();
    325c:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <stopEngines>
				}
				statePP = 12;
    3260:	8c e0       	ldi	r24, 0x0C	; 12
    3262:	80 93 70 05 	sts	0x0570, r24
				}
			//}
		
		break;
	}
	return NO;	
    3266:	80 e0       	ldi	r24, 0x00	; 0
    3268:	2a c0       	rjmp	.+84     	; 0x32be <paralelParkingSMF+0x72c>
				statePP = 12;
			}
		break;
		case 12:
			//if(DISTANTA_PARCURSA > distDeParcurs){
				cnt2 --;
    326a:	80 91 6f 05 	lds	r24, 0x056F
    326e:	81 50       	subi	r24, 0x01	; 1
    3270:	80 93 6f 05 	sts	0x056F, r24
				if(cnt2 == 0){
    3274:	81 11       	cpse	r24, r1
    3276:	22 c0       	rjmp	.+68     	; 0x32bc <paralelParkingSMF+0x72a>
					BTTransmitStr("xAm parcat paralel!");
    3278:	8a ef       	ldi	r24, 0xFA	; 250
    327a:	93 e0       	ldi	r25, 0x03	; 3
    327c:	0e 94 a8 01 	call	0x350	; 0x350 <BTTransmitStr>
					//stopEngines();
					return YES;
    3280:	81 e0       	ldi	r24, 0x01	; 1
    3282:	1d c0       	rjmp	.+58     	; 0x32be <paralelParkingSMF+0x72c>
				}
			//}
		
		break;
	}
	return NO;	
    3284:	80 e0       	ldi	r24, 0x00	; 0
    3286:	1b c0       	rjmp	.+54     	; 0x32be <paralelParkingSMF+0x72c>
    3288:	80 e0       	ldi	r24, 0x00	; 0
    328a:	19 c0       	rjmp	.+50     	; 0x32be <paralelParkingSMF+0x72c>
    328c:	80 e0       	ldi	r24, 0x00	; 0
    328e:	17 c0       	rjmp	.+46     	; 0x32be <paralelParkingSMF+0x72c>
    3290:	80 e0       	ldi	r24, 0x00	; 0
    3292:	15 c0       	rjmp	.+42     	; 0x32be <paralelParkingSMF+0x72c>
    3294:	80 e0       	ldi	r24, 0x00	; 0
    3296:	13 c0       	rjmp	.+38     	; 0x32be <paralelParkingSMF+0x72c>
    3298:	80 e0       	ldi	r24, 0x00	; 0
    329a:	11 c0       	rjmp	.+34     	; 0x32be <paralelParkingSMF+0x72c>
    329c:	80 e0       	ldi	r24, 0x00	; 0
    329e:	0f c0       	rjmp	.+30     	; 0x32be <paralelParkingSMF+0x72c>
    32a0:	80 e0       	ldi	r24, 0x00	; 0
    32a2:	0d c0       	rjmp	.+26     	; 0x32be <paralelParkingSMF+0x72c>
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	0b c0       	rjmp	.+22     	; 0x32be <paralelParkingSMF+0x72c>
    32a8:	80 e0       	ldi	r24, 0x00	; 0
    32aa:	09 c0       	rjmp	.+18     	; 0x32be <paralelParkingSMF+0x72c>
    32ac:	80 e0       	ldi	r24, 0x00	; 0
    32ae:	07 c0       	rjmp	.+14     	; 0x32be <paralelParkingSMF+0x72c>
    32b0:	80 e0       	ldi	r24, 0x00	; 0
    32b2:	05 c0       	rjmp	.+10     	; 0x32be <paralelParkingSMF+0x72c>
    32b4:	80 e0       	ldi	r24, 0x00	; 0
    32b6:	03 c0       	rjmp	.+6      	; 0x32be <paralelParkingSMF+0x72c>
    32b8:	80 e0       	ldi	r24, 0x00	; 0
    32ba:	01 c0       	rjmp	.+2      	; 0x32be <paralelParkingSMF+0x72c>
    32bc:	80 e0       	ldi	r24, 0x00	; 0
}
    32be:	0f 91       	pop	r16
    32c0:	ff 90       	pop	r15
    32c2:	ef 90       	pop	r14
    32c4:	df 90       	pop	r13
    32c6:	cf 90       	pop	r12
    32c8:	bf 90       	pop	r11
    32ca:	af 90       	pop	r10
    32cc:	9f 90       	pop	r9
    32ce:	8f 90       	pop	r8
    32d0:	08 95       	ret

000032d2 <__udivmodsi4>:
    32d2:	a1 e2       	ldi	r26, 0x21	; 33
    32d4:	1a 2e       	mov	r1, r26
    32d6:	aa 1b       	sub	r26, r26
    32d8:	bb 1b       	sub	r27, r27
    32da:	fd 01       	movw	r30, r26
    32dc:	0d c0       	rjmp	.+26     	; 0x32f8 <__udivmodsi4_ep>

000032de <__udivmodsi4_loop>:
    32de:	aa 1f       	adc	r26, r26
    32e0:	bb 1f       	adc	r27, r27
    32e2:	ee 1f       	adc	r30, r30
    32e4:	ff 1f       	adc	r31, r31
    32e6:	a2 17       	cp	r26, r18
    32e8:	b3 07       	cpc	r27, r19
    32ea:	e4 07       	cpc	r30, r20
    32ec:	f5 07       	cpc	r31, r21
    32ee:	20 f0       	brcs	.+8      	; 0x32f8 <__udivmodsi4_ep>
    32f0:	a2 1b       	sub	r26, r18
    32f2:	b3 0b       	sbc	r27, r19
    32f4:	e4 0b       	sbc	r30, r20
    32f6:	f5 0b       	sbc	r31, r21

000032f8 <__udivmodsi4_ep>:
    32f8:	66 1f       	adc	r22, r22
    32fa:	77 1f       	adc	r23, r23
    32fc:	88 1f       	adc	r24, r24
    32fe:	99 1f       	adc	r25, r25
    3300:	1a 94       	dec	r1
    3302:	69 f7       	brne	.-38     	; 0x32de <__udivmodsi4_loop>
    3304:	60 95       	com	r22
    3306:	70 95       	com	r23
    3308:	80 95       	com	r24
    330a:	90 95       	com	r25
    330c:	9b 01       	movw	r18, r22
    330e:	ac 01       	movw	r20, r24
    3310:	bd 01       	movw	r22, r26
    3312:	cf 01       	movw	r24, r30
    3314:	08 95       	ret

00003316 <__tablejump2__>:
    3316:	ee 0f       	add	r30, r30
    3318:	ff 1f       	adc	r31, r31

0000331a <__tablejump__>:
    331a:	05 90       	lpm	r0, Z+
    331c:	f4 91       	lpm	r31, Z
    331e:	e0 2d       	mov	r30, r0
    3320:	09 94       	ijmp

00003322 <__umulhisi3>:
    3322:	a2 9f       	mul	r26, r18
    3324:	b0 01       	movw	r22, r0
    3326:	b3 9f       	mul	r27, r19
    3328:	c0 01       	movw	r24, r0
    332a:	a3 9f       	mul	r26, r19
    332c:	70 0d       	add	r23, r0
    332e:	81 1d       	adc	r24, r1
    3330:	11 24       	eor	r1, r1
    3332:	91 1d       	adc	r25, r1
    3334:	b2 9f       	mul	r27, r18
    3336:	70 0d       	add	r23, r0
    3338:	81 1d       	adc	r24, r1
    333a:	11 24       	eor	r1, r1
    333c:	91 1d       	adc	r25, r1
    333e:	08 95       	ret

00003340 <__muluhisi3>:
    3340:	0e 94 91 19 	call	0x3322	; 0x3322 <__umulhisi3>
    3344:	a5 9f       	mul	r26, r21
    3346:	90 0d       	add	r25, r0
    3348:	b4 9f       	mul	r27, r20
    334a:	90 0d       	add	r25, r0
    334c:	a4 9f       	mul	r26, r20
    334e:	80 0d       	add	r24, r0
    3350:	91 1d       	adc	r25, r1
    3352:	11 24       	eor	r1, r1
    3354:	08 95       	ret

00003356 <printf>:
    3356:	a0 e0       	ldi	r26, 0x00	; 0
    3358:	b0 e0       	ldi	r27, 0x00	; 0
    335a:	e1 eb       	ldi	r30, 0xB1	; 177
    335c:	f9 e1       	ldi	r31, 0x19	; 25
    335e:	0c 94 69 1c 	jmp	0x38d2	; 0x38d2 <__prologue_saves__+0x20>
    3362:	fe 01       	movw	r30, r28
    3364:	35 96       	adiw	r30, 0x05	; 5
    3366:	61 91       	ld	r22, Z+
    3368:	71 91       	ld	r23, Z+
    336a:	af 01       	movw	r20, r30
    336c:	80 91 ec 05 	lds	r24, 0x05EC
    3370:	90 91 ed 05 	lds	r25, 0x05ED
    3374:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <vfprintf>
    3378:	e2 e0       	ldi	r30, 0x02	; 2
    337a:	0c 94 85 1c 	jmp	0x390a	; 0x390a <__epilogue_restores__+0x20>

0000337e <sprintf>:
    337e:	ae e0       	ldi	r26, 0x0E	; 14
    3380:	b0 e0       	ldi	r27, 0x00	; 0
    3382:	e5 ec       	ldi	r30, 0xC5	; 197
    3384:	f9 e1       	ldi	r31, 0x19	; 25
    3386:	0c 94 67 1c 	jmp	0x38ce	; 0x38ce <__prologue_saves__+0x1c>
    338a:	0d 89       	ldd	r16, Y+21	; 0x15
    338c:	1e 89       	ldd	r17, Y+22	; 0x16
    338e:	86 e0       	ldi	r24, 0x06	; 6
    3390:	8c 83       	std	Y+4, r24	; 0x04
    3392:	1a 83       	std	Y+2, r17	; 0x02
    3394:	09 83       	std	Y+1, r16	; 0x01
    3396:	8f ef       	ldi	r24, 0xFF	; 255
    3398:	9f e7       	ldi	r25, 0x7F	; 127
    339a:	9e 83       	std	Y+6, r25	; 0x06
    339c:	8d 83       	std	Y+5, r24	; 0x05
    339e:	ae 01       	movw	r20, r28
    33a0:	47 5e       	subi	r20, 0xE7	; 231
    33a2:	5f 4f       	sbci	r21, 0xFF	; 255
    33a4:	6f 89       	ldd	r22, Y+23	; 0x17
    33a6:	78 8d       	ldd	r23, Y+24	; 0x18
    33a8:	ce 01       	movw	r24, r28
    33aa:	01 96       	adiw	r24, 0x01	; 1
    33ac:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <vfprintf>
    33b0:	ef 81       	ldd	r30, Y+7	; 0x07
    33b2:	f8 85       	ldd	r31, Y+8	; 0x08
    33b4:	e0 0f       	add	r30, r16
    33b6:	f1 1f       	adc	r31, r17
    33b8:	10 82       	st	Z, r1
    33ba:	2e 96       	adiw	r28, 0x0e	; 14
    33bc:	e4 e0       	ldi	r30, 0x04	; 4
    33be:	0c 94 83 1c 	jmp	0x3906	; 0x3906 <__epilogue_restores__+0x1c>

000033c2 <vfprintf>:
    33c2:	ac e0       	ldi	r26, 0x0C	; 12
    33c4:	b0 e0       	ldi	r27, 0x00	; 0
    33c6:	e7 ee       	ldi	r30, 0xE7	; 231
    33c8:	f9 e1       	ldi	r31, 0x19	; 25
    33ca:	0c 94 59 1c 	jmp	0x38b2	; 0x38b2 <__prologue_saves__>
    33ce:	7c 01       	movw	r14, r24
    33d0:	6b 01       	movw	r12, r22
    33d2:	8a 01       	movw	r16, r20
    33d4:	fc 01       	movw	r30, r24
    33d6:	17 82       	std	Z+7, r1	; 0x07
    33d8:	16 82       	std	Z+6, r1	; 0x06
    33da:	83 81       	ldd	r24, Z+3	; 0x03
    33dc:	81 ff       	sbrs	r24, 1
    33de:	bd c1       	rjmp	.+890    	; 0x375a <vfprintf+0x398>
    33e0:	ce 01       	movw	r24, r28
    33e2:	01 96       	adiw	r24, 0x01	; 1
    33e4:	4c 01       	movw	r8, r24
    33e6:	f7 01       	movw	r30, r14
    33e8:	93 81       	ldd	r25, Z+3	; 0x03
    33ea:	f6 01       	movw	r30, r12
    33ec:	93 fd       	sbrc	r25, 3
    33ee:	85 91       	lpm	r24, Z+
    33f0:	93 ff       	sbrs	r25, 3
    33f2:	81 91       	ld	r24, Z+
    33f4:	6f 01       	movw	r12, r30
    33f6:	88 23       	and	r24, r24
    33f8:	09 f4       	brne	.+2      	; 0x33fc <vfprintf+0x3a>
    33fa:	ab c1       	rjmp	.+854    	; 0x3752 <vfprintf+0x390>
    33fc:	85 32       	cpi	r24, 0x25	; 37
    33fe:	39 f4       	brne	.+14     	; 0x340e <vfprintf+0x4c>
    3400:	93 fd       	sbrc	r25, 3
    3402:	85 91       	lpm	r24, Z+
    3404:	93 ff       	sbrs	r25, 3
    3406:	81 91       	ld	r24, Z+
    3408:	6f 01       	movw	r12, r30
    340a:	85 32       	cpi	r24, 0x25	; 37
    340c:	29 f4       	brne	.+10     	; 0x3418 <vfprintf+0x56>
    340e:	b7 01       	movw	r22, r14
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	0e 94 c9 1b 	call	0x3792	; 0x3792 <fputc>
    3416:	e7 cf       	rjmp	.-50     	; 0x33e6 <vfprintf+0x24>
    3418:	51 2c       	mov	r5, r1
    341a:	31 2c       	mov	r3, r1
    341c:	20 e0       	ldi	r18, 0x00	; 0
    341e:	20 32       	cpi	r18, 0x20	; 32
    3420:	a0 f4       	brcc	.+40     	; 0x344a <vfprintf+0x88>
    3422:	8b 32       	cpi	r24, 0x2B	; 43
    3424:	69 f0       	breq	.+26     	; 0x3440 <vfprintf+0x7e>
    3426:	30 f4       	brcc	.+12     	; 0x3434 <vfprintf+0x72>
    3428:	80 32       	cpi	r24, 0x20	; 32
    342a:	59 f0       	breq	.+22     	; 0x3442 <vfprintf+0x80>
    342c:	83 32       	cpi	r24, 0x23	; 35
    342e:	69 f4       	brne	.+26     	; 0x344a <vfprintf+0x88>
    3430:	20 61       	ori	r18, 0x10	; 16
    3432:	2c c0       	rjmp	.+88     	; 0x348c <vfprintf+0xca>
    3434:	8d 32       	cpi	r24, 0x2D	; 45
    3436:	39 f0       	breq	.+14     	; 0x3446 <vfprintf+0x84>
    3438:	80 33       	cpi	r24, 0x30	; 48
    343a:	39 f4       	brne	.+14     	; 0x344a <vfprintf+0x88>
    343c:	21 60       	ori	r18, 0x01	; 1
    343e:	26 c0       	rjmp	.+76     	; 0x348c <vfprintf+0xca>
    3440:	22 60       	ori	r18, 0x02	; 2
    3442:	24 60       	ori	r18, 0x04	; 4
    3444:	23 c0       	rjmp	.+70     	; 0x348c <vfprintf+0xca>
    3446:	28 60       	ori	r18, 0x08	; 8
    3448:	21 c0       	rjmp	.+66     	; 0x348c <vfprintf+0xca>
    344a:	27 fd       	sbrc	r18, 7
    344c:	27 c0       	rjmp	.+78     	; 0x349c <vfprintf+0xda>
    344e:	30 ed       	ldi	r19, 0xD0	; 208
    3450:	38 0f       	add	r19, r24
    3452:	3a 30       	cpi	r19, 0x0A	; 10
    3454:	78 f4       	brcc	.+30     	; 0x3474 <vfprintf+0xb2>
    3456:	26 ff       	sbrs	r18, 6
    3458:	06 c0       	rjmp	.+12     	; 0x3466 <vfprintf+0xa4>
    345a:	fa e0       	ldi	r31, 0x0A	; 10
    345c:	5f 9e       	mul	r5, r31
    345e:	30 0d       	add	r19, r0
    3460:	11 24       	eor	r1, r1
    3462:	53 2e       	mov	r5, r19
    3464:	13 c0       	rjmp	.+38     	; 0x348c <vfprintf+0xca>
    3466:	8a e0       	ldi	r24, 0x0A	; 10
    3468:	38 9e       	mul	r3, r24
    346a:	30 0d       	add	r19, r0
    346c:	11 24       	eor	r1, r1
    346e:	33 2e       	mov	r3, r19
    3470:	20 62       	ori	r18, 0x20	; 32
    3472:	0c c0       	rjmp	.+24     	; 0x348c <vfprintf+0xca>
    3474:	8e 32       	cpi	r24, 0x2E	; 46
    3476:	21 f4       	brne	.+8      	; 0x3480 <vfprintf+0xbe>
    3478:	26 fd       	sbrc	r18, 6
    347a:	6b c1       	rjmp	.+726    	; 0x3752 <vfprintf+0x390>
    347c:	20 64       	ori	r18, 0x40	; 64
    347e:	06 c0       	rjmp	.+12     	; 0x348c <vfprintf+0xca>
    3480:	8c 36       	cpi	r24, 0x6C	; 108
    3482:	11 f4       	brne	.+4      	; 0x3488 <vfprintf+0xc6>
    3484:	20 68       	ori	r18, 0x80	; 128
    3486:	02 c0       	rjmp	.+4      	; 0x348c <vfprintf+0xca>
    3488:	88 36       	cpi	r24, 0x68	; 104
    348a:	41 f4       	brne	.+16     	; 0x349c <vfprintf+0xda>
    348c:	f6 01       	movw	r30, r12
    348e:	93 fd       	sbrc	r25, 3
    3490:	85 91       	lpm	r24, Z+
    3492:	93 ff       	sbrs	r25, 3
    3494:	81 91       	ld	r24, Z+
    3496:	6f 01       	movw	r12, r30
    3498:	81 11       	cpse	r24, r1
    349a:	c1 cf       	rjmp	.-126    	; 0x341e <vfprintf+0x5c>
    349c:	98 2f       	mov	r25, r24
    349e:	9f 7d       	andi	r25, 0xDF	; 223
    34a0:	95 54       	subi	r25, 0x45	; 69
    34a2:	93 30       	cpi	r25, 0x03	; 3
    34a4:	28 f4       	brcc	.+10     	; 0x34b0 <vfprintf+0xee>
    34a6:	0c 5f       	subi	r16, 0xFC	; 252
    34a8:	1f 4f       	sbci	r17, 0xFF	; 255
    34aa:	ff e3       	ldi	r31, 0x3F	; 63
    34ac:	f9 83       	std	Y+1, r31	; 0x01
    34ae:	0d c0       	rjmp	.+26     	; 0x34ca <vfprintf+0x108>
    34b0:	83 36       	cpi	r24, 0x63	; 99
    34b2:	31 f0       	breq	.+12     	; 0x34c0 <vfprintf+0xfe>
    34b4:	83 37       	cpi	r24, 0x73	; 115
    34b6:	71 f0       	breq	.+28     	; 0x34d4 <vfprintf+0x112>
    34b8:	83 35       	cpi	r24, 0x53	; 83
    34ba:	09 f0       	breq	.+2      	; 0x34be <vfprintf+0xfc>
    34bc:	5b c0       	rjmp	.+182    	; 0x3574 <vfprintf+0x1b2>
    34be:	22 c0       	rjmp	.+68     	; 0x3504 <vfprintf+0x142>
    34c0:	f8 01       	movw	r30, r16
    34c2:	80 81       	ld	r24, Z
    34c4:	89 83       	std	Y+1, r24	; 0x01
    34c6:	0e 5f       	subi	r16, 0xFE	; 254
    34c8:	1f 4f       	sbci	r17, 0xFF	; 255
    34ca:	44 24       	eor	r4, r4
    34cc:	43 94       	inc	r4
    34ce:	51 2c       	mov	r5, r1
    34d0:	54 01       	movw	r10, r8
    34d2:	15 c0       	rjmp	.+42     	; 0x34fe <vfprintf+0x13c>
    34d4:	38 01       	movw	r6, r16
    34d6:	f2 e0       	ldi	r31, 0x02	; 2
    34d8:	6f 0e       	add	r6, r31
    34da:	71 1c       	adc	r7, r1
    34dc:	f8 01       	movw	r30, r16
    34de:	a0 80       	ld	r10, Z
    34e0:	b1 80       	ldd	r11, Z+1	; 0x01
    34e2:	26 ff       	sbrs	r18, 6
    34e4:	03 c0       	rjmp	.+6      	; 0x34ec <vfprintf+0x12a>
    34e6:	65 2d       	mov	r22, r5
    34e8:	70 e0       	ldi	r23, 0x00	; 0
    34ea:	02 c0       	rjmp	.+4      	; 0x34f0 <vfprintf+0x12e>
    34ec:	6f ef       	ldi	r22, 0xFF	; 255
    34ee:	7f ef       	ldi	r23, 0xFF	; 255
    34f0:	c5 01       	movw	r24, r10
    34f2:	2c 87       	std	Y+12, r18	; 0x0c
    34f4:	0e 94 be 1b 	call	0x377c	; 0x377c <strnlen>
    34f8:	2c 01       	movw	r4, r24
    34fa:	83 01       	movw	r16, r6
    34fc:	2c 85       	ldd	r18, Y+12	; 0x0c
    34fe:	2f 77       	andi	r18, 0x7F	; 127
    3500:	22 2e       	mov	r2, r18
    3502:	17 c0       	rjmp	.+46     	; 0x3532 <vfprintf+0x170>
    3504:	38 01       	movw	r6, r16
    3506:	f2 e0       	ldi	r31, 0x02	; 2
    3508:	6f 0e       	add	r6, r31
    350a:	71 1c       	adc	r7, r1
    350c:	f8 01       	movw	r30, r16
    350e:	a0 80       	ld	r10, Z
    3510:	b1 80       	ldd	r11, Z+1	; 0x01
    3512:	26 ff       	sbrs	r18, 6
    3514:	03 c0       	rjmp	.+6      	; 0x351c <vfprintf+0x15a>
    3516:	65 2d       	mov	r22, r5
    3518:	70 e0       	ldi	r23, 0x00	; 0
    351a:	02 c0       	rjmp	.+4      	; 0x3520 <vfprintf+0x15e>
    351c:	6f ef       	ldi	r22, 0xFF	; 255
    351e:	7f ef       	ldi	r23, 0xFF	; 255
    3520:	c5 01       	movw	r24, r10
    3522:	2c 87       	std	Y+12, r18	; 0x0c
    3524:	0e 94 b3 1b 	call	0x3766	; 0x3766 <strnlen_P>
    3528:	2c 01       	movw	r4, r24
    352a:	2c 85       	ldd	r18, Y+12	; 0x0c
    352c:	20 68       	ori	r18, 0x80	; 128
    352e:	22 2e       	mov	r2, r18
    3530:	83 01       	movw	r16, r6
    3532:	23 fc       	sbrc	r2, 3
    3534:	1b c0       	rjmp	.+54     	; 0x356c <vfprintf+0x1aa>
    3536:	83 2d       	mov	r24, r3
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	48 16       	cp	r4, r24
    353c:	59 06       	cpc	r5, r25
    353e:	b0 f4       	brcc	.+44     	; 0x356c <vfprintf+0x1aa>
    3540:	b7 01       	movw	r22, r14
    3542:	80 e2       	ldi	r24, 0x20	; 32
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	0e 94 c9 1b 	call	0x3792	; 0x3792 <fputc>
    354a:	3a 94       	dec	r3
    354c:	f4 cf       	rjmp	.-24     	; 0x3536 <vfprintf+0x174>
    354e:	f5 01       	movw	r30, r10
    3550:	27 fc       	sbrc	r2, 7
    3552:	85 91       	lpm	r24, Z+
    3554:	27 fe       	sbrs	r2, 7
    3556:	81 91       	ld	r24, Z+
    3558:	5f 01       	movw	r10, r30
    355a:	b7 01       	movw	r22, r14
    355c:	90 e0       	ldi	r25, 0x00	; 0
    355e:	0e 94 c9 1b 	call	0x3792	; 0x3792 <fputc>
    3562:	31 10       	cpse	r3, r1
    3564:	3a 94       	dec	r3
    3566:	f1 e0       	ldi	r31, 0x01	; 1
    3568:	4f 1a       	sub	r4, r31
    356a:	51 08       	sbc	r5, r1
    356c:	41 14       	cp	r4, r1
    356e:	51 04       	cpc	r5, r1
    3570:	71 f7       	brne	.-36     	; 0x354e <vfprintf+0x18c>
    3572:	e5 c0       	rjmp	.+458    	; 0x373e <vfprintf+0x37c>
    3574:	84 36       	cpi	r24, 0x64	; 100
    3576:	11 f0       	breq	.+4      	; 0x357c <vfprintf+0x1ba>
    3578:	89 36       	cpi	r24, 0x69	; 105
    357a:	39 f5       	brne	.+78     	; 0x35ca <vfprintf+0x208>
    357c:	f8 01       	movw	r30, r16
    357e:	27 ff       	sbrs	r18, 7
    3580:	07 c0       	rjmp	.+14     	; 0x3590 <vfprintf+0x1ce>
    3582:	60 81       	ld	r22, Z
    3584:	71 81       	ldd	r23, Z+1	; 0x01
    3586:	82 81       	ldd	r24, Z+2	; 0x02
    3588:	93 81       	ldd	r25, Z+3	; 0x03
    358a:	0c 5f       	subi	r16, 0xFC	; 252
    358c:	1f 4f       	sbci	r17, 0xFF	; 255
    358e:	08 c0       	rjmp	.+16     	; 0x35a0 <vfprintf+0x1de>
    3590:	60 81       	ld	r22, Z
    3592:	71 81       	ldd	r23, Z+1	; 0x01
    3594:	88 27       	eor	r24, r24
    3596:	77 fd       	sbrc	r23, 7
    3598:	80 95       	com	r24
    359a:	98 2f       	mov	r25, r24
    359c:	0e 5f       	subi	r16, 0xFE	; 254
    359e:	1f 4f       	sbci	r17, 0xFF	; 255
    35a0:	2f 76       	andi	r18, 0x6F	; 111
    35a2:	b2 2e       	mov	r11, r18
    35a4:	97 ff       	sbrs	r25, 7
    35a6:	09 c0       	rjmp	.+18     	; 0x35ba <vfprintf+0x1f8>
    35a8:	90 95       	com	r25
    35aa:	80 95       	com	r24
    35ac:	70 95       	com	r23
    35ae:	61 95       	neg	r22
    35b0:	7f 4f       	sbci	r23, 0xFF	; 255
    35b2:	8f 4f       	sbci	r24, 0xFF	; 255
    35b4:	9f 4f       	sbci	r25, 0xFF	; 255
    35b6:	20 68       	ori	r18, 0x80	; 128
    35b8:	b2 2e       	mov	r11, r18
    35ba:	2a e0       	ldi	r18, 0x0A	; 10
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	a4 01       	movw	r20, r8
    35c0:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <__ultoa_invert>
    35c4:	a8 2e       	mov	r10, r24
    35c6:	a8 18       	sub	r10, r8
    35c8:	44 c0       	rjmp	.+136    	; 0x3652 <vfprintf+0x290>
    35ca:	85 37       	cpi	r24, 0x75	; 117
    35cc:	29 f4       	brne	.+10     	; 0x35d8 <vfprintf+0x216>
    35ce:	2f 7e       	andi	r18, 0xEF	; 239
    35d0:	b2 2e       	mov	r11, r18
    35d2:	2a e0       	ldi	r18, 0x0A	; 10
    35d4:	30 e0       	ldi	r19, 0x00	; 0
    35d6:	25 c0       	rjmp	.+74     	; 0x3622 <vfprintf+0x260>
    35d8:	f2 2f       	mov	r31, r18
    35da:	f9 7f       	andi	r31, 0xF9	; 249
    35dc:	bf 2e       	mov	r11, r31
    35de:	8f 36       	cpi	r24, 0x6F	; 111
    35e0:	c1 f0       	breq	.+48     	; 0x3612 <vfprintf+0x250>
    35e2:	18 f4       	brcc	.+6      	; 0x35ea <vfprintf+0x228>
    35e4:	88 35       	cpi	r24, 0x58	; 88
    35e6:	79 f0       	breq	.+30     	; 0x3606 <vfprintf+0x244>
    35e8:	b4 c0       	rjmp	.+360    	; 0x3752 <vfprintf+0x390>
    35ea:	80 37       	cpi	r24, 0x70	; 112
    35ec:	19 f0       	breq	.+6      	; 0x35f4 <vfprintf+0x232>
    35ee:	88 37       	cpi	r24, 0x78	; 120
    35f0:	21 f0       	breq	.+8      	; 0x35fa <vfprintf+0x238>
    35f2:	af c0       	rjmp	.+350    	; 0x3752 <vfprintf+0x390>
    35f4:	2f 2f       	mov	r18, r31
    35f6:	20 61       	ori	r18, 0x10	; 16
    35f8:	b2 2e       	mov	r11, r18
    35fa:	b4 fe       	sbrs	r11, 4
    35fc:	0d c0       	rjmp	.+26     	; 0x3618 <vfprintf+0x256>
    35fe:	8b 2d       	mov	r24, r11
    3600:	84 60       	ori	r24, 0x04	; 4
    3602:	b8 2e       	mov	r11, r24
    3604:	09 c0       	rjmp	.+18     	; 0x3618 <vfprintf+0x256>
    3606:	24 ff       	sbrs	r18, 4
    3608:	0a c0       	rjmp	.+20     	; 0x361e <vfprintf+0x25c>
    360a:	9f 2f       	mov	r25, r31
    360c:	96 60       	ori	r25, 0x06	; 6
    360e:	b9 2e       	mov	r11, r25
    3610:	06 c0       	rjmp	.+12     	; 0x361e <vfprintf+0x25c>
    3612:	28 e0       	ldi	r18, 0x08	; 8
    3614:	30 e0       	ldi	r19, 0x00	; 0
    3616:	05 c0       	rjmp	.+10     	; 0x3622 <vfprintf+0x260>
    3618:	20 e1       	ldi	r18, 0x10	; 16
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	02 c0       	rjmp	.+4      	; 0x3622 <vfprintf+0x260>
    361e:	20 e1       	ldi	r18, 0x10	; 16
    3620:	32 e0       	ldi	r19, 0x02	; 2
    3622:	f8 01       	movw	r30, r16
    3624:	b7 fe       	sbrs	r11, 7
    3626:	07 c0       	rjmp	.+14     	; 0x3636 <vfprintf+0x274>
    3628:	60 81       	ld	r22, Z
    362a:	71 81       	ldd	r23, Z+1	; 0x01
    362c:	82 81       	ldd	r24, Z+2	; 0x02
    362e:	93 81       	ldd	r25, Z+3	; 0x03
    3630:	0c 5f       	subi	r16, 0xFC	; 252
    3632:	1f 4f       	sbci	r17, 0xFF	; 255
    3634:	06 c0       	rjmp	.+12     	; 0x3642 <vfprintf+0x280>
    3636:	60 81       	ld	r22, Z
    3638:	71 81       	ldd	r23, Z+1	; 0x01
    363a:	80 e0       	ldi	r24, 0x00	; 0
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	0e 5f       	subi	r16, 0xFE	; 254
    3640:	1f 4f       	sbci	r17, 0xFF	; 255
    3642:	a4 01       	movw	r20, r8
    3644:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <__ultoa_invert>
    3648:	a8 2e       	mov	r10, r24
    364a:	a8 18       	sub	r10, r8
    364c:	fb 2d       	mov	r31, r11
    364e:	ff 77       	andi	r31, 0x7F	; 127
    3650:	bf 2e       	mov	r11, r31
    3652:	b6 fe       	sbrs	r11, 6
    3654:	0b c0       	rjmp	.+22     	; 0x366c <vfprintf+0x2aa>
    3656:	2b 2d       	mov	r18, r11
    3658:	2e 7f       	andi	r18, 0xFE	; 254
    365a:	a5 14       	cp	r10, r5
    365c:	50 f4       	brcc	.+20     	; 0x3672 <vfprintf+0x2b0>
    365e:	b4 fe       	sbrs	r11, 4
    3660:	0a c0       	rjmp	.+20     	; 0x3676 <vfprintf+0x2b4>
    3662:	b2 fc       	sbrc	r11, 2
    3664:	08 c0       	rjmp	.+16     	; 0x3676 <vfprintf+0x2b4>
    3666:	2b 2d       	mov	r18, r11
    3668:	2e 7e       	andi	r18, 0xEE	; 238
    366a:	05 c0       	rjmp	.+10     	; 0x3676 <vfprintf+0x2b4>
    366c:	7a 2c       	mov	r7, r10
    366e:	2b 2d       	mov	r18, r11
    3670:	03 c0       	rjmp	.+6      	; 0x3678 <vfprintf+0x2b6>
    3672:	7a 2c       	mov	r7, r10
    3674:	01 c0       	rjmp	.+2      	; 0x3678 <vfprintf+0x2b6>
    3676:	75 2c       	mov	r7, r5
    3678:	24 ff       	sbrs	r18, 4
    367a:	0d c0       	rjmp	.+26     	; 0x3696 <vfprintf+0x2d4>
    367c:	fe 01       	movw	r30, r28
    367e:	ea 0d       	add	r30, r10
    3680:	f1 1d       	adc	r31, r1
    3682:	80 81       	ld	r24, Z
    3684:	80 33       	cpi	r24, 0x30	; 48
    3686:	11 f4       	brne	.+4      	; 0x368c <vfprintf+0x2ca>
    3688:	29 7e       	andi	r18, 0xE9	; 233
    368a:	09 c0       	rjmp	.+18     	; 0x369e <vfprintf+0x2dc>
    368c:	22 ff       	sbrs	r18, 2
    368e:	06 c0       	rjmp	.+12     	; 0x369c <vfprintf+0x2da>
    3690:	73 94       	inc	r7
    3692:	73 94       	inc	r7
    3694:	04 c0       	rjmp	.+8      	; 0x369e <vfprintf+0x2dc>
    3696:	82 2f       	mov	r24, r18
    3698:	86 78       	andi	r24, 0x86	; 134
    369a:	09 f0       	breq	.+2      	; 0x369e <vfprintf+0x2dc>
    369c:	73 94       	inc	r7
    369e:	23 fd       	sbrc	r18, 3
    36a0:	13 c0       	rjmp	.+38     	; 0x36c8 <vfprintf+0x306>
    36a2:	20 ff       	sbrs	r18, 0
    36a4:	06 c0       	rjmp	.+12     	; 0x36b2 <vfprintf+0x2f0>
    36a6:	5a 2c       	mov	r5, r10
    36a8:	73 14       	cp	r7, r3
    36aa:	18 f4       	brcc	.+6      	; 0x36b2 <vfprintf+0x2f0>
    36ac:	53 0c       	add	r5, r3
    36ae:	57 18       	sub	r5, r7
    36b0:	73 2c       	mov	r7, r3
    36b2:	73 14       	cp	r7, r3
    36b4:	68 f4       	brcc	.+26     	; 0x36d0 <vfprintf+0x30e>
    36b6:	b7 01       	movw	r22, r14
    36b8:	80 e2       	ldi	r24, 0x20	; 32
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	2c 87       	std	Y+12, r18	; 0x0c
    36be:	0e 94 c9 1b 	call	0x3792	; 0x3792 <fputc>
    36c2:	73 94       	inc	r7
    36c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    36c6:	f5 cf       	rjmp	.-22     	; 0x36b2 <vfprintf+0x2f0>
    36c8:	73 14       	cp	r7, r3
    36ca:	10 f4       	brcc	.+4      	; 0x36d0 <vfprintf+0x30e>
    36cc:	37 18       	sub	r3, r7
    36ce:	01 c0       	rjmp	.+2      	; 0x36d2 <vfprintf+0x310>
    36d0:	31 2c       	mov	r3, r1
    36d2:	24 ff       	sbrs	r18, 4
    36d4:	12 c0       	rjmp	.+36     	; 0x36fa <vfprintf+0x338>
    36d6:	b7 01       	movw	r22, r14
    36d8:	80 e3       	ldi	r24, 0x30	; 48
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	2c 87       	std	Y+12, r18	; 0x0c
    36de:	0e 94 c9 1b 	call	0x3792	; 0x3792 <fputc>
    36e2:	2c 85       	ldd	r18, Y+12	; 0x0c
    36e4:	22 ff       	sbrs	r18, 2
    36e6:	17 c0       	rjmp	.+46     	; 0x3716 <vfprintf+0x354>
    36e8:	21 ff       	sbrs	r18, 1
    36ea:	03 c0       	rjmp	.+6      	; 0x36f2 <vfprintf+0x330>
    36ec:	88 e5       	ldi	r24, 0x58	; 88
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	02 c0       	rjmp	.+4      	; 0x36f6 <vfprintf+0x334>
    36f2:	88 e7       	ldi	r24, 0x78	; 120
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	b7 01       	movw	r22, r14
    36f8:	0c c0       	rjmp	.+24     	; 0x3712 <vfprintf+0x350>
    36fa:	82 2f       	mov	r24, r18
    36fc:	86 78       	andi	r24, 0x86	; 134
    36fe:	59 f0       	breq	.+22     	; 0x3716 <vfprintf+0x354>
    3700:	21 fd       	sbrc	r18, 1
    3702:	02 c0       	rjmp	.+4      	; 0x3708 <vfprintf+0x346>
    3704:	80 e2       	ldi	r24, 0x20	; 32
    3706:	01 c0       	rjmp	.+2      	; 0x370a <vfprintf+0x348>
    3708:	8b e2       	ldi	r24, 0x2B	; 43
    370a:	27 fd       	sbrc	r18, 7
    370c:	8d e2       	ldi	r24, 0x2D	; 45
    370e:	b7 01       	movw	r22, r14
    3710:	90 e0       	ldi	r25, 0x00	; 0
    3712:	0e 94 c9 1b 	call	0x3792	; 0x3792 <fputc>
    3716:	a5 14       	cp	r10, r5
    3718:	38 f4       	brcc	.+14     	; 0x3728 <vfprintf+0x366>
    371a:	b7 01       	movw	r22, r14
    371c:	80 e3       	ldi	r24, 0x30	; 48
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	0e 94 c9 1b 	call	0x3792	; 0x3792 <fputc>
    3724:	5a 94       	dec	r5
    3726:	f7 cf       	rjmp	.-18     	; 0x3716 <vfprintf+0x354>
    3728:	aa 94       	dec	r10
    372a:	f4 01       	movw	r30, r8
    372c:	ea 0d       	add	r30, r10
    372e:	f1 1d       	adc	r31, r1
    3730:	80 81       	ld	r24, Z
    3732:	b7 01       	movw	r22, r14
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	0e 94 c9 1b 	call	0x3792	; 0x3792 <fputc>
    373a:	a1 10       	cpse	r10, r1
    373c:	f5 cf       	rjmp	.-22     	; 0x3728 <vfprintf+0x366>
    373e:	33 20       	and	r3, r3
    3740:	09 f4       	brne	.+2      	; 0x3744 <vfprintf+0x382>
    3742:	51 ce       	rjmp	.-862    	; 0x33e6 <vfprintf+0x24>
    3744:	b7 01       	movw	r22, r14
    3746:	80 e2       	ldi	r24, 0x20	; 32
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	0e 94 c9 1b 	call	0x3792	; 0x3792 <fputc>
    374e:	3a 94       	dec	r3
    3750:	f6 cf       	rjmp	.-20     	; 0x373e <vfprintf+0x37c>
    3752:	f7 01       	movw	r30, r14
    3754:	86 81       	ldd	r24, Z+6	; 0x06
    3756:	97 81       	ldd	r25, Z+7	; 0x07
    3758:	02 c0       	rjmp	.+4      	; 0x375e <vfprintf+0x39c>
    375a:	8f ef       	ldi	r24, 0xFF	; 255
    375c:	9f ef       	ldi	r25, 0xFF	; 255
    375e:	2c 96       	adiw	r28, 0x0c	; 12
    3760:	e2 e1       	ldi	r30, 0x12	; 18
    3762:	0c 94 75 1c 	jmp	0x38ea	; 0x38ea <__epilogue_restores__>

00003766 <strnlen_P>:
    3766:	fc 01       	movw	r30, r24
    3768:	05 90       	lpm	r0, Z+
    376a:	61 50       	subi	r22, 0x01	; 1
    376c:	70 40       	sbci	r23, 0x00	; 0
    376e:	01 10       	cpse	r0, r1
    3770:	d8 f7       	brcc	.-10     	; 0x3768 <strnlen_P+0x2>
    3772:	80 95       	com	r24
    3774:	90 95       	com	r25
    3776:	8e 0f       	add	r24, r30
    3778:	9f 1f       	adc	r25, r31
    377a:	08 95       	ret

0000377c <strnlen>:
    377c:	fc 01       	movw	r30, r24
    377e:	61 50       	subi	r22, 0x01	; 1
    3780:	70 40       	sbci	r23, 0x00	; 0
    3782:	01 90       	ld	r0, Z+
    3784:	01 10       	cpse	r0, r1
    3786:	d8 f7       	brcc	.-10     	; 0x377e <strnlen+0x2>
    3788:	80 95       	com	r24
    378a:	90 95       	com	r25
    378c:	8e 0f       	add	r24, r30
    378e:	9f 1f       	adc	r25, r31
    3790:	08 95       	ret

00003792 <fputc>:
    3792:	0f 93       	push	r16
    3794:	1f 93       	push	r17
    3796:	cf 93       	push	r28
    3798:	df 93       	push	r29
    379a:	18 2f       	mov	r17, r24
    379c:	09 2f       	mov	r16, r25
    379e:	eb 01       	movw	r28, r22
    37a0:	8b 81       	ldd	r24, Y+3	; 0x03
    37a2:	81 fd       	sbrc	r24, 1
    37a4:	03 c0       	rjmp	.+6      	; 0x37ac <fputc+0x1a>
    37a6:	8f ef       	ldi	r24, 0xFF	; 255
    37a8:	9f ef       	ldi	r25, 0xFF	; 255
    37aa:	20 c0       	rjmp	.+64     	; 0x37ec <fputc+0x5a>
    37ac:	82 ff       	sbrs	r24, 2
    37ae:	10 c0       	rjmp	.+32     	; 0x37d0 <fputc+0x3e>
    37b0:	4e 81       	ldd	r20, Y+6	; 0x06
    37b2:	5f 81       	ldd	r21, Y+7	; 0x07
    37b4:	2c 81       	ldd	r18, Y+4	; 0x04
    37b6:	3d 81       	ldd	r19, Y+5	; 0x05
    37b8:	42 17       	cp	r20, r18
    37ba:	53 07       	cpc	r21, r19
    37bc:	7c f4       	brge	.+30     	; 0x37dc <fputc+0x4a>
    37be:	e8 81       	ld	r30, Y
    37c0:	f9 81       	ldd	r31, Y+1	; 0x01
    37c2:	9f 01       	movw	r18, r30
    37c4:	2f 5f       	subi	r18, 0xFF	; 255
    37c6:	3f 4f       	sbci	r19, 0xFF	; 255
    37c8:	39 83       	std	Y+1, r19	; 0x01
    37ca:	28 83       	st	Y, r18
    37cc:	10 83       	st	Z, r17
    37ce:	06 c0       	rjmp	.+12     	; 0x37dc <fputc+0x4a>
    37d0:	e8 85       	ldd	r30, Y+8	; 0x08
    37d2:	f9 85       	ldd	r31, Y+9	; 0x09
    37d4:	81 2f       	mov	r24, r17
    37d6:	09 95       	icall
    37d8:	89 2b       	or	r24, r25
    37da:	29 f7       	brne	.-54     	; 0x37a6 <fputc+0x14>
    37dc:	2e 81       	ldd	r18, Y+6	; 0x06
    37de:	3f 81       	ldd	r19, Y+7	; 0x07
    37e0:	2f 5f       	subi	r18, 0xFF	; 255
    37e2:	3f 4f       	sbci	r19, 0xFF	; 255
    37e4:	3f 83       	std	Y+7, r19	; 0x07
    37e6:	2e 83       	std	Y+6, r18	; 0x06
    37e8:	81 2f       	mov	r24, r17
    37ea:	90 2f       	mov	r25, r16
    37ec:	df 91       	pop	r29
    37ee:	cf 91       	pop	r28
    37f0:	1f 91       	pop	r17
    37f2:	0f 91       	pop	r16
    37f4:	08 95       	ret

000037f6 <__ultoa_invert>:
    37f6:	fa 01       	movw	r30, r20
    37f8:	aa 27       	eor	r26, r26
    37fa:	28 30       	cpi	r18, 0x08	; 8
    37fc:	51 f1       	breq	.+84     	; 0x3852 <__ultoa_invert+0x5c>
    37fe:	20 31       	cpi	r18, 0x10	; 16
    3800:	81 f1       	breq	.+96     	; 0x3862 <__ultoa_invert+0x6c>
    3802:	e8 94       	clt
    3804:	6f 93       	push	r22
    3806:	6e 7f       	andi	r22, 0xFE	; 254
    3808:	6e 5f       	subi	r22, 0xFE	; 254
    380a:	7f 4f       	sbci	r23, 0xFF	; 255
    380c:	8f 4f       	sbci	r24, 0xFF	; 255
    380e:	9f 4f       	sbci	r25, 0xFF	; 255
    3810:	af 4f       	sbci	r26, 0xFF	; 255
    3812:	b1 e0       	ldi	r27, 0x01	; 1
    3814:	3e d0       	rcall	.+124    	; 0x3892 <__ultoa_invert+0x9c>
    3816:	b4 e0       	ldi	r27, 0x04	; 4
    3818:	3c d0       	rcall	.+120    	; 0x3892 <__ultoa_invert+0x9c>
    381a:	67 0f       	add	r22, r23
    381c:	78 1f       	adc	r23, r24
    381e:	89 1f       	adc	r24, r25
    3820:	9a 1f       	adc	r25, r26
    3822:	a1 1d       	adc	r26, r1
    3824:	68 0f       	add	r22, r24
    3826:	79 1f       	adc	r23, r25
    3828:	8a 1f       	adc	r24, r26
    382a:	91 1d       	adc	r25, r1
    382c:	a1 1d       	adc	r26, r1
    382e:	6a 0f       	add	r22, r26
    3830:	71 1d       	adc	r23, r1
    3832:	81 1d       	adc	r24, r1
    3834:	91 1d       	adc	r25, r1
    3836:	a1 1d       	adc	r26, r1
    3838:	20 d0       	rcall	.+64     	; 0x387a <__ultoa_invert+0x84>
    383a:	09 f4       	brne	.+2      	; 0x383e <__ultoa_invert+0x48>
    383c:	68 94       	set
    383e:	3f 91       	pop	r19
    3840:	2a e0       	ldi	r18, 0x0A	; 10
    3842:	26 9f       	mul	r18, r22
    3844:	11 24       	eor	r1, r1
    3846:	30 19       	sub	r19, r0
    3848:	30 5d       	subi	r19, 0xD0	; 208
    384a:	31 93       	st	Z+, r19
    384c:	de f6       	brtc	.-74     	; 0x3804 <__ultoa_invert+0xe>
    384e:	cf 01       	movw	r24, r30
    3850:	08 95       	ret
    3852:	46 2f       	mov	r20, r22
    3854:	47 70       	andi	r20, 0x07	; 7
    3856:	40 5d       	subi	r20, 0xD0	; 208
    3858:	41 93       	st	Z+, r20
    385a:	b3 e0       	ldi	r27, 0x03	; 3
    385c:	0f d0       	rcall	.+30     	; 0x387c <__ultoa_invert+0x86>
    385e:	c9 f7       	brne	.-14     	; 0x3852 <__ultoa_invert+0x5c>
    3860:	f6 cf       	rjmp	.-20     	; 0x384e <__ultoa_invert+0x58>
    3862:	46 2f       	mov	r20, r22
    3864:	4f 70       	andi	r20, 0x0F	; 15
    3866:	40 5d       	subi	r20, 0xD0	; 208
    3868:	4a 33       	cpi	r20, 0x3A	; 58
    386a:	18 f0       	brcs	.+6      	; 0x3872 <__ultoa_invert+0x7c>
    386c:	49 5d       	subi	r20, 0xD9	; 217
    386e:	31 fd       	sbrc	r19, 1
    3870:	40 52       	subi	r20, 0x20	; 32
    3872:	41 93       	st	Z+, r20
    3874:	02 d0       	rcall	.+4      	; 0x387a <__ultoa_invert+0x84>
    3876:	a9 f7       	brne	.-22     	; 0x3862 <__ultoa_invert+0x6c>
    3878:	ea cf       	rjmp	.-44     	; 0x384e <__ultoa_invert+0x58>
    387a:	b4 e0       	ldi	r27, 0x04	; 4
    387c:	a6 95       	lsr	r26
    387e:	97 95       	ror	r25
    3880:	87 95       	ror	r24
    3882:	77 95       	ror	r23
    3884:	67 95       	ror	r22
    3886:	ba 95       	dec	r27
    3888:	c9 f7       	brne	.-14     	; 0x387c <__ultoa_invert+0x86>
    388a:	00 97       	sbiw	r24, 0x00	; 0
    388c:	61 05       	cpc	r22, r1
    388e:	71 05       	cpc	r23, r1
    3890:	08 95       	ret
    3892:	9b 01       	movw	r18, r22
    3894:	ac 01       	movw	r20, r24
    3896:	0a 2e       	mov	r0, r26
    3898:	06 94       	lsr	r0
    389a:	57 95       	ror	r21
    389c:	47 95       	ror	r20
    389e:	37 95       	ror	r19
    38a0:	27 95       	ror	r18
    38a2:	ba 95       	dec	r27
    38a4:	c9 f7       	brne	.-14     	; 0x3898 <__ultoa_invert+0xa2>
    38a6:	62 0f       	add	r22, r18
    38a8:	73 1f       	adc	r23, r19
    38aa:	84 1f       	adc	r24, r20
    38ac:	95 1f       	adc	r25, r21
    38ae:	a0 1d       	adc	r26, r0
    38b0:	08 95       	ret

000038b2 <__prologue_saves__>:
    38b2:	2f 92       	push	r2
    38b4:	3f 92       	push	r3
    38b6:	4f 92       	push	r4
    38b8:	5f 92       	push	r5
    38ba:	6f 92       	push	r6
    38bc:	7f 92       	push	r7
    38be:	8f 92       	push	r8
    38c0:	9f 92       	push	r9
    38c2:	af 92       	push	r10
    38c4:	bf 92       	push	r11
    38c6:	cf 92       	push	r12
    38c8:	df 92       	push	r13
    38ca:	ef 92       	push	r14
    38cc:	ff 92       	push	r15
    38ce:	0f 93       	push	r16
    38d0:	1f 93       	push	r17
    38d2:	cf 93       	push	r28
    38d4:	df 93       	push	r29
    38d6:	cd b7       	in	r28, 0x3d	; 61
    38d8:	de b7       	in	r29, 0x3e	; 62
    38da:	ca 1b       	sub	r28, r26
    38dc:	db 0b       	sbc	r29, r27
    38de:	0f b6       	in	r0, 0x3f	; 63
    38e0:	f8 94       	cli
    38e2:	de bf       	out	0x3e, r29	; 62
    38e4:	0f be       	out	0x3f, r0	; 63
    38e6:	cd bf       	out	0x3d, r28	; 61
    38e8:	09 94       	ijmp

000038ea <__epilogue_restores__>:
    38ea:	2a 88       	ldd	r2, Y+18	; 0x12
    38ec:	39 88       	ldd	r3, Y+17	; 0x11
    38ee:	48 88       	ldd	r4, Y+16	; 0x10
    38f0:	5f 84       	ldd	r5, Y+15	; 0x0f
    38f2:	6e 84       	ldd	r6, Y+14	; 0x0e
    38f4:	7d 84       	ldd	r7, Y+13	; 0x0d
    38f6:	8c 84       	ldd	r8, Y+12	; 0x0c
    38f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    38fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    38fc:	b9 84       	ldd	r11, Y+9	; 0x09
    38fe:	c8 84       	ldd	r12, Y+8	; 0x08
    3900:	df 80       	ldd	r13, Y+7	; 0x07
    3902:	ee 80       	ldd	r14, Y+6	; 0x06
    3904:	fd 80       	ldd	r15, Y+5	; 0x05
    3906:	0c 81       	ldd	r16, Y+4	; 0x04
    3908:	1b 81       	ldd	r17, Y+3	; 0x03
    390a:	aa 81       	ldd	r26, Y+2	; 0x02
    390c:	b9 81       	ldd	r27, Y+1	; 0x01
    390e:	ce 0f       	add	r28, r30
    3910:	d1 1d       	adc	r29, r1
    3912:	0f b6       	in	r0, 0x3f	; 63
    3914:	f8 94       	cli
    3916:	de bf       	out	0x3e, r29	; 62
    3918:	0f be       	out	0x3f, r0	; 63
    391a:	cd bf       	out	0x3d, r28	; 61
    391c:	ed 01       	movw	r28, r26
    391e:	08 95       	ret

00003920 <_exit>:
    3920:	f8 94       	cli

00003922 <__stop_program>:
    3922:	ff cf       	rjmp	.-2      	; 0x3922 <__stop_program>
