
SRI Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000026a  00800100  00001a00  00001a94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012d  0080036a  0080036a  00001cfe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001cfe  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000218  00000000  00000000  00001d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002292  00000000  00000000  00001f72  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a0c  00000000  00000000  00004204  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c2d  00000000  00000000  00004c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000628  00000000  00000000  00005840  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000084a  00000000  00000000  00005e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001725  00000000  00000000  000066b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e8  00000000  00000000  00007dd7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__ctors_end>
       4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
       8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
       c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      10:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      14:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      18:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      1c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      20:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      24:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      28:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      2c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      30:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      34:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      38:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      3c:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__vector_15>
      40:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      44:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      48:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      4c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      50:	0c 94 b8 04 	jmp	0x970	; 0x970 <__vector_20>
      54:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      58:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      5c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      60:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      64:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      68:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      6c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      70:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      74:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      78:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      7c:	1e 01       	movw	r2, r28
      7e:	b5 00       	.word	0x00b5	; ????
      80:	b8 00       	.word	0x00b8	; ????
      82:	30 01       	movw	r6, r0
      84:	30 01       	movw	r6, r0
      86:	30 01       	movw	r6, r0
      88:	30 01       	movw	r6, r0
      8a:	30 01       	movw	r6, r0
      8c:	30 01       	movw	r6, r0
      8e:	30 01       	movw	r6, r0
      90:	30 01       	movw	r6, r0
      92:	30 01       	movw	r6, r0
      94:	30 01       	movw	r6, r0
      96:	14 01       	movw	r2, r8
      98:	bb 00       	.word	0x00bb	; ????
      9a:	c0 00       	.word	0x00c0	; ????
      9c:	01 01       	movw	r0, r2
      9e:	0c 01       	movw	r0, r24
      a0:	04 01       	movw	r0, r8
      a2:	2c 01       	movw	r4, r24
      a4:	13 08       	sbc	r1, r3
      a6:	04 08       	sbc	r0, r4
      a8:	86 08       	sbc	r8, r6
      aa:	7b 08       	sbc	r7, r11
      ac:	70 08       	sbc	r7, r0
      ae:	1f 08       	sbc	r1, r15
      b0:	5d 08       	sbc	r5, r13
      b2:	69 08       	sbc	r6, r9
      b4:	92 08       	sbc	r9, r2

000000b6 <__ctors_end>:
      b6:	11 24       	eor	r1, r1
      b8:	1f be       	out	0x3f, r1	; 63
      ba:	cf ef       	ldi	r28, 0xFF	; 255
      bc:	d0 e1       	ldi	r29, 0x10	; 16
      be:	de bf       	out	0x3e, r29	; 62
      c0:	cd bf       	out	0x3d, r28	; 61

000000c2 <__do_copy_data>:
      c2:	13 e0       	ldi	r17, 0x03	; 3
      c4:	a0 e0       	ldi	r26, 0x00	; 0
      c6:	b1 e0       	ldi	r27, 0x01	; 1
      c8:	e0 e0       	ldi	r30, 0x00	; 0
      ca:	fa e1       	ldi	r31, 0x1A	; 26
      cc:	02 c0       	rjmp	.+4      	; 0xd2 <__do_copy_data+0x10>
      ce:	05 90       	lpm	r0, Z+
      d0:	0d 92       	st	X+, r0
      d2:	aa 36       	cpi	r26, 0x6A	; 106
      d4:	b1 07       	cpc	r27, r17
      d6:	d9 f7       	brne	.-10     	; 0xce <__do_copy_data+0xc>

000000d8 <__do_clear_bss>:
      d8:	24 e0       	ldi	r18, 0x04	; 4
      da:	aa e6       	ldi	r26, 0x6A	; 106
      dc:	b3 e0       	ldi	r27, 0x03	; 3
      de:	01 c0       	rjmp	.+2      	; 0xe2 <.do_clear_bss_start>

000000e0 <.do_clear_bss_loop>:
      e0:	1d 92       	st	X+, r1

000000e2 <.do_clear_bss_start>:
      e2:	a7 39       	cpi	r26, 0x97	; 151
      e4:	b2 07       	cpc	r27, r18
      e6:	e1 f7       	brne	.-8      	; 0xe0 <.do_clear_bss_loop>
      e8:	0e 94 de 04 	call	0x9bc	; 0x9bc <main>
      ec:	0c 94 fe 0c 	jmp	0x19fc	; 0x19fc <_exit>

000000f0 <__bad_interrupt>:
      f0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f4 <prelucreazaDatele>:
extern volatile uint8_t ms2p1_enabled;

void prelucreazaDatele(void){
	//BTTransmitStr("Procesez ceva!");
	//cli();
	if(actiune >= GoFront && actiune <= GoRightB){
      f4:	80 91 75 03 	lds	r24, 0x0375
      f8:	9f ef       	ldi	r25, 0xFF	; 255
      fa:	98 0f       	add	r25, r24
      fc:	96 30       	cpi	r25, 0x06	; 6
      fe:	50 f5       	brcc	.+84     	; 0x154 <prelucreazaDatele+0x60>
		unsigned char timp = date[0];
     100:	90 91 76 03 	lds	r25, 0x0376
		unsigned char viteza = date[1];
     104:	60 91 77 03 	lds	r22, 0x0377
		switch(actiune){
     108:	83 30       	cpi	r24, 0x03	; 3
     10a:	a1 f0       	breq	.+40     	; 0x134 <prelucreazaDatele+0x40>
     10c:	28 f4       	brcc	.+10     	; 0x118 <prelucreazaDatele+0x24>
     10e:	81 30       	cpi	r24, 0x01	; 1
     110:	49 f0       	breq	.+18     	; 0x124 <prelucreazaDatele+0x30>
     112:	82 30       	cpi	r24, 0x02	; 2
     114:	59 f0       	breq	.+22     	; 0x12c <prelucreazaDatele+0x38>
     116:	08 95       	ret
     118:	85 30       	cpi	r24, 0x05	; 5
     11a:	81 f0       	breq	.+32     	; 0x13c <prelucreazaDatele+0x48>
     11c:	98 f0       	brcs	.+38     	; 0x144 <prelucreazaDatele+0x50>
     11e:	86 30       	cpi	r24, 0x06	; 6
     120:	a9 f0       	breq	.+42     	; 0x14c <prelucreazaDatele+0x58>
     122:	08 95       	ret
			case GoFront:
			goFront(timp, viteza);
     124:	89 2f       	mov	r24, r25
     126:	0e 94 6e 02 	call	0x4dc	; 0x4dc <goFront>
			break;
     12a:	08 95       	ret
			case GoBack:
			goBack(timp, viteza);
     12c:	89 2f       	mov	r24, r25
     12e:	0e 94 96 02 	call	0x52c	; 0x52c <goBack>
			break;
     132:	08 95       	ret
			case GoLeftF:
			goFrontLeft(timp, viteza);
     134:	89 2f       	mov	r24, r25
     136:	0e 94 be 02 	call	0x57c	; 0x57c <goFrontLeft>
			break;
     13a:	08 95       	ret
			case GoLeftB:
			goBackLeft(timp, viteza);
     13c:	89 2f       	mov	r24, r25
     13e:	0e 94 0b 03 	call	0x616	; 0x616 <goBackLeft>
			break;
     142:	08 95       	ret
			case GoRightF:
				goFrontRight(timp, viteza);
     144:	89 2f       	mov	r24, r25
     146:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <goFrontRight>
			break;
     14a:	08 95       	ret
			case GoRightB:
				goBackRight(timp, viteza);
     14c:	89 2f       	mov	r24, r25
     14e:	0e 94 30 03 	call	0x660	; 0x660 <goBackRight>
			break;
     152:	08 95       	ret
				break;
		}
		return;
	}
	
	switch(actiune){
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	fc 01       	movw	r30, r24
     158:	37 97       	sbiw	r30, 0x07	; 7
     15a:	e4 31       	cpi	r30, 0x14	; 20
     15c:	f1 05       	cpc	r31, r1
     15e:	08 f0       	brcs	.+2      	; 0x162 <prelucreazaDatele+0x6e>
     160:	7f c0       	rjmp	.+254    	; 0x260 <prelucreazaDatele+0x16c>
     162:	e2 5c       	subi	r30, 0xC2	; 194
     164:	ff 4f       	sbci	r31, 0xFF	; 255
     166:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <__tablejump2__>
		case GoM2P2:
			completeEnclosedContour();
     16a:	0e 94 29 02 	call	0x452	; 0x452 <completeEnclosedContour>
		break;
     16e:	08 95       	ret
		case GoM2P3:
			checkFreeParallelParkingPlace();
     170:	0e 94 24 02 	call	0x448	; 0x448 <checkFreeParallelParkingPlace>
		break;
     174:	08 95       	ret
		case Led:
			ledAction(date[0]);
     176:	80 91 76 03 	lds	r24, 0x0376
     17a:	0e 94 af 08 	call	0x115e	; 0x115e <ledAction>
		break;
     17e:	08 95       	ret
		case ReadSensorValue:
		{
			if(date[1] == 1){
     180:	80 91 77 03 	lds	r24, 0x0377
     184:	81 30       	cpi	r24, 0x01	; 1
     186:	89 f5       	brne	.+98     	; 0x1ea <prelucreazaDatele+0xf6>
				if(date[0] == 0){
     188:	80 91 76 03 	lds	r24, 0x0376
     18c:	81 11       	cpse	r24, r1
     18e:	15 c0       	rjmp	.+42     	; 0x1ba <prelucreazaDatele+0xc6>
					if((char)existsEntryInTimerQueue(&ReadSensor0))
     190:	8a ed       	ldi	r24, 0xDA	; 218
     192:	98 e0       	ldi	r25, 0x08	; 8
     194:	0e 94 89 06 	call	0xd12	; 0xd12 <existsEntryInTimerQueue>
     198:	88 23       	and	r24, r24
     19a:	29 f0       	breq	.+10     	; 0x1a6 <prelucreazaDatele+0xb2>
						removeEntryFromTimerQueue(&ReadSensor0);
     19c:	8a ed       	ldi	r24, 0xDA	; 218
     19e:	98 e0       	ldi	r25, 0x08	; 8
     1a0:	0e 94 0e 06 	call	0xc1c	; 0xc1c <removeEntryFromTimerQueue>
     1a4:	08 95       	ret
					else
						addEntryToTimerQueue(&ReadSensor0, 1000UL * 1000UL, Periodic);
     1a6:	21 e0       	ldi	r18, 0x01	; 1
     1a8:	40 e4       	ldi	r20, 0x40	; 64
     1aa:	52 e4       	ldi	r21, 0x42	; 66
     1ac:	6f e0       	ldi	r22, 0x0F	; 15
     1ae:	70 e0       	ldi	r23, 0x00	; 0
     1b0:	8a ed       	ldi	r24, 0xDA	; 218
     1b2:	98 e0       	ldi	r25, 0x08	; 8
     1b4:	0e 94 0d 05 	call	0xa1a	; 0xa1a <addEntryToTimerQueue>
     1b8:	08 95       	ret
					
				}
				else if(date[0] == 1){
     1ba:	81 30       	cpi	r24, 0x01	; 1
     1bc:	09 f0       	breq	.+2      	; 0x1c0 <prelucreazaDatele+0xcc>
     1be:	50 c0       	rjmp	.+160    	; 0x260 <prelucreazaDatele+0x16c>
					if((char)existsEntryInTimerQueue(&ReadSensor1))
     1c0:	87 ec       	ldi	r24, 0xC7	; 199
     1c2:	99 e0       	ldi	r25, 0x09	; 9
     1c4:	0e 94 89 06 	call	0xd12	; 0xd12 <existsEntryInTimerQueue>
     1c8:	88 23       	and	r24, r24
     1ca:	29 f0       	breq	.+10     	; 0x1d6 <prelucreazaDatele+0xe2>
						removeEntryFromTimerQueue(&ReadSensor1);
     1cc:	87 ec       	ldi	r24, 0xC7	; 199
     1ce:	99 e0       	ldi	r25, 0x09	; 9
     1d0:	0e 94 0e 06 	call	0xc1c	; 0xc1c <removeEntryFromTimerQueue>
     1d4:	08 95       	ret
					else
						addEntryToTimerQueue(&ReadSensor1, 1000UL * 1000UL, Periodic);
     1d6:	21 e0       	ldi	r18, 0x01	; 1
     1d8:	40 e4       	ldi	r20, 0x40	; 64
     1da:	52 e4       	ldi	r21, 0x42	; 66
     1dc:	6f e0       	ldi	r22, 0x0F	; 15
     1de:	70 e0       	ldi	r23, 0x00	; 0
     1e0:	87 ec       	ldi	r24, 0xC7	; 199
     1e2:	99 e0       	ldi	r25, 0x09	; 9
     1e4:	0e 94 0d 05 	call	0xa1a	; 0xa1a <addEntryToTimerQueue>
     1e8:	08 95       	ret
				}
			}
			else
				if(date[0] == 0)
     1ea:	80 91 76 03 	lds	r24, 0x0376
     1ee:	81 11       	cpse	r24, r1
     1f0:	03 c0       	rjmp	.+6      	; 0x1f8 <prelucreazaDatele+0x104>
					ReadSensor0();
     1f2:	0e 94 da 08 	call	0x11b4	; 0x11b4 <ReadSensor0>
     1f6:	08 95       	ret
				else if(date[0] == 1)
     1f8:	81 30       	cpi	r24, 0x01	; 1
     1fa:	91 f5       	brne	.+100    	; 0x260 <prelucreazaDatele+0x16c>
					ReadSensor1();
     1fc:	0e 94 c7 09 	call	0x138e	; 0x138e <ReadSensor1>
     200:	08 95       	ret
			
		}
		break;
		case StopEngines:
			stopEngines();
     202:	0e 94 17 02 	call	0x42e	; 0x42e <stopEngines>
		break;
     206:	08 95       	ret
		case RotirePeLocDreapta:
			rotirePeLoc(date[0], date[1], RightEngines);
     208:	40 e0       	ldi	r20, 0x00	; 0
     20a:	60 91 77 03 	lds	r22, 0x0377
     20e:	80 91 76 03 	lds	r24, 0x0376
     212:	0e 94 58 03 	call	0x6b0	; 0x6b0 <rotirePeLoc>
		break;		
     216:	08 95       	ret
		case RotirePeLocStanga:
			rotirePeLoc(date[0], date[1], LeftEngines);
     218:	41 e0       	ldi	r20, 0x01	; 1
     21a:	60 91 77 03 	lds	r22, 0x0377
     21e:	80 91 76 03 	lds	r24, 0x0376
     222:	0e 94 58 03 	call	0x6b0	; 0x6b0 <rotirePeLoc>
		break;
     226:	08 95       	ret
		case DisplayMessage:
			addEntryToTimerQueue(&fctSmechera, 10UL * 1000UL, Periodic);
     228:	21 e0       	ldi	r18, 0x01	; 1
     22a:	40 e1       	ldi	r20, 0x10	; 16
     22c:	57 e2       	ldi	r21, 0x27	; 39
     22e:	60 e0       	ldi	r22, 0x00	; 0
     230:	70 e0       	ldi	r23, 0x00	; 0
     232:	8c e0       	ldi	r24, 0x0C	; 12
     234:	99 e0       	ldi	r25, 0x09	; 9
     236:	0e 94 0d 05 	call	0xa1a	; 0xa1a <addEntryToTimerQueue>
		break;
     23a:	08 95       	ret
		case GoM2P1:
			addEntryToTimerQueue(&functieRotireStanga, 1000UL * 500UL, Periodic);
     23c:	21 e0       	ldi	r18, 0x01	; 1
     23e:	40 e2       	ldi	r20, 0x20	; 32
     240:	51 ea       	ldi	r21, 0xA1	; 161
     242:	67 e0       	ldi	r22, 0x07	; 7
     244:	70 e0       	ldi	r23, 0x00	; 0
     246:	82 ec       	ldi	r24, 0xC2	; 194
     248:	97 e0       	ldi	r25, 0x07	; 7
     24a:	0e 94 0d 05 	call	0xa1a	; 0xa1a <addEntryToTimerQueue>
			iesire=date[0];
     24e:	80 91 76 03 	lds	r24, 0x0376
     252:	80 93 6e 03 	sts	0x036E, r24
		break;
     256:	08 95       	ret
		case ResetThings:
			stopEngines();
     258:	0e 94 17 02 	call	0x42e	; 0x42e <stopEngines>
			resetTimerQueue();
     25c:	0e 94 b6 07 	call	0xf6c	; 0xf6c <resetTimerQueue>
     260:	08 95       	ret

00000262 <BTTransmitStr>:
}

void BTTransmitStr(char *theString){
	uint8_t len, i;
	
	len = strlen(theString);
     262:	fc 01       	movw	r30, r24
     264:	01 90       	ld	r0, Z+
     266:	00 20       	and	r0, r0
     268:	e9 f7       	brne	.-6      	; 0x264 <BTTransmitStr+0x2>
     26a:	31 97       	sbiw	r30, 0x01	; 1
     26c:	e8 1b       	sub	r30, r24
     26e:	f9 0b       	sbc	r31, r25
     270:	2e 2f       	mov	r18, r30
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     272:	3a ea       	ldi	r19, 0xAA	; 170
     274:	30 93 c6 00 	sts	0x00C6, r19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     278:	af e1       	ldi	r26, 0x1F	; 31
     27a:	be e4       	ldi	r27, 0x4E	; 78
     27c:	11 97       	sbiw	r26, 0x01	; 1
     27e:	f1 f7       	brne	.-4      	; 0x27c <BTTransmitStr+0x1a>
     280:	00 c0       	rjmp	.+0      	; 0x282 <BTTransmitStr+0x20>
     282:	00 00       	nop
     284:	34 e1       	ldi	r19, 0x14	; 20
     286:	30 93 c6 00 	sts	0x00C6, r19
     28a:	af e1       	ldi	r26, 0x1F	; 31
     28c:	be e4       	ldi	r27, 0x4E	; 78
     28e:	11 97       	sbiw	r26, 0x01	; 1
     290:	f1 f7       	brne	.-4      	; 0x28e <BTTransmitStr+0x2c>
     292:	00 c0       	rjmp	.+0      	; 0x294 <BTTransmitStr+0x32>
     294:	00 00       	nop
     296:	e0 93 c6 00 	sts	0x00C6, r30
     29a:	ef e1       	ldi	r30, 0x1F	; 31
     29c:	fe e4       	ldi	r31, 0x4E	; 78
     29e:	31 97       	sbiw	r30, 0x01	; 1
     2a0:	f1 f7       	brne	.-4      	; 0x29e <BTTransmitStr+0x3c>
     2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <BTTransmitStr+0x42>
     2a4:	00 00       	nop
	
	BTTransmitChar(0xAA);
	BTTransmitChar(DisplayMessage);
	BTTransmitChar(len);
	
	for(i=0;i<len;i++)
     2a6:	22 23       	and	r18, r18
     2a8:	89 f0       	breq	.+34     	; 0x2cc <BTTransmitStr+0x6a>
     2aa:	38 2f       	mov	r19, r24
     2ac:	e8 2f       	mov	r30, r24
     2ae:	f9 2f       	mov	r31, r25
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     2b0:	a6 ec       	ldi	r26, 0xC6	; 198
     2b2:	b0 e0       	ldi	r27, 0x00	; 0
	BTTransmitChar(DisplayMessage);
	BTTransmitChar(len);
	
	for(i=0;i<len;i++)
	{
		BTTransmitChar(theString[i]);
     2b4:	81 91       	ld	r24, Z+
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     2b6:	8c 93       	st	X, r24
     2b8:	8f e1       	ldi	r24, 0x1F	; 31
     2ba:	9e e4       	ldi	r25, 0x4E	; 78
     2bc:	01 97       	sbiw	r24, 0x01	; 1
     2be:	f1 f7       	brne	.-4      	; 0x2bc <BTTransmitStr+0x5a>
     2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <BTTransmitStr+0x60>
     2c2:	00 00       	nop
     2c4:	8e 2f       	mov	r24, r30
     2c6:	83 1b       	sub	r24, r19
	
	BTTransmitChar(0xAA);
	BTTransmitChar(DisplayMessage);
	BTTransmitChar(len);
	
	for(i=0;i<len;i++)
     2c8:	82 17       	cp	r24, r18
     2ca:	a0 f3       	brcs	.-24     	; 0x2b4 <BTTransmitStr+0x52>
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     2cc:	85 e5       	ldi	r24, 0x55	; 85
     2ce:	80 93 c6 00 	sts	0x00C6, r24
     2d2:	af e1       	ldi	r26, 0x1F	; 31
     2d4:	be e4       	ldi	r27, 0x4E	; 78
     2d6:	11 97       	sbiw	r26, 0x01	; 1
     2d8:	f1 f7       	brne	.-4      	; 0x2d6 <BTTransmitStr+0x74>
     2da:	00 c0       	rjmp	.+0      	; 0x2dc <BTTransmitStr+0x7a>
     2dc:	00 00       	nop
     2de:	08 95       	ret

000002e0 <BTTransmitMsg>:
	}
	BTTransmitChar(0x55);
	
}

void BTTransmitMsg(char *theString, uint8_t len){
     2e0:	cf 93       	push	r28
     2e2:	df 93       	push	r29
	uint16_t i;
	for(i=0;i<len;i++)
     2e4:	70 e0       	ldi	r23, 0x00	; 0
     2e6:	61 15       	cp	r22, r1
     2e8:	71 05       	cpc	r23, r1
     2ea:	91 f0       	breq	.+36     	; 0x310 <BTTransmitMsg+0x30>
     2ec:	e8 2f       	mov	r30, r24
     2ee:	f9 2f       	mov	r31, r25
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	90 e0       	ldi	r25, 0x00	; 0
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     2f4:	a6 ec       	ldi	r26, 0xC6	; 198
     2f6:	b0 e0       	ldi	r27, 0x00	; 0

void BTTransmitMsg(char *theString, uint8_t len){
	uint16_t i;
	for(i=0;i<len;i++)
	{
		BTTransmitChar(theString[i]);
     2f8:	21 91       	ld	r18, Z+
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     2fa:	2c 93       	st	X, r18
     2fc:	cf e1       	ldi	r28, 0x1F	; 31
     2fe:	de e4       	ldi	r29, 0x4E	; 78
     300:	21 97       	sbiw	r28, 0x01	; 1
     302:	f1 f7       	brne	.-4      	; 0x300 <BTTransmitMsg+0x20>
     304:	00 c0       	rjmp	.+0      	; 0x306 <BTTransmitMsg+0x26>
     306:	00 00       	nop
	
}

void BTTransmitMsg(char *theString, uint8_t len){
	uint16_t i;
	for(i=0;i<len;i++)
     308:	01 96       	adiw	r24, 0x01	; 1
     30a:	86 17       	cp	r24, r22
     30c:	97 07       	cpc	r25, r23
     30e:	a0 f3       	brcs	.-24     	; 0x2f8 <BTTransmitMsg+0x18>
	{
		BTTransmitChar(theString[i]);
	}
}
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	08 95       	ret

00000316 <reTransmit>:
#include "../utile.h"
#include "../Timing/Timing.h"

void prelucreazaDatele(void);

void reTransmit(void){
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	00 d0       	rcall	.+0      	; 0x31c <reTransmit+0x6>
     31c:	00 d0       	rcall	.+0      	; 0x31e <reTransmit+0x8>
     31e:	cd b7       	in	r28, 0x3d	; 61
     320:	de b7       	in	r29, 0x3e	; 62
	//trimite un semnal telefonului pentru a retransmite ultimul mesaj
	printf("Trimite din nou ultimul mesaj!!!");
     322:	83 e0       	ldi	r24, 0x03	; 3
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	9f 93       	push	r25
     328:	8f 93       	push	r24
     32a:	0e 94 19 0a 	call	0x1432	; 0x1432 <printf>
	char msg[] = { StartByte, ReTransmitLastMsg, 0, 0x55 };
     32e:	8a ea       	ldi	r24, 0xAA	; 170
     330:	89 83       	std	Y+1, r24	; 0x01
     332:	83 e1       	ldi	r24, 0x13	; 19
     334:	8a 83       	std	Y+2, r24	; 0x02
     336:	1b 82       	std	Y+3, r1	; 0x03
     338:	85 e5       	ldi	r24, 0x55	; 85
     33a:	8c 83       	std	Y+4, r24	; 0x04
	BTTransmitMsg(msg, 4);
     33c:	64 e0       	ldi	r22, 0x04	; 4
     33e:	ce 01       	movw	r24, r28
     340:	01 96       	adiw	r24, 0x01	; 1
     342:	0e 94 70 01 	call	0x2e0	; 0x2e0 <BTTransmitMsg>
}
     346:	0f 90       	pop	r0
     348:	0f 90       	pop	r0
     34a:	0f 90       	pop	r0
     34c:	0f 90       	pop	r0
     34e:	0f 90       	pop	r0
     350:	0f 90       	pop	r0
     352:	df 91       	pop	r29
     354:	cf 91       	pop	r28
     356:	08 95       	ret

00000358 <BTProtocolReadByte>:
}

extern volatile uint8_t debugging;
extern volatile uint8_t iesire;
void BTProtocolReadByte(unsigned char theByte){
	cli();
     358:	f8 94       	cli
	switch (state){
     35a:	90 91 02 01 	lds	r25, 0x0102
     35e:	92 30       	cpi	r25, 0x02	; 2
     360:	21 f1       	breq	.+72     	; 0x3aa <BTProtocolReadByte+0x52>
     362:	28 f4       	brcc	.+10     	; 0x36e <BTProtocolReadByte+0x16>
     364:	99 23       	and	r25, r25
     366:	49 f0       	breq	.+18     	; 0x37a <BTProtocolReadByte+0x22>
     368:	91 30       	cpi	r25, 0x01	; 1
     36a:	91 f0       	breq	.+36     	; 0x390 <BTProtocolReadByte+0x38>
     36c:	4d c0       	rjmp	.+154    	; 0x408 <BTProtocolReadByte+0xb0>
     36e:	93 30       	cpi	r25, 0x03	; 3
     370:	81 f1       	breq	.+96     	; 0x3d2 <BTProtocolReadByte+0x7a>
     372:	94 30       	cpi	r25, 0x04	; 4
     374:	09 f4       	brne	.+2      	; 0x378 <BTProtocolReadByte+0x20>
     376:	3f c0       	rjmp	.+126    	; 0x3f6 <BTProtocolReadByte+0x9e>
     378:	47 c0       	rjmp	.+142    	; 0x408 <BTProtocolReadByte+0xb0>
		case WaitingStartByte:
			if(theByte == StartByte){
     37a:	8a 3a       	cpi	r24, 0xAA	; 170
     37c:	09 f0       	breq	.+2      	; 0x380 <BTProtocolReadByte+0x28>
     37e:	44 c0       	rjmp	.+136    	; 0x408 <BTProtocolReadByte+0xb0>
				state = WaitingCarAction;
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	80 93 02 01 	sts	0x0102, r24
				debugging = 0;
     386:	10 92 00 01 	sts	0x0100, r1
				//addEntryToTimerQueue(&resetBTProtocol, 1000UL * 1000UL * 1000UL, Once);
				debugging = 1;
     38a:	80 93 00 01 	sts	0x0100, r24
     38e:	3c c0       	rjmp	.+120    	; 0x408 <BTProtocolReadByte+0xb0>
			}
			break;

		case WaitingCarAction:
			if(theByte >= NoAction && theByte < EndAction){
     390:	8b 31       	cpi	r24, 0x1B	; 27
     392:	30 f4       	brcc	.+12     	; 0x3a0 <BTProtocolReadByte+0x48>
				state = WaitingDataLength;
     394:	92 e0       	ldi	r25, 0x02	; 2
     396:	90 93 02 01 	sts	0x0102, r25
				actiune = theByte;
     39a:	80 93 75 03 	sts	0x0375, r24
     39e:	34 c0       	rjmp	.+104    	; 0x408 <BTProtocolReadByte+0xb0>
			}
			else{
				state = WaitingStartByte;
     3a0:	10 92 02 01 	sts	0x0102, r1
				reTransmit(); // error ocurred, send retransmit signal
     3a4:	0e 94 8b 01 	call	0x316	; 0x316 <reTransmit>
     3a8:	2f c0       	rjmp	.+94     	; 0x408 <BTProtocolReadByte+0xb0>
			}
			break;

		case WaitingDataLength:
			if(theByte==0){
     3aa:	81 11       	cpse	r24, r1
     3ac:	05 c0       	rjmp	.+10     	; 0x3b8 <BTProtocolReadByte+0x60>
				state = WaitingEndByte;
			}
			state = ReadingData;
			len = theByte;
     3ae:	10 92 80 03 	sts	0x0380, r1
			dateCrtIndex = 0;
     3b2:	10 92 74 03 	sts	0x0374, r1
     3b6:	0a c0       	rjmp	.+20     	; 0x3cc <BTProtocolReadByte+0x74>

		case WaitingDataLength:
			if(theByte==0){
				state = WaitingEndByte;
			}
			state = ReadingData;
     3b8:	93 e0       	ldi	r25, 0x03	; 3
     3ba:	90 93 02 01 	sts	0x0102, r25
			len = theByte;
     3be:	80 93 80 03 	sts	0x0380, r24
			dateCrtIndex = 0;
     3c2:	10 92 74 03 	sts	0x0374, r1
			if(len<=0 || len>50)
     3c6:	81 50       	subi	r24, 0x01	; 1
     3c8:	82 33       	cpi	r24, 0x32	; 50
     3ca:	f0 f0       	brcs	.+60     	; 0x408 <BTProtocolReadByte+0xb0>
			state=WaitingStartByte;
     3cc:	10 92 02 01 	sts	0x0102, r1
     3d0:	1b c0       	rjmp	.+54     	; 0x408 <BTProtocolReadByte+0xb0>
			break;

		case ReadingData:
			date[dateCrtIndex++] = theByte;
     3d2:	e0 91 74 03 	lds	r30, 0x0374
     3d6:	91 e0       	ldi	r25, 0x01	; 1
     3d8:	9e 0f       	add	r25, r30
     3da:	90 93 74 03 	sts	0x0374, r25
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	ea 58       	subi	r30, 0x8A	; 138
     3e2:	fc 4f       	sbci	r31, 0xFC	; 252
     3e4:	80 83       	st	Z, r24
			if(dateCrtIndex >= len)
     3e6:	80 91 80 03 	lds	r24, 0x0380
     3ea:	98 17       	cp	r25, r24
     3ec:	68 f0       	brcs	.+26     	; 0x408 <BTProtocolReadByte+0xb0>
			state = WaitingEndByte;
     3ee:	84 e0       	ldi	r24, 0x04	; 4
     3f0:	80 93 02 01 	sts	0x0102, r24
     3f4:	09 c0       	rjmp	.+18     	; 0x408 <BTProtocolReadByte+0xb0>
			break;
		case WaitingEndByte:
			if(theByte != 0x55){
     3f6:	85 35       	cpi	r24, 0x55	; 85
     3f8:	19 f0       	breq	.+6      	; 0x400 <BTProtocolReadByte+0xa8>
				reTransmit(); // error ocurred, send retransmit signal
     3fa:	0e 94 8b 01 	call	0x316	; 0x316 <reTransmit>
     3fe:	02 c0       	rjmp	.+4      	; 0x404 <BTProtocolReadByte+0xac>
			}
			else{
				prelucreazaDatele();
     400:	0e 94 7a 00 	call	0xf4	; 0xf4 <prelucreazaDatele>
			}
			state = WaitingStartByte;
     404:	10 92 02 01 	sts	0x0102, r1
			break;

	}
	sei();
     408:	78 94       	sei
     40a:	08 95       	ret

0000040c <BTInit>:
}

void BTInit()
{
	/*Pentru Receive*/
	UBRR0L = 51; //baud rate 9600 bps
     40c:	83 e3       	ldi	r24, 0x33	; 51
     40e:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B |= _BV(RXCIE0);
     412:	e1 ec       	ldi	r30, 0xC1	; 193
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	80 81       	ld	r24, Z
     418:	80 68       	ori	r24, 0x80	; 128
     41a:	80 83       	st	Z, r24
	UCSR0B |= _BV(RXEN0);
     41c:	80 81       	ld	r24, Z
     41e:	80 61       	ori	r24, 0x10	; 16
     420:	80 83       	st	Z, r24
	UCSR0B |= _BV(TXEN0);
     422:	80 81       	ld	r24, Z
     424:	88 60       	ori	r24, 0x08	; 8
     426:	80 83       	st	Z, r24
	//UCSR0B |= (_BV(TXEN0))|(_BV(RXCIE0))|(_BV(RXCIE0));//activare receive,transmit si receive interrupt
	//UCSR0C |=(1<<UPM01)|(1<<UPM00);
	
	state=WaitingStartByte;
     428:	10 92 02 01 	sts	0x0102, r1
     42c:	08 95       	ret

0000042e <stopEngines>:
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
}

extern volatile uint32_t time;
void stopEngines(){
    BTTransmitStr("M-am oprit!");
     42e:	84 e2       	ldi	r24, 0x24	; 36
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	0e 94 31 01 	call	0x262	; 0x262 <BTTransmitStr>
	
	PORTC &=~ 1<<PINC1;
     436:	88 b1       	in	r24, 0x08	; 8
     438:	8c 7f       	andi	r24, 0xFC	; 252
     43a:	88 b9       	out	0x08, r24	; 8
	PORTC &=~ 1<<PINC0;	
     43c:	40 98       	cbi	0x08, 0	; 8
	
	OCR0A = 255;
     43e:	8f ef       	ldi	r24, 0xFF	; 255
     440:	87 bd       	out	0x27, r24	; 39
	OCR2A = 255;
     442:	80 93 b3 00 	sts	0x00B3, r24
     446:	08 95       	ret

00000448 <checkFreeParallelParkingPlace>:
	//setEnginesSpeed(RightEngines, 1, 0);
	//setEnginesSpeed(LeftEngines, 1, 0);
}
void checkFreeParallelParkingPlace(){
	
    BTTransmitStr("Start Free P P P!");
     448:	80 e3       	ldi	r24, 0x30	; 48
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	0e 94 31 01 	call	0x262	; 0x262 <BTTransmitStr>
     450:	08 95       	ret

00000452 <completeEnclosedContour>:
}
void completeEnclosedContour(){
	
	
    BTTransmitStr("Start complete enclosed contour!");
     452:	82 e4       	ldi	r24, 0x42	; 66
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	0e 94 31 01 	call	0x262	; 0x262 <BTTransmitStr>
     45a:	08 95       	ret

0000045c <initEngines>:


void initEngines()
{
	
	OCR0A = 255;
     45c:	8f ef       	ldi	r24, 0xFF	; 255
     45e:	87 bd       	out	0x27, r24	; 39
	OCR2A = 255;
     460:	80 93 b3 00 	sts	0x00B3, r24
	
	PINB|=(1<<PB3);
     464:	1b 9a       	sbi	0x03, 3	; 3
	TCCR0A |=3;
     466:	84 b5       	in	r24, 0x24	; 36
     468:	83 60       	ori	r24, 0x03	; 3
     46a:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0A0);
     46c:	84 b5       	in	r24, 0x24	; 36
     46e:	80 64       	ori	r24, 0x40	; 64
     470:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0A1);
     472:	84 b5       	in	r24, 0x24	; 36
     474:	80 68       	ori	r24, 0x80	; 128
     476:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS00);
     478:	85 b5       	in	r24, 0x25	; 37
     47a:	81 60       	ori	r24, 0x01	; 1
     47c:	85 bd       	out	0x25, r24	; 37
	DDRB |=1<<PINB3;
     47e:	23 9a       	sbi	0x04, 3	; 4
	// motor 2
	DDRD |= (1 << PD7);
     480:	57 9a       	sbi	0x0a, 7	; 10
	TCCR2A|=3;
     482:	e0 eb       	ldi	r30, 0xB0	; 176
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	80 81       	ld	r24, Z
     488:	83 60       	ori	r24, 0x03	; 3
     48a:	80 83       	st	Z, r24
	TCCR2A |= (1 << COM2A0);
     48c:	80 81       	ld	r24, Z
     48e:	80 64       	ori	r24, 0x40	; 64
     490:	80 83       	st	Z, r24
	TCCR2A |= (1 << COM2A1);
     492:	80 81       	ld	r24, Z
     494:	80 68       	ori	r24, 0x80	; 128
     496:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS20);
     498:	e1 eb       	ldi	r30, 0xB1	; 177
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	80 81       	ld	r24, Z
     49e:	81 60       	ori	r24, 0x01	; 1
     4a0:	80 83       	st	Z, r24
	//sens
	DDRC |= 1<<PINC0;
     4a2:	38 9a       	sbi	0x07, 0	; 7
	DDRC |= 1<<PINC1;
     4a4:	39 9a       	sbi	0x07, 1	; 7
	
	
	PORTC &=~ 1<<PINC1;
     4a6:	88 b1       	in	r24, 0x08	; 8
     4a8:	8c 7f       	andi	r24, 0xFC	; 252
     4aa:	88 b9       	out	0x08, r24	; 8
	PORTC &=~ 1<<PINC0;	
     4ac:	40 98       	cbi	0x08, 0	; 8
     4ae:	08 95       	ret

000004b0 <setEnginesSpeed>:
}


void setEnginesSpeed(Engines engine, Sens sens, uint8_t viteza)
{
	if(sens == SensFata)
     4b0:	61 11       	cpse	r22, r1
     4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <setEnginesSpeed+0x6>
		viteza = 255 - viteza;
     4b4:	40 95       	com	r20
		
	if(engine==RightEngines){
     4b6:	81 11       	cpse	r24, r1
     4b8:	08 c0       	rjmp	.+16     	; 0x4ca <setEnginesSpeed+0x1a>
		OCR2A = viteza;
     4ba:	40 93 b3 00 	sts	0x00B3, r20
		if(sens == SensFata){	
     4be:	61 11       	cpse	r22, r1
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <setEnginesSpeed+0x16>
			PORTC &=~ 1<<PINC0;
     4c2:	40 98       	cbi	0x08, 0	; 8
     4c4:	08 95       	ret
		}			
		else{
			PORTC |= 1<<PINC0;	
     4c6:	40 9a       	sbi	0x08, 0	; 8
     4c8:	08 95       	ret
		}			
	}
	else
	{
		OCR0A = viteza;
     4ca:	47 bd       	out	0x27, r20	; 39
		if(sens == SensFata){	
     4cc:	61 11       	cpse	r22, r1
     4ce:	04 c0       	rjmp	.+8      	; 0x4d8 <setEnginesSpeed+0x28>
			PORTC &=~ 1<<PINC1;
     4d0:	88 b1       	in	r24, 0x08	; 8
     4d2:	8c 7f       	andi	r24, 0xFC	; 252
     4d4:	88 b9       	out	0x08, r24	; 8
     4d6:	08 95       	ret
		}			
		else{			
			PORTC |= 1<<PINC1;			
     4d8:	41 9a       	sbi	0x08, 1	; 8
     4da:	08 95       	ret

000004dc <goFront>:
#include "../BTProtocol/BTProtocol.h"
#include "../Timing/Timing.h"

void setEnginesSpeed(Engines, Sens, uint8_t);

void goFront(uint8_t timp, uint8_t viteza){	
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	d8 2f       	mov	r29, r24
     4e2:	c6 2f       	mov	r28, r22
	setEnginesSpeed(RightEngines, SensFata, viteza);
     4e4:	46 2f       	mov	r20, r22
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	0e 94 58 02 	call	0x4b0	; 0x4b0 <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensFata, viteza);
     4ee:	4c 2f       	mov	r20, r28
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	0e 94 58 02 	call	0x4b0	; 0x4b0 <setEnginesSpeed>
	removeEntryFromTimerQueue(&stopEngines);
     4f8:	87 e1       	ldi	r24, 0x17	; 23
     4fa:	92 e0       	ldi	r25, 0x02	; 2
     4fc:	0e 94 0e 06 	call	0xc1c	; 0xc1c <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);	
     500:	ad 2f       	mov	r26, r29
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	20 e4       	ldi	r18, 0x40	; 64
     506:	32 e4       	ldi	r19, 0x42	; 66
     508:	4f e0       	ldi	r20, 0x0F	; 15
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	0e 94 0e 0a 	call	0x141c	; 0x141c <__muluhisi3>
     510:	ab 01       	movw	r20, r22
     512:	bc 01       	movw	r22, r24
     514:	20 e0       	ldi	r18, 0x00	; 0
     516:	87 e1       	ldi	r24, 0x17	; 23
     518:	92 e0       	ldi	r25, 0x02	; 2
     51a:	0e 94 0d 05 	call	0xa1a	; 0xa1a <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inainte!");
     51e:	83 e6       	ldi	r24, 0x63	; 99
     520:	91 e0       	ldi	r25, 0x01	; 1
     522:	0e 94 31 01 	call	0x262	; 0x262 <BTTransmitStr>
}
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	08 95       	ret

0000052c <goBack>:
void goBack(uint8_t timp, uint8_t viteza){
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	d8 2f       	mov	r29, r24
     532:	c6 2f       	mov	r28, r22
	setEnginesSpeed(RightEngines, SensSpate, viteza);
     534:	46 2f       	mov	r20, r22
     536:	61 e0       	ldi	r22, 0x01	; 1
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensSpate, viteza);
     53e:	4c 2f       	mov	r20, r28
     540:	61 e0       	ldi	r22, 0x01	; 1
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	0e 94 58 02 	call	0x4b0	; 0x4b0 <setEnginesSpeed>
	removeEntryFromTimerQueue(&stopEngines);
     548:	87 e1       	ldi	r24, 0x17	; 23
     54a:	92 e0       	ldi	r25, 0x02	; 2
     54c:	0e 94 0e 06 	call	0xc1c	; 0xc1c <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     550:	ad 2f       	mov	r26, r29
     552:	b0 e0       	ldi	r27, 0x00	; 0
     554:	20 e4       	ldi	r18, 0x40	; 64
     556:	32 e4       	ldi	r19, 0x42	; 66
     558:	4f e0       	ldi	r20, 0x0F	; 15
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	0e 94 0e 0a 	call	0x141c	; 0x141c <__muluhisi3>
     560:	ab 01       	movw	r20, r22
     562:	bc 01       	movw	r22, r24
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	87 e1       	ldi	r24, 0x17	; 23
     568:	92 e0       	ldi	r25, 0x02	; 2
     56a:	0e 94 0d 05 	call	0xa1a	; 0xa1a <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inapoi!");
     56e:	83 e7       	ldi	r24, 0x73	; 115
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	0e 94 31 01 	call	0x262	; 0x262 <BTTransmitStr>
}
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	08 95       	ret

0000057c <goFrontLeft>:

void goFrontLeft(uint8_t timp, uint8_t viteza){
     57c:	cf 93       	push	r28
     57e:	c8 2f       	mov	r28, r24
     580:	46 2f       	mov	r20, r22
	
	setEnginesSpeed(RightEngines, SensFata, viteza);
     582:	60 e0       	ldi	r22, 0x00	; 0
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	0e 94 58 02 	call	0x4b0	; 0x4b0 <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensFata, 10);
     58a:	4a e0       	ldi	r20, 0x0A	; 10
     58c:	60 e0       	ldi	r22, 0x00	; 0
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	0e 94 58 02 	call	0x4b0	; 0x4b0 <setEnginesSpeed>
	removeEntryFromTimerQueue(&stopEngines);
     594:	87 e1       	ldi	r24, 0x17	; 23
     596:	92 e0       	ldi	r25, 0x02	; 2
     598:	0e 94 0e 06 	call	0xc1c	; 0xc1c <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     59c:	ac 2f       	mov	r26, r28
     59e:	b0 e0       	ldi	r27, 0x00	; 0
     5a0:	20 e4       	ldi	r18, 0x40	; 64
     5a2:	32 e4       	ldi	r19, 0x42	; 66
     5a4:	4f e0       	ldi	r20, 0x0F	; 15
     5a6:	50 e0       	ldi	r21, 0x00	; 0
     5a8:	0e 94 0e 0a 	call	0x141c	; 0x141c <__muluhisi3>
     5ac:	ab 01       	movw	r20, r22
     5ae:	bc 01       	movw	r22, r24
     5b0:	20 e0       	ldi	r18, 0x00	; 0
     5b2:	87 e1       	ldi	r24, 0x17	; 23
     5b4:	92 e0       	ldi	r25, 0x02	; 2
     5b6:	0e 94 0d 05 	call	0xa1a	; 0xa1a <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inainte stanga!");
     5ba:	82 e8       	ldi	r24, 0x82	; 130
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	0e 94 31 01 	call	0x262	; 0x262 <BTTransmitStr>
}
     5c2:	cf 91       	pop	r28
     5c4:	08 95       	ret

000005c6 <goFrontRight>:
void goFrontRight(uint8_t timp, uint8_t viteza){
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	c8 2f       	mov	r28, r24
     5cc:	d6 2f       	mov	r29, r22
	
	setEnginesSpeed(RightEngines, SensFata, 10);
     5ce:	4a e0       	ldi	r20, 0x0A	; 10
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	0e 94 58 02 	call	0x4b0	; 0x4b0 <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensFata, viteza);
     5d8:	4d 2f       	mov	r20, r29
     5da:	60 e0       	ldi	r22, 0x00	; 0
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	0e 94 58 02 	call	0x4b0	; 0x4b0 <setEnginesSpeed>
	removeEntryFromTimerQueue(&stopEngines);
     5e2:	87 e1       	ldi	r24, 0x17	; 23
     5e4:	92 e0       	ldi	r25, 0x02	; 2
     5e6:	0e 94 0e 06 	call	0xc1c	; 0xc1c <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     5ea:	ac 2f       	mov	r26, r28
     5ec:	b0 e0       	ldi	r27, 0x00	; 0
     5ee:	20 e4       	ldi	r18, 0x40	; 64
     5f0:	32 e4       	ldi	r19, 0x42	; 66
     5f2:	4f e0       	ldi	r20, 0x0F	; 15
     5f4:	50 e0       	ldi	r21, 0x00	; 0
     5f6:	0e 94 0e 0a 	call	0x141c	; 0x141c <__muluhisi3>
     5fa:	ab 01       	movw	r20, r22
     5fc:	bc 01       	movw	r22, r24
     5fe:	20 e0       	ldi	r18, 0x00	; 0
     600:	87 e1       	ldi	r24, 0x17	; 23
     602:	92 e0       	ldi	r25, 0x02	; 2
     604:	0e 94 0d 05 	call	0xa1a	; 0xa1a <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inainte dreapta!");
     608:	89 e9       	ldi	r24, 0x99	; 153
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	0e 94 31 01 	call	0x262	; 0x262 <BTTransmitStr>
}
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	08 95       	ret

00000616 <goBackLeft>:

void goBackLeft(uint8_t timp, uint8_t viteza){
     616:	cf 93       	push	r28
     618:	c8 2f       	mov	r28, r24
     61a:	46 2f       	mov	r20, r22
	
	setEnginesSpeed(RightEngines, SensSpate, viteza);
     61c:	61 e0       	ldi	r22, 0x01	; 1
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	0e 94 58 02 	call	0x4b0	; 0x4b0 <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensSpate, 10);
     624:	4a e0       	ldi	r20, 0x0A	; 10
     626:	61 e0       	ldi	r22, 0x01	; 1
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <setEnginesSpeed>
	removeEntryFromTimerQueue(&stopEngines);
     62e:	87 e1       	ldi	r24, 0x17	; 23
     630:	92 e0       	ldi	r25, 0x02	; 2
     632:	0e 94 0e 06 	call	0xc1c	; 0xc1c <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     636:	ac 2f       	mov	r26, r28
     638:	b0 e0       	ldi	r27, 0x00	; 0
     63a:	20 e4       	ldi	r18, 0x40	; 64
     63c:	32 e4       	ldi	r19, 0x42	; 66
     63e:	4f e0       	ldi	r20, 0x0F	; 15
     640:	50 e0       	ldi	r21, 0x00	; 0
     642:	0e 94 0e 0a 	call	0x141c	; 0x141c <__muluhisi3>
     646:	ab 01       	movw	r20, r22
     648:	bc 01       	movw	r22, r24
     64a:	20 e0       	ldi	r18, 0x00	; 0
     64c:	87 e1       	ldi	r24, 0x17	; 23
     64e:	92 e0       	ldi	r25, 0x02	; 2
     650:	0e 94 0d 05 	call	0xa1a	; 0xa1a <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inapoi stanga!");
     654:	81 eb       	ldi	r24, 0xB1	; 177
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	0e 94 31 01 	call	0x262	; 0x262 <BTTransmitStr>
}
     65c:	cf 91       	pop	r28
     65e:	08 95       	ret

00000660 <goBackRight>:
void goBackRight(uint8_t timp, uint8_t viteza){
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	c8 2f       	mov	r28, r24
     666:	d6 2f       	mov	r29, r22
	
	setEnginesSpeed(RightEngines, SensSpate, 10);
     668:	4a e0       	ldi	r20, 0x0A	; 10
     66a:	61 e0       	ldi	r22, 0x01	; 1
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensSpate, viteza);
     672:	4d 2f       	mov	r20, r29
     674:	61 e0       	ldi	r22, 0x01	; 1
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	0e 94 58 02 	call	0x4b0	; 0x4b0 <setEnginesSpeed>
	removeEntryFromTimerQueue(&stopEngines);
     67c:	87 e1       	ldi	r24, 0x17	; 23
     67e:	92 e0       	ldi	r25, 0x02	; 2
     680:	0e 94 0e 06 	call	0xc1c	; 0xc1c <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     684:	ac 2f       	mov	r26, r28
     686:	b0 e0       	ldi	r27, 0x00	; 0
     688:	20 e4       	ldi	r18, 0x40	; 64
     68a:	32 e4       	ldi	r19, 0x42	; 66
     68c:	4f e0       	ldi	r20, 0x0F	; 15
     68e:	50 e0       	ldi	r21, 0x00	; 0
     690:	0e 94 0e 0a 	call	0x141c	; 0x141c <__muluhisi3>
     694:	ab 01       	movw	r20, r22
     696:	bc 01       	movw	r22, r24
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	87 e1       	ldi	r24, 0x17	; 23
     69c:	92 e0       	ldi	r25, 0x02	; 2
     69e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inapoi dreapta!");
     6a2:	87 ec       	ldi	r24, 0xC7	; 199
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	0e 94 31 01 	call	0x262	; 0x262 <BTTransmitStr>
}
     6aa:	df 91       	pop	r29
     6ac:	cf 91       	pop	r28
     6ae:	08 95       	ret

000006b0 <rotirePeLoc>:
void rotirePeLoc(uint8_t timp, uint8_t viteza,  uint8_t engines){
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
     6b4:	d8 2f       	mov	r29, r24
     6b6:	c6 2f       	mov	r28, r22
	
	if(engines == RightEngines){
     6b8:	41 11       	cpse	r20, r1
     6ba:	0f c0       	rjmp	.+30     	; 0x6da <rotirePeLoc+0x2a>
		setEnginesSpeed(LeftEngines, SensFata, viteza);
     6bc:	46 2f       	mov	r20, r22
     6be:	60 e0       	ldi	r22, 0x00	; 0
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	0e 94 58 02 	call	0x4b0	; 0x4b0 <setEnginesSpeed>
		setEnginesSpeed(RightEngines, SensSpate, viteza);
     6c6:	4c 2f       	mov	r20, r28
     6c8:	61 e0       	ldi	r22, 0x01	; 1
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	0e 94 58 02 	call	0x4b0	; 0x4b0 <setEnginesSpeed>
		BTTransmitStr("ma rotesc spre dreapta");
     6d0:	8e ed       	ldi	r24, 0xDE	; 222
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	0e 94 31 01 	call	0x262	; 0x262 <BTTransmitStr>
     6d8:	0e c0       	rjmp	.+28     	; 0x6f6 <rotirePeLoc+0x46>
	}
	else {
		setEnginesSpeed(LeftEngines, SensSpate,  viteza);
     6da:	46 2f       	mov	r20, r22
     6dc:	61 e0       	ldi	r22, 0x01	; 1
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	0e 94 58 02 	call	0x4b0	; 0x4b0 <setEnginesSpeed>
		setEnginesSpeed(RightEngines, SensFata, viteza);
     6e4:	4c 2f       	mov	r20, r28
     6e6:	60 e0       	ldi	r22, 0x00	; 0
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	0e 94 58 02 	call	0x4b0	; 0x4b0 <setEnginesSpeed>
		BTTransmitStr("ma rotesc spre stanga");
     6ee:	85 ef       	ldi	r24, 0xF5	; 245
     6f0:	91 e0       	ldi	r25, 0x01	; 1
     6f2:	0e 94 31 01 	call	0x262	; 0x262 <BTTransmitStr>
	}
	removeEntryFromTimerQueue(&stopEngines);
     6f6:	87 e1       	ldi	r24, 0x17	; 23
     6f8:	92 e0       	ldi	r25, 0x02	; 2
     6fa:	0e 94 0e 06 	call	0xc1c	; 0xc1c <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     6fe:	ad 2f       	mov	r26, r29
     700:	b0 e0       	ldi	r27, 0x00	; 0
     702:	20 e4       	ldi	r18, 0x40	; 64
     704:	32 e4       	ldi	r19, 0x42	; 66
     706:	4f e0       	ldi	r20, 0x0F	; 15
     708:	50 e0       	ldi	r21, 0x00	; 0
     70a:	0e 94 0e 0a 	call	0x141c	; 0x141c <__muluhisi3>
     70e:	ab 01       	movw	r20, r22
     710:	bc 01       	movw	r22, r24
     712:	20 e0       	ldi	r18, 0x00	; 0
     714:	87 e1       	ldi	r24, 0x17	; 23
     716:	92 e0       	ldi	r25, 0x02	; 2
     718:	0e 94 0d 05 	call	0xa1a	; 0xa1a <addEntryToTimerQueue>
}
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	08 95       	ret

00000722 <resetSensorQueue>:
		
	return s/7;
}

void resetSensorQueue(Sensor sensor){
	sVals[sensor][0] = 0;
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	88 0f       	add	r24, r24
     726:	99 1f       	adc	r25, r25
     728:	fc 01       	movw	r30, r24
     72a:	ee 0f       	add	r30, r30
     72c:	ff 1f       	adc	r31, r31
     72e:	ee 0f       	add	r30, r30
     730:	ff 1f       	adc	r31, r31
     732:	ee 0f       	add	r30, r30
     734:	ff 1f       	adc	r31, r31
     736:	e8 1b       	sub	r30, r24
     738:	f9 0b       	sbc	r31, r25
     73a:	ef 57       	subi	r30, 0x7F	; 127
     73c:	fc 4f       	sbci	r31, 0xFC	; 252
     73e:	11 82       	std	Z+1, r1	; 0x01
     740:	10 82       	st	Z, r1
	uint8_t i;
	for(i=0;i<6;i++)
		sVals[sensor][i] = 0;
     742:	13 82       	std	Z+3, r1	; 0x03
     744:	12 82       	std	Z+2, r1	; 0x02
     746:	15 82       	std	Z+5, r1	; 0x05
     748:	14 82       	std	Z+4, r1	; 0x04
     74a:	17 82       	std	Z+7, r1	; 0x07
     74c:	16 82       	std	Z+6, r1	; 0x06
     74e:	11 86       	std	Z+9, r1	; 0x09
     750:	10 86       	std	Z+8, r1	; 0x08
     752:	13 86       	std	Z+11, r1	; 0x0b
     754:	12 86       	std	Z+10, r1	; 0x0a
     756:	08 95       	ret

00000758 <initSensors>:
}

void initSensors(void){
     758:	81 e8       	ldi	r24, 0x81	; 129
     75a:	93 e0       	ldi	r25, 0x03	; 3
     75c:	29 eb       	ldi	r18, 0xB9	; 185
     75e:	33 e0       	ldi	r19, 0x03	; 3
     760:	50 e0       	ldi	r21, 0x00	; 0
     762:	09 c0       	rjmp	.+18     	; 0x776 <initSensors+0x1e>
	
	uint8_t i, j;
	for(i=0; i<4;i++)
		for(j=0; j<7;j++)
			sVals[i][j] = 0;
     764:	11 92       	st	Z+, r1
     766:	11 92       	st	Z+, r1

void initSensors(void){
	
	uint8_t i, j;
	for(i=0; i<4;i++)
		for(j=0; j<7;j++)
     768:	4f 5f       	subi	r20, 0xFF	; 255
     76a:	47 30       	cpi	r20, 0x07	; 7
     76c:	d9 f7       	brne	.-10     	; 0x764 <initSensors+0xc>
     76e:	0e 96       	adiw	r24, 0x0e	; 14
}

void initSensors(void){
	
	uint8_t i, j;
	for(i=0; i<4;i++)
     770:	82 17       	cp	r24, r18
     772:	93 07       	cpc	r25, r19
     774:	19 f0       	breq	.+6      	; 0x77c <initSensors+0x24>
	uint8_t i;
	for(i=0;i<6;i++)
		sVals[sensor][i] = 0;
}

void initSensors(void){
     776:	fc 01       	movw	r30, r24
     778:	45 2f       	mov	r20, r21
     77a:	f4 cf       	rjmp	.-24     	; 0x764 <initSensors+0xc>
	for(i=0; i<4;i++)
		for(j=0; j<7;j++)
			sVals[i][j] = 0;
	
	//init ADC
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
     77c:	aa e7       	ldi	r26, 0x7A	; 122
     77e:	b0 e0       	ldi	r27, 0x00	; 0
     780:	8c 91       	ld	r24, X
     782:	87 60       	ori	r24, 0x07	; 7
     784:	8c 93       	st	X, r24

	ADMUX |= (1 << REFS0);
     786:	ec e7       	ldi	r30, 0x7C	; 124
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	80 81       	ld	r24, Z
     78c:	80 64       	ori	r24, 0x40	; 64
     78e:	80 83       	st	Z, r24
	ADMUX &=~ (1 << REFS1); // Set ADC reference to AVCC
     790:	80 81       	ld	r24, Z
     792:	8f 77       	andi	r24, 0x7F	; 127
     794:	80 83       	st	Z, r24
	
	ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
     796:	80 81       	ld	r24, Z
     798:	80 62       	ori	r24, 0x20	; 32
     79a:	80 83       	st	Z, r24
	
	//ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running Mode
	
	ADCSRA |= (1 << ADEN);  // Enable ADC
     79c:	8c 91       	ld	r24, X
     79e:	80 68       	ori	r24, 0x80	; 128
     7a0:	8c 93       	st	X, r24
     7a2:	08 95       	ret

000007a4 <startADCConversionForSensor>:
	//ADCSRA |= (1 << ADSC);
}

void startADCConversionForSensor(Sensor sensor){

	ADMUX &= ~31; // set lasts 5 bits to 00000
     7a4:	ec e7       	ldi	r30, 0x7C	; 124
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	90 81       	ld	r25, Z
     7aa:	90 7e       	andi	r25, 0xE0	; 224
     7ac:	90 83       	st	Z, r25
	//ADMUX |= 0; // 0-ADC0, 1-ADC1, 2-ADC2 ...    datasheet pg 249-251
	ADMUX |= sensor; // Sensor ia valorile 0,1,2,3, exact ca cele pt ADC-uri
     7ae:	90 81       	ld	r25, Z
     7b0:	89 2b       	or	r24, r25
     7b2:	80 83       	st	Z, r24
	// No MUX values needed to be changed to use ADC0

	
	ADCSRA |= (1 << ADSC);  // Start A2D Conversions
     7b4:	ea e7       	ldi	r30, 0x7A	; 122
     7b6:	f0 e0       	ldi	r31, 0x00	; 0
     7b8:	80 81       	ld	r24, Z
     7ba:	80 64       	ori	r24, 0x40	; 64
     7bc:	80 83       	st	Z, r24
     7be:	08 95       	ret

000007c0 <getValueOfSensor>:
	return val;
}

uint16_t sVals[4][7];

uint16_t getValueOfSensor(Sensor sensor){	
     7c0:	6f 92       	push	r6
     7c2:	7f 92       	push	r7
     7c4:	8f 92       	push	r8
     7c6:	9f 92       	push	r9
     7c8:	af 92       	push	r10
     7ca:	bf 92       	push	r11
     7cc:	cf 92       	push	r12
     7ce:	df 92       	push	r13
     7d0:	ef 92       	push	r14
     7d2:	ff 92       	push	r15
     7d4:	0f 93       	push	r16
     7d6:	1f 93       	push	r17
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	98 2e       	mov	r9, r24
	
	resetSensorQueue(sensor);
     7de:	0e 94 91 03 	call	0x722	; 0x722 <resetSensorQueue>
	sVals[sensor][0] = 0;
     7e2:	89 2d       	mov	r24, r9
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	9c 01       	movw	r18, r24
     7e8:	22 0f       	add	r18, r18
     7ea:	33 1f       	adc	r19, r19
     7ec:	f9 01       	movw	r30, r18
     7ee:	ee 0f       	add	r30, r30
     7f0:	ff 1f       	adc	r31, r31
     7f2:	ee 0f       	add	r30, r30
     7f4:	ff 1f       	adc	r31, r31
     7f6:	ee 0f       	add	r30, r30
     7f8:	ff 1f       	adc	r31, r31
     7fa:	e2 1b       	sub	r30, r18
     7fc:	f3 0b       	sbc	r31, r19
     7fe:	ef 57       	subi	r30, 0x7F	; 127
     800:	fc 4f       	sbci	r31, 0xFC	; 252
     802:	11 82       	std	Z+1, r1	; 0x01
     804:	10 82       	st	Z, r1
     806:	5f 01       	movw	r10, r30
     808:	6e 2e       	mov	r6, r30
     80a:	7b 2c       	mov	r7, r11
	uint8_t i;
	uint16_t s;
	
	while(sVals[sensor][0]==0){
		startADCConversionForSensor(sensor);
     80c:	0f 2e       	mov	r0, r31
     80e:	f6 e0       	ldi	r31, 0x06	; 6
     810:	8f 2e       	mov	r8, r31
     812:	f0 2d       	mov	r31, r0
		for(i=0;i<6;i++)
			sVals[sensor][i] = sVals[sensor][i+1];
		
		while ( ADCSRA & (1 << ADSC));
     814:	ca e7       	ldi	r28, 0x7A	; 122
     816:	d0 e0       	ldi	r29, 0x00	; 0
		sVals[sensor][6] = ADCL >> 6;
     818:	0f 2e       	mov	r0, r31
     81a:	f8 e7       	ldi	r31, 0x78	; 120
     81c:	cf 2e       	mov	r12, r31
     81e:	d1 2c       	mov	r13, r1
     820:	f0 2d       	mov	r31, r0
     822:	8f 01       	movw	r16, r30
     824:	04 5f       	subi	r16, 0xF4	; 244
     826:	1f 4f       	sbci	r17, 0xFF	; 255
		sVals[sensor][6] |= ADCH << 2;
     828:	0f 2e       	mov	r0, r31
     82a:	f9 e7       	ldi	r31, 0x79	; 121
     82c:	ef 2e       	mov	r14, r31
     82e:	f1 2c       	mov	r15, r1
     830:	f0 2d       	mov	r31, r0
	sVals[sensor][0] = 0;
	uint8_t i;
	uint16_t s;
	
	while(sVals[sensor][0]==0){
		startADCConversionForSensor(sensor);
     832:	89 2d       	mov	r24, r9
     834:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <startADCConversionForSensor>
     838:	5a 2d       	mov	r21, r10
     83a:	4b 2d       	mov	r20, r11
     83c:	e6 2d       	mov	r30, r6
     83e:	f7 2d       	mov	r31, r7
     840:	88 2d       	mov	r24, r8
		for(i=0;i<6;i++)
			sVals[sensor][i] = sVals[sensor][i+1];
     842:	22 81       	ldd	r18, Z+2	; 0x02
     844:	33 81       	ldd	r19, Z+3	; 0x03
     846:	21 93       	st	Z+, r18
     848:	31 93       	st	Z+, r19
     84a:	81 50       	subi	r24, 0x01	; 1
	uint8_t i;
	uint16_t s;
	
	while(sVals[sensor][0]==0){
		startADCConversionForSensor(sensor);
		for(i=0;i<6;i++)
     84c:	d1 f7       	brne	.-12     	; 0x842 <getValueOfSensor+0x82>
			sVals[sensor][i] = sVals[sensor][i+1];
		
		while ( ADCSRA & (1 << ADSC));
     84e:	88 81       	ld	r24, Y
     850:	86 fd       	sbrc	r24, 6
     852:	fd cf       	rjmp	.-6      	; 0x84e <getValueOfSensor+0x8e>
		sVals[sensor][6] = ADCL >> 6;
     854:	f6 01       	movw	r30, r12
     856:	80 81       	ld	r24, Z
     858:	82 95       	swap	r24
     85a:	86 95       	lsr	r24
     85c:	86 95       	lsr	r24
     85e:	83 70       	andi	r24, 0x03	; 3
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	f8 01       	movw	r30, r16
     864:	91 83       	std	Z+1, r25	; 0x01
     866:	80 83       	st	Z, r24
		sVals[sensor][6] |= ADCH << 2;
     868:	f7 01       	movw	r30, r14
     86a:	20 81       	ld	r18, Z
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	22 0f       	add	r18, r18
     870:	33 1f       	adc	r19, r19
     872:	22 0f       	add	r18, r18
     874:	33 1f       	adc	r19, r19
     876:	82 2b       	or	r24, r18
     878:	93 2b       	or	r25, r19
     87a:	f8 01       	movw	r30, r16
     87c:	91 83       	std	Z+1, r25	; 0x01
     87e:	80 83       	st	Z, r24
	resetSensorQueue(sensor);
	sVals[sensor][0] = 0;
	uint8_t i;
	uint16_t s;
	
	while(sVals[sensor][0]==0){
     880:	f5 01       	movw	r30, r10
     882:	80 81       	ld	r24, Z
     884:	91 81       	ldd	r25, Z+1	; 0x01
     886:	89 2b       	or	r24, r25
     888:	a1 f2       	breq	.-88     	; 0x832 <getValueOfSensor+0x72>
     88a:	e5 2f       	mov	r30, r21
     88c:	f4 2f       	mov	r31, r20
     88e:	40 e0       	ldi	r20, 0x00	; 0
     890:	50 e0       	ldi	r21, 0x00	; 0
     892:	20 e0       	ldi	r18, 0x00	; 0
	
	

	s=0;
	for(i=0;i<7;i++)
		s+=sVals[sensor][i];
     894:	81 91       	ld	r24, Z+
     896:	91 91       	ld	r25, Z+
     898:	48 0f       	add	r20, r24
     89a:	59 1f       	adc	r21, r25
	}
	
	

	s=0;
	for(i=0;i<7;i++)
     89c:	2f 5f       	subi	r18, 0xFF	; 255
     89e:	27 30       	cpi	r18, 0x07	; 7
     8a0:	c9 f7       	brne	.-14     	; 0x894 <getValueOfSensor+0xd4>
		
	//sprintf(msg,"lv: %d %d %d %d %d %d %d  =%d",
	//sVals[sensor][0], sVals[sensor][1], sVals[sensor][2], sVals[sensor][3], sVals[sensor][4], sVals[sensor][5], sVals[sensor][6], s/7);
	//BTTransmitStr(msg);
		
	return s/7;
     8a2:	9a 01       	movw	r18, r20
     8a4:	a3 e9       	ldi	r26, 0x93	; 147
     8a6:	b4 e2       	ldi	r27, 0x24	; 36
     8a8:	0e 94 ff 09 	call	0x13fe	; 0x13fe <__umulhisi3>
     8ac:	48 1b       	sub	r20, r24
     8ae:	59 0b       	sbc	r21, r25
     8b0:	9a 01       	movw	r18, r20
     8b2:	36 95       	lsr	r19
     8b4:	27 95       	ror	r18
     8b6:	82 0f       	add	r24, r18
     8b8:	93 1f       	adc	r25, r19
}
     8ba:	96 95       	lsr	r25
     8bc:	87 95       	ror	r24
     8be:	96 95       	lsr	r25
     8c0:	87 95       	ror	r24
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	1f 91       	pop	r17
     8c8:	0f 91       	pop	r16
     8ca:	ff 90       	pop	r15
     8cc:	ef 90       	pop	r14
     8ce:	df 90       	pop	r13
     8d0:	cf 90       	pop	r12
     8d2:	bf 90       	pop	r11
     8d4:	af 90       	pop	r10
     8d6:	9f 90       	pop	r9
     8d8:	8f 90       	pop	r8
     8da:	7f 90       	pop	r7
     8dc:	6f 90       	pop	r6
     8de:	08 95       	ret

000008e0 <timer_init>:

volatile uint32_t time=0;
void timer_init()
{
	//PIND = (1 << PIND0);
	TIMSK1|=(1<<TOIE1);
     8e0:	ef e6       	ldi	r30, 0x6F	; 111
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	80 81       	ld	r24, Z
     8e6:	81 60       	ori	r24, 0x01	; 1
     8e8:	80 83       	st	Z, r24
	TCNT1 = 0x00;
     8ea:	10 92 85 00 	sts	0x0085, r1
     8ee:	10 92 84 00 	sts	0x0084, r1
	TCCR1B = 0x01;//pt ca modificam ultimu bit din datasheet
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	80 93 81 00 	sts	0x0081, r24
     8f8:	08 95       	ret

000008fa <__vector_15>:
}
ISR(TIMER1_OVF_vect)// Din datasheet timerq(are 8 mh) => 8/8= 1 microsecunde
{
     8fa:	1f 92       	push	r1
     8fc:	0f 92       	push	r0
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	0f 92       	push	r0
     902:	11 24       	eor	r1, r1
     904:	2f 93       	push	r18
     906:	3f 93       	push	r19
     908:	4f 93       	push	r20
     90a:	5f 93       	push	r21
     90c:	6f 93       	push	r22
     90e:	7f 93       	push	r23
     910:	8f 93       	push	r24
     912:	9f 93       	push	r25
     914:	af 93       	push	r26
     916:	bf 93       	push	r27
     918:	ef 93       	push	r30
     91a:	ff 93       	push	r31
	time++;
     91c:	80 91 6a 03 	lds	r24, 0x036A
     920:	90 91 6b 03 	lds	r25, 0x036B
     924:	a0 91 6c 03 	lds	r26, 0x036C
     928:	b0 91 6d 03 	lds	r27, 0x036D
     92c:	01 96       	adiw	r24, 0x01	; 1
     92e:	a1 1d       	adc	r26, r1
     930:	b1 1d       	adc	r27, r1
     932:	80 93 6a 03 	sts	0x036A, r24
     936:	90 93 6b 03 	sts	0x036B, r25
     93a:	a0 93 6c 03 	sts	0x036C, r26
     93e:	b0 93 6d 03 	sts	0x036D, r27
	//TCCR1B = 0x01; // init pentru 7.5 ms
	//TCCR1B = 0x02; // init pentru 60 ms
	//timePassed(7500); //7.5 ms = 7500 us;
	timePassed(8800);
     942:	60 e6       	ldi	r22, 0x60	; 96
     944:	72 e2       	ldi	r23, 0x22	; 34
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <timePassed>
	
	//PORTD ^= 1<<PIND5;
}
     94e:	ff 91       	pop	r31
     950:	ef 91       	pop	r30
     952:	bf 91       	pop	r27
     954:	af 91       	pop	r26
     956:	9f 91       	pop	r25
     958:	8f 91       	pop	r24
     95a:	7f 91       	pop	r23
     95c:	6f 91       	pop	r22
     95e:	5f 91       	pop	r21
     960:	4f 91       	pop	r20
     962:	3f 91       	pop	r19
     964:	2f 91       	pop	r18
     966:	0f 90       	pop	r0
     968:	0f be       	out	0x3f, r0	; 63
     96a:	0f 90       	pop	r0
     96c:	1f 90       	pop	r1
     96e:	18 95       	reti

00000970 <__vector_20>:

ISR(USART0_RX_vect)
{
     970:	1f 92       	push	r1
     972:	0f 92       	push	r0
     974:	0f b6       	in	r0, 0x3f	; 63
     976:	0f 92       	push	r0
     978:	11 24       	eor	r1, r1
     97a:	2f 93       	push	r18
     97c:	3f 93       	push	r19
     97e:	4f 93       	push	r20
     980:	5f 93       	push	r21
     982:	6f 93       	push	r22
     984:	7f 93       	push	r23
     986:	8f 93       	push	r24
     988:	9f 93       	push	r25
     98a:	af 93       	push	r26
     98c:	bf 93       	push	r27
     98e:	ef 93       	push	r30
     990:	ff 93       	push	r31
	BTProtocolReadByte(UDR0);
     992:	80 91 c6 00 	lds	r24, 0x00C6
     996:	0e 94 ac 01 	call	0x358	; 0x358 <BTProtocolReadByte>
}
     99a:	ff 91       	pop	r31
     99c:	ef 91       	pop	r30
     99e:	bf 91       	pop	r27
     9a0:	af 91       	pop	r26
     9a2:	9f 91       	pop	r25
     9a4:	8f 91       	pop	r24
     9a6:	7f 91       	pop	r23
     9a8:	6f 91       	pop	r22
     9aa:	5f 91       	pop	r21
     9ac:	4f 91       	pop	r20
     9ae:	3f 91       	pop	r19
     9b0:	2f 91       	pop	r18
     9b2:	0f 90       	pop	r0
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	0f 90       	pop	r0
     9b8:	1f 90       	pop	r1
     9ba:	18 95       	reti

000009bc <main>:

volatile uint8_t sradc0, shouldBlink=0;

int main(void)
{
	BTInit();
     9bc:	0e 94 06 02 	call	0x40c	; 0x40c <BTInit>
	timer_init();
     9c0:	0e 94 70 04 	call	0x8e0	; 0x8e0 <timer_init>
	initLeds();
     9c4:	0e 94 d7 08 	call	0x11ae	; 0x11ae <initLeds>
	initEngines();
     9c8:	0e 94 2e 02 	call	0x45c	; 0x45c <initEngines>
	initSensors();
     9cc:	0e 94 ac 03 	call	0x758	; 0x758 <initSensors>
	initTimeQueue();
     9d0:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <initTimeQueue>
	
	sei();
     9d4:	78 94       	sei
	BTTransmitStr("  >>>main start<<<  ");
     9d6:	8b e0       	ldi	r24, 0x0B	; 11
     9d8:	92 e0       	ldi	r25, 0x02	; 2
     9da:	0e 94 31 01 	call	0x262	; 0x262 <BTTransmitStr>
	
	PORTD |= 1<<PIND6;
     9de:	5e 9a       	sbi	0x0b, 6	; 11
	//addEntryToTimerQueue(&functieRotireStanga, 1000UL * 50UL, Periodic);
	
    while(1)
    {
		//_delay_ms(1);
		checkTimeQueue();
     9e0:	0e 94 4d 07 	call	0xe9a	; 0xe9a <checkTimeQueue>
     9e4:	fd cf       	rjmp	.-6      	; 0x9e0 <main+0x24>

000009e6 <initTimeQueue>:
     9e6:	40 91 01 01 	lds	r20, 0x0101
     9ea:	44 23       	and	r20, r20
     9ec:	a9 f0       	breq	.+42     	; 0xa18 <initTimeQueue+0x32>
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	fc 01       	movw	r30, r24
     9f4:	ee 0f       	add	r30, r30
     9f6:	ff 1f       	adc	r31, r31
     9f8:	9c 01       	movw	r18, r24
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	22 0f       	add	r18, r18
     a00:	33 1f       	adc	r19, r19
     a02:	22 0f       	add	r18, r18
     a04:	33 1f       	adc	r19, r19
     a06:	e2 0f       	add	r30, r18
     a08:	f3 1f       	adc	r31, r19
     a0a:	e7 54       	subi	r30, 0x47	; 71
     a0c:	fc 4f       	sbci	r31, 0xFC	; 252
     a0e:	11 86       	std	Z+9, r1	; 0x09
     a10:	10 86       	std	Z+8, r1	; 0x08
     a12:	01 96       	adiw	r24, 0x01	; 1
     a14:	84 17       	cp	r24, r20
     a16:	68 f3       	brcs	.-38     	; 0x9f2 <initTimeQueue+0xc>
     a18:	08 95       	ret

00000a1a <addEntryToTimerQueue>:
     a1a:	df 92       	push	r13
     a1c:	ef 92       	push	r14
     a1e:	ff 92       	push	r15
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	cd b7       	in	r28, 0x3d	; 61
     a2a:	de b7       	in	r29, 0x3e	; 62
     a2c:	ce 56       	subi	r28, 0x6E	; 110
     a2e:	d1 09       	sbc	r29, r1
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	f8 94       	cli
     a34:	de bf       	out	0x3e, r29	; 62
     a36:	0f be       	out	0x3f, r0	; 63
     a38:	cd bf       	out	0x3d, r28	; 61
     a3a:	f8 94       	cli
     a3c:	d0 90 01 01 	lds	r13, 0x0101
     a40:	dd 20       	and	r13, r13
     a42:	09 f4       	brne	.+2      	; 0xa46 <addEntryToTimerQueue+0x2c>
     a44:	77 c0       	rjmp	.+238    	; 0xb34 <addEntryToTimerQueue+0x11a>
     a46:	e0 91 c1 03 	lds	r30, 0x03C1
     a4a:	f0 91 c2 03 	lds	r31, 0x03C2
     a4e:	ef 2b       	or	r30, r31
     a50:	09 f4       	brne	.+2      	; 0xa54 <addEntryToTimerQueue+0x3a>
     a52:	7a c0       	rjmp	.+244    	; 0xb48 <addEntryToTimerQueue+0x12e>
     a54:	e0 91 c1 03 	lds	r30, 0x03C1
     a58:	f0 91 c2 03 	lds	r31, 0x03C2
     a5c:	e8 17       	cp	r30, r24
     a5e:	f9 07       	cpc	r31, r25
     a60:	09 f0       	breq	.+2      	; 0xa64 <addEntryToTimerQueue+0x4a>
     a62:	5e c0       	rjmp	.+188    	; 0xb20 <addEntryToTimerQueue+0x106>
     a64:	2d c0       	rjmp	.+90     	; 0xac0 <addEntryToTimerQueue+0xa6>
     a66:	7f 01       	movw	r14, r30
     a68:	df 01       	movw	r26, r30
     a6a:	aa 0f       	add	r26, r26
     a6c:	bb 1f       	adc	r27, r27
     a6e:	aa 0f       	add	r26, r26
     a70:	bb 1f       	adc	r27, r27
     a72:	aa 0f       	add	r26, r26
     a74:	bb 1f       	adc	r27, r27
     a76:	8f 01       	movw	r16, r30
     a78:	00 0f       	add	r16, r16
     a7a:	11 1f       	adc	r17, r17
     a7c:	a0 0f       	add	r26, r16
     a7e:	b1 1f       	adc	r27, r17
     a80:	a7 54       	subi	r26, 0x47	; 71
     a82:	bc 4f       	sbci	r27, 0xFC	; 252
     a84:	18 96       	adiw	r26, 0x08	; 8
     a86:	0d 90       	ld	r0, X+
     a88:	bc 91       	ld	r27, X
     a8a:	a0 2d       	mov	r26, r0
     a8c:	ab 2b       	or	r26, r27
     a8e:	09 f4       	brne	.+2      	; 0xa92 <addEntryToTimerQueue+0x78>
     a90:	4e c0       	rjmp	.+156    	; 0xb2e <addEntryToTimerQueue+0x114>
     a92:	8f 01       	movw	r16, r30
     a94:	00 0f       	add	r16, r16
     a96:	11 1f       	adc	r17, r17
     a98:	df 01       	movw	r26, r30
     a9a:	aa 0f       	add	r26, r26
     a9c:	bb 1f       	adc	r27, r27
     a9e:	aa 0f       	add	r26, r26
     aa0:	bb 1f       	adc	r27, r27
     aa2:	aa 0f       	add	r26, r26
     aa4:	bb 1f       	adc	r27, r27
     aa6:	a0 0f       	add	r26, r16
     aa8:	b1 1f       	adc	r27, r17
     aaa:	a7 54       	subi	r26, 0x47	; 71
     aac:	bc 4f       	sbci	r27, 0xFC	; 252
     aae:	18 96       	adiw	r26, 0x08	; 8
     ab0:	0d 90       	ld	r0, X+
     ab2:	bc 91       	ld	r27, X
     ab4:	a0 2d       	mov	r26, r0
     ab6:	31 96       	adiw	r30, 0x01	; 1
     ab8:	a8 17       	cp	r26, r24
     aba:	b9 07       	cpc	r27, r25
     abc:	99 f5       	brne	.+102    	; 0xb24 <addEntryToTimerQueue+0x10a>
     abe:	02 c0       	rjmp	.+4      	; 0xac4 <addEntryToTimerQueue+0xaa>
     ac0:	e1 2c       	mov	r14, r1
     ac2:	f1 2c       	mov	r15, r1
     ac4:	80 91 00 01 	lds	r24, 0x0100
     ac8:	88 23       	and	r24, r24
     aca:	09 f4       	brne	.+2      	; 0xace <addEntryToTimerQueue+0xb4>
     acc:	98 c0       	rjmp	.+304    	; 0xbfe <addEntryToTimerQueue+0x1e4>
     ace:	f7 01       	movw	r30, r14
     ad0:	ee 0f       	add	r30, r30
     ad2:	ff 1f       	adc	r31, r31
     ad4:	ee 0c       	add	r14, r14
     ad6:	ff 1c       	adc	r15, r15
     ad8:	ee 0c       	add	r14, r14
     ada:	ff 1c       	adc	r15, r15
     adc:	ee 0c       	add	r14, r14
     ade:	ff 1c       	adc	r15, r15
     ae0:	ee 0d       	add	r30, r14
     ae2:	ff 1d       	adc	r31, r15
     ae4:	e7 54       	subi	r30, 0x47	; 71
     ae6:	fc 4f       	sbci	r31, 0xFC	; 252
     ae8:	80 81       	ld	r24, Z
     aea:	91 81       	ldd	r25, Z+1	; 0x01
     aec:	a2 81       	ldd	r26, Z+2	; 0x02
     aee:	b3 81       	ldd	r27, Z+3	; 0x03
     af0:	bf 93       	push	r27
     af2:	af 93       	push	r26
     af4:	9f 93       	push	r25
     af6:	8f 93       	push	r24
     af8:	80 e2       	ldi	r24, 0x20	; 32
     afa:	92 e0       	ldi	r25, 0x02	; 2
     afc:	9f 93       	push	r25
     afe:	8f 93       	push	r24
     b00:	8e 01       	movw	r16, r28
     b02:	05 5f       	subi	r16, 0xF5	; 245
     b04:	1f 4f       	sbci	r17, 0xFF	; 255
     b06:	1f 93       	push	r17
     b08:	0f 93       	push	r16
     b0a:	0e 94 2d 0a 	call	0x145a	; 0x145a <sprintf>
     b0e:	c8 01       	movw	r24, r16
     b10:	0e 94 31 01 	call	0x262	; 0x262 <BTTransmitStr>
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	cd bf       	out	0x3d, r28	; 61
     b1e:	6f c0       	rjmp	.+222    	; 0xbfe <addEntryToTimerQueue+0x1e4>
     b20:	e1 e0       	ldi	r30, 0x01	; 1
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	3e 2f       	mov	r19, r30
     b26:	ed 15       	cp	r30, r13
     b28:	08 f4       	brcc	.+2      	; 0xb2c <addEntryToTimerQueue+0x112>
     b2a:	9d cf       	rjmp	.-198    	; 0xa66 <addEntryToTimerQueue+0x4c>
     b2c:	01 c0       	rjmp	.+2      	; 0xb30 <addEntryToTimerQueue+0x116>
     b2e:	e3 2f       	mov	r30, r19
     b30:	ed 11       	cpse	r30, r13
     b32:	0b c0       	rjmp	.+22     	; 0xb4a <addEntryToTimerQueue+0x130>
     b34:	80 91 00 01 	lds	r24, 0x0100
     b38:	88 23       	and	r24, r24
     b3a:	09 f4       	brne	.+2      	; 0xb3e <addEntryToTimerQueue+0x124>
     b3c:	60 c0       	rjmp	.+192    	; 0xbfe <addEntryToTimerQueue+0x1e4>
     b3e:	8c e4       	ldi	r24, 0x4C	; 76
     b40:	92 e0       	ldi	r25, 0x02	; 2
     b42:	0e 94 31 01 	call	0x262	; 0x262 <BTTransmitStr>
     b46:	5b c0       	rjmp	.+182    	; 0xbfe <addEntryToTimerQueue+0x1e4>
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	21 11       	cpse	r18, r1
     b4c:	04 c0       	rjmp	.+8      	; 0xb56 <addEntryToTimerQueue+0x13c>
     b4e:	a0 e0       	ldi	r26, 0x00	; 0
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	e0 e0       	ldi	r30, 0x00	; 0
     b54:	04 c0       	rjmp	.+8      	; 0xb5e <addEntryToTimerQueue+0x144>
     b56:	a4 2f       	mov	r26, r20
     b58:	f5 2f       	mov	r31, r21
     b5a:	e6 2f       	mov	r30, r22
     b5c:	27 2f       	mov	r18, r23
     b5e:	03 2f       	mov	r16, r19
     b60:	10 e0       	ldi	r17, 0x00	; 0
     b62:	49 83       	std	Y+1, r20	; 0x01
     b64:	5a 83       	std	Y+2, r21	; 0x02
     b66:	6b 83       	std	Y+3, r22	; 0x03
     b68:	7c 83       	std	Y+4, r23	; 0x04
     b6a:	ad 83       	std	Y+5, r26	; 0x05
     b6c:	fe 83       	std	Y+6, r31	; 0x06
     b6e:	ef 83       	std	Y+7, r30	; 0x07
     b70:	28 87       	std	Y+8, r18	; 0x08
     b72:	9a 87       	std	Y+10, r25	; 0x0a
     b74:	89 87       	std	Y+9, r24	; 0x09
     b76:	d8 01       	movw	r26, r16
     b78:	aa 0f       	add	r26, r26
     b7a:	bb 1f       	adc	r27, r27
     b7c:	c8 01       	movw	r24, r16
     b7e:	88 0f       	add	r24, r24
     b80:	99 1f       	adc	r25, r25
     b82:	88 0f       	add	r24, r24
     b84:	99 1f       	adc	r25, r25
     b86:	88 0f       	add	r24, r24
     b88:	99 1f       	adc	r25, r25
     b8a:	a8 0f       	add	r26, r24
     b8c:	b9 1f       	adc	r27, r25
     b8e:	a7 54       	subi	r26, 0x47	; 71
     b90:	bc 4f       	sbci	r27, 0xFC	; 252
     b92:	8a e0       	ldi	r24, 0x0A	; 10
     b94:	fe 01       	movw	r30, r28
     b96:	31 96       	adiw	r30, 0x01	; 1
     b98:	01 90       	ld	r0, Z+
     b9a:	0d 92       	st	X+, r0
     b9c:	8a 95       	dec	r24
     b9e:	e1 f7       	brne	.-8      	; 0xb98 <addEntryToTimerQueue+0x17e>
     ba0:	80 91 00 01 	lds	r24, 0x0100
     ba4:	88 23       	and	r24, r24
     ba6:	51 f1       	breq	.+84     	; 0xbfc <addEntryToTimerQueue+0x1e2>
     ba8:	f8 01       	movw	r30, r16
     baa:	ee 0f       	add	r30, r30
     bac:	ff 1f       	adc	r31, r31
     bae:	00 0f       	add	r16, r16
     bb0:	11 1f       	adc	r17, r17
     bb2:	00 0f       	add	r16, r16
     bb4:	11 1f       	adc	r17, r17
     bb6:	00 0f       	add	r16, r16
     bb8:	11 1f       	adc	r17, r17
     bba:	e0 0f       	add	r30, r16
     bbc:	f1 1f       	adc	r31, r17
     bbe:	e7 54       	subi	r30, 0x47	; 71
     bc0:	fc 4f       	sbci	r31, 0xFC	; 252
     bc2:	80 81       	ld	r24, Z
     bc4:	91 81       	ldd	r25, Z+1	; 0x01
     bc6:	a2 81       	ldd	r26, Z+2	; 0x02
     bc8:	b3 81       	ldd	r27, Z+3	; 0x03
     bca:	bf 93       	push	r27
     bcc:	af 93       	push	r26
     bce:	9f 93       	push	r25
     bd0:	8f 93       	push	r24
     bd2:	1f 92       	push	r1
     bd4:	3f 93       	push	r19
     bd6:	8a e5       	ldi	r24, 0x5A	; 90
     bd8:	92 e0       	ldi	r25, 0x02	; 2
     bda:	9f 93       	push	r25
     bdc:	8f 93       	push	r24
     bde:	8e 01       	movw	r16, r28
     be0:	05 5f       	subi	r16, 0xF5	; 245
     be2:	1f 4f       	sbci	r17, 0xFF	; 255
     be4:	1f 93       	push	r17
     be6:	0f 93       	push	r16
     be8:	0e 94 2d 0a 	call	0x145a	; 0x145a <sprintf>
     bec:	c8 01       	movw	r24, r16
     bee:	0e 94 31 01 	call	0x262	; 0x262 <BTTransmitStr>
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	f8 94       	cli
     bf6:	de bf       	out	0x3e, r29	; 62
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	cd bf       	out	0x3d, r28	; 61
     bfc:	78 94       	sei
     bfe:	c2 59       	subi	r28, 0x92	; 146
     c00:	df 4f       	sbci	r29, 0xFF	; 255
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	de bf       	out	0x3e, r29	; 62
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	cd bf       	out	0x3d, r28	; 61
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	1f 91       	pop	r17
     c12:	0f 91       	pop	r16
     c14:	ff 90       	pop	r15
     c16:	ef 90       	pop	r14
     c18:	df 90       	pop	r13
     c1a:	08 95       	ret

00000c1c <removeEntryFromTimerQueue>:
     c1c:	bf 92       	push	r11
     c1e:	cf 92       	push	r12
     c20:	df 92       	push	r13
     c22:	ef 92       	push	r14
     c24:	ff 92       	push	r15
     c26:	0f 93       	push	r16
     c28:	1f 93       	push	r17
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
     c32:	c4 56       	subi	r28, 0x64	; 100
     c34:	d1 09       	sbc	r29, r1
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	f8 94       	cli
     c3a:	de bf       	out	0x3e, r29	; 62
     c3c:	0f be       	out	0x3f, r0	; 63
     c3e:	cd bf       	out	0x3d, r28	; 61
     c40:	8c 01       	movw	r16, r24
     c42:	80 91 01 01 	lds	r24, 0x0101
     c46:	88 23       	and	r24, r24
     c48:	09 f4       	brne	.+2      	; 0xc4c <removeEntryFromTimerQueue+0x30>
     c4a:	52 c0       	rjmp	.+164    	; 0xcf0 <removeEntryFromTimerQueue+0xd4>
     c4c:	b1 2c       	mov	r11, r1
     c4e:	0f 2e       	mov	r0, r31
     c50:	ff e8       	ldi	r31, 0x8F	; 143
     c52:	cf 2e       	mov	r12, r31
     c54:	f2 e0       	ldi	r31, 0x02	; 2
     c56:	df 2e       	mov	r13, r31
     c58:	f0 2d       	mov	r31, r0
     c5a:	ce 01       	movw	r24, r28
     c5c:	01 96       	adiw	r24, 0x01	; 1
     c5e:	7c 01       	movw	r14, r24
     c60:	2b 2d       	mov	r18, r11
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	f9 01       	movw	r30, r18
     c66:	ee 0f       	add	r30, r30
     c68:	ff 1f       	adc	r31, r31
     c6a:	c9 01       	movw	r24, r18
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	88 0f       	add	r24, r24
     c76:	99 1f       	adc	r25, r25
     c78:	e8 0f       	add	r30, r24
     c7a:	f9 1f       	adc	r31, r25
     c7c:	e7 54       	subi	r30, 0x47	; 71
     c7e:	fc 4f       	sbci	r31, 0xFC	; 252
     c80:	40 85       	ldd	r20, Z+8	; 0x08
     c82:	51 85       	ldd	r21, Z+9	; 0x09
     c84:	40 17       	cp	r20, r16
     c86:	51 07       	cpc	r21, r17
     c88:	69 f5       	brne	.+90     	; 0xce4 <removeEntryFromTimerQueue+0xc8>
     c8a:	c9 01       	movw	r24, r18
     c8c:	88 0f       	add	r24, r24
     c8e:	99 1f       	adc	r25, r25
     c90:	88 0f       	add	r24, r24
     c92:	99 1f       	adc	r25, r25
     c94:	88 0f       	add	r24, r24
     c96:	99 1f       	adc	r25, r25
     c98:	f9 01       	movw	r30, r18
     c9a:	ee 0f       	add	r30, r30
     c9c:	ff 1f       	adc	r31, r31
     c9e:	e8 0f       	add	r30, r24
     ca0:	f9 1f       	adc	r31, r25
     ca2:	e7 54       	subi	r30, 0x47	; 71
     ca4:	fc 4f       	sbci	r31, 0xFC	; 252
     ca6:	11 86       	std	Z+9, r1	; 0x09
     ca8:	10 86       	std	Z+8, r1	; 0x08
     caa:	10 82       	st	Z, r1
     cac:	11 82       	std	Z+1, r1	; 0x01
     cae:	12 82       	std	Z+2, r1	; 0x02
     cb0:	13 82       	std	Z+3, r1	; 0x03
     cb2:	14 82       	std	Z+4, r1	; 0x04
     cb4:	15 82       	std	Z+5, r1	; 0x05
     cb6:	16 82       	std	Z+6, r1	; 0x06
     cb8:	17 82       	std	Z+7, r1	; 0x07
     cba:	80 91 00 01 	lds	r24, 0x0100
     cbe:	88 23       	and	r24, r24
     cc0:	89 f0       	breq	.+34     	; 0xce4 <removeEntryFromTimerQueue+0xc8>
     cc2:	3f 93       	push	r19
     cc4:	bf 92       	push	r11
     cc6:	df 92       	push	r13
     cc8:	cf 92       	push	r12
     cca:	ff 92       	push	r15
     ccc:	ef 92       	push	r14
     cce:	0e 94 2d 0a 	call	0x145a	; 0x145a <sprintf>
     cd2:	c7 01       	movw	r24, r14
     cd4:	0e 94 31 01 	call	0x262	; 0x262 <BTTransmitStr>
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	b3 94       	inc	r11
     ce6:	80 91 01 01 	lds	r24, 0x0101
     cea:	b8 16       	cp	r11, r24
     cec:	08 f4       	brcc	.+2      	; 0xcf0 <removeEntryFromTimerQueue+0xd4>
     cee:	b8 cf       	rjmp	.-144    	; 0xc60 <removeEntryFromTimerQueue+0x44>
     cf0:	cc 59       	subi	r28, 0x9C	; 156
     cf2:	df 4f       	sbci	r29, 0xFF	; 255
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	cd bf       	out	0x3d, r28	; 61
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	1f 91       	pop	r17
     d04:	0f 91       	pop	r16
     d06:	ff 90       	pop	r15
     d08:	ef 90       	pop	r14
     d0a:	df 90       	pop	r13
     d0c:	cf 90       	pop	r12
     d0e:	bf 90       	pop	r11
     d10:	08 95       	ret

00000d12 <existsEntryInTimerQueue>:
     d12:	60 91 01 01 	lds	r22, 0x0101
     d16:	66 23       	and	r22, r22
     d18:	19 f1       	breq	.+70     	; 0xd60 <existsEntryInTimerQueue+0x4e>
     d1a:	20 91 c1 03 	lds	r18, 0x03C1
     d1e:	30 91 c2 03 	lds	r19, 0x03C2
     d22:	28 17       	cp	r18, r24
     d24:	39 07       	cpc	r19, r25
     d26:	f1 f0       	breq	.+60     	; 0xd64 <existsEntryInTimerQueue+0x52>
     d28:	21 e0       	ldi	r18, 0x01	; 1
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	15 c0       	rjmp	.+42     	; 0xd58 <existsEntryInTimerQueue+0x46>
     d2e:	f9 01       	movw	r30, r18
     d30:	ee 0f       	add	r30, r30
     d32:	ff 1f       	adc	r31, r31
     d34:	a9 01       	movw	r20, r18
     d36:	44 0f       	add	r20, r20
     d38:	55 1f       	adc	r21, r21
     d3a:	44 0f       	add	r20, r20
     d3c:	55 1f       	adc	r21, r21
     d3e:	44 0f       	add	r20, r20
     d40:	55 1f       	adc	r21, r21
     d42:	e4 0f       	add	r30, r20
     d44:	f5 1f       	adc	r31, r21
     d46:	e7 54       	subi	r30, 0x47	; 71
     d48:	fc 4f       	sbci	r31, 0xFC	; 252
     d4a:	40 85       	ldd	r20, Z+8	; 0x08
     d4c:	51 85       	ldd	r21, Z+9	; 0x09
     d4e:	2f 5f       	subi	r18, 0xFF	; 255
     d50:	3f 4f       	sbci	r19, 0xFF	; 255
     d52:	48 17       	cp	r20, r24
     d54:	59 07       	cpc	r21, r25
     d56:	41 f0       	breq	.+16     	; 0xd68 <existsEntryInTimerQueue+0x56>
     d58:	26 17       	cp	r18, r22
     d5a:	48 f3       	brcs	.-46     	; 0xd2e <existsEntryInTimerQueue+0x1c>
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	08 95       	ret
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	08 95       	ret
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	08 95       	ret
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	08 95       	ret

00000d6c <timePassed>:
     d6c:	8f 92       	push	r8
     d6e:	9f 92       	push	r9
     d70:	af 92       	push	r10
     d72:	bf 92       	push	r11
     d74:	df 92       	push	r13
     d76:	ef 92       	push	r14
     d78:	ff 92       	push	r15
     d7a:	0f 93       	push	r16
     d7c:	1f 93       	push	r17
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
     d82:	10 91 01 01 	lds	r17, 0x0101
     d86:	11 23       	and	r17, r17
     d88:	09 f4       	brne	.+2      	; 0xd8c <timePassed+0x20>
     d8a:	7b c0       	rjmp	.+246    	; 0xe82 <timePassed+0x116>
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	d1 2c       	mov	r13, r1
     d92:	e1 2c       	mov	r14, r1
     d94:	f1 2c       	mov	r15, r1
     d96:	00 e0       	ldi	r16, 0x00	; 0
     d98:	f9 01       	movw	r30, r18
     d9a:	a9 01       	movw	r20, r18
     d9c:	44 0f       	add	r20, r20
     d9e:	55 1f       	adc	r21, r21
     da0:	44 0f       	add	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	44 0f       	add	r20, r20
     da6:	55 1f       	adc	r21, r21
     da8:	d9 01       	movw	r26, r18
     daa:	aa 0f       	add	r26, r26
     dac:	bb 1f       	adc	r27, r27
     dae:	a4 0f       	add	r26, r20
     db0:	b5 1f       	adc	r27, r21
     db2:	a7 54       	subi	r26, 0x47	; 71
     db4:	bc 4f       	sbci	r27, 0xFC	; 252
     db6:	18 96       	adiw	r26, 0x08	; 8
     db8:	4d 91       	ld	r20, X+
     dba:	5c 91       	ld	r21, X
     dbc:	19 97       	sbiw	r26, 0x09	; 9
     dbe:	45 2b       	or	r20, r21
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <timePassed+0x58>
     dc2:	5a c0       	rjmp	.+180    	; 0xe78 <timePassed+0x10c>
     dc4:	a9 01       	movw	r20, r18
     dc6:	44 0f       	add	r20, r20
     dc8:	55 1f       	adc	r21, r21
     dca:	44 0f       	add	r20, r20
     dcc:	55 1f       	adc	r21, r21
     dce:	44 0f       	add	r20, r20
     dd0:	55 1f       	adc	r21, r21
     dd2:	d9 01       	movw	r26, r18
     dd4:	aa 0f       	add	r26, r26
     dd6:	bb 1f       	adc	r27, r27
     dd8:	a4 0f       	add	r26, r20
     dda:	b5 1f       	adc	r27, r21
     ddc:	a7 54       	subi	r26, 0x47	; 71
     dde:	bc 4f       	sbci	r27, 0xFC	; 252
     de0:	8d 90       	ld	r8, X+
     de2:	9d 90       	ld	r9, X+
     de4:	ad 90       	ld	r10, X+
     de6:	bc 90       	ld	r11, X
     de8:	89 28       	or	r8, r9
     dea:	8a 28       	or	r8, r10
     dec:	8b 28       	or	r8, r11
     dee:	09 f4       	brne	.+2      	; 0xdf2 <timePassed+0x86>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <timePassed+0x10c>
     df2:	a9 01       	movw	r20, r18
     df4:	44 0f       	add	r20, r20
     df6:	55 1f       	adc	r21, r21
     df8:	44 0f       	add	r20, r20
     dfa:	55 1f       	adc	r21, r21
     dfc:	44 0f       	add	r20, r20
     dfe:	55 1f       	adc	r21, r21
     e00:	d9 01       	movw	r26, r18
     e02:	aa 0f       	add	r26, r26
     e04:	bb 1f       	adc	r27, r27
     e06:	a4 0f       	add	r26, r20
     e08:	b5 1f       	adc	r27, r21
     e0a:	a7 54       	subi	r26, 0x47	; 71
     e0c:	bc 4f       	sbci	r27, 0xFC	; 252
     e0e:	8d 90       	ld	r8, X+
     e10:	9d 90       	ld	r9, X+
     e12:	ad 90       	ld	r10, X+
     e14:	bc 90       	ld	r11, X
     e16:	68 15       	cp	r22, r8
     e18:	79 05       	cpc	r23, r9
     e1a:	8a 05       	cpc	r24, r10
     e1c:	9b 05       	cpc	r25, r11
     e1e:	b8 f4       	brcc	.+46     	; 0xe4e <timePassed+0xe2>
     e20:	a9 01       	movw	r20, r18
     e22:	44 0f       	add	r20, r20
     e24:	55 1f       	adc	r21, r21
     e26:	44 0f       	add	r20, r20
     e28:	55 1f       	adc	r21, r21
     e2a:	44 0f       	add	r20, r20
     e2c:	55 1f       	adc	r21, r21
     e2e:	d9 01       	movw	r26, r18
     e30:	aa 0f       	add	r26, r26
     e32:	bb 1f       	adc	r27, r27
     e34:	a4 0f       	add	r26, r20
     e36:	b5 1f       	adc	r27, r21
     e38:	a7 54       	subi	r26, 0x47	; 71
     e3a:	bc 4f       	sbci	r27, 0xFC	; 252
     e3c:	8d 90       	ld	r8, X+
     e3e:	9d 90       	ld	r9, X+
     e40:	ad 90       	ld	r10, X+
     e42:	bc 90       	ld	r11, X
     e44:	86 1a       	sub	r8, r22
     e46:	97 0a       	sbc	r9, r23
     e48:	a8 0a       	sbc	r10, r24
     e4a:	b9 0a       	sbc	r11, r25
     e4c:	04 c0       	rjmp	.+8      	; 0xe56 <timePassed+0xea>
     e4e:	8d 2c       	mov	r8, r13
     e50:	9e 2c       	mov	r9, r14
     e52:	af 2c       	mov	r10, r15
     e54:	b0 2e       	mov	r11, r16
     e56:	ef 01       	movw	r28, r30
     e58:	cc 0f       	add	r28, r28
     e5a:	dd 1f       	adc	r29, r29
     e5c:	ee 0f       	add	r30, r30
     e5e:	ff 1f       	adc	r31, r31
     e60:	ee 0f       	add	r30, r30
     e62:	ff 1f       	adc	r31, r31
     e64:	ee 0f       	add	r30, r30
     e66:	ff 1f       	adc	r31, r31
     e68:	ec 0f       	add	r30, r28
     e6a:	fd 1f       	adc	r31, r29
     e6c:	e7 54       	subi	r30, 0x47	; 71
     e6e:	fc 4f       	sbci	r31, 0xFC	; 252
     e70:	80 82       	st	Z, r8
     e72:	91 82       	std	Z+1, r9	; 0x01
     e74:	a2 82       	std	Z+2, r10	; 0x02
     e76:	b3 82       	std	Z+3, r11	; 0x03
     e78:	2f 5f       	subi	r18, 0xFF	; 255
     e7a:	3f 4f       	sbci	r19, 0xFF	; 255
     e7c:	21 17       	cp	r18, r17
     e7e:	08 f4       	brcc	.+2      	; 0xe82 <timePassed+0x116>
     e80:	8b cf       	rjmp	.-234    	; 0xd98 <timePassed+0x2c>
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	1f 91       	pop	r17
     e88:	0f 91       	pop	r16
     e8a:	ff 90       	pop	r15
     e8c:	ef 90       	pop	r14
     e8e:	df 90       	pop	r13
     e90:	bf 90       	pop	r11
     e92:	af 90       	pop	r10
     e94:	9f 90       	pop	r9
     e96:	8f 90       	pop	r8
     e98:	08 95       	ret

00000e9a <checkTimeQueue>:
     e9a:	ef 92       	push	r14
     e9c:	ff 92       	push	r15
     e9e:	1f 93       	push	r17
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	f8 94       	cli
     ea6:	80 91 01 01 	lds	r24, 0x0101
     eaa:	88 23       	and	r24, r24
     eac:	09 f4       	brne	.+2      	; 0xeb0 <checkTimeQueue+0x16>
     eae:	57 c0       	rjmp	.+174    	; 0xf5e <checkTimeQueue+0xc4>
     eb0:	10 e0       	ldi	r17, 0x00	; 0
     eb2:	c1 2f       	mov	r28, r17
     eb4:	d0 e0       	ldi	r29, 0x00	; 0
     eb6:	fe 01       	movw	r30, r28
     eb8:	ee 0f       	add	r30, r30
     eba:	ff 1f       	adc	r31, r31
     ebc:	ce 01       	movw	r24, r28
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	e8 0f       	add	r30, r24
     ecc:	f9 1f       	adc	r31, r25
     ece:	e7 54       	subi	r30, 0x47	; 71
     ed0:	fc 4f       	sbci	r31, 0xFC	; 252
     ed2:	80 85       	ldd	r24, Z+8	; 0x08
     ed4:	91 85       	ldd	r25, Z+9	; 0x09
     ed6:	89 2b       	or	r24, r25
     ed8:	e1 f1       	breq	.+120    	; 0xf52 <checkTimeQueue+0xb8>
     eda:	ce 01       	movw	r24, r28
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	fe 01       	movw	r30, r28
     eea:	ee 0f       	add	r30, r30
     eec:	ff 1f       	adc	r31, r31
     eee:	e8 0f       	add	r30, r24
     ef0:	f9 1f       	adc	r31, r25
     ef2:	e7 54       	subi	r30, 0x47	; 71
     ef4:	fc 4f       	sbci	r31, 0xFC	; 252
     ef6:	80 81       	ld	r24, Z
     ef8:	91 81       	ldd	r25, Z+1	; 0x01
     efa:	a2 81       	ldd	r26, Z+2	; 0x02
     efc:	b3 81       	ldd	r27, Z+3	; 0x03
     efe:	89 2b       	or	r24, r25
     f00:	8a 2b       	or	r24, r26
     f02:	8b 2b       	or	r24, r27
     f04:	31 f5       	brne	.+76     	; 0xf52 <checkTimeQueue+0xb8>
     f06:	7f 01       	movw	r14, r30
     f08:	00 84       	ldd	r0, Z+8	; 0x08
     f0a:	f1 85       	ldd	r31, Z+9	; 0x09
     f0c:	e0 2d       	mov	r30, r0
     f0e:	09 95       	icall
     f10:	f7 01       	movw	r30, r14
     f12:	84 81       	ldd	r24, Z+4	; 0x04
     f14:	95 81       	ldd	r25, Z+5	; 0x05
     f16:	a6 81       	ldd	r26, Z+6	; 0x06
     f18:	b7 81       	ldd	r27, Z+7	; 0x07
     f1a:	89 2b       	or	r24, r25
     f1c:	8a 2b       	or	r24, r26
     f1e:	8b 2b       	or	r24, r27
     f20:	49 f0       	breq	.+18     	; 0xf34 <checkTimeQueue+0x9a>
     f22:	84 81       	ldd	r24, Z+4	; 0x04
     f24:	95 81       	ldd	r25, Z+5	; 0x05
     f26:	a6 81       	ldd	r26, Z+6	; 0x06
     f28:	b7 81       	ldd	r27, Z+7	; 0x07
     f2a:	80 83       	st	Z, r24
     f2c:	91 83       	std	Z+1, r25	; 0x01
     f2e:	a2 83       	std	Z+2, r26	; 0x02
     f30:	b3 83       	std	Z+3, r27	; 0x03
     f32:	0f c0       	rjmp	.+30     	; 0xf52 <checkTimeQueue+0xb8>
     f34:	ce 01       	movw	r24, r28
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	cc 0f       	add	r28, r28
     f3c:	dd 1f       	adc	r29, r29
     f3e:	cc 0f       	add	r28, r28
     f40:	dd 1f       	adc	r29, r29
     f42:	cc 0f       	add	r28, r28
     f44:	dd 1f       	adc	r29, r29
     f46:	c8 0f       	add	r28, r24
     f48:	d9 1f       	adc	r29, r25
     f4a:	c7 54       	subi	r28, 0x47	; 71
     f4c:	dc 4f       	sbci	r29, 0xFC	; 252
     f4e:	19 86       	std	Y+9, r1	; 0x09
     f50:	18 86       	std	Y+8, r1	; 0x08
     f52:	1f 5f       	subi	r17, 0xFF	; 255
     f54:	80 91 01 01 	lds	r24, 0x0101
     f58:	18 17       	cp	r17, r24
     f5a:	08 f4       	brcc	.+2      	; 0xf5e <checkTimeQueue+0xc4>
     f5c:	aa cf       	rjmp	.-172    	; 0xeb2 <checkTimeQueue+0x18>
     f5e:	78 94       	sei
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	1f 91       	pop	r17
     f66:	ff 90       	pop	r15
     f68:	ef 90       	pop	r14
     f6a:	08 95       	ret

00000f6c <resetTimerQueue>:
     f6c:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <initTimeQueue>
     f70:	08 95       	ret

00000f72 <blinkLedD6_v1>:
#include "Car/Engines.h"
#include "PID/PID1.h"

volatile uint8_t e_stins = 0;
void blinkLedD6_v1(){
	if(!e_stins)
     f72:	80 91 73 03 	lds	r24, 0x0373
     f76:	81 11       	cpse	r24, r1
     f78:	04 c0       	rjmp	.+8      	; 0xf82 <blinkLedD6_v1+0x10>
		PORTD ^= 1<<PIND6;
     f7a:	9b b1       	in	r25, 0x0b	; 11
     f7c:	80 e4       	ldi	r24, 0x40	; 64
     f7e:	89 27       	eor	r24, r25
     f80:	8b b9       	out	0x0b, r24	; 11
     f82:	08 95       	ret

00000f84 <functieRotireStanga>:
}

uint8_t stare = Start;
volatile uint8_t iesire=0;
extern volatile uint8_t debugging;
void functieRotireStanga(void){
     f84:	cf 92       	push	r12
     f86:	df 92       	push	r13
     f88:	ef 92       	push	r14
     f8a:	ff 92       	push	r15
     f8c:	0f 93       	push	r16
     f8e:	1f 93       	push	r17
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	c4 56       	subi	r28, 0x64	; 100
     f9a:	d1 09       	sbc	r29, r1
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	cd bf       	out	0x3d, r28	; 61
	uint16_t senzorFata = getValueOfSensor(0);
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <getValueOfSensor>
     fac:	7c 01       	movw	r14, r24
	debugging = 0;
     fae:	10 92 00 01 	sts	0x0100, r1
	uint16_t senzorDreapta = getValueOfSensor(1);
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <getValueOfSensor>
     fb8:	8c 01       	movw	r16, r24
	
	char str[100];
	sprintf(str, "senzorFata=%d  senzorDreapta=%d  stare=%d", senzorFata, senzorDreapta, stare);
     fba:	80 91 6f 03 	lds	r24, 0x036F
     fbe:	1f 92       	push	r1
     fc0:	8f 93       	push	r24
     fc2:	1f 93       	push	r17
     fc4:	0f 93       	push	r16
     fc6:	ff 92       	push	r15
     fc8:	ef 92       	push	r14
     fca:	87 eb       	ldi	r24, 0xB7	; 183
     fcc:	92 e0       	ldi	r25, 0x02	; 2
     fce:	9f 93       	push	r25
     fd0:	8f 93       	push	r24
     fd2:	ce 01       	movw	r24, r28
     fd4:	01 96       	adiw	r24, 0x01	; 1
     fd6:	6c 01       	movw	r12, r24
     fd8:	df 92       	push	r13
     fda:	8f 93       	push	r24
     fdc:	0e 94 2d 0a 	call	0x145a	; 0x145a <sprintf>
	BTTransmitStr(str);
     fe0:	c6 01       	movw	r24, r12
     fe2:	0e 94 31 01 	call	0x262	; 0x262 <BTTransmitStr>
	
	switch(stare){
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	f8 94       	cli
     fea:	de bf       	out	0x3e, r29	; 62
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	cd bf       	out	0x3d, r28	; 61
     ff0:	40 91 6f 03 	lds	r20, 0x036F
     ff4:	50 e0       	ldi	r21, 0x00	; 0
     ff6:	49 30       	cpi	r20, 0x09	; 9
     ff8:	51 05       	cpc	r21, r1
     ffa:	08 f0       	brcs	.+2      	; 0xffe <functieRotireStanga+0x7a>
     ffc:	9d c0       	rjmp	.+314    	; 0x1138 <__stack+0x39>
     ffe:	fa 01       	movw	r30, r20
    1000:	ee 5a       	subi	r30, 0xAE	; 174
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <__tablejump2__>
		case intrareInParcare:
			if(senzorFata>300){
    1008:	9d e2       	ldi	r25, 0x2D	; 45
    100a:	e9 16       	cp	r14, r25
    100c:	91 e0       	ldi	r25, 0x01	; 1
    100e:	f9 06       	cpc	r15, r25
    1010:	08 f4       	brcc	.+2      	; 0x1014 <functieRotireStanga+0x90>
    1012:	92 c0       	rjmp	.+292    	; 0x1138 <__stack+0x39>
				rotirePeLoc(60, 250, RightEngines);
    1014:	40 e0       	ldi	r20, 0x00	; 0
    1016:	6a ef       	ldi	r22, 0xFA	; 250
    1018:	8c e3       	ldi	r24, 0x3C	; 60
    101a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <rotirePeLoc>
				stare=rotireLoc;
    101e:	82 e0       	ldi	r24, 0x02	; 2
    1020:	80 93 6f 03 	sts	0x036F, r24
    1024:	89 c0       	rjmp	.+274    	; 0x1138 <__stack+0x39>
			}
		break;
		case Start:
			goFront(60, 200);
    1026:	68 ec       	ldi	r22, 0xC8	; 200
    1028:	8c e3       	ldi	r24, 0x3C	; 60
    102a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <goFront>
			stare = intrareInParcare;
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	80 93 6f 03 	sts	0x036F, r24
			BTTransmitStr("Sa incepem :D");
    1034:	81 ee       	ldi	r24, 0xE1	; 225
    1036:	92 e0       	ldi	r25, 0x02	; 2
    1038:	0e 94 31 01 	call	0x262	; 0x262 <BTTransmitStr>
			
		break;
    103c:	7d c0       	rjmp	.+250    	; 0x1138 <__stack+0x39>
		case mersFata: // merge in fata
			if(senzorFata > 300){
    103e:	8d e2       	ldi	r24, 0x2D	; 45
    1040:	e8 16       	cp	r14, r24
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	f8 06       	cpc	r15, r24
    1046:	40 f0       	brcs	.+16     	; 0x1058 <functieRotireStanga+0xd4>
				stare = rotireLoc;
    1048:	82 e0       	ldi	r24, 0x02	; 2
    104a:	80 93 6f 03 	sts	0x036F, r24
				//goFrontLeft(60, 250);
				rotirePeLoc(60, 250, LeftEngines);
    104e:	41 e0       	ldi	r20, 0x01	; 1
    1050:	6a ef       	ldi	r22, 0xFA	; 250
    1052:	8c e3       	ldi	r24, 0x3C	; 60
    1054:	0e 94 58 03 	call	0x6b0	; 0x6b0 <rotirePeLoc>
			}
			if(senzorDreapta<160){
    1058:	00 3a       	cpi	r16, 0xA0	; 160
    105a:	11 05       	cpc	r17, r1
    105c:	a8 f4       	brcc	.+42     	; 0x1088 <functieRotireStanga+0x104>
				iesire--;
    105e:	80 91 6e 03 	lds	r24, 0x036E
    1062:	81 50       	subi	r24, 0x01	; 1
    1064:	80 93 6e 03 	sts	0x036E, r24
				if(iesire==0){
    1068:	80 91 6e 03 	lds	r24, 0x036E
    106c:	81 11       	cpse	r24, r1
    106e:	09 c0       	rjmp	.+18     	; 0x1082 <functieRotireStanga+0xfe>
					rotirePeLoc(60,250, RightEngines);
    1070:	40 e0       	ldi	r20, 0x00	; 0
    1072:	6a ef       	ldi	r22, 0xFA	; 250
    1074:	8c e3       	ldi	r24, 0x3C	; 60
    1076:	0e 94 58 03 	call	0x6b0	; 0x6b0 <rotirePeLoc>
					stare= poarta;}
    107a:	86 e0       	ldi	r24, 0x06	; 6
    107c:	80 93 6f 03 	sts	0x036F, r24
    1080:	03 c0       	rjmp	.+6      	; 0x1088 <functieRotireStanga+0x104>
				else stare=nuPoarta;
    1082:	88 e0       	ldi	r24, 0x08	; 8
    1084:	80 93 6f 03 	sts	0x036F, r24
				
			}
			if(senzorDreapta > 400){
    1088:	01 39       	cpi	r16, 0x91	; 145
    108a:	91 e0       	ldi	r25, 0x01	; 1
    108c:	19 07       	cpc	r17, r25
    108e:	38 f0       	brcs	.+14     	; 0x109e <functieRotireStanga+0x11a>
				stare = rotireMersSt;
    1090:	84 e0       	ldi	r24, 0x04	; 4
    1092:	80 93 6f 03 	sts	0x036F, r24
				goFrontLeft(60, 200);
    1096:	68 ec       	ldi	r22, 0xC8	; 200
    1098:	8c e3       	ldi	r24, 0x3C	; 60
    109a:	0e 94 be 02 	call	0x57c	; 0x57c <goFrontLeft>
			}		
			if(senzorDreapta<200 && senzorDreapta>170){
    109e:	0b 5a       	subi	r16, 0xAB	; 171
    10a0:	11 09       	sbc	r17, r1
    10a2:	0d 31       	cpi	r16, 0x1D	; 29
    10a4:	11 05       	cpc	r17, r1
    10a6:	08 f0       	brcs	.+2      	; 0x10aa <functieRotireStanga+0x126>
    10a8:	47 c0       	rjmp	.+142    	; 0x1138 <__stack+0x39>
				stare= rotireMersDR;
    10aa:	83 e0       	ldi	r24, 0x03	; 3
    10ac:	80 93 6f 03 	sts	0x036F, r24
				goFrontRight(60, 200);
    10b0:	68 ec       	ldi	r22, 0xC8	; 200
    10b2:	8c e3       	ldi	r24, 0x3C	; 60
    10b4:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <goFrontRight>
    10b8:	3f c0       	rjmp	.+126    	; 0x1138 <__stack+0x39>
			}
					
		break;
		case poarta:
			if(senzorFata <180){
    10ba:	84 eb       	ldi	r24, 0xB4	; 180
    10bc:	e8 16       	cp	r14, r24
    10be:	f1 04       	cpc	r15, r1
    10c0:	d8 f5       	brcc	.+118    	; 0x1138 <__stack+0x39>
				goFront(60,200);
    10c2:	68 ec       	ldi	r22, 0xC8	; 200
    10c4:	8c e3       	ldi	r24, 0x3C	; 60
    10c6:	0e 94 6e 02 	call	0x4dc	; 0x4dc <goFront>
				stare=bv;
    10ca:	87 e0       	ldi	r24, 0x07	; 7
    10cc:	80 93 6f 03 	sts	0x036F, r24
    10d0:	33 c0       	rjmp	.+102    	; 0x1138 <__stack+0x39>
			}
		break;	
		case bv:
			{
				stopEngines();
    10d2:	0e 94 17 02 	call	0x42e	; 0x42e <stopEngines>
				removeEntryFromTimerQueue(&functieRotireStanga);
    10d6:	82 ec       	ldi	r24, 0xC2	; 194
    10d8:	97 e0       	ldi	r25, 0x07	; 7
    10da:	0e 94 0e 06 	call	0xc1c	; 0xc1c <removeEntryFromTimerQueue>
			}
		break;		
    10de:	2c c0       	rjmp	.+88     	; 0x1138 <__stack+0x39>
		case rotireMersSt:
			if(senzorDreapta < 300){
    10e0:	0c 32       	cpi	r16, 0x2C	; 44
    10e2:	11 40       	sbci	r17, 0x01	; 1
    10e4:	48 f5       	brcc	.+82     	; 0x1138 <__stack+0x39>
				stare = mersFata;
    10e6:	85 e0       	ldi	r24, 0x05	; 5
    10e8:	80 93 6f 03 	sts	0x036F, r24
				goFront(60, 200);
    10ec:	68 ec       	ldi	r22, 0xC8	; 200
    10ee:	8c e3       	ldi	r24, 0x3C	; 60
    10f0:	0e 94 6e 02 	call	0x4dc	; 0x4dc <goFront>
    10f4:	21 c0       	rjmp	.+66     	; 0x1138 <__stack+0x39>
			}		
		break;
		case rotireMersDR:
			if(senzorDreapta >300){
    10f6:	0d 32       	cpi	r16, 0x2D	; 45
    10f8:	11 40       	sbci	r17, 0x01	; 1
    10fa:	f0 f0       	brcs	.+60     	; 0x1138 <__stack+0x39>
				stare =mersFata;
    10fc:	85 e0       	ldi	r24, 0x05	; 5
    10fe:	80 93 6f 03 	sts	0x036F, r24
				goFront(60, 200);
    1102:	68 ec       	ldi	r22, 0xC8	; 200
    1104:	8c e3       	ldi	r24, 0x3C	; 60
    1106:	0e 94 6e 02 	call	0x4dc	; 0x4dc <goFront>
    110a:	16 c0       	rjmp	.+44     	; 0x1138 <__stack+0x39>
			}
		break;
		case rotireLoc:
			if(senzorFata < 180){
    110c:	94 eb       	ldi	r25, 0xB4	; 180
    110e:	e9 16       	cp	r14, r25
    1110:	f1 04       	cpc	r15, r1
    1112:	90 f4       	brcc	.+36     	; 0x1138 <__stack+0x39>
				goFront(60, 200);
    1114:	68 ec       	ldi	r22, 0xC8	; 200
    1116:	8c e3       	ldi	r24, 0x3C	; 60
    1118:	0e 94 6e 02 	call	0x4dc	; 0x4dc <goFront>
				stare=mersFata;
    111c:	85 e0       	ldi	r24, 0x05	; 5
    111e:	80 93 6f 03 	sts	0x036F, r24
    1122:	0a c0       	rjmp	.+20     	; 0x1138 <__stack+0x39>
				
			}
		break;
		case nuPoarta:
			if(senzorDreapta>200){
    1124:	09 3c       	cpi	r16, 0xC9	; 201
    1126:	11 05       	cpc	r17, r1
    1128:	38 f0       	brcs	.+14     	; 0x1138 <__stack+0x39>
				stare=mersFata;
    112a:	85 e0       	ldi	r24, 0x05	; 5
    112c:	80 93 6f 03 	sts	0x036F, r24
				goFront(60,200);
    1130:	68 ec       	ldi	r22, 0xC8	; 200
    1132:	8c e3       	ldi	r24, 0x3C	; 60
    1134:	0e 94 6e 02 	call	0x4dc	; 0x4dc <goFront>
			}
		break;
	}
	
	debugging = 1;
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	80 93 00 01 	sts	0x0100, r24
	
    113e:	cc 59       	subi	r28, 0x9C	; 156
    1140:	df 4f       	sbci	r29, 0xFF	; 255
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	f8 94       	cli
    1146:	de bf       	out	0x3e, r29	; 62
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	cd bf       	out	0x3d, r28	; 61
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	1f 91       	pop	r17
    1152:	0f 91       	pop	r16
    1154:	ff 90       	pop	r15
    1156:	ef 90       	pop	r14
    1158:	df 90       	pop	r13
    115a:	cf 90       	pop	r12
    115c:	08 95       	ret

0000115e <ledAction>:
void ledAction(char act){
	//char msg[] = "led action:  ";
	//msg[strlen(msg)-1]= act+'0';
	//BTTransmitStr(msg);
	
	switch(act){
    115e:	81 30       	cpi	r24, 0x01	; 1
    1160:	71 f0       	breq	.+28     	; 0x117e <ledAction+0x20>
    1162:	18 f0       	brcs	.+6      	; 0x116a <ledAction+0xc>
    1164:	82 30       	cpi	r24, 0x02	; 2
    1166:	a9 f0       	breq	.+42     	; 0x1192 <ledAction+0x34>
    1168:	08 95       	ret
		case 0:
			removeEntryFromTimerQueue(&blinkLedD6_v1);
    116a:	89 eb       	ldi	r24, 0xB9	; 185
    116c:	97 e0       	ldi	r25, 0x07	; 7
    116e:	0e 94 0e 06 	call	0xc1c	; 0xc1c <removeEntryFromTimerQueue>
			PORTD &=~ (1<<PIND6);
    1172:	5e 98       	cbi	0x0b, 6	; 11
			//shouldBlink = 0;
			BTTransmitStr("ledul a fost stins.");
    1174:	8f ee       	ldi	r24, 0xEF	; 239
    1176:	92 e0       	ldi	r25, 0x02	; 2
    1178:	0e 94 31 01 	call	0x262	; 0x262 <BTTransmitStr>
			break;
    117c:	08 95       	ret
		case 1:
			removeEntryFromTimerQueue(&blinkLedD6_v1);
    117e:	89 eb       	ldi	r24, 0xB9	; 185
    1180:	97 e0       	ldi	r25, 0x07	; 7
    1182:	0e 94 0e 06 	call	0xc1c	; 0xc1c <removeEntryFromTimerQueue>
			PORTD |= 1<<PIND6;
    1186:	5e 9a       	sbi	0x0b, 6	; 11
			//shouldBlink = 0;
			BTTransmitStr("ledul a fost aprins.");
    1188:	83 e0       	ldi	r24, 0x03	; 3
    118a:	93 e0       	ldi	r25, 0x03	; 3
    118c:	0e 94 31 01 	call	0x262	; 0x262 <BTTransmitStr>
			break;
    1190:	08 95       	ret
		
		case 2:
			addEntryToTimerQueue(&blinkLedD6_v1, (1000UL * 1000UL), Periodic);
    1192:	21 e0       	ldi	r18, 0x01	; 1
    1194:	40 e4       	ldi	r20, 0x40	; 64
    1196:	52 e4       	ldi	r21, 0x42	; 66
    1198:	6f e0       	ldi	r22, 0x0F	; 15
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	89 eb       	ldi	r24, 0xB9	; 185
    119e:	97 e0       	ldi	r25, 0x07	; 7
    11a0:	0e 94 0d 05 	call	0xa1a	; 0xa1a <addEntryToTimerQueue>
			BTTransmitStr("ledul va 'blincari'.");
    11a4:	88 e1       	ldi	r24, 0x18	; 24
    11a6:	93 e0       	ldi	r25, 0x03	; 3
    11a8:	0e 94 31 01 	call	0x262	; 0x262 <BTTransmitStr>
    11ac:	08 95       	ret

000011ae <initLeds>:
			break;
	}
}

void initLeds(){	
	DDRD |=1<<PIND6;
    11ae:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |=1<<PIND5;
    11b0:	55 9a       	sbi	0x0a, 5	; 10
    11b2:	08 95       	ret

000011b4 <ReadSensor0>:
}
extern uint32_t time;

void ReadSensor0(){
    11b4:	0f 93       	push	r16
    11b6:	1f 93       	push	r17
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	c6 54       	subi	r28, 0x46	; 70
    11c2:	d1 09       	sbc	r29, r1
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	de bf       	out	0x3e, r29	; 62
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	cd bf       	out	0x3d, r28	; 61
	char msg[70];
	//resetSensorQueue(0);
	uint16_t x = getValueOfSensor(0);
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <getValueOfSensor>
	sprintf(msg, "sensor #0: %d", x);	
    11d4:	9f 93       	push	r25
    11d6:	8f 93       	push	r24
    11d8:	8d e2       	ldi	r24, 0x2D	; 45
    11da:	93 e0       	ldi	r25, 0x03	; 3
    11dc:	9f 93       	push	r25
    11de:	8f 93       	push	r24
    11e0:	8e 01       	movw	r16, r28
    11e2:	0f 5f       	subi	r16, 0xFF	; 255
    11e4:	1f 4f       	sbci	r17, 0xFF	; 255
    11e6:	1f 93       	push	r17
    11e8:	0f 93       	push	r16
    11ea:	0e 94 2d 0a 	call	0x145a	; 0x145a <sprintf>
	BTTransmitStr(msg);
    11ee:	c8 01       	movw	r24, r16
    11f0:	0e 94 31 01 	call	0x262	; 0x262 <BTTransmitStr>
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
}
    1200:	ca 5b       	subi	r28, 0xBA	; 186
    1202:	df 4f       	sbci	r29, 0xFF	; 255
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	1f 91       	pop	r17
    1214:	0f 91       	pop	r16
    1216:	08 95       	ret

00001218 <fctSmechera>:
	sprintf(msg, "t: %lu", time);
	BTTransmitStr(msg);
}
uint8_t started = 0, stopped = 0, reload = 0;
volatile uint32_t lastValues[4];
void fctSmechera(){
    1218:	cf 92       	push	r12
    121a:	df 92       	push	r13
    121c:	ef 92       	push	r14
    121e:	ff 92       	push	r15
    1220:	0f 93       	push	r16
    1222:	1f 93       	push	r17
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
	if(reload){
    1228:	80 91 70 03 	lds	r24, 0x0370
    122c:	88 23       	and	r24, r24
    122e:	39 f0       	breq	.+14     	; 0x123e <fctSmechera+0x26>
		reload = 0;
    1230:	10 92 70 03 	sts	0x0370, r1
		started = stopped = 0;
    1234:	10 92 71 03 	sts	0x0371, r1
    1238:	10 92 72 03 	sts	0x0372, r1
		return;
    123c:	9f c0       	rjmp	.+318    	; 0x137c <fctSmechera+0x164>
	}
	if(!started){
    123e:	80 91 72 03 	lds	r24, 0x0372
    1242:	81 11       	cpse	r24, r1
    1244:	2c c0       	rjmp	.+88     	; 0x129e <fctSmechera+0x86>
		started = 1;
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	80 93 72 03 	sts	0x0372, r24
		lastValues[0] = lastValues[1] = lastValues[2] = lastValues[3] = 0;
    124c:	10 92 8d 04 	sts	0x048D, r1
    1250:	10 92 8e 04 	sts	0x048E, r1
    1254:	10 92 8f 04 	sts	0x048F, r1
    1258:	10 92 90 04 	sts	0x0490, r1
    125c:	10 92 89 04 	sts	0x0489, r1
    1260:	10 92 8a 04 	sts	0x048A, r1
    1264:	10 92 8b 04 	sts	0x048B, r1
    1268:	10 92 8c 04 	sts	0x048C, r1
    126c:	10 92 85 04 	sts	0x0485, r1
    1270:	10 92 86 04 	sts	0x0486, r1
    1274:	10 92 87 04 	sts	0x0487, r1
    1278:	10 92 88 04 	sts	0x0488, r1
    127c:	10 92 81 04 	sts	0x0481, r1
    1280:	10 92 82 04 	sts	0x0482, r1
    1284:	10 92 83 04 	sts	0x0483, r1
    1288:	10 92 84 04 	sts	0x0484, r1
		goFront(60, 175);
    128c:	6f ea       	ldi	r22, 0xAF	; 175
    128e:	8c e3       	ldi	r24, 0x3C	; 60
    1290:	0e 94 6e 02 	call	0x4dc	; 0x4dc <goFront>
		BTTransmitStr("started!");
    1294:	8b e3       	ldi	r24, 0x3B	; 59
    1296:	93 e0       	ldi	r25, 0x03	; 3
    1298:	0e 94 31 01 	call	0x262	; 0x262 <BTTransmitStr>
		return;
    129c:	6f c0       	rjmp	.+222    	; 0x137c <fctSmechera+0x164>
	}
	if(!stopped){
    129e:	80 91 71 03 	lds	r24, 0x0371
    12a2:	81 11       	cpse	r24, r1
    12a4:	6b c0       	rjmp	.+214    	; 0x137c <fctSmechera+0x164>
		lastValues[0]=lastValues[1];
    12a6:	0f 2e       	mov	r0, r31
    12a8:	f5 e8       	ldi	r31, 0x85	; 133
    12aa:	ef 2e       	mov	r14, r31
    12ac:	f4 e0       	ldi	r31, 0x04	; 4
    12ae:	ff 2e       	mov	r15, r31
    12b0:	f0 2d       	mov	r31, r0
    12b2:	f7 01       	movw	r30, r14
    12b4:	80 81       	ld	r24, Z
    12b6:	91 81       	ldd	r25, Z+1	; 0x01
    12b8:	a2 81       	ldd	r26, Z+2	; 0x02
    12ba:	b3 81       	ldd	r27, Z+3	; 0x03
    12bc:	0f 2e       	mov	r0, r31
    12be:	f1 e8       	ldi	r31, 0x81	; 129
    12c0:	cf 2e       	mov	r12, r31
    12c2:	f4 e0       	ldi	r31, 0x04	; 4
    12c4:	df 2e       	mov	r13, r31
    12c6:	f0 2d       	mov	r31, r0
    12c8:	f6 01       	movw	r30, r12
    12ca:	80 83       	st	Z, r24
    12cc:	91 83       	std	Z+1, r25	; 0x01
    12ce:	a2 83       	std	Z+2, r26	; 0x02
    12d0:	b3 83       	std	Z+3, r27	; 0x03
		lastValues[1]=lastValues[2];
    12d2:	09 e8       	ldi	r16, 0x89	; 137
    12d4:	14 e0       	ldi	r17, 0x04	; 4
    12d6:	f8 01       	movw	r30, r16
    12d8:	80 81       	ld	r24, Z
    12da:	91 81       	ldd	r25, Z+1	; 0x01
    12dc:	a2 81       	ldd	r26, Z+2	; 0x02
    12de:	b3 81       	ldd	r27, Z+3	; 0x03
    12e0:	f7 01       	movw	r30, r14
    12e2:	80 83       	st	Z, r24
    12e4:	91 83       	std	Z+1, r25	; 0x01
    12e6:	a2 83       	std	Z+2, r26	; 0x02
    12e8:	b3 83       	std	Z+3, r27	; 0x03
		lastValues[2]=lastValues[3];
    12ea:	cd e8       	ldi	r28, 0x8D	; 141
    12ec:	d4 e0       	ldi	r29, 0x04	; 4
    12ee:	88 81       	ld	r24, Y
    12f0:	99 81       	ldd	r25, Y+1	; 0x01
    12f2:	aa 81       	ldd	r26, Y+2	; 0x02
    12f4:	bb 81       	ldd	r27, Y+3	; 0x03
    12f6:	f8 01       	movw	r30, r16
    12f8:	80 83       	st	Z, r24
    12fa:	91 83       	std	Z+1, r25	; 0x01
    12fc:	a2 83       	std	Z+2, r26	; 0x02
    12fe:	b3 83       	std	Z+3, r27	; 0x03
		lastValues[3] = getValueOfSensor(0);
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <getValueOfSensor>
    1306:	a0 e0       	ldi	r26, 0x00	; 0
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	88 83       	st	Y, r24
    130c:	99 83       	std	Y+1, r25	; 0x01
    130e:	aa 83       	std	Y+2, r26	; 0x02
    1310:	bb 83       	std	Y+3, r27	; 0x03
		
		if( (lastValues[0] + lastValues[1] + lastValues[2] + lastValues[3])/4 > 300){
    1312:	f6 01       	movw	r30, r12
    1314:	80 81       	ld	r24, Z
    1316:	91 81       	ldd	r25, Z+1	; 0x01
    1318:	a2 81       	ldd	r26, Z+2	; 0x02
    131a:	b3 81       	ldd	r27, Z+3	; 0x03
    131c:	f7 01       	movw	r30, r14
    131e:	c0 80       	ld	r12, Z
    1320:	d1 80       	ldd	r13, Z+1	; 0x01
    1322:	e2 80       	ldd	r14, Z+2	; 0x02
    1324:	f3 80       	ldd	r15, Z+3	; 0x03
    1326:	f8 01       	movw	r30, r16
    1328:	00 81       	ld	r16, Z
    132a:	11 81       	ldd	r17, Z+1	; 0x01
    132c:	22 81       	ldd	r18, Z+2	; 0x02
    132e:	33 81       	ldd	r19, Z+3	; 0x03
    1330:	48 81       	ld	r20, Y
    1332:	59 81       	ldd	r21, Y+1	; 0x01
    1334:	6a 81       	ldd	r22, Y+2	; 0x02
    1336:	7b 81       	ldd	r23, Y+3	; 0x03
    1338:	8c 0d       	add	r24, r12
    133a:	9d 1d       	adc	r25, r13
    133c:	ae 1d       	adc	r26, r14
    133e:	bf 1d       	adc	r27, r15
    1340:	80 0f       	add	r24, r16
    1342:	91 1f       	adc	r25, r17
    1344:	a2 1f       	adc	r26, r18
    1346:	b3 1f       	adc	r27, r19
    1348:	84 0f       	add	r24, r20
    134a:	95 1f       	adc	r25, r21
    134c:	a6 1f       	adc	r26, r22
    134e:	b7 1f       	adc	r27, r23
    1350:	84 3b       	cpi	r24, 0xB4	; 180
    1352:	94 40       	sbci	r25, 0x04	; 4
    1354:	a1 05       	cpc	r26, r1
    1356:	b1 05       	cpc	r27, r1
    1358:	88 f0       	brcs	.+34     	; 0x137c <fctSmechera+0x164>
			stopEngines();
    135a:	0e 94 17 02 	call	0x42e	; 0x42e <stopEngines>
			removeEntryFromTimerQueue(&stopEngines);
    135e:	87 e1       	ldi	r24, 0x17	; 23
    1360:	92 e0       	ldi	r25, 0x02	; 2
    1362:	0e 94 0e 06 	call	0xc1c	; 0xc1c <removeEntryFromTimerQueue>
			removeEntryFromTimerQueue(&fctSmechera); 
    1366:	8c e0       	ldi	r24, 0x0C	; 12
    1368:	99 e0       	ldi	r25, 0x09	; 9
    136a:	0e 94 0e 06 	call	0xc1c	; 0xc1c <removeEntryFromTimerQueue>
			ReadSensor0();
    136e:	0e 94 da 08 	call	0x11b4	; 0x11b4 <ReadSensor0>
			stopped = 1;
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	80 93 71 03 	sts	0x0371, r24
			reload = 1;
    1378:	80 93 70 03 	sts	0x0370, r24
		}
	}
}
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	1f 91       	pop	r17
    1382:	0f 91       	pop	r16
    1384:	ff 90       	pop	r15
    1386:	ef 90       	pop	r14
    1388:	df 90       	pop	r13
    138a:	cf 90       	pop	r12
    138c:	08 95       	ret

0000138e <ReadSensor1>:
	//resetSensorQueue(0);
	uint16_t x = getValueOfSensor(0);
	sprintf(msg, "sensor #0: %d", x);	
	BTTransmitStr(msg);
}
void ReadSensor1(){
    138e:	0f 93       	push	r16
    1390:	1f 93       	push	r17
    1392:	cf 93       	push	r28
    1394:	df 93       	push	r29
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	c6 54       	subi	r28, 0x46	; 70
    139c:	d1 09       	sbc	r29, r1
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	f8 94       	cli
    13a2:	de bf       	out	0x3e, r29	; 62
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	cd bf       	out	0x3d, r28	; 61
	char msg[70];
	//resetSensorQueue(1);
	uint16_t x = getValueOfSensor(1);
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <getValueOfSensor>
	sprintf(msg, "sensor #1: %d", x);
    13ae:	9f 93       	push	r25
    13b0:	8f 93       	push	r24
    13b2:	84 e4       	ldi	r24, 0x44	; 68
    13b4:	93 e0       	ldi	r25, 0x03	; 3
    13b6:	9f 93       	push	r25
    13b8:	8f 93       	push	r24
    13ba:	8e 01       	movw	r16, r28
    13bc:	0f 5f       	subi	r16, 0xFF	; 255
    13be:	1f 4f       	sbci	r17, 0xFF	; 255
    13c0:	1f 93       	push	r17
    13c2:	0f 93       	push	r16
    13c4:	0e 94 2d 0a 	call	0x145a	; 0x145a <sprintf>
	BTTransmitStr(msg);
    13c8:	c8 01       	movw	r24, r16
    13ca:	0e 94 31 01 	call	0x262	; 0x262 <BTTransmitStr>
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
}
    13da:	ca 5b       	subi	r28, 0xBA	; 186
    13dc:	df 4f       	sbci	r29, 0xFF	; 255
    13de:	0f b6       	in	r0, 0x3f	; 63
    13e0:	f8 94       	cli
    13e2:	de bf       	out	0x3e, r29	; 62
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	cd bf       	out	0x3d, r28	; 61
    13e8:	df 91       	pop	r29
    13ea:	cf 91       	pop	r28
    13ec:	1f 91       	pop	r17
    13ee:	0f 91       	pop	r16
    13f0:	08 95       	ret

000013f2 <__tablejump2__>:
    13f2:	ee 0f       	add	r30, r30
    13f4:	ff 1f       	adc	r31, r31

000013f6 <__tablejump__>:
    13f6:	05 90       	lpm	r0, Z+
    13f8:	f4 91       	lpm	r31, Z
    13fa:	e0 2d       	mov	r30, r0
    13fc:	09 94       	ijmp

000013fe <__umulhisi3>:
    13fe:	a2 9f       	mul	r26, r18
    1400:	b0 01       	movw	r22, r0
    1402:	b3 9f       	mul	r27, r19
    1404:	c0 01       	movw	r24, r0
    1406:	a3 9f       	mul	r26, r19
    1408:	70 0d       	add	r23, r0
    140a:	81 1d       	adc	r24, r1
    140c:	11 24       	eor	r1, r1
    140e:	91 1d       	adc	r25, r1
    1410:	b2 9f       	mul	r27, r18
    1412:	70 0d       	add	r23, r0
    1414:	81 1d       	adc	r24, r1
    1416:	11 24       	eor	r1, r1
    1418:	91 1d       	adc	r25, r1
    141a:	08 95       	ret

0000141c <__muluhisi3>:
    141c:	0e 94 ff 09 	call	0x13fe	; 0x13fe <__umulhisi3>
    1420:	a5 9f       	mul	r26, r21
    1422:	90 0d       	add	r25, r0
    1424:	b4 9f       	mul	r27, r20
    1426:	90 0d       	add	r25, r0
    1428:	a4 9f       	mul	r26, r20
    142a:	80 0d       	add	r24, r0
    142c:	91 1d       	adc	r25, r1
    142e:	11 24       	eor	r1, r1
    1430:	08 95       	ret

00001432 <printf>:
    1432:	a0 e0       	ldi	r26, 0x00	; 0
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	ef e1       	ldi	r30, 0x1F	; 31
    1438:	fa e0       	ldi	r31, 0x0A	; 10
    143a:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__prologue_saves__+0x20>
    143e:	fe 01       	movw	r30, r28
    1440:	35 96       	adiw	r30, 0x05	; 5
    1442:	61 91       	ld	r22, Z+
    1444:	71 91       	ld	r23, Z+
    1446:	af 01       	movw	r20, r30
    1448:	80 91 93 04 	lds	r24, 0x0493
    144c:	90 91 94 04 	lds	r25, 0x0494
    1450:	0e 94 4f 0a 	call	0x149e	; 0x149e <vfprintf>
    1454:	e2 e0       	ldi	r30, 0x02	; 2
    1456:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <__epilogue_restores__+0x20>

0000145a <sprintf>:
    145a:	ae e0       	ldi	r26, 0x0E	; 14
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e3 e3       	ldi	r30, 0x33	; 51
    1460:	fa e0       	ldi	r31, 0x0A	; 10
    1462:	0c 94 d5 0c 	jmp	0x19aa	; 0x19aa <__prologue_saves__+0x1c>
    1466:	0d 89       	ldd	r16, Y+21	; 0x15
    1468:	1e 89       	ldd	r17, Y+22	; 0x16
    146a:	86 e0       	ldi	r24, 0x06	; 6
    146c:	8c 83       	std	Y+4, r24	; 0x04
    146e:	1a 83       	std	Y+2, r17	; 0x02
    1470:	09 83       	std	Y+1, r16	; 0x01
    1472:	8f ef       	ldi	r24, 0xFF	; 255
    1474:	9f e7       	ldi	r25, 0x7F	; 127
    1476:	9e 83       	std	Y+6, r25	; 0x06
    1478:	8d 83       	std	Y+5, r24	; 0x05
    147a:	ae 01       	movw	r20, r28
    147c:	47 5e       	subi	r20, 0xE7	; 231
    147e:	5f 4f       	sbci	r21, 0xFF	; 255
    1480:	6f 89       	ldd	r22, Y+23	; 0x17
    1482:	78 8d       	ldd	r23, Y+24	; 0x18
    1484:	ce 01       	movw	r24, r28
    1486:	01 96       	adiw	r24, 0x01	; 1
    1488:	0e 94 4f 0a 	call	0x149e	; 0x149e <vfprintf>
    148c:	ef 81       	ldd	r30, Y+7	; 0x07
    148e:	f8 85       	ldd	r31, Y+8	; 0x08
    1490:	e0 0f       	add	r30, r16
    1492:	f1 1f       	adc	r31, r17
    1494:	10 82       	st	Z, r1
    1496:	2e 96       	adiw	r28, 0x0e	; 14
    1498:	e4 e0       	ldi	r30, 0x04	; 4
    149a:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__epilogue_restores__+0x1c>

0000149e <vfprintf>:
    149e:	ac e0       	ldi	r26, 0x0C	; 12
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e5 e5       	ldi	r30, 0x55	; 85
    14a4:	fa e0       	ldi	r31, 0x0A	; 10
    14a6:	0c 94 c7 0c 	jmp	0x198e	; 0x198e <__prologue_saves__>
    14aa:	7c 01       	movw	r14, r24
    14ac:	6b 01       	movw	r12, r22
    14ae:	8a 01       	movw	r16, r20
    14b0:	fc 01       	movw	r30, r24
    14b2:	17 82       	std	Z+7, r1	; 0x07
    14b4:	16 82       	std	Z+6, r1	; 0x06
    14b6:	83 81       	ldd	r24, Z+3	; 0x03
    14b8:	81 ff       	sbrs	r24, 1
    14ba:	bd c1       	rjmp	.+890    	; 0x1836 <vfprintf+0x398>
    14bc:	ce 01       	movw	r24, r28
    14be:	01 96       	adiw	r24, 0x01	; 1
    14c0:	4c 01       	movw	r8, r24
    14c2:	f7 01       	movw	r30, r14
    14c4:	93 81       	ldd	r25, Z+3	; 0x03
    14c6:	f6 01       	movw	r30, r12
    14c8:	93 fd       	sbrc	r25, 3
    14ca:	85 91       	lpm	r24, Z+
    14cc:	93 ff       	sbrs	r25, 3
    14ce:	81 91       	ld	r24, Z+
    14d0:	6f 01       	movw	r12, r30
    14d2:	88 23       	and	r24, r24
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <vfprintf+0x3a>
    14d6:	ab c1       	rjmp	.+854    	; 0x182e <vfprintf+0x390>
    14d8:	85 32       	cpi	r24, 0x25	; 37
    14da:	39 f4       	brne	.+14     	; 0x14ea <vfprintf+0x4c>
    14dc:	93 fd       	sbrc	r25, 3
    14de:	85 91       	lpm	r24, Z+
    14e0:	93 ff       	sbrs	r25, 3
    14e2:	81 91       	ld	r24, Z+
    14e4:	6f 01       	movw	r12, r30
    14e6:	85 32       	cpi	r24, 0x25	; 37
    14e8:	29 f4       	brne	.+10     	; 0x14f4 <vfprintf+0x56>
    14ea:	b7 01       	movw	r22, r14
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	0e 94 37 0c 	call	0x186e	; 0x186e <fputc>
    14f2:	e7 cf       	rjmp	.-50     	; 0x14c2 <vfprintf+0x24>
    14f4:	51 2c       	mov	r5, r1
    14f6:	31 2c       	mov	r3, r1
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	20 32       	cpi	r18, 0x20	; 32
    14fc:	a0 f4       	brcc	.+40     	; 0x1526 <vfprintf+0x88>
    14fe:	8b 32       	cpi	r24, 0x2B	; 43
    1500:	69 f0       	breq	.+26     	; 0x151c <vfprintf+0x7e>
    1502:	30 f4       	brcc	.+12     	; 0x1510 <vfprintf+0x72>
    1504:	80 32       	cpi	r24, 0x20	; 32
    1506:	59 f0       	breq	.+22     	; 0x151e <vfprintf+0x80>
    1508:	83 32       	cpi	r24, 0x23	; 35
    150a:	69 f4       	brne	.+26     	; 0x1526 <vfprintf+0x88>
    150c:	20 61       	ori	r18, 0x10	; 16
    150e:	2c c0       	rjmp	.+88     	; 0x1568 <vfprintf+0xca>
    1510:	8d 32       	cpi	r24, 0x2D	; 45
    1512:	39 f0       	breq	.+14     	; 0x1522 <vfprintf+0x84>
    1514:	80 33       	cpi	r24, 0x30	; 48
    1516:	39 f4       	brne	.+14     	; 0x1526 <vfprintf+0x88>
    1518:	21 60       	ori	r18, 0x01	; 1
    151a:	26 c0       	rjmp	.+76     	; 0x1568 <vfprintf+0xca>
    151c:	22 60       	ori	r18, 0x02	; 2
    151e:	24 60       	ori	r18, 0x04	; 4
    1520:	23 c0       	rjmp	.+70     	; 0x1568 <vfprintf+0xca>
    1522:	28 60       	ori	r18, 0x08	; 8
    1524:	21 c0       	rjmp	.+66     	; 0x1568 <vfprintf+0xca>
    1526:	27 fd       	sbrc	r18, 7
    1528:	27 c0       	rjmp	.+78     	; 0x1578 <vfprintf+0xda>
    152a:	30 ed       	ldi	r19, 0xD0	; 208
    152c:	38 0f       	add	r19, r24
    152e:	3a 30       	cpi	r19, 0x0A	; 10
    1530:	78 f4       	brcc	.+30     	; 0x1550 <vfprintf+0xb2>
    1532:	26 ff       	sbrs	r18, 6
    1534:	06 c0       	rjmp	.+12     	; 0x1542 <vfprintf+0xa4>
    1536:	fa e0       	ldi	r31, 0x0A	; 10
    1538:	5f 9e       	mul	r5, r31
    153a:	30 0d       	add	r19, r0
    153c:	11 24       	eor	r1, r1
    153e:	53 2e       	mov	r5, r19
    1540:	13 c0       	rjmp	.+38     	; 0x1568 <vfprintf+0xca>
    1542:	8a e0       	ldi	r24, 0x0A	; 10
    1544:	38 9e       	mul	r3, r24
    1546:	30 0d       	add	r19, r0
    1548:	11 24       	eor	r1, r1
    154a:	33 2e       	mov	r3, r19
    154c:	20 62       	ori	r18, 0x20	; 32
    154e:	0c c0       	rjmp	.+24     	; 0x1568 <vfprintf+0xca>
    1550:	8e 32       	cpi	r24, 0x2E	; 46
    1552:	21 f4       	brne	.+8      	; 0x155c <vfprintf+0xbe>
    1554:	26 fd       	sbrc	r18, 6
    1556:	6b c1       	rjmp	.+726    	; 0x182e <vfprintf+0x390>
    1558:	20 64       	ori	r18, 0x40	; 64
    155a:	06 c0       	rjmp	.+12     	; 0x1568 <vfprintf+0xca>
    155c:	8c 36       	cpi	r24, 0x6C	; 108
    155e:	11 f4       	brne	.+4      	; 0x1564 <vfprintf+0xc6>
    1560:	20 68       	ori	r18, 0x80	; 128
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <vfprintf+0xca>
    1564:	88 36       	cpi	r24, 0x68	; 104
    1566:	41 f4       	brne	.+16     	; 0x1578 <vfprintf+0xda>
    1568:	f6 01       	movw	r30, r12
    156a:	93 fd       	sbrc	r25, 3
    156c:	85 91       	lpm	r24, Z+
    156e:	93 ff       	sbrs	r25, 3
    1570:	81 91       	ld	r24, Z+
    1572:	6f 01       	movw	r12, r30
    1574:	81 11       	cpse	r24, r1
    1576:	c1 cf       	rjmp	.-126    	; 0x14fa <vfprintf+0x5c>
    1578:	98 2f       	mov	r25, r24
    157a:	9f 7d       	andi	r25, 0xDF	; 223
    157c:	95 54       	subi	r25, 0x45	; 69
    157e:	93 30       	cpi	r25, 0x03	; 3
    1580:	28 f4       	brcc	.+10     	; 0x158c <vfprintf+0xee>
    1582:	0c 5f       	subi	r16, 0xFC	; 252
    1584:	1f 4f       	sbci	r17, 0xFF	; 255
    1586:	ff e3       	ldi	r31, 0x3F	; 63
    1588:	f9 83       	std	Y+1, r31	; 0x01
    158a:	0d c0       	rjmp	.+26     	; 0x15a6 <vfprintf+0x108>
    158c:	83 36       	cpi	r24, 0x63	; 99
    158e:	31 f0       	breq	.+12     	; 0x159c <vfprintf+0xfe>
    1590:	83 37       	cpi	r24, 0x73	; 115
    1592:	71 f0       	breq	.+28     	; 0x15b0 <vfprintf+0x112>
    1594:	83 35       	cpi	r24, 0x53	; 83
    1596:	09 f0       	breq	.+2      	; 0x159a <vfprintf+0xfc>
    1598:	5b c0       	rjmp	.+182    	; 0x1650 <vfprintf+0x1b2>
    159a:	22 c0       	rjmp	.+68     	; 0x15e0 <vfprintf+0x142>
    159c:	f8 01       	movw	r30, r16
    159e:	80 81       	ld	r24, Z
    15a0:	89 83       	std	Y+1, r24	; 0x01
    15a2:	0e 5f       	subi	r16, 0xFE	; 254
    15a4:	1f 4f       	sbci	r17, 0xFF	; 255
    15a6:	44 24       	eor	r4, r4
    15a8:	43 94       	inc	r4
    15aa:	51 2c       	mov	r5, r1
    15ac:	54 01       	movw	r10, r8
    15ae:	15 c0       	rjmp	.+42     	; 0x15da <vfprintf+0x13c>
    15b0:	38 01       	movw	r6, r16
    15b2:	f2 e0       	ldi	r31, 0x02	; 2
    15b4:	6f 0e       	add	r6, r31
    15b6:	71 1c       	adc	r7, r1
    15b8:	f8 01       	movw	r30, r16
    15ba:	a0 80       	ld	r10, Z
    15bc:	b1 80       	ldd	r11, Z+1	; 0x01
    15be:	26 ff       	sbrs	r18, 6
    15c0:	03 c0       	rjmp	.+6      	; 0x15c8 <vfprintf+0x12a>
    15c2:	65 2d       	mov	r22, r5
    15c4:	70 e0       	ldi	r23, 0x00	; 0
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <vfprintf+0x12e>
    15c8:	6f ef       	ldi	r22, 0xFF	; 255
    15ca:	7f ef       	ldi	r23, 0xFF	; 255
    15cc:	c5 01       	movw	r24, r10
    15ce:	2c 87       	std	Y+12, r18	; 0x0c
    15d0:	0e 94 2c 0c 	call	0x1858	; 0x1858 <strnlen>
    15d4:	2c 01       	movw	r4, r24
    15d6:	83 01       	movw	r16, r6
    15d8:	2c 85       	ldd	r18, Y+12	; 0x0c
    15da:	2f 77       	andi	r18, 0x7F	; 127
    15dc:	22 2e       	mov	r2, r18
    15de:	17 c0       	rjmp	.+46     	; 0x160e <vfprintf+0x170>
    15e0:	38 01       	movw	r6, r16
    15e2:	f2 e0       	ldi	r31, 0x02	; 2
    15e4:	6f 0e       	add	r6, r31
    15e6:	71 1c       	adc	r7, r1
    15e8:	f8 01       	movw	r30, r16
    15ea:	a0 80       	ld	r10, Z
    15ec:	b1 80       	ldd	r11, Z+1	; 0x01
    15ee:	26 ff       	sbrs	r18, 6
    15f0:	03 c0       	rjmp	.+6      	; 0x15f8 <vfprintf+0x15a>
    15f2:	65 2d       	mov	r22, r5
    15f4:	70 e0       	ldi	r23, 0x00	; 0
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <vfprintf+0x15e>
    15f8:	6f ef       	ldi	r22, 0xFF	; 255
    15fa:	7f ef       	ldi	r23, 0xFF	; 255
    15fc:	c5 01       	movw	r24, r10
    15fe:	2c 87       	std	Y+12, r18	; 0x0c
    1600:	0e 94 21 0c 	call	0x1842	; 0x1842 <strnlen_P>
    1604:	2c 01       	movw	r4, r24
    1606:	2c 85       	ldd	r18, Y+12	; 0x0c
    1608:	20 68       	ori	r18, 0x80	; 128
    160a:	22 2e       	mov	r2, r18
    160c:	83 01       	movw	r16, r6
    160e:	23 fc       	sbrc	r2, 3
    1610:	1b c0       	rjmp	.+54     	; 0x1648 <vfprintf+0x1aa>
    1612:	83 2d       	mov	r24, r3
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	48 16       	cp	r4, r24
    1618:	59 06       	cpc	r5, r25
    161a:	b0 f4       	brcc	.+44     	; 0x1648 <vfprintf+0x1aa>
    161c:	b7 01       	movw	r22, r14
    161e:	80 e2       	ldi	r24, 0x20	; 32
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	0e 94 37 0c 	call	0x186e	; 0x186e <fputc>
    1626:	3a 94       	dec	r3
    1628:	f4 cf       	rjmp	.-24     	; 0x1612 <vfprintf+0x174>
    162a:	f5 01       	movw	r30, r10
    162c:	27 fc       	sbrc	r2, 7
    162e:	85 91       	lpm	r24, Z+
    1630:	27 fe       	sbrs	r2, 7
    1632:	81 91       	ld	r24, Z+
    1634:	5f 01       	movw	r10, r30
    1636:	b7 01       	movw	r22, r14
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	0e 94 37 0c 	call	0x186e	; 0x186e <fputc>
    163e:	31 10       	cpse	r3, r1
    1640:	3a 94       	dec	r3
    1642:	f1 e0       	ldi	r31, 0x01	; 1
    1644:	4f 1a       	sub	r4, r31
    1646:	51 08       	sbc	r5, r1
    1648:	41 14       	cp	r4, r1
    164a:	51 04       	cpc	r5, r1
    164c:	71 f7       	brne	.-36     	; 0x162a <vfprintf+0x18c>
    164e:	e5 c0       	rjmp	.+458    	; 0x181a <vfprintf+0x37c>
    1650:	84 36       	cpi	r24, 0x64	; 100
    1652:	11 f0       	breq	.+4      	; 0x1658 <vfprintf+0x1ba>
    1654:	89 36       	cpi	r24, 0x69	; 105
    1656:	39 f5       	brne	.+78     	; 0x16a6 <vfprintf+0x208>
    1658:	f8 01       	movw	r30, r16
    165a:	27 ff       	sbrs	r18, 7
    165c:	07 c0       	rjmp	.+14     	; 0x166c <vfprintf+0x1ce>
    165e:	60 81       	ld	r22, Z
    1660:	71 81       	ldd	r23, Z+1	; 0x01
    1662:	82 81       	ldd	r24, Z+2	; 0x02
    1664:	93 81       	ldd	r25, Z+3	; 0x03
    1666:	0c 5f       	subi	r16, 0xFC	; 252
    1668:	1f 4f       	sbci	r17, 0xFF	; 255
    166a:	08 c0       	rjmp	.+16     	; 0x167c <vfprintf+0x1de>
    166c:	60 81       	ld	r22, Z
    166e:	71 81       	ldd	r23, Z+1	; 0x01
    1670:	88 27       	eor	r24, r24
    1672:	77 fd       	sbrc	r23, 7
    1674:	80 95       	com	r24
    1676:	98 2f       	mov	r25, r24
    1678:	0e 5f       	subi	r16, 0xFE	; 254
    167a:	1f 4f       	sbci	r17, 0xFF	; 255
    167c:	2f 76       	andi	r18, 0x6F	; 111
    167e:	b2 2e       	mov	r11, r18
    1680:	97 ff       	sbrs	r25, 7
    1682:	09 c0       	rjmp	.+18     	; 0x1696 <vfprintf+0x1f8>
    1684:	90 95       	com	r25
    1686:	80 95       	com	r24
    1688:	70 95       	com	r23
    168a:	61 95       	neg	r22
    168c:	7f 4f       	sbci	r23, 0xFF	; 255
    168e:	8f 4f       	sbci	r24, 0xFF	; 255
    1690:	9f 4f       	sbci	r25, 0xFF	; 255
    1692:	20 68       	ori	r18, 0x80	; 128
    1694:	b2 2e       	mov	r11, r18
    1696:	2a e0       	ldi	r18, 0x0A	; 10
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	a4 01       	movw	r20, r8
    169c:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__ultoa_invert>
    16a0:	a8 2e       	mov	r10, r24
    16a2:	a8 18       	sub	r10, r8
    16a4:	44 c0       	rjmp	.+136    	; 0x172e <vfprintf+0x290>
    16a6:	85 37       	cpi	r24, 0x75	; 117
    16a8:	29 f4       	brne	.+10     	; 0x16b4 <vfprintf+0x216>
    16aa:	2f 7e       	andi	r18, 0xEF	; 239
    16ac:	b2 2e       	mov	r11, r18
    16ae:	2a e0       	ldi	r18, 0x0A	; 10
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	25 c0       	rjmp	.+74     	; 0x16fe <vfprintf+0x260>
    16b4:	f2 2f       	mov	r31, r18
    16b6:	f9 7f       	andi	r31, 0xF9	; 249
    16b8:	bf 2e       	mov	r11, r31
    16ba:	8f 36       	cpi	r24, 0x6F	; 111
    16bc:	c1 f0       	breq	.+48     	; 0x16ee <vfprintf+0x250>
    16be:	18 f4       	brcc	.+6      	; 0x16c6 <vfprintf+0x228>
    16c0:	88 35       	cpi	r24, 0x58	; 88
    16c2:	79 f0       	breq	.+30     	; 0x16e2 <vfprintf+0x244>
    16c4:	b4 c0       	rjmp	.+360    	; 0x182e <vfprintf+0x390>
    16c6:	80 37       	cpi	r24, 0x70	; 112
    16c8:	19 f0       	breq	.+6      	; 0x16d0 <vfprintf+0x232>
    16ca:	88 37       	cpi	r24, 0x78	; 120
    16cc:	21 f0       	breq	.+8      	; 0x16d6 <vfprintf+0x238>
    16ce:	af c0       	rjmp	.+350    	; 0x182e <vfprintf+0x390>
    16d0:	2f 2f       	mov	r18, r31
    16d2:	20 61       	ori	r18, 0x10	; 16
    16d4:	b2 2e       	mov	r11, r18
    16d6:	b4 fe       	sbrs	r11, 4
    16d8:	0d c0       	rjmp	.+26     	; 0x16f4 <vfprintf+0x256>
    16da:	8b 2d       	mov	r24, r11
    16dc:	84 60       	ori	r24, 0x04	; 4
    16de:	b8 2e       	mov	r11, r24
    16e0:	09 c0       	rjmp	.+18     	; 0x16f4 <vfprintf+0x256>
    16e2:	24 ff       	sbrs	r18, 4
    16e4:	0a c0       	rjmp	.+20     	; 0x16fa <vfprintf+0x25c>
    16e6:	9f 2f       	mov	r25, r31
    16e8:	96 60       	ori	r25, 0x06	; 6
    16ea:	b9 2e       	mov	r11, r25
    16ec:	06 c0       	rjmp	.+12     	; 0x16fa <vfprintf+0x25c>
    16ee:	28 e0       	ldi	r18, 0x08	; 8
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	05 c0       	rjmp	.+10     	; 0x16fe <vfprintf+0x260>
    16f4:	20 e1       	ldi	r18, 0x10	; 16
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <vfprintf+0x260>
    16fa:	20 e1       	ldi	r18, 0x10	; 16
    16fc:	32 e0       	ldi	r19, 0x02	; 2
    16fe:	f8 01       	movw	r30, r16
    1700:	b7 fe       	sbrs	r11, 7
    1702:	07 c0       	rjmp	.+14     	; 0x1712 <vfprintf+0x274>
    1704:	60 81       	ld	r22, Z
    1706:	71 81       	ldd	r23, Z+1	; 0x01
    1708:	82 81       	ldd	r24, Z+2	; 0x02
    170a:	93 81       	ldd	r25, Z+3	; 0x03
    170c:	0c 5f       	subi	r16, 0xFC	; 252
    170e:	1f 4f       	sbci	r17, 0xFF	; 255
    1710:	06 c0       	rjmp	.+12     	; 0x171e <vfprintf+0x280>
    1712:	60 81       	ld	r22, Z
    1714:	71 81       	ldd	r23, Z+1	; 0x01
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	0e 5f       	subi	r16, 0xFE	; 254
    171c:	1f 4f       	sbci	r17, 0xFF	; 255
    171e:	a4 01       	movw	r20, r8
    1720:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__ultoa_invert>
    1724:	a8 2e       	mov	r10, r24
    1726:	a8 18       	sub	r10, r8
    1728:	fb 2d       	mov	r31, r11
    172a:	ff 77       	andi	r31, 0x7F	; 127
    172c:	bf 2e       	mov	r11, r31
    172e:	b6 fe       	sbrs	r11, 6
    1730:	0b c0       	rjmp	.+22     	; 0x1748 <vfprintf+0x2aa>
    1732:	2b 2d       	mov	r18, r11
    1734:	2e 7f       	andi	r18, 0xFE	; 254
    1736:	a5 14       	cp	r10, r5
    1738:	50 f4       	brcc	.+20     	; 0x174e <vfprintf+0x2b0>
    173a:	b4 fe       	sbrs	r11, 4
    173c:	0a c0       	rjmp	.+20     	; 0x1752 <vfprintf+0x2b4>
    173e:	b2 fc       	sbrc	r11, 2
    1740:	08 c0       	rjmp	.+16     	; 0x1752 <vfprintf+0x2b4>
    1742:	2b 2d       	mov	r18, r11
    1744:	2e 7e       	andi	r18, 0xEE	; 238
    1746:	05 c0       	rjmp	.+10     	; 0x1752 <vfprintf+0x2b4>
    1748:	7a 2c       	mov	r7, r10
    174a:	2b 2d       	mov	r18, r11
    174c:	03 c0       	rjmp	.+6      	; 0x1754 <vfprintf+0x2b6>
    174e:	7a 2c       	mov	r7, r10
    1750:	01 c0       	rjmp	.+2      	; 0x1754 <vfprintf+0x2b6>
    1752:	75 2c       	mov	r7, r5
    1754:	24 ff       	sbrs	r18, 4
    1756:	0d c0       	rjmp	.+26     	; 0x1772 <vfprintf+0x2d4>
    1758:	fe 01       	movw	r30, r28
    175a:	ea 0d       	add	r30, r10
    175c:	f1 1d       	adc	r31, r1
    175e:	80 81       	ld	r24, Z
    1760:	80 33       	cpi	r24, 0x30	; 48
    1762:	11 f4       	brne	.+4      	; 0x1768 <vfprintf+0x2ca>
    1764:	29 7e       	andi	r18, 0xE9	; 233
    1766:	09 c0       	rjmp	.+18     	; 0x177a <vfprintf+0x2dc>
    1768:	22 ff       	sbrs	r18, 2
    176a:	06 c0       	rjmp	.+12     	; 0x1778 <vfprintf+0x2da>
    176c:	73 94       	inc	r7
    176e:	73 94       	inc	r7
    1770:	04 c0       	rjmp	.+8      	; 0x177a <vfprintf+0x2dc>
    1772:	82 2f       	mov	r24, r18
    1774:	86 78       	andi	r24, 0x86	; 134
    1776:	09 f0       	breq	.+2      	; 0x177a <vfprintf+0x2dc>
    1778:	73 94       	inc	r7
    177a:	23 fd       	sbrc	r18, 3
    177c:	13 c0       	rjmp	.+38     	; 0x17a4 <vfprintf+0x306>
    177e:	20 ff       	sbrs	r18, 0
    1780:	06 c0       	rjmp	.+12     	; 0x178e <vfprintf+0x2f0>
    1782:	5a 2c       	mov	r5, r10
    1784:	73 14       	cp	r7, r3
    1786:	18 f4       	brcc	.+6      	; 0x178e <vfprintf+0x2f0>
    1788:	53 0c       	add	r5, r3
    178a:	57 18       	sub	r5, r7
    178c:	73 2c       	mov	r7, r3
    178e:	73 14       	cp	r7, r3
    1790:	68 f4       	brcc	.+26     	; 0x17ac <vfprintf+0x30e>
    1792:	b7 01       	movw	r22, r14
    1794:	80 e2       	ldi	r24, 0x20	; 32
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	2c 87       	std	Y+12, r18	; 0x0c
    179a:	0e 94 37 0c 	call	0x186e	; 0x186e <fputc>
    179e:	73 94       	inc	r7
    17a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    17a2:	f5 cf       	rjmp	.-22     	; 0x178e <vfprintf+0x2f0>
    17a4:	73 14       	cp	r7, r3
    17a6:	10 f4       	brcc	.+4      	; 0x17ac <vfprintf+0x30e>
    17a8:	37 18       	sub	r3, r7
    17aa:	01 c0       	rjmp	.+2      	; 0x17ae <vfprintf+0x310>
    17ac:	31 2c       	mov	r3, r1
    17ae:	24 ff       	sbrs	r18, 4
    17b0:	12 c0       	rjmp	.+36     	; 0x17d6 <vfprintf+0x338>
    17b2:	b7 01       	movw	r22, r14
    17b4:	80 e3       	ldi	r24, 0x30	; 48
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	2c 87       	std	Y+12, r18	; 0x0c
    17ba:	0e 94 37 0c 	call	0x186e	; 0x186e <fputc>
    17be:	2c 85       	ldd	r18, Y+12	; 0x0c
    17c0:	22 ff       	sbrs	r18, 2
    17c2:	17 c0       	rjmp	.+46     	; 0x17f2 <vfprintf+0x354>
    17c4:	21 ff       	sbrs	r18, 1
    17c6:	03 c0       	rjmp	.+6      	; 0x17ce <vfprintf+0x330>
    17c8:	88 e5       	ldi	r24, 0x58	; 88
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <vfprintf+0x334>
    17ce:	88 e7       	ldi	r24, 0x78	; 120
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	b7 01       	movw	r22, r14
    17d4:	0c c0       	rjmp	.+24     	; 0x17ee <vfprintf+0x350>
    17d6:	82 2f       	mov	r24, r18
    17d8:	86 78       	andi	r24, 0x86	; 134
    17da:	59 f0       	breq	.+22     	; 0x17f2 <vfprintf+0x354>
    17dc:	21 fd       	sbrc	r18, 1
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <vfprintf+0x346>
    17e0:	80 e2       	ldi	r24, 0x20	; 32
    17e2:	01 c0       	rjmp	.+2      	; 0x17e6 <vfprintf+0x348>
    17e4:	8b e2       	ldi	r24, 0x2B	; 43
    17e6:	27 fd       	sbrc	r18, 7
    17e8:	8d e2       	ldi	r24, 0x2D	; 45
    17ea:	b7 01       	movw	r22, r14
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	0e 94 37 0c 	call	0x186e	; 0x186e <fputc>
    17f2:	a5 14       	cp	r10, r5
    17f4:	38 f4       	brcc	.+14     	; 0x1804 <vfprintf+0x366>
    17f6:	b7 01       	movw	r22, r14
    17f8:	80 e3       	ldi	r24, 0x30	; 48
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	0e 94 37 0c 	call	0x186e	; 0x186e <fputc>
    1800:	5a 94       	dec	r5
    1802:	f7 cf       	rjmp	.-18     	; 0x17f2 <vfprintf+0x354>
    1804:	aa 94       	dec	r10
    1806:	f4 01       	movw	r30, r8
    1808:	ea 0d       	add	r30, r10
    180a:	f1 1d       	adc	r31, r1
    180c:	80 81       	ld	r24, Z
    180e:	b7 01       	movw	r22, r14
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	0e 94 37 0c 	call	0x186e	; 0x186e <fputc>
    1816:	a1 10       	cpse	r10, r1
    1818:	f5 cf       	rjmp	.-22     	; 0x1804 <vfprintf+0x366>
    181a:	33 20       	and	r3, r3
    181c:	09 f4       	brne	.+2      	; 0x1820 <vfprintf+0x382>
    181e:	51 ce       	rjmp	.-862    	; 0x14c2 <vfprintf+0x24>
    1820:	b7 01       	movw	r22, r14
    1822:	80 e2       	ldi	r24, 0x20	; 32
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	0e 94 37 0c 	call	0x186e	; 0x186e <fputc>
    182a:	3a 94       	dec	r3
    182c:	f6 cf       	rjmp	.-20     	; 0x181a <vfprintf+0x37c>
    182e:	f7 01       	movw	r30, r14
    1830:	86 81       	ldd	r24, Z+6	; 0x06
    1832:	97 81       	ldd	r25, Z+7	; 0x07
    1834:	02 c0       	rjmp	.+4      	; 0x183a <vfprintf+0x39c>
    1836:	8f ef       	ldi	r24, 0xFF	; 255
    1838:	9f ef       	ldi	r25, 0xFF	; 255
    183a:	2c 96       	adiw	r28, 0x0c	; 12
    183c:	e2 e1       	ldi	r30, 0x12	; 18
    183e:	0c 94 e3 0c 	jmp	0x19c6	; 0x19c6 <__epilogue_restores__>

00001842 <strnlen_P>:
    1842:	fc 01       	movw	r30, r24
    1844:	05 90       	lpm	r0, Z+
    1846:	61 50       	subi	r22, 0x01	; 1
    1848:	70 40       	sbci	r23, 0x00	; 0
    184a:	01 10       	cpse	r0, r1
    184c:	d8 f7       	brcc	.-10     	; 0x1844 <strnlen_P+0x2>
    184e:	80 95       	com	r24
    1850:	90 95       	com	r25
    1852:	8e 0f       	add	r24, r30
    1854:	9f 1f       	adc	r25, r31
    1856:	08 95       	ret

00001858 <strnlen>:
    1858:	fc 01       	movw	r30, r24
    185a:	61 50       	subi	r22, 0x01	; 1
    185c:	70 40       	sbci	r23, 0x00	; 0
    185e:	01 90       	ld	r0, Z+
    1860:	01 10       	cpse	r0, r1
    1862:	d8 f7       	brcc	.-10     	; 0x185a <strnlen+0x2>
    1864:	80 95       	com	r24
    1866:	90 95       	com	r25
    1868:	8e 0f       	add	r24, r30
    186a:	9f 1f       	adc	r25, r31
    186c:	08 95       	ret

0000186e <fputc>:
    186e:	0f 93       	push	r16
    1870:	1f 93       	push	r17
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	18 2f       	mov	r17, r24
    1878:	09 2f       	mov	r16, r25
    187a:	eb 01       	movw	r28, r22
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	81 fd       	sbrc	r24, 1
    1880:	03 c0       	rjmp	.+6      	; 0x1888 <fputc+0x1a>
    1882:	8f ef       	ldi	r24, 0xFF	; 255
    1884:	9f ef       	ldi	r25, 0xFF	; 255
    1886:	20 c0       	rjmp	.+64     	; 0x18c8 <fputc+0x5a>
    1888:	82 ff       	sbrs	r24, 2
    188a:	10 c0       	rjmp	.+32     	; 0x18ac <fputc+0x3e>
    188c:	4e 81       	ldd	r20, Y+6	; 0x06
    188e:	5f 81       	ldd	r21, Y+7	; 0x07
    1890:	2c 81       	ldd	r18, Y+4	; 0x04
    1892:	3d 81       	ldd	r19, Y+5	; 0x05
    1894:	42 17       	cp	r20, r18
    1896:	53 07       	cpc	r21, r19
    1898:	7c f4       	brge	.+30     	; 0x18b8 <fputc+0x4a>
    189a:	e8 81       	ld	r30, Y
    189c:	f9 81       	ldd	r31, Y+1	; 0x01
    189e:	9f 01       	movw	r18, r30
    18a0:	2f 5f       	subi	r18, 0xFF	; 255
    18a2:	3f 4f       	sbci	r19, 0xFF	; 255
    18a4:	39 83       	std	Y+1, r19	; 0x01
    18a6:	28 83       	st	Y, r18
    18a8:	10 83       	st	Z, r17
    18aa:	06 c0       	rjmp	.+12     	; 0x18b8 <fputc+0x4a>
    18ac:	e8 85       	ldd	r30, Y+8	; 0x08
    18ae:	f9 85       	ldd	r31, Y+9	; 0x09
    18b0:	81 2f       	mov	r24, r17
    18b2:	09 95       	icall
    18b4:	89 2b       	or	r24, r25
    18b6:	29 f7       	brne	.-54     	; 0x1882 <fputc+0x14>
    18b8:	2e 81       	ldd	r18, Y+6	; 0x06
    18ba:	3f 81       	ldd	r19, Y+7	; 0x07
    18bc:	2f 5f       	subi	r18, 0xFF	; 255
    18be:	3f 4f       	sbci	r19, 0xFF	; 255
    18c0:	3f 83       	std	Y+7, r19	; 0x07
    18c2:	2e 83       	std	Y+6, r18	; 0x06
    18c4:	81 2f       	mov	r24, r17
    18c6:	90 2f       	mov	r25, r16
    18c8:	df 91       	pop	r29
    18ca:	cf 91       	pop	r28
    18cc:	1f 91       	pop	r17
    18ce:	0f 91       	pop	r16
    18d0:	08 95       	ret

000018d2 <__ultoa_invert>:
    18d2:	fa 01       	movw	r30, r20
    18d4:	aa 27       	eor	r26, r26
    18d6:	28 30       	cpi	r18, 0x08	; 8
    18d8:	51 f1       	breq	.+84     	; 0x192e <__ultoa_invert+0x5c>
    18da:	20 31       	cpi	r18, 0x10	; 16
    18dc:	81 f1       	breq	.+96     	; 0x193e <__ultoa_invert+0x6c>
    18de:	e8 94       	clt
    18e0:	6f 93       	push	r22
    18e2:	6e 7f       	andi	r22, 0xFE	; 254
    18e4:	6e 5f       	subi	r22, 0xFE	; 254
    18e6:	7f 4f       	sbci	r23, 0xFF	; 255
    18e8:	8f 4f       	sbci	r24, 0xFF	; 255
    18ea:	9f 4f       	sbci	r25, 0xFF	; 255
    18ec:	af 4f       	sbci	r26, 0xFF	; 255
    18ee:	b1 e0       	ldi	r27, 0x01	; 1
    18f0:	3e d0       	rcall	.+124    	; 0x196e <__ultoa_invert+0x9c>
    18f2:	b4 e0       	ldi	r27, 0x04	; 4
    18f4:	3c d0       	rcall	.+120    	; 0x196e <__ultoa_invert+0x9c>
    18f6:	67 0f       	add	r22, r23
    18f8:	78 1f       	adc	r23, r24
    18fa:	89 1f       	adc	r24, r25
    18fc:	9a 1f       	adc	r25, r26
    18fe:	a1 1d       	adc	r26, r1
    1900:	68 0f       	add	r22, r24
    1902:	79 1f       	adc	r23, r25
    1904:	8a 1f       	adc	r24, r26
    1906:	91 1d       	adc	r25, r1
    1908:	a1 1d       	adc	r26, r1
    190a:	6a 0f       	add	r22, r26
    190c:	71 1d       	adc	r23, r1
    190e:	81 1d       	adc	r24, r1
    1910:	91 1d       	adc	r25, r1
    1912:	a1 1d       	adc	r26, r1
    1914:	20 d0       	rcall	.+64     	; 0x1956 <__ultoa_invert+0x84>
    1916:	09 f4       	brne	.+2      	; 0x191a <__ultoa_invert+0x48>
    1918:	68 94       	set
    191a:	3f 91       	pop	r19
    191c:	2a e0       	ldi	r18, 0x0A	; 10
    191e:	26 9f       	mul	r18, r22
    1920:	11 24       	eor	r1, r1
    1922:	30 19       	sub	r19, r0
    1924:	30 5d       	subi	r19, 0xD0	; 208
    1926:	31 93       	st	Z+, r19
    1928:	de f6       	brtc	.-74     	; 0x18e0 <__ultoa_invert+0xe>
    192a:	cf 01       	movw	r24, r30
    192c:	08 95       	ret
    192e:	46 2f       	mov	r20, r22
    1930:	47 70       	andi	r20, 0x07	; 7
    1932:	40 5d       	subi	r20, 0xD0	; 208
    1934:	41 93       	st	Z+, r20
    1936:	b3 e0       	ldi	r27, 0x03	; 3
    1938:	0f d0       	rcall	.+30     	; 0x1958 <__ultoa_invert+0x86>
    193a:	c9 f7       	brne	.-14     	; 0x192e <__ultoa_invert+0x5c>
    193c:	f6 cf       	rjmp	.-20     	; 0x192a <__ultoa_invert+0x58>
    193e:	46 2f       	mov	r20, r22
    1940:	4f 70       	andi	r20, 0x0F	; 15
    1942:	40 5d       	subi	r20, 0xD0	; 208
    1944:	4a 33       	cpi	r20, 0x3A	; 58
    1946:	18 f0       	brcs	.+6      	; 0x194e <__ultoa_invert+0x7c>
    1948:	49 5d       	subi	r20, 0xD9	; 217
    194a:	31 fd       	sbrc	r19, 1
    194c:	40 52       	subi	r20, 0x20	; 32
    194e:	41 93       	st	Z+, r20
    1950:	02 d0       	rcall	.+4      	; 0x1956 <__ultoa_invert+0x84>
    1952:	a9 f7       	brne	.-22     	; 0x193e <__ultoa_invert+0x6c>
    1954:	ea cf       	rjmp	.-44     	; 0x192a <__ultoa_invert+0x58>
    1956:	b4 e0       	ldi	r27, 0x04	; 4
    1958:	a6 95       	lsr	r26
    195a:	97 95       	ror	r25
    195c:	87 95       	ror	r24
    195e:	77 95       	ror	r23
    1960:	67 95       	ror	r22
    1962:	ba 95       	dec	r27
    1964:	c9 f7       	brne	.-14     	; 0x1958 <__ultoa_invert+0x86>
    1966:	00 97       	sbiw	r24, 0x00	; 0
    1968:	61 05       	cpc	r22, r1
    196a:	71 05       	cpc	r23, r1
    196c:	08 95       	ret
    196e:	9b 01       	movw	r18, r22
    1970:	ac 01       	movw	r20, r24
    1972:	0a 2e       	mov	r0, r26
    1974:	06 94       	lsr	r0
    1976:	57 95       	ror	r21
    1978:	47 95       	ror	r20
    197a:	37 95       	ror	r19
    197c:	27 95       	ror	r18
    197e:	ba 95       	dec	r27
    1980:	c9 f7       	brne	.-14     	; 0x1974 <__ultoa_invert+0xa2>
    1982:	62 0f       	add	r22, r18
    1984:	73 1f       	adc	r23, r19
    1986:	84 1f       	adc	r24, r20
    1988:	95 1f       	adc	r25, r21
    198a:	a0 1d       	adc	r26, r0
    198c:	08 95       	ret

0000198e <__prologue_saves__>:
    198e:	2f 92       	push	r2
    1990:	3f 92       	push	r3
    1992:	4f 92       	push	r4
    1994:	5f 92       	push	r5
    1996:	6f 92       	push	r6
    1998:	7f 92       	push	r7
    199a:	8f 92       	push	r8
    199c:	9f 92       	push	r9
    199e:	af 92       	push	r10
    19a0:	bf 92       	push	r11
    19a2:	cf 92       	push	r12
    19a4:	df 92       	push	r13
    19a6:	ef 92       	push	r14
    19a8:	ff 92       	push	r15
    19aa:	0f 93       	push	r16
    19ac:	1f 93       	push	r17
    19ae:	cf 93       	push	r28
    19b0:	df 93       	push	r29
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
    19b6:	ca 1b       	sub	r28, r26
    19b8:	db 0b       	sbc	r29, r27
    19ba:	0f b6       	in	r0, 0x3f	; 63
    19bc:	f8 94       	cli
    19be:	de bf       	out	0x3e, r29	; 62
    19c0:	0f be       	out	0x3f, r0	; 63
    19c2:	cd bf       	out	0x3d, r28	; 61
    19c4:	09 94       	ijmp

000019c6 <__epilogue_restores__>:
    19c6:	2a 88       	ldd	r2, Y+18	; 0x12
    19c8:	39 88       	ldd	r3, Y+17	; 0x11
    19ca:	48 88       	ldd	r4, Y+16	; 0x10
    19cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    19ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    19d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    19d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    19d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    19d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    19d8:	b9 84       	ldd	r11, Y+9	; 0x09
    19da:	c8 84       	ldd	r12, Y+8	; 0x08
    19dc:	df 80       	ldd	r13, Y+7	; 0x07
    19de:	ee 80       	ldd	r14, Y+6	; 0x06
    19e0:	fd 80       	ldd	r15, Y+5	; 0x05
    19e2:	0c 81       	ldd	r16, Y+4	; 0x04
    19e4:	1b 81       	ldd	r17, Y+3	; 0x03
    19e6:	aa 81       	ldd	r26, Y+2	; 0x02
    19e8:	b9 81       	ldd	r27, Y+1	; 0x01
    19ea:	ce 0f       	add	r28, r30
    19ec:	d1 1d       	adc	r29, r1
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	f8 94       	cli
    19f2:	de bf       	out	0x3e, r29	; 62
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	cd bf       	out	0x3d, r28	; 61
    19f8:	ed 01       	movw	r28, r26
    19fa:	08 95       	ret

000019fc <_exit>:
    19fc:	f8 94       	cli

000019fe <__stop_program>:
    19fe:	ff cf       	rjmp	.-2      	; 0x19fe <__stop_program>
