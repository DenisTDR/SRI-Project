
SRI Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000021c  00800100  00001748  000017dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001748  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012b  0080031c  0080031c  000019f8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000019f8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000218  00000000  00000000  00001a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f4b  00000000  00000000  00001c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009df  00000000  00000000  00003bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bf9  00000000  00000000  00004596  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005e0  00000000  00000000  00005190  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000078d  00000000  00000000  00005770  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000015b5  00000000  00000000  00005efd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e8  00000000  00000000  000074b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      3c:	0c 94 49 04 	jmp	0x892	; 0x892 <__vector_15>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 84 04 	jmp	0x908	; 0x908 <__vector_20>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      6c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      70:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      74:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      78:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      7c:	49 01       	movw	r8, r18
      7e:	4c 01       	movw	r8, r24
      80:	9b 01       	movw	r18, r22
      82:	9b 01       	movw	r18, r22
      84:	9b 01       	movw	r18, r22
      86:	9b 01       	movw	r18, r22
      88:	9b 01       	movw	r18, r22
      8a:	9b 01       	movw	r18, r22
      8c:	9b 01       	movw	r18, r22
      8e:	9b 01       	movw	r18, r22
      90:	9b 01       	movw	r18, r22
      92:	9b 01       	movw	r18, r22
      94:	8d 01       	movw	r16, r26
      96:	4f 01       	movw	r8, r30
      98:	54 01       	movw	r10, r8
      9a:	7e 01       	movw	r14, r28
      9c:	87 01       	movw	r16, r14
      9e:	81 01       	movw	r16, r2
      a0:	9b 01       	movw	r18, r22
      a2:	97 01       	movw	r18, r14

000000a4 <__ctors_end>:
      a4:	11 24       	eor	r1, r1
      a6:	1f be       	out	0x3f, r1	; 63
      a8:	cf ef       	ldi	r28, 0xFF	; 255
      aa:	d0 e1       	ldi	r29, 0x10	; 16
      ac:	de bf       	out	0x3e, r29	; 62
      ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
      b0:	13 e0       	ldi	r17, 0x03	; 3
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e8 e4       	ldi	r30, 0x48	; 72
      b8:	f7 e1       	ldi	r31, 0x17	; 23
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 31       	cpi	r26, 0x1C	; 28
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	24 e0       	ldi	r18, 0x04	; 4
      c8:	ac e1       	ldi	r26, 0x1C	; 28
      ca:	b3 e0       	ldi	r27, 0x03	; 3
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a7 34       	cpi	r26, 0x47	; 71
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 aa 04 	call	0x954	; 0x954 <main>
      da:	0c 94 a2 0b 	jmp	0x1744	; 0x1744 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <resetBTProtocol>:
unsigned char len;
unsigned char date[10];
unsigned char dateCrtIndex;

void resetBTProtocol(){
	state = WaitingStartByte;
      e2:	10 92 02 01 	sts	0x0102, r1
      e6:	08 95       	ret

000000e8 <BTInit>:
}

void BTInit()
{
	/*Pentru Receive*/
	UBRR0L = 51; //baud rate 9600 bps
      e8:	83 e3       	ldi	r24, 0x33	; 51
      ea:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B |= _BV(RXCIE0);
      ee:	e1 ec       	ldi	r30, 0xC1	; 193
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	80 81       	ld	r24, Z
      f4:	80 68       	ori	r24, 0x80	; 128
      f6:	80 83       	st	Z, r24
	UCSR0B |= _BV(RXEN0);
      f8:	80 81       	ld	r24, Z
      fa:	80 61       	ori	r24, 0x10	; 16
      fc:	80 83       	st	Z, r24
	UCSR0B |= _BV(TXEN0);
      fe:	80 81       	ld	r24, Z
     100:	88 60       	ori	r24, 0x08	; 8
     102:	80 83       	st	Z, r24
     104:	08 95       	ret

00000106 <BTTransmitStr>:
}

void BTTransmitStr(char *theString){
	uint8_t len, i;
	
	len = strlen(theString);
     106:	fc 01       	movw	r30, r24
     108:	01 90       	ld	r0, Z+
     10a:	00 20       	and	r0, r0
     10c:	e9 f7       	brne	.-6      	; 0x108 <BTTransmitStr+0x2>
     10e:	31 97       	sbiw	r30, 0x01	; 1
     110:	e8 1b       	sub	r30, r24
     112:	f9 0b       	sbc	r31, r25
     114:	2e 2f       	mov	r18, r30
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     116:	3a ea       	ldi	r19, 0xAA	; 170
     118:	30 93 c6 00 	sts	0x00C6, r19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     11c:	af e1       	ldi	r26, 0x1F	; 31
     11e:	be e4       	ldi	r27, 0x4E	; 78
     120:	11 97       	sbiw	r26, 0x01	; 1
     122:	f1 f7       	brne	.-4      	; 0x120 <BTTransmitStr+0x1a>
     124:	00 c0       	rjmp	.+0      	; 0x126 <BTTransmitStr+0x20>
     126:	00 00       	nop
     128:	34 e1       	ldi	r19, 0x14	; 20
     12a:	30 93 c6 00 	sts	0x00C6, r19
     12e:	af e1       	ldi	r26, 0x1F	; 31
     130:	be e4       	ldi	r27, 0x4E	; 78
     132:	11 97       	sbiw	r26, 0x01	; 1
     134:	f1 f7       	brne	.-4      	; 0x132 <BTTransmitStr+0x2c>
     136:	00 c0       	rjmp	.+0      	; 0x138 <BTTransmitStr+0x32>
     138:	00 00       	nop
     13a:	e0 93 c6 00 	sts	0x00C6, r30
     13e:	ef e1       	ldi	r30, 0x1F	; 31
     140:	fe e4       	ldi	r31, 0x4E	; 78
     142:	31 97       	sbiw	r30, 0x01	; 1
     144:	f1 f7       	brne	.-4      	; 0x142 <BTTransmitStr+0x3c>
     146:	00 c0       	rjmp	.+0      	; 0x148 <BTTransmitStr+0x42>
     148:	00 00       	nop
	
	BTTransmitChar(0xAA);
	BTTransmitChar(DisplayMessage);
	BTTransmitChar(len);
	
	for(i=0;i<len;i++)
     14a:	22 23       	and	r18, r18
     14c:	89 f0       	breq	.+34     	; 0x170 <BTTransmitStr+0x6a>
     14e:	38 2f       	mov	r19, r24
     150:	e8 2f       	mov	r30, r24
     152:	f9 2f       	mov	r31, r25
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     154:	a6 ec       	ldi	r26, 0xC6	; 198
     156:	b0 e0       	ldi	r27, 0x00	; 0
	BTTransmitChar(DisplayMessage);
	BTTransmitChar(len);
	
	for(i=0;i<len;i++)
	{
		BTTransmitChar(theString[i]);
     158:	81 91       	ld	r24, Z+
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     15a:	8c 93       	st	X, r24
     15c:	8f e1       	ldi	r24, 0x1F	; 31
     15e:	9e e4       	ldi	r25, 0x4E	; 78
     160:	01 97       	sbiw	r24, 0x01	; 1
     162:	f1 f7       	brne	.-4      	; 0x160 <BTTransmitStr+0x5a>
     164:	00 c0       	rjmp	.+0      	; 0x166 <BTTransmitStr+0x60>
     166:	00 00       	nop
     168:	8e 2f       	mov	r24, r30
     16a:	83 1b       	sub	r24, r19
	
	BTTransmitChar(0xAA);
	BTTransmitChar(DisplayMessage);
	BTTransmitChar(len);
	
	for(i=0;i<len;i++)
     16c:	82 17       	cp	r24, r18
     16e:	a0 f3       	brcs	.-24     	; 0x158 <BTTransmitStr+0x52>
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     170:	85 e5       	ldi	r24, 0x55	; 85
     172:	80 93 c6 00 	sts	0x00C6, r24
     176:	af e1       	ldi	r26, 0x1F	; 31
     178:	be e4       	ldi	r27, 0x4E	; 78
     17a:	11 97       	sbiw	r26, 0x01	; 1
     17c:	f1 f7       	brne	.-4      	; 0x17a <BTTransmitStr+0x74>
     17e:	00 c0       	rjmp	.+0      	; 0x180 <BTTransmitStr+0x7a>
     180:	00 00       	nop
     182:	08 95       	ret

00000184 <BTTransmitMsg>:
	}
	BTTransmitChar(0x55);
	
}

void BTTransmitMsg(char *theString, uint8_t len){
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
	uint16_t i;
	for(i=0;i<len;i++)
     188:	70 e0       	ldi	r23, 0x00	; 0
     18a:	61 15       	cp	r22, r1
     18c:	71 05       	cpc	r23, r1
     18e:	91 f0       	breq	.+36     	; 0x1b4 <BTTransmitMsg+0x30>
     190:	e8 2f       	mov	r30, r24
     192:	f9 2f       	mov	r31, r25
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	90 e0       	ldi	r25, 0x00	; 0
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     198:	a6 ec       	ldi	r26, 0xC6	; 198
     19a:	b0 e0       	ldi	r27, 0x00	; 0

void BTTransmitMsg(char *theString, uint8_t len){
	uint16_t i;
	for(i=0;i<len;i++)
	{
		BTTransmitChar(theString[i]);
     19c:	21 91       	ld	r18, Z+
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     19e:	2c 93       	st	X, r18
     1a0:	cf e1       	ldi	r28, 0x1F	; 31
     1a2:	de e4       	ldi	r29, 0x4E	; 78
     1a4:	21 97       	sbiw	r28, 0x01	; 1
     1a6:	f1 f7       	brne	.-4      	; 0x1a4 <BTTransmitMsg+0x20>
     1a8:	00 c0       	rjmp	.+0      	; 0x1aa <BTTransmitMsg+0x26>
     1aa:	00 00       	nop
	
}

void BTTransmitMsg(char *theString, uint8_t len){
	uint16_t i;
	for(i=0;i<len;i++)
     1ac:	01 96       	adiw	r24, 0x01	; 1
     1ae:	86 17       	cp	r24, r22
     1b0:	97 07       	cpc	r25, r23
     1b2:	a0 f3       	brcs	.-24     	; 0x19c <BTTransmitMsg+0x18>
	{
		BTTransmitChar(theString[i]);
	}
}
     1b4:	df 91       	pop	r29
     1b6:	cf 91       	pop	r28
     1b8:	08 95       	ret

000001ba <reTransmit>:
#include "../Timing/Timing.h"
#include "../Car/Sensors.h"

void prelucreazaDatele(void);

void reTransmit(void){
     1ba:	cf 93       	push	r28
     1bc:	df 93       	push	r29
     1be:	00 d0       	rcall	.+0      	; 0x1c0 <reTransmit+0x6>
     1c0:	00 d0       	rcall	.+0      	; 0x1c2 <reTransmit+0x8>
     1c2:	cd b7       	in	r28, 0x3d	; 61
     1c4:	de b7       	in	r29, 0x3e	; 62
	//trimite un semnal telefonului pentru a retransmite ultimul mesaj
	printf("Trimite din nou ultimul mesaj!!!");
     1c6:	83 e0       	ldi	r24, 0x03	; 3
     1c8:	91 e0       	ldi	r25, 0x01	; 1
     1ca:	9f 93       	push	r25
     1cc:	8f 93       	push	r24
     1ce:	0e 94 bd 08 	call	0x117a	; 0x117a <printf>
	char msg[] = { StartByte, ReTransmitLastMsg, 0, 0x55 };
     1d2:	8a ea       	ldi	r24, 0xAA	; 170
     1d4:	89 83       	std	Y+1, r24	; 0x01
     1d6:	83 e1       	ldi	r24, 0x13	; 19
     1d8:	8a 83       	std	Y+2, r24	; 0x02
     1da:	1b 82       	std	Y+3, r1	; 0x03
     1dc:	85 e5       	ldi	r24, 0x55	; 85
     1de:	8c 83       	std	Y+4, r24	; 0x04
	BTTransmitMsg(msg, 4);
     1e0:	64 e0       	ldi	r22, 0x04	; 4
     1e2:	ce 01       	movw	r24, r28
     1e4:	01 96       	adiw	r24, 0x01	; 1
     1e6:	0e 94 c2 00 	call	0x184	; 0x184 <BTTransmitMsg>
}
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	0f 90       	pop	r0
     1f2:	0f 90       	pop	r0
     1f4:	0f 90       	pop	r0
     1f6:	df 91       	pop	r29
     1f8:	cf 91       	pop	r28
     1fa:	08 95       	ret

000001fc <resetALL>:
	UDR0 = theChar;
	_delay_ms(10);
}

void resetALL(){
	state = WaitingStartByte;
     1fc:	10 92 02 01 	sts	0x0102, r1
	resetSensorQueue(FrontLeftSensor);
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	0e 94 60 03 	call	0x6c0	; 0x6c0 <resetSensorQueue>
	resetSensorQueue(FrontRightSensor);
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	0e 94 60 03 	call	0x6c0	; 0x6c0 <resetSensorQueue>
	resetSensorQueue(FrontLeftSensor);
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	0e 94 60 03 	call	0x6c0	; 0x6c0 <resetSensorQueue>
	resetSensorQueue(FrontLeftSensor);
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	0e 94 60 03 	call	0x6c0	; 0x6c0 <resetSensorQueue>
     218:	08 95       	ret

0000021a <prelucreazaDatele>:
	//printf("\nstare noua %d: ", state);
}
extern volatile uint8_t ms2p1_enabled;

void prelucreazaDatele(void){
	cli();
     21a:	f8 94       	cli
	if(actiune >= GoFront && actiune <= GoRightB){
     21c:	80 91 25 03 	lds	r24, 0x0325
     220:	9f ef       	ldi	r25, 0xFF	; 255
     222:	98 0f       	add	r25, r24
     224:	96 30       	cpi	r25, 0x06	; 6
     226:	50 f5       	brcc	.+84     	; 0x27c <prelucreazaDatele+0x62>
		unsigned char timp = date[0];
     228:	90 91 26 03 	lds	r25, 0x0326
		unsigned char viteza = date[1];
     22c:	60 91 27 03 	lds	r22, 0x0327
		switch(actiune){
     230:	83 30       	cpi	r24, 0x03	; 3
     232:	a1 f0       	breq	.+40     	; 0x25c <prelucreazaDatele+0x42>
     234:	28 f4       	brcc	.+10     	; 0x240 <prelucreazaDatele+0x26>
     236:	81 30       	cpi	r24, 0x01	; 1
     238:	49 f0       	breq	.+18     	; 0x24c <prelucreazaDatele+0x32>
     23a:	82 30       	cpi	r24, 0x02	; 2
     23c:	59 f0       	breq	.+22     	; 0x254 <prelucreazaDatele+0x3a>
     23e:	08 95       	ret
     240:	85 30       	cpi	r24, 0x05	; 5
     242:	81 f0       	breq	.+32     	; 0x264 <prelucreazaDatele+0x4a>
     244:	98 f0       	brcs	.+38     	; 0x26c <prelucreazaDatele+0x52>
     246:	86 30       	cpi	r24, 0x06	; 6
     248:	a9 f0       	breq	.+42     	; 0x274 <prelucreazaDatele+0x5a>
     24a:	08 95       	ret
			case GoFront:
			goFront(timp, viteza);
     24c:	89 2f       	mov	r24, r25
     24e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <goFront>
			break;
     252:	08 95       	ret
			case GoBack:
			goBack(timp, viteza);
     254:	89 2f       	mov	r24, r25
     256:	0e 94 80 02 	call	0x500	; 0x500 <goBack>
			break;
     25a:	08 95       	ret
			case GoLeftF:
			goFrontLeft(timp, viteza);
     25c:	89 2f       	mov	r24, r25
     25e:	0e 94 a4 02 	call	0x548	; 0x548 <goFrontLeft>
			break;
     262:	08 95       	ret
			case GoLeftB:
			goBackLeft(timp, viteza);
     264:	89 2f       	mov	r24, r25
     266:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <goBackLeft>
			break;
     26a:	08 95       	ret
			case GoRightF:
			goFrontRight(timp, viteza);
     26c:	89 2f       	mov	r24, r25
     26e:	0e 94 c5 02 	call	0x58a	; 0x58a <goFrontRight>
			break;
     272:	08 95       	ret
			case GoRightB:
			goBackRight(timp, viteza);
     274:	89 2f       	mov	r24, r25
     276:	0e 94 0a 03 	call	0x614	; 0x614 <goBackRight>
			break;
     27a:	08 95       	ret
		}
		return;
	}
	
	
	switch(actiune){
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	fc 01       	movw	r30, r24
     280:	38 97       	sbiw	r30, 0x08	; 8
     282:	e4 31       	cpi	r30, 0x14	; 20
     284:	f1 05       	cpc	r31, r1
     286:	08 f0       	brcs	.+2      	; 0x28a <prelucreazaDatele+0x70>
     288:	56 c0       	rjmp	.+172    	; 0x336 <prelucreazaDatele+0x11c>
     28a:	e2 5c       	subi	r30, 0xC2	; 194
     28c:	ff 4f       	sbci	r31, 0xFF	; 255
     28e:	0c 94 9d 08 	jmp	0x113a	; 0x113a <__tablejump2__>
		case GoM2P2:
			completeEnclosedContour();
     292:	0e 94 17 02 	call	0x42e	; 0x42e <completeEnclosedContour>
		break;
     296:	4f c0       	rjmp	.+158    	; 0x336 <prelucreazaDatele+0x11c>
		case GoM2P3:			
			checkFreeParallelParkingPlace();
     298:	0e 94 12 02 	call	0x424	; 0x424 <checkFreeParallelParkingPlace>
		break;
     29c:	4c c0       	rjmp	.+152    	; 0x336 <prelucreazaDatele+0x11c>
		case Led:
			ledAction(date[0]);
     29e:	80 91 26 03 	lds	r24, 0x0326
     2a2:	0e 94 4d 07 	call	0xe9a	; 0xe9a <ledAction>
		break;
     2a6:	47 c0       	rjmp	.+142    	; 0x336 <prelucreazaDatele+0x11c>
		case ReadSensorValue:
			if(date[1] == 1){
     2a8:	80 91 27 03 	lds	r24, 0x0327
     2ac:	81 30       	cpi	r24, 0x01	; 1
     2ae:	d1 f4       	brne	.+52     	; 0x2e4 <prelucreazaDatele+0xca>
				if(date[0] == 0)
     2b0:	80 91 26 03 	lds	r24, 0x0326
     2b4:	81 11       	cpse	r24, r1
     2b6:	0a c0       	rjmp	.+20     	; 0x2cc <prelucreazaDatele+0xb2>
				addEntryToTimerQueue(&ReadSensor0, 1000UL * 1000UL, Periodic);
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	40 e4       	ldi	r20, 0x40	; 64
     2bc:	52 e4       	ldi	r21, 0x42	; 66
     2be:	6f e0       	ldi	r22, 0x0F	; 15
     2c0:	70 e0       	ldi	r23, 0x00	; 0
     2c2:	88 e7       	ldi	r24, 0x78	; 120
     2c4:	97 e0       	ldi	r25, 0x07	; 7
     2c6:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <addEntryToTimerQueue>
     2ca:	35 c0       	rjmp	.+106    	; 0x336 <prelucreazaDatele+0x11c>
				else if(date[0] == 1)
     2cc:	81 30       	cpi	r24, 0x01	; 1
     2ce:	99 f5       	brne	.+102    	; 0x336 <prelucreazaDatele+0x11c>
				addEntryToTimerQueue(&ReadSensor1, 1000UL * 1000UL, Periodic);
     2d0:	21 e0       	ldi	r18, 0x01	; 1
     2d2:	40 e4       	ldi	r20, 0x40	; 64
     2d4:	52 e4       	ldi	r21, 0x42	; 66
     2d6:	6f e0       	ldi	r22, 0x0F	; 15
     2d8:	70 e0       	ldi	r23, 0x00	; 0
     2da:	88 e6       	ldi	r24, 0x68	; 104
     2dc:	98 e0       	ldi	r25, 0x08	; 8
     2de:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <addEntryToTimerQueue>
     2e2:	29 c0       	rjmp	.+82     	; 0x336 <prelucreazaDatele+0x11c>
			}
			else
			if(date[0] == 0)
     2e4:	80 91 26 03 	lds	r24, 0x0326
     2e8:	81 11       	cpse	r24, r1
     2ea:	03 c0       	rjmp	.+6      	; 0x2f2 <prelucreazaDatele+0xd8>
			ReadSensor0();
     2ec:	0e 94 78 07 	call	0xef0	; 0xef0 <ReadSensor0>
     2f0:	22 c0       	rjmp	.+68     	; 0x336 <prelucreazaDatele+0x11c>
			else if(date[0] == 1)
     2f2:	81 30       	cpi	r24, 0x01	; 1
     2f4:	01 f5       	brne	.+64     	; 0x336 <prelucreazaDatele+0x11c>
			ReadSensor0();
     2f6:	0e 94 78 07 	call	0xef0	; 0xef0 <ReadSensor0>
     2fa:	1d c0       	rjmp	.+58     	; 0x336 <prelucreazaDatele+0x11c>
		break;
		case StopEngines:
			stopEngines();
     2fc:	0e 94 05 02 	call	0x40a	; 0x40a <stopEngines>
		break;
     300:	1a c0       	rjmp	.+52     	; 0x336 <prelucreazaDatele+0x11c>
		case RotirePeLocDreapta:
			rotirePeLoc(date[0], RightEngines);
     302:	60 e0       	ldi	r22, 0x00	; 0
     304:	80 91 26 03 	lds	r24, 0x0326
     308:	0e 94 2e 03 	call	0x65c	; 0x65c <rotirePeLoc>
		break;
     30c:	14 c0       	rjmp	.+40     	; 0x336 <prelucreazaDatele+0x11c>
		case RotirePeLocStanga:
			rotirePeLoc(date[0], LeftEngines);
     30e:	61 e0       	ldi	r22, 0x01	; 1
     310:	80 91 26 03 	lds	r24, 0x0326
     314:	0e 94 2e 03 	call	0x65c	; 0x65c <rotirePeLoc>
		break;
     318:	0e c0       	rjmp	.+28     	; 0x336 <prelucreazaDatele+0x11c>
		case DisplayMessage:
			addEntryToTimerQueue(&fctSmechera, 10UL * 1000UL, Periodic);
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	40 e1       	ldi	r20, 0x10	; 16
     31e:	57 e2       	ldi	r21, 0x27	; 39
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	8d ea       	ldi	r24, 0xAD	; 173
     326:	97 e0       	ldi	r25, 0x07	; 7
     328:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <addEntryToTimerQueue>
		break;
     32c:	04 c0       	rjmp	.+8      	; 0x336 <prelucreazaDatele+0x11c>
		case EndAction:
			resetTimerQueue();
     32e:	0e 94 41 07 	call	0xe82	; 0xe82 <resetTimerQueue>
			resetALL();
     332:	0e 94 fe 00 	call	0x1fc	; 0x1fc <resetALL>
		default:
			break;		
	}
	
	sei();
     336:	78 94       	sei
     338:	08 95       	ret

0000033a <BTProtocolReadByte>:
void resetBTProtocol(){
	state = WaitingStartByte;
}

extern volatile uint8_t debugging;
void BTProtocolReadByte(unsigned char theByte){
     33a:	cf 93       	push	r28
     33c:	c8 2f       	mov	r28, r24

	switch (state){
     33e:	90 91 02 01 	lds	r25, 0x0102
     342:	92 30       	cpi	r25, 0x02	; 2
     344:	69 f1       	breq	.+90     	; 0x3a0 <BTProtocolReadByte+0x66>
     346:	28 f4       	brcc	.+10     	; 0x352 <BTProtocolReadByte+0x18>
     348:	99 23       	and	r25, r25
     34a:	49 f0       	breq	.+18     	; 0x35e <BTProtocolReadByte+0x24>
     34c:	91 30       	cpi	r25, 0x01	; 1
     34e:	d9 f0       	breq	.+54     	; 0x386 <BTProtocolReadByte+0x4c>
     350:	5a c0       	rjmp	.+180    	; 0x406 <BTProtocolReadByte+0xcc>
     352:	93 30       	cpi	r25, 0x03	; 3
     354:	c9 f1       	breq	.+114    	; 0x3c8 <BTProtocolReadByte+0x8e>
     356:	94 30       	cpi	r25, 0x04	; 4
     358:	09 f4       	brne	.+2      	; 0x35c <BTProtocolReadByte+0x22>
     35a:	48 c0       	rjmp	.+144    	; 0x3ec <BTProtocolReadByte+0xb2>
     35c:	54 c0       	rjmp	.+168    	; 0x406 <BTProtocolReadByte+0xcc>
		case WaitingStartByte:
			if(theByte == StartByte){
     35e:	8a 3a       	cpi	r24, 0xAA	; 170
     360:	09 f0       	breq	.+2      	; 0x364 <BTProtocolReadByte+0x2a>
     362:	51 c0       	rjmp	.+162    	; 0x406 <BTProtocolReadByte+0xcc>
				state = WaitingCarAction;
     364:	c1 e0       	ldi	r28, 0x01	; 1
     366:	c0 93 02 01 	sts	0x0102, r28
				debugging = 0;
     36a:	10 92 00 01 	sts	0x0100, r1
				addEntryToTimerQueue(&resetBTProtocol, 1000UL * 1000UL * 10UL, Once);
     36e:	20 e0       	ldi	r18, 0x00	; 0
     370:	40 e8       	ldi	r20, 0x80	; 128
     372:	56 e9       	ldi	r21, 0x96	; 150
     374:	68 e9       	ldi	r22, 0x98	; 152
     376:	70 e0       	ldi	r23, 0x00	; 0
     378:	81 e7       	ldi	r24, 0x71	; 113
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <addEntryToTimerQueue>
				debugging = 1;
     380:	c0 93 00 01 	sts	0x0100, r28
     384:	40 c0       	rjmp	.+128    	; 0x406 <BTProtocolReadByte+0xcc>
			}
			break;

		case WaitingCarAction:
			if(theByte >= NoAction && theByte < EndAction){
     386:	8b 31       	cpi	r24, 0x1B	; 27
     388:	30 f4       	brcc	.+12     	; 0x396 <BTProtocolReadByte+0x5c>
				state = WaitingDataLength;
     38a:	82 e0       	ldi	r24, 0x02	; 2
     38c:	80 93 02 01 	sts	0x0102, r24
				actiune = theByte;
     390:	c0 93 25 03 	sts	0x0325, r28
     394:	38 c0       	rjmp	.+112    	; 0x406 <BTProtocolReadByte+0xcc>
			}
			else{
				state = WaitingStartByte;
     396:	10 92 02 01 	sts	0x0102, r1
				reTransmit(); // error ocurred, send retransmit signal
     39a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <reTransmit>
     39e:	33 c0       	rjmp	.+102    	; 0x406 <BTProtocolReadByte+0xcc>
			}
			break;

		case WaitingDataLength:
			if(theByte==0){
     3a0:	81 11       	cpse	r24, r1
     3a2:	05 c0       	rjmp	.+10     	; 0x3ae <BTProtocolReadByte+0x74>
				state = WaitingEndByte;
			}
			state = ReadingData;
			len = theByte;
     3a4:	10 92 30 03 	sts	0x0330, r1
			dateCrtIndex = 0;
     3a8:	10 92 24 03 	sts	0x0324, r1
     3ac:	0a c0       	rjmp	.+20     	; 0x3c2 <BTProtocolReadByte+0x88>

		case WaitingDataLength:
			if(theByte==0){
				state = WaitingEndByte;
			}
			state = ReadingData;
     3ae:	83 e0       	ldi	r24, 0x03	; 3
     3b0:	80 93 02 01 	sts	0x0102, r24
			len = theByte;
     3b4:	c0 93 30 03 	sts	0x0330, r28
			dateCrtIndex = 0;
     3b8:	10 92 24 03 	sts	0x0324, r1
			if(len<=0 || len>50)
     3bc:	c1 50       	subi	r28, 0x01	; 1
     3be:	c2 33       	cpi	r28, 0x32	; 50
     3c0:	10 f1       	brcs	.+68     	; 0x406 <BTProtocolReadByte+0xcc>
			state=WaitingStartByte;
     3c2:	10 92 02 01 	sts	0x0102, r1
     3c6:	1f c0       	rjmp	.+62     	; 0x406 <BTProtocolReadByte+0xcc>
			break;

		case ReadingData:
			date[dateCrtIndex++] = theByte;
     3c8:	e0 91 24 03 	lds	r30, 0x0324
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	8e 0f       	add	r24, r30
     3d0:	80 93 24 03 	sts	0x0324, r24
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	ea 5d       	subi	r30, 0xDA	; 218
     3d8:	fc 4f       	sbci	r31, 0xFC	; 252
     3da:	c0 83       	st	Z, r28
			if(dateCrtIndex >= len)
     3dc:	90 91 30 03 	lds	r25, 0x0330
     3e0:	89 17       	cp	r24, r25
     3e2:	88 f0       	brcs	.+34     	; 0x406 <BTProtocolReadByte+0xcc>
			state = WaitingEndByte;
     3e4:	84 e0       	ldi	r24, 0x04	; 4
     3e6:	80 93 02 01 	sts	0x0102, r24
     3ea:	0d c0       	rjmp	.+26     	; 0x406 <BTProtocolReadByte+0xcc>
			break;
		case WaitingEndByte:
			removeEntryFromTimerQueue(&resetBTProtocol);
     3ec:	81 e7       	ldi	r24, 0x71	; 113
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	0e 94 c6 05 	call	0xb8c	; 0xb8c <removeEntryFromTimerQueue>
			if(theByte != 0x55){
     3f4:	c5 35       	cpi	r28, 0x55	; 85
     3f6:	19 f0       	breq	.+6      	; 0x3fe <BTProtocolReadByte+0xc4>
				reTransmit(); // error ocurred, send retransmit signal
     3f8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <reTransmit>
     3fc:	02 c0       	rjmp	.+4      	; 0x402 <BTProtocolReadByte+0xc8>
			}
			else{
				prelucreazaDatele();
     3fe:	0e 94 0d 01 	call	0x21a	; 0x21a <prelucreazaDatele>
			}
			state = WaitingStartByte;
     402:	10 92 02 01 	sts	0x0102, r1
			break;

	}

	//printf("\nstare noua %d: ", state);
}
     406:	cf 91       	pop	r28
     408:	08 95       	ret

0000040a <stopEngines>:
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
}

extern volatile uint32_t time;
void stopEngines(){
    BTTransmitStr("M-am oprit!");
     40a:	84 e2       	ldi	r24, 0x24	; 36
     40c:	91 e0       	ldi	r25, 0x01	; 1
     40e:	0e 94 83 00 	call	0x106	; 0x106 <BTTransmitStr>
	
	PORTC &=~ 1<<PINC1;
     412:	88 b1       	in	r24, 0x08	; 8
     414:	8c 7f       	andi	r24, 0xFC	; 252
     416:	88 b9       	out	0x08, r24	; 8
	PORTC &=~ 1<<PINC0;	
     418:	40 98       	cbi	0x08, 0	; 8
	
	OCR0A = 255;
     41a:	8f ef       	ldi	r24, 0xFF	; 255
     41c:	87 bd       	out	0x27, r24	; 39
	OCR2A = 255;
     41e:	80 93 b3 00 	sts	0x00B3, r24
     422:	08 95       	ret

00000424 <checkFreeParallelParkingPlace>:
	//setEnginesSpeed(RightEngines, 1, 0);
	//setEnginesSpeed(LeftEngines, 1, 0);
}
void checkFreeParallelParkingPlace(){
	
    BTTransmitStr("Start Free P P P!");
     424:	80 e3       	ldi	r24, 0x30	; 48
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	0e 94 83 00 	call	0x106	; 0x106 <BTTransmitStr>
     42c:	08 95       	ret

0000042e <completeEnclosedContour>:
}
void completeEnclosedContour(){
	
	
    BTTransmitStr("Start complete enclosed contour!");
     42e:	82 e4       	ldi	r24, 0x42	; 66
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	0e 94 83 00 	call	0x106	; 0x106 <BTTransmitStr>
     436:	08 95       	ret

00000438 <initEngines>:


void initEngines()
{
	
	OCR0A = 255;
     438:	8f ef       	ldi	r24, 0xFF	; 255
     43a:	87 bd       	out	0x27, r24	; 39
	OCR2A = 255;
     43c:	80 93 b3 00 	sts	0x00B3, r24
	
	PINB|=(1<<PB3);
     440:	1b 9a       	sbi	0x03, 3	; 3
	TCCR0A |=3;
     442:	84 b5       	in	r24, 0x24	; 36
     444:	83 60       	ori	r24, 0x03	; 3
     446:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0A0);
     448:	84 b5       	in	r24, 0x24	; 36
     44a:	80 64       	ori	r24, 0x40	; 64
     44c:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0A1);
     44e:	84 b5       	in	r24, 0x24	; 36
     450:	80 68       	ori	r24, 0x80	; 128
     452:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS00);
     454:	85 b5       	in	r24, 0x25	; 37
     456:	81 60       	ori	r24, 0x01	; 1
     458:	85 bd       	out	0x25, r24	; 37
	DDRB |=1<<PINB3;
     45a:	23 9a       	sbi	0x04, 3	; 4
	// motor 2
	DDRD |= (1 << PD7);
     45c:	57 9a       	sbi	0x0a, 7	; 10
	TCCR2A|=3;
     45e:	e0 eb       	ldi	r30, 0xB0	; 176
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	80 81       	ld	r24, Z
     464:	83 60       	ori	r24, 0x03	; 3
     466:	80 83       	st	Z, r24
	TCCR2A |= (1 << COM2A0);
     468:	80 81       	ld	r24, Z
     46a:	80 64       	ori	r24, 0x40	; 64
     46c:	80 83       	st	Z, r24
	TCCR2A |= (1 << COM2A1);
     46e:	80 81       	ld	r24, Z
     470:	80 68       	ori	r24, 0x80	; 128
     472:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS20);
     474:	e1 eb       	ldi	r30, 0xB1	; 177
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	80 81       	ld	r24, Z
     47a:	81 60       	ori	r24, 0x01	; 1
     47c:	80 83       	st	Z, r24
	//sens
	DDRC |= 1<<PINC0;
     47e:	38 9a       	sbi	0x07, 0	; 7
	DDRC |= 1<<PINC1;
     480:	39 9a       	sbi	0x07, 1	; 7
	
	
	PORTC &=~ 1<<PINC1;
     482:	88 b1       	in	r24, 0x08	; 8
     484:	8c 7f       	andi	r24, 0xFC	; 252
     486:	88 b9       	out	0x08, r24	; 8
	PORTC &=~ 1<<PINC0;	
     488:	40 98       	cbi	0x08, 0	; 8
     48a:	08 95       	ret

0000048c <setEnginesSpeed>:
			PORTC |= 1<<PINC0;	*/
}

void setEnginesSpeed(Engines engine, Sens sens, uint8_t viteza)
{
	if(sens == SensFata)
     48c:	61 11       	cpse	r22, r1
     48e:	01 c0       	rjmp	.+2      	; 0x492 <setEnginesSpeed+0x6>
		viteza = 255 - viteza;
     490:	40 95       	com	r20
		
	if(engine==RightEngines){
     492:	81 11       	cpse	r24, r1
     494:	08 c0       	rjmp	.+16     	; 0x4a6 <setEnginesSpeed+0x1a>
		OCR2A = viteza;
     496:	40 93 b3 00 	sts	0x00B3, r20
		if(sens == SensFata){	
     49a:	61 11       	cpse	r22, r1
     49c:	02 c0       	rjmp	.+4      	; 0x4a2 <setEnginesSpeed+0x16>
			PORTC &=~ 1<<PINC0;
     49e:	40 98       	cbi	0x08, 0	; 8
     4a0:	08 95       	ret
		}			
		else{
			PORTC |= 1<<PINC0;	
     4a2:	40 9a       	sbi	0x08, 0	; 8
     4a4:	08 95       	ret
		}			
	}
	else
	{
		OCR0A = viteza;
     4a6:	47 bd       	out	0x27, r20	; 39
		if(sens == SensFata){	
     4a8:	61 11       	cpse	r22, r1
     4aa:	04 c0       	rjmp	.+8      	; 0x4b4 <setEnginesSpeed+0x28>
			PORTC &=~ 1<<PINC1;
     4ac:	88 b1       	in	r24, 0x08	; 8
     4ae:	8c 7f       	andi	r24, 0xFC	; 252
     4b0:	88 b9       	out	0x08, r24	; 8
     4b2:	08 95       	ret
		}			
		else{			
			PORTC |= 1<<PINC1;			
     4b4:	41 9a       	sbi	0x08, 1	; 8
     4b6:	08 95       	ret

000004b8 <goFront>:
#include "../BTProtocol/BTProtocol.h"
#include "../Timing/Timing.h"

void setEnginesSpeed(Engines, Sens, uint8_t);

void goFront(uint8_t timp, uint8_t viteza){	
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	d8 2f       	mov	r29, r24
     4be:	c6 2f       	mov	r28, r22
	setEnginesSpeed(RightEngines, SensFata, viteza);
     4c0:	46 2f       	mov	r20, r22
     4c2:	60 e0       	ldi	r22, 0x00	; 0
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	0e 94 46 02 	call	0x48c	; 0x48c <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensFata, viteza);
     4ca:	4c 2f       	mov	r20, r28
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	0e 94 46 02 	call	0x48c	; 0x48c <setEnginesSpeed>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);	
     4d4:	ad 2f       	mov	r26, r29
     4d6:	b0 e0       	ldi	r27, 0x00	; 0
     4d8:	20 e4       	ldi	r18, 0x40	; 64
     4da:	32 e4       	ldi	r19, 0x42	; 66
     4dc:	4f e0       	ldi	r20, 0x0F	; 15
     4de:	50 e0       	ldi	r21, 0x00	; 0
     4e0:	0e 94 b2 08 	call	0x1164	; 0x1164 <__muluhisi3>
     4e4:	ab 01       	movw	r20, r22
     4e6:	bc 01       	movw	r22, r24
     4e8:	20 e0       	ldi	r18, 0x00	; 0
     4ea:	85 e0       	ldi	r24, 0x05	; 5
     4ec:	92 e0       	ldi	r25, 0x02	; 2
     4ee:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inainte!");
     4f2:	83 e6       	ldi	r24, 0x63	; 99
     4f4:	91 e0       	ldi	r25, 0x01	; 1
     4f6:	0e 94 83 00 	call	0x106	; 0x106 <BTTransmitStr>
}
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	08 95       	ret

00000500 <goBack>:
void goBack(uint8_t timp, uint8_t viteza){
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	d8 2f       	mov	r29, r24
     506:	c6 2f       	mov	r28, r22
	setEnginesSpeed(RightEngines, SensSpate, viteza);
     508:	46 2f       	mov	r20, r22
     50a:	61 e0       	ldi	r22, 0x01	; 1
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	0e 94 46 02 	call	0x48c	; 0x48c <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensSpate, viteza);
     512:	4c 2f       	mov	r20, r28
     514:	61 e0       	ldi	r22, 0x01	; 1
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	0e 94 46 02 	call	0x48c	; 0x48c <setEnginesSpeed>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     51c:	ad 2f       	mov	r26, r29
     51e:	b0 e0       	ldi	r27, 0x00	; 0
     520:	20 e4       	ldi	r18, 0x40	; 64
     522:	32 e4       	ldi	r19, 0x42	; 66
     524:	4f e0       	ldi	r20, 0x0F	; 15
     526:	50 e0       	ldi	r21, 0x00	; 0
     528:	0e 94 b2 08 	call	0x1164	; 0x1164 <__muluhisi3>
     52c:	ab 01       	movw	r20, r22
     52e:	bc 01       	movw	r22, r24
     530:	20 e0       	ldi	r18, 0x00	; 0
     532:	85 e0       	ldi	r24, 0x05	; 5
     534:	92 e0       	ldi	r25, 0x02	; 2
     536:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inapoi!");
     53a:	83 e7       	ldi	r24, 0x73	; 115
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	0e 94 83 00 	call	0x106	; 0x106 <BTTransmitStr>
}
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	08 95       	ret

00000548 <goFrontLeft>:

void goFrontLeft(uint8_t timp, uint8_t viteza){
     548:	cf 93       	push	r28
     54a:	c8 2f       	mov	r28, r24
     54c:	46 2f       	mov	r20, r22
	
	setEnginesSpeed(RightEngines, SensFata, viteza);
     54e:	60 e0       	ldi	r22, 0x00	; 0
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	0e 94 46 02 	call	0x48c	; 0x48c <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensFata, 10);
     556:	4a e0       	ldi	r20, 0x0A	; 10
     558:	60 e0       	ldi	r22, 0x00	; 0
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	0e 94 46 02 	call	0x48c	; 0x48c <setEnginesSpeed>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     560:	ac 2f       	mov	r26, r28
     562:	b0 e0       	ldi	r27, 0x00	; 0
     564:	20 e4       	ldi	r18, 0x40	; 64
     566:	32 e4       	ldi	r19, 0x42	; 66
     568:	4f e0       	ldi	r20, 0x0F	; 15
     56a:	50 e0       	ldi	r21, 0x00	; 0
     56c:	0e 94 b2 08 	call	0x1164	; 0x1164 <__muluhisi3>
     570:	ab 01       	movw	r20, r22
     572:	bc 01       	movw	r22, r24
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	85 e0       	ldi	r24, 0x05	; 5
     578:	92 e0       	ldi	r25, 0x02	; 2
     57a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inainte stanga!");
     57e:	82 e8       	ldi	r24, 0x82	; 130
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	0e 94 83 00 	call	0x106	; 0x106 <BTTransmitStr>
}
     586:	cf 91       	pop	r28
     588:	08 95       	ret

0000058a <goFrontRight>:
void goFrontRight(uint8_t timp, uint8_t viteza){
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	c8 2f       	mov	r28, r24
     590:	d6 2f       	mov	r29, r22
	
	setEnginesSpeed(RightEngines, SensFata, 10);
     592:	4a e0       	ldi	r20, 0x0A	; 10
     594:	60 e0       	ldi	r22, 0x00	; 0
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	0e 94 46 02 	call	0x48c	; 0x48c <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensFata, viteza);
     59c:	4d 2f       	mov	r20, r29
     59e:	60 e0       	ldi	r22, 0x00	; 0
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	0e 94 46 02 	call	0x48c	; 0x48c <setEnginesSpeed>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     5a6:	ac 2f       	mov	r26, r28
     5a8:	b0 e0       	ldi	r27, 0x00	; 0
     5aa:	20 e4       	ldi	r18, 0x40	; 64
     5ac:	32 e4       	ldi	r19, 0x42	; 66
     5ae:	4f e0       	ldi	r20, 0x0F	; 15
     5b0:	50 e0       	ldi	r21, 0x00	; 0
     5b2:	0e 94 b2 08 	call	0x1164	; 0x1164 <__muluhisi3>
     5b6:	ab 01       	movw	r20, r22
     5b8:	bc 01       	movw	r22, r24
     5ba:	20 e0       	ldi	r18, 0x00	; 0
     5bc:	85 e0       	ldi	r24, 0x05	; 5
     5be:	92 e0       	ldi	r25, 0x02	; 2
     5c0:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inainte dreapta!");
     5c4:	89 e9       	ldi	r24, 0x99	; 153
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	0e 94 83 00 	call	0x106	; 0x106 <BTTransmitStr>
}
     5cc:	df 91       	pop	r29
     5ce:	cf 91       	pop	r28
     5d0:	08 95       	ret

000005d2 <goBackLeft>:

void goBackLeft(uint8_t timp, uint8_t viteza){
     5d2:	cf 93       	push	r28
     5d4:	c8 2f       	mov	r28, r24
     5d6:	46 2f       	mov	r20, r22
	
	setEnginesSpeed(RightEngines, SensSpate, viteza);
     5d8:	61 e0       	ldi	r22, 0x01	; 1
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	0e 94 46 02 	call	0x48c	; 0x48c <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensSpate, 10);
     5e0:	4a e0       	ldi	r20, 0x0A	; 10
     5e2:	61 e0       	ldi	r22, 0x01	; 1
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	0e 94 46 02 	call	0x48c	; 0x48c <setEnginesSpeed>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     5ea:	ac 2f       	mov	r26, r28
     5ec:	b0 e0       	ldi	r27, 0x00	; 0
     5ee:	20 e4       	ldi	r18, 0x40	; 64
     5f0:	32 e4       	ldi	r19, 0x42	; 66
     5f2:	4f e0       	ldi	r20, 0x0F	; 15
     5f4:	50 e0       	ldi	r21, 0x00	; 0
     5f6:	0e 94 b2 08 	call	0x1164	; 0x1164 <__muluhisi3>
     5fa:	ab 01       	movw	r20, r22
     5fc:	bc 01       	movw	r22, r24
     5fe:	20 e0       	ldi	r18, 0x00	; 0
     600:	85 e0       	ldi	r24, 0x05	; 5
     602:	92 e0       	ldi	r25, 0x02	; 2
     604:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inapoi stanga!");
     608:	81 eb       	ldi	r24, 0xB1	; 177
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	0e 94 83 00 	call	0x106	; 0x106 <BTTransmitStr>
}
     610:	cf 91       	pop	r28
     612:	08 95       	ret

00000614 <goBackRight>:
void goBackRight(uint8_t timp, uint8_t viteza){
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	c8 2f       	mov	r28, r24
     61a:	d6 2f       	mov	r29, r22
	
	setEnginesSpeed(RightEngines, SensSpate, 10);
     61c:	4a e0       	ldi	r20, 0x0A	; 10
     61e:	61 e0       	ldi	r22, 0x01	; 1
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	0e 94 46 02 	call	0x48c	; 0x48c <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensSpate, viteza);
     626:	4d 2f       	mov	r20, r29
     628:	61 e0       	ldi	r22, 0x01	; 1
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	0e 94 46 02 	call	0x48c	; 0x48c <setEnginesSpeed>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     630:	ac 2f       	mov	r26, r28
     632:	b0 e0       	ldi	r27, 0x00	; 0
     634:	20 e4       	ldi	r18, 0x40	; 64
     636:	32 e4       	ldi	r19, 0x42	; 66
     638:	4f e0       	ldi	r20, 0x0F	; 15
     63a:	50 e0       	ldi	r21, 0x00	; 0
     63c:	0e 94 b2 08 	call	0x1164	; 0x1164 <__muluhisi3>
     640:	ab 01       	movw	r20, r22
     642:	bc 01       	movw	r22, r24
     644:	20 e0       	ldi	r18, 0x00	; 0
     646:	85 e0       	ldi	r24, 0x05	; 5
     648:	92 e0       	ldi	r25, 0x02	; 2
     64a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inapoi dreapta!");
     64e:	87 ec       	ldi	r24, 0xC7	; 199
     650:	91 e0       	ldi	r25, 0x01	; 1
     652:	0e 94 83 00 	call	0x106	; 0x106 <BTTransmitStr>
}
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	08 95       	ret

0000065c <rotirePeLoc>:
void rotirePeLoc(uint8_t timp, uint8_t engines){
     65c:	cf 93       	push	r28
     65e:	c8 2f       	mov	r28, r24
	
	if(engines == RightEngines){
     660:	61 11       	cpse	r22, r1
     662:	0f c0       	rjmp	.+30     	; 0x682 <rotirePeLoc+0x26>
		setEnginesSpeed(LeftEngines, SensSpate,  25);
     664:	49 e1       	ldi	r20, 0x19	; 25
     666:	61 e0       	ldi	r22, 0x01	; 1
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	0e 94 46 02 	call	0x48c	; 0x48c <setEnginesSpeed>
		setEnginesSpeed(RightEngines, SensFata, 25);
     66e:	49 e1       	ldi	r20, 0x19	; 25
     670:	60 e0       	ldi	r22, 0x00	; 0
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	0e 94 46 02 	call	0x48c	; 0x48c <setEnginesSpeed>
		BTTransmitStr("ma rotesc spre dreapta");
     678:	8e ed       	ldi	r24, 0xDE	; 222
     67a:	91 e0       	ldi	r25, 0x01	; 1
     67c:	0e 94 83 00 	call	0x106	; 0x106 <BTTransmitStr>
     680:	0e c0       	rjmp	.+28     	; 0x69e <rotirePeLoc+0x42>
	}
	else {
		setEnginesSpeed(LeftEngines, SensFata, 25);
     682:	49 e1       	ldi	r20, 0x19	; 25
     684:	60 e0       	ldi	r22, 0x00	; 0
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	0e 94 46 02 	call	0x48c	; 0x48c <setEnginesSpeed>
		setEnginesSpeed(RightEngines, SensSpate, 25);
     68c:	49 e1       	ldi	r20, 0x19	; 25
     68e:	61 e0       	ldi	r22, 0x01	; 1
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	0e 94 46 02 	call	0x48c	; 0x48c <setEnginesSpeed>
		BTTransmitStr("ma rotesc spre stanga");
     696:	85 ef       	ldi	r24, 0xF5	; 245
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	0e 94 83 00 	call	0x106	; 0x106 <BTTransmitStr>
	}
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     69e:	ac 2f       	mov	r26, r28
     6a0:	b0 e0       	ldi	r27, 0x00	; 0
     6a2:	20 e4       	ldi	r18, 0x40	; 64
     6a4:	32 e4       	ldi	r19, 0x42	; 66
     6a6:	4f e0       	ldi	r20, 0x0F	; 15
     6a8:	50 e0       	ldi	r21, 0x00	; 0
     6aa:	0e 94 b2 08 	call	0x1164	; 0x1164 <__muluhisi3>
     6ae:	ab 01       	movw	r20, r22
     6b0:	bc 01       	movw	r22, r24
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	85 e0       	ldi	r24, 0x05	; 5
     6b6:	92 e0       	ldi	r25, 0x02	; 2
     6b8:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <addEntryToTimerQueue>
}
     6bc:	cf 91       	pop	r28
     6be:	08 95       	ret

000006c0 <resetSensorQueue>:
		
	return s/7;
}

void resetSensorQueue(Sensor sensor){
	sVals[sensor][0] = 0;
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	88 0f       	add	r24, r24
     6c4:	99 1f       	adc	r25, r25
     6c6:	fc 01       	movw	r30, r24
     6c8:	ee 0f       	add	r30, r30
     6ca:	ff 1f       	adc	r31, r31
     6cc:	ee 0f       	add	r30, r30
     6ce:	ff 1f       	adc	r31, r31
     6d0:	ee 0f       	add	r30, r30
     6d2:	ff 1f       	adc	r31, r31
     6d4:	e8 1b       	sub	r30, r24
     6d6:	f9 0b       	sbc	r31, r25
     6d8:	ef 5c       	subi	r30, 0xCF	; 207
     6da:	fc 4f       	sbci	r31, 0xFC	; 252
     6dc:	11 82       	std	Z+1, r1	; 0x01
     6de:	10 82       	st	Z, r1
	uint8_t i;
	for(i=0;i<6;i++)
		sVals[sensor][i] = 0;
     6e0:	13 82       	std	Z+3, r1	; 0x03
     6e2:	12 82       	std	Z+2, r1	; 0x02
     6e4:	15 82       	std	Z+5, r1	; 0x05
     6e6:	14 82       	std	Z+4, r1	; 0x04
     6e8:	17 82       	std	Z+7, r1	; 0x07
     6ea:	16 82       	std	Z+6, r1	; 0x06
     6ec:	11 86       	std	Z+9, r1	; 0x09
     6ee:	10 86       	std	Z+8, r1	; 0x08
     6f0:	13 86       	std	Z+11, r1	; 0x0b
     6f2:	12 86       	std	Z+10, r1	; 0x0a
     6f4:	08 95       	ret

000006f6 <initSensors>:
}

void initSensors(void){
     6f6:	81 e3       	ldi	r24, 0x31	; 49
     6f8:	93 e0       	ldi	r25, 0x03	; 3
     6fa:	29 e6       	ldi	r18, 0x69	; 105
     6fc:	33 e0       	ldi	r19, 0x03	; 3
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	09 c0       	rjmp	.+18     	; 0x714 <initSensors+0x1e>
	
	uint8_t i, j;
	for(i=0; i<4;i++)
		for(j=0; j<7;j++)
			sVals[i][j] = 0;
     702:	11 92       	st	Z+, r1
     704:	11 92       	st	Z+, r1

void initSensors(void){
	
	uint8_t i, j;
	for(i=0; i<4;i++)
		for(j=0; j<7;j++)
     706:	4f 5f       	subi	r20, 0xFF	; 255
     708:	47 30       	cpi	r20, 0x07	; 7
     70a:	d9 f7       	brne	.-10     	; 0x702 <initSensors+0xc>
     70c:	0e 96       	adiw	r24, 0x0e	; 14
}

void initSensors(void){
	
	uint8_t i, j;
	for(i=0; i<4;i++)
     70e:	82 17       	cp	r24, r18
     710:	93 07       	cpc	r25, r19
     712:	19 f0       	breq	.+6      	; 0x71a <initSensors+0x24>
	uint8_t i;
	for(i=0;i<6;i++)
		sVals[sensor][i] = 0;
}

void initSensors(void){
     714:	fc 01       	movw	r30, r24
     716:	45 2f       	mov	r20, r21
     718:	f4 cf       	rjmp	.-24     	; 0x702 <initSensors+0xc>
	for(i=0; i<4;i++)
		for(j=0; j<7;j++)
			sVals[i][j] = 0;
	
	//init ADC
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
     71a:	aa e7       	ldi	r26, 0x7A	; 122
     71c:	b0 e0       	ldi	r27, 0x00	; 0
     71e:	8c 91       	ld	r24, X
     720:	87 60       	ori	r24, 0x07	; 7
     722:	8c 93       	st	X, r24

	ADMUX |= (1 << REFS0);
     724:	ec e7       	ldi	r30, 0x7C	; 124
     726:	f0 e0       	ldi	r31, 0x00	; 0
     728:	80 81       	ld	r24, Z
     72a:	80 64       	ori	r24, 0x40	; 64
     72c:	80 83       	st	Z, r24
	ADMUX &=~ (1 << REFS1); // Set ADC reference to AVCC
     72e:	80 81       	ld	r24, Z
     730:	8f 77       	andi	r24, 0x7F	; 127
     732:	80 83       	st	Z, r24
	
	ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
     734:	80 81       	ld	r24, Z
     736:	80 62       	ori	r24, 0x20	; 32
     738:	80 83       	st	Z, r24
	
	//ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running Mode
	
	ADCSRA |= (1 << ADEN);  // Enable ADC
     73a:	8c 91       	ld	r24, X
     73c:	80 68       	ori	r24, 0x80	; 128
     73e:	8c 93       	st	X, r24
     740:	08 95       	ret

00000742 <startADCConversionForSensor>:
	//ADCSRA |= (1 << ADSC);
}

void startADCConversionForSensor(Sensor sensor){

	ADMUX &= ~31; // set lasts 5 bits to 00000
     742:	ec e7       	ldi	r30, 0x7C	; 124
     744:	f0 e0       	ldi	r31, 0x00	; 0
     746:	90 81       	ld	r25, Z
     748:	90 7e       	andi	r25, 0xE0	; 224
     74a:	90 83       	st	Z, r25
	//ADMUX |= 0; // 0-ADC0, 1-ADC1, 2-ADC2 ...    datasheet pg 249-251
	ADMUX |= sensor; // Sensor ia valorile 0,1,2,3, exact ca cele pt ADC-uri
     74c:	90 81       	ld	r25, Z
     74e:	89 2b       	or	r24, r25
     750:	80 83       	st	Z, r24
	// No MUX values needed to be changed to use ADC0

	
	ADCSRA |= (1 << ADSC);  // Start A2D Conversions
     752:	ea e7       	ldi	r30, 0x7A	; 122
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	80 81       	ld	r24, Z
     758:	80 64       	ori	r24, 0x40	; 64
     75a:	80 83       	st	Z, r24
     75c:	08 95       	ret

0000075e <getValueOfSensor>:
	return val;
}

uint16_t sVals[4][7];

uint16_t getValueOfSensor(Sensor sensor){	
     75e:	6f 92       	push	r6
     760:	7f 92       	push	r7
     762:	8f 92       	push	r8
     764:	9f 92       	push	r9
     766:	af 92       	push	r10
     768:	bf 92       	push	r11
     76a:	cf 92       	push	r12
     76c:	df 92       	push	r13
     76e:	ef 92       	push	r14
     770:	ff 92       	push	r15
     772:	0f 93       	push	r16
     774:	1f 93       	push	r17
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	98 2e       	mov	r9, r24
	
	sVals[sensor][0] = 0;
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	9c 01       	movw	r18, r24
     780:	22 0f       	add	r18, r18
     782:	33 1f       	adc	r19, r19
     784:	f9 01       	movw	r30, r18
     786:	ee 0f       	add	r30, r30
     788:	ff 1f       	adc	r31, r31
     78a:	ee 0f       	add	r30, r30
     78c:	ff 1f       	adc	r31, r31
     78e:	ee 0f       	add	r30, r30
     790:	ff 1f       	adc	r31, r31
     792:	e2 1b       	sub	r30, r18
     794:	f3 0b       	sbc	r31, r19
     796:	ef 5c       	subi	r30, 0xCF	; 207
     798:	fc 4f       	sbci	r31, 0xFC	; 252
     79a:	11 82       	std	Z+1, r1	; 0x01
     79c:	10 82       	st	Z, r1
     79e:	5f 01       	movw	r10, r30
     7a0:	6e 2e       	mov	r6, r30
     7a2:	7b 2c       	mov	r7, r11
	uint8_t i;
	uint16_t s;
	
	while(sVals[sensor][0]==0){
		startADCConversionForSensor(sensor);
     7a4:	0f 2e       	mov	r0, r31
     7a6:	f6 e0       	ldi	r31, 0x06	; 6
     7a8:	8f 2e       	mov	r8, r31
     7aa:	f0 2d       	mov	r31, r0
		for(i=0;i<6;i++)
			sVals[sensor][i] = sVals[sensor][i+1];
		
		while ( ADCSRA & (1 << ADSC));
     7ac:	ca e7       	ldi	r28, 0x7A	; 122
     7ae:	d0 e0       	ldi	r29, 0x00	; 0
		sVals[sensor][6] = ADCL >> 6;
     7b0:	0f 2e       	mov	r0, r31
     7b2:	f8 e7       	ldi	r31, 0x78	; 120
     7b4:	cf 2e       	mov	r12, r31
     7b6:	d1 2c       	mov	r13, r1
     7b8:	f0 2d       	mov	r31, r0
     7ba:	8f 01       	movw	r16, r30
     7bc:	04 5f       	subi	r16, 0xF4	; 244
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
		sVals[sensor][6] |= ADCH << 2;
     7c0:	0f 2e       	mov	r0, r31
     7c2:	f9 e7       	ldi	r31, 0x79	; 121
     7c4:	ef 2e       	mov	r14, r31
     7c6:	f1 2c       	mov	r15, r1
     7c8:	f0 2d       	mov	r31, r0
	sVals[sensor][0] = 0;
	uint8_t i;
	uint16_t s;
	
	while(sVals[sensor][0]==0){
		startADCConversionForSensor(sensor);
     7ca:	89 2d       	mov	r24, r9
     7cc:	0e 94 a1 03 	call	0x742	; 0x742 <startADCConversionForSensor>
     7d0:	5a 2d       	mov	r21, r10
     7d2:	4b 2d       	mov	r20, r11
     7d4:	e6 2d       	mov	r30, r6
     7d6:	f7 2d       	mov	r31, r7
     7d8:	88 2d       	mov	r24, r8
		for(i=0;i<6;i++)
			sVals[sensor][i] = sVals[sensor][i+1];
     7da:	22 81       	ldd	r18, Z+2	; 0x02
     7dc:	33 81       	ldd	r19, Z+3	; 0x03
     7de:	21 93       	st	Z+, r18
     7e0:	31 93       	st	Z+, r19
     7e2:	81 50       	subi	r24, 0x01	; 1
	uint8_t i;
	uint16_t s;
	
	while(sVals[sensor][0]==0){
		startADCConversionForSensor(sensor);
		for(i=0;i<6;i++)
     7e4:	d1 f7       	brne	.-12     	; 0x7da <getValueOfSensor+0x7c>
			sVals[sensor][i] = sVals[sensor][i+1];
		
		while ( ADCSRA & (1 << ADSC));
     7e6:	88 81       	ld	r24, Y
     7e8:	86 fd       	sbrc	r24, 6
     7ea:	fd cf       	rjmp	.-6      	; 0x7e6 <getValueOfSensor+0x88>
		sVals[sensor][6] = ADCL >> 6;
     7ec:	f6 01       	movw	r30, r12
     7ee:	80 81       	ld	r24, Z
     7f0:	82 95       	swap	r24
     7f2:	86 95       	lsr	r24
     7f4:	86 95       	lsr	r24
     7f6:	83 70       	andi	r24, 0x03	; 3
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	f8 01       	movw	r30, r16
     7fc:	91 83       	std	Z+1, r25	; 0x01
     7fe:	80 83       	st	Z, r24
		sVals[sensor][6] |= ADCH << 2;
     800:	f7 01       	movw	r30, r14
     802:	20 81       	ld	r18, Z
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	22 0f       	add	r18, r18
     808:	33 1f       	adc	r19, r19
     80a:	22 0f       	add	r18, r18
     80c:	33 1f       	adc	r19, r19
     80e:	82 2b       	or	r24, r18
     810:	93 2b       	or	r25, r19
     812:	f8 01       	movw	r30, r16
     814:	91 83       	std	Z+1, r25	; 0x01
     816:	80 83       	st	Z, r24
	
	sVals[sensor][0] = 0;
	uint8_t i;
	uint16_t s;
	
	while(sVals[sensor][0]==0){
     818:	f5 01       	movw	r30, r10
     81a:	80 81       	ld	r24, Z
     81c:	91 81       	ldd	r25, Z+1	; 0x01
     81e:	89 2b       	or	r24, r25
     820:	a1 f2       	breq	.-88     	; 0x7ca <getValueOfSensor+0x6c>
     822:	e5 2f       	mov	r30, r21
     824:	f4 2f       	mov	r31, r20
     826:	40 e0       	ldi	r20, 0x00	; 0
     828:	50 e0       	ldi	r21, 0x00	; 0
     82a:	20 e0       	ldi	r18, 0x00	; 0
	
	

	s=0;
	for(i=0;i<7;i++)
		s+=sVals[sensor][i];
     82c:	81 91       	ld	r24, Z+
     82e:	91 91       	ld	r25, Z+
     830:	48 0f       	add	r20, r24
     832:	59 1f       	adc	r21, r25
	}
	
	

	s=0;
	for(i=0;i<7;i++)
     834:	2f 5f       	subi	r18, 0xFF	; 255
     836:	27 30       	cpi	r18, 0x07	; 7
     838:	c9 f7       	brne	.-14     	; 0x82c <getValueOfSensor+0xce>
		
	//sprintf(msg,"lv: %d %d %d %d %d %d %d  =%d",
	//sVals[sensor][0], sVals[sensor][1], sVals[sensor][2], sVals[sensor][3], sVals[sensor][4], sVals[sensor][5], sVals[sensor][6], s/7);
	//BTTransmitStr(msg);
		
	return s/7;
     83a:	9a 01       	movw	r18, r20
     83c:	a3 e9       	ldi	r26, 0x93	; 147
     83e:	b4 e2       	ldi	r27, 0x24	; 36
     840:	0e 94 a3 08 	call	0x1146	; 0x1146 <__umulhisi3>
     844:	48 1b       	sub	r20, r24
     846:	59 0b       	sbc	r21, r25
     848:	9a 01       	movw	r18, r20
     84a:	36 95       	lsr	r19
     84c:	27 95       	ror	r18
     84e:	82 0f       	add	r24, r18
     850:	93 1f       	adc	r25, r19
}
     852:	96 95       	lsr	r25
     854:	87 95       	ror	r24
     856:	96 95       	lsr	r25
     858:	87 95       	ror	r24
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	1f 91       	pop	r17
     860:	0f 91       	pop	r16
     862:	ff 90       	pop	r15
     864:	ef 90       	pop	r14
     866:	df 90       	pop	r13
     868:	cf 90       	pop	r12
     86a:	bf 90       	pop	r11
     86c:	af 90       	pop	r10
     86e:	9f 90       	pop	r9
     870:	8f 90       	pop	r8
     872:	7f 90       	pop	r7
     874:	6f 90       	pop	r6
     876:	08 95       	ret

00000878 <timer_init>:

volatile uint32_t time=0;
void timer_init()
{
	//PIND = (1 << PIND0);
	TIMSK1|=(1<<TOIE1);
     878:	ef e6       	ldi	r30, 0x6F	; 111
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	80 81       	ld	r24, Z
     87e:	81 60       	ori	r24, 0x01	; 1
     880:	80 83       	st	Z, r24
	TCNT1 = 0x00;
     882:	10 92 85 00 	sts	0x0085, r1
     886:	10 92 84 00 	sts	0x0084, r1
	TCCR1B = 0x01;//pt ca modificam pen ultimu bit din datasheet
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	80 93 81 00 	sts	0x0081, r24
     890:	08 95       	ret

00000892 <__vector_15>:
}
ISR(TIMER1_OVF_vect)// Din datasheet timerq(are 8 mh) => 8/8= 1 microsecunde
{
     892:	1f 92       	push	r1
     894:	0f 92       	push	r0
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	0f 92       	push	r0
     89a:	11 24       	eor	r1, r1
     89c:	2f 93       	push	r18
     89e:	3f 93       	push	r19
     8a0:	4f 93       	push	r20
     8a2:	5f 93       	push	r21
     8a4:	6f 93       	push	r22
     8a6:	7f 93       	push	r23
     8a8:	8f 93       	push	r24
     8aa:	9f 93       	push	r25
     8ac:	af 93       	push	r26
     8ae:	bf 93       	push	r27
     8b0:	ef 93       	push	r30
     8b2:	ff 93       	push	r31
	time++;
     8b4:	80 91 1c 03 	lds	r24, 0x031C
     8b8:	90 91 1d 03 	lds	r25, 0x031D
     8bc:	a0 91 1e 03 	lds	r26, 0x031E
     8c0:	b0 91 1f 03 	lds	r27, 0x031F
     8c4:	01 96       	adiw	r24, 0x01	; 1
     8c6:	a1 1d       	adc	r26, r1
     8c8:	b1 1d       	adc	r27, r1
     8ca:	80 93 1c 03 	sts	0x031C, r24
     8ce:	90 93 1d 03 	sts	0x031D, r25
     8d2:	a0 93 1e 03 	sts	0x031E, r26
     8d6:	b0 93 1f 03 	sts	0x031F, r27
	//TCCR1B = 0x01; // init pentru 7.5 ms
	//TCCR1B = 0x02; // init pentru 60 ms
	//timePassed(7500); //7.5 ms = 7500 us;
	timePassed(8800);
     8da:	60 e6       	ldi	r22, 0x60	; 96
     8dc:	72 e2       	ldi	r23, 0x22	; 34
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	0e 94 41 06 	call	0xc82	; 0xc82 <timePassed>
	
	//PORTD ^= 1<<PIND5;
}
     8e6:	ff 91       	pop	r31
     8e8:	ef 91       	pop	r30
     8ea:	bf 91       	pop	r27
     8ec:	af 91       	pop	r26
     8ee:	9f 91       	pop	r25
     8f0:	8f 91       	pop	r24
     8f2:	7f 91       	pop	r23
     8f4:	6f 91       	pop	r22
     8f6:	5f 91       	pop	r21
     8f8:	4f 91       	pop	r20
     8fa:	3f 91       	pop	r19
     8fc:	2f 91       	pop	r18
     8fe:	0f 90       	pop	r0
     900:	0f be       	out	0x3f, r0	; 63
     902:	0f 90       	pop	r0
     904:	1f 90       	pop	r1
     906:	18 95       	reti

00000908 <__vector_20>:

ISR(USART0_RX_vect)
{
     908:	1f 92       	push	r1
     90a:	0f 92       	push	r0
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	0f 92       	push	r0
     910:	11 24       	eor	r1, r1
     912:	2f 93       	push	r18
     914:	3f 93       	push	r19
     916:	4f 93       	push	r20
     918:	5f 93       	push	r21
     91a:	6f 93       	push	r22
     91c:	7f 93       	push	r23
     91e:	8f 93       	push	r24
     920:	9f 93       	push	r25
     922:	af 93       	push	r26
     924:	bf 93       	push	r27
     926:	ef 93       	push	r30
     928:	ff 93       	push	r31
	BTProtocolReadByte(UDR0);
     92a:	80 91 c6 00 	lds	r24, 0x00C6
     92e:	0e 94 9d 01 	call	0x33a	; 0x33a <BTProtocolReadByte>
}
     932:	ff 91       	pop	r31
     934:	ef 91       	pop	r30
     936:	bf 91       	pop	r27
     938:	af 91       	pop	r26
     93a:	9f 91       	pop	r25
     93c:	8f 91       	pop	r24
     93e:	7f 91       	pop	r23
     940:	6f 91       	pop	r22
     942:	5f 91       	pop	r21
     944:	4f 91       	pop	r20
     946:	3f 91       	pop	r19
     948:	2f 91       	pop	r18
     94a:	0f 90       	pop	r0
     94c:	0f be       	out	0x3f, r0	; 63
     94e:	0f 90       	pop	r0
     950:	1f 90       	pop	r1
     952:	18 95       	reti

00000954 <main>:

volatile uint8_t sradc0, shouldBlink=0;

int main(void)
{
	BTInit();
     954:	0e 94 74 00 	call	0xe8	; 0xe8 <BTInit>
	timer_init();
     958:	0e 94 3c 04 	call	0x878	; 0x878 <timer_init>
	initLeds();
     95c:	0e 94 75 07 	call	0xeea	; 0xeea <initLeds>
	initEngines();
     960:	0e 94 1c 02 	call	0x438	; 0x438 <initEngines>
	initSensors();
     964:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <initSensors>
	initTimeQueue();
     968:	0e 94 bf 04 	call	0x97e	; 0x97e <initTimeQueue>
	
	sei();
     96c:	78 94       	sei
	BTTransmitStr("-main start123-");
     96e:	8b e0       	ldi	r24, 0x0B	; 11
     970:	92 e0       	ldi	r25, 0x02	; 2
     972:	0e 94 83 00 	call	0x106	; 0x106 <BTTransmitStr>
	
	PORTD |= 1<<PIND6;
     976:	5e 9a       	sbi	0x0b, 6	; 11
	
    while(1)
    {
		//_delay_ms(1);
		checkTimeQueue();
     978:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <checkTimeQueue>
     97c:	fd cf       	rjmp	.-6      	; 0x978 <main+0x24>

0000097e <initTimeQueue>:
extern uint32_t time;

void initTimeQueue(){
	uint8_t i;
	// initializez toti pointerii cu 0, adica pe fiecare pozitie din coada e o structura neocupata
	for(i=0;i<TimerQueueSize;i++)
     97e:	40 91 01 01 	lds	r20, 0x0101
     982:	44 23       	and	r20, r20
     984:	a9 f0       	breq	.+42     	; 0x9b0 <initTimeQueue+0x32>
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	90 e0       	ldi	r25, 0x00	; 0
		TimerQueue[i].pointerFct = 0;
     98a:	fc 01       	movw	r30, r24
     98c:	ee 0f       	add	r30, r30
     98e:	ff 1f       	adc	r31, r31
     990:	9c 01       	movw	r18, r24
     992:	22 0f       	add	r18, r18
     994:	33 1f       	adc	r19, r19
     996:	22 0f       	add	r18, r18
     998:	33 1f       	adc	r19, r19
     99a:	22 0f       	add	r18, r18
     99c:	33 1f       	adc	r19, r19
     99e:	e2 0f       	add	r30, r18
     9a0:	f3 1f       	adc	r31, r19
     9a2:	e7 59       	subi	r30, 0x97	; 151
     9a4:	fc 4f       	sbci	r31, 0xFC	; 252
     9a6:	11 86       	std	Z+9, r1	; 0x09
     9a8:	10 86       	std	Z+8, r1	; 0x08
     9aa:	01 96       	adiw	r24, 0x01	; 1
extern uint32_t time;

void initTimeQueue(){
	uint8_t i;
	// initializez toti pointerii cu 0, adica pe fiecare pozitie din coada e o structura neocupata
	for(i=0;i<TimerQueueSize;i++)
     9ac:	84 17       	cp	r24, r20
     9ae:	68 f3       	brcs	.-38     	; 0x98a <initTimeQueue+0xc>
     9b0:	08 95       	ret

000009b2 <addEntryToTimerQueue>:
		TimerQueue[i].pointerFct = 0;
}

extern volatile uint8_t debugging;
// delay e in microsecunde (10^-6 secunde)
void addEntryToTimerQueue(void (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
     9b2:	df 92       	push	r13
     9b4:	ef 92       	push	r14
     9b6:	ff 92       	push	r15
     9b8:	0f 93       	push	r16
     9ba:	1f 93       	push	r17
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
     9c0:	cd b7       	in	r28, 0x3d	; 61
     9c2:	de b7       	in	r29, 0x3e	; 62
     9c4:	ce 56       	subi	r28, 0x6E	; 110
     9c6:	d1 09       	sbc	r29, r1
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	f8 94       	cli
     9cc:	de bf       	out	0x3e, r29	; 62
     9ce:	0f be       	out	0x3f, r0	; 63
     9d0:	cd bf       	out	0x3d, r28	; 61
	cli(); // dezactivare intreruperi
     9d2:	f8 94       	cli
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
     9d4:	d0 90 01 01 	lds	r13, 0x0101
     9d8:	dd 20       	and	r13, r13
     9da:	09 f4       	brne	.+2      	; 0x9de <addEntryToTimerQueue+0x2c>
     9dc:	74 c0       	rjmp	.+232    	; 0xac6 <addEntryToTimerQueue+0x114>
		if(TimerQueue[i].pointerFct == 0)
     9de:	e0 91 71 03 	lds	r30, 0x0371
     9e2:	f0 91 72 03 	lds	r31, 0x0372
     9e6:	ef 2b       	or	r30, r31
     9e8:	09 f4       	brne	.+2      	; 0x9ec <addEntryToTimerQueue+0x3a>
     9ea:	74 c0       	rjmp	.+232    	; 0xad4 <addEntryToTimerQueue+0x122>
			break;
		if(TimerQueue[i].pointerFct == _theFct){
     9ec:	e0 91 71 03 	lds	r30, 0x0371
     9f0:	f0 91 72 03 	lds	r31, 0x0372
     9f4:	e8 17       	cp	r30, r24
     9f6:	f9 07       	cpc	r31, r25
     9f8:	09 f0       	breq	.+2      	; 0x9fc <addEntryToTimerQueue+0x4a>
     9fa:	5b c0       	rjmp	.+182    	; 0xab2 <addEntryToTimerQueue+0x100>
     9fc:	2d c0       	rjmp	.+90     	; 0xa58 <addEntryToTimerQueue+0xa6>
void addEntryToTimerQueue(void (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
	cli(); // dezactivare intreruperi
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct == 0)
     9fe:	7f 01       	movw	r14, r30
     a00:	df 01       	movw	r26, r30
     a02:	aa 0f       	add	r26, r26
     a04:	bb 1f       	adc	r27, r27
     a06:	aa 0f       	add	r26, r26
     a08:	bb 1f       	adc	r27, r27
     a0a:	aa 0f       	add	r26, r26
     a0c:	bb 1f       	adc	r27, r27
     a0e:	8f 01       	movw	r16, r30
     a10:	00 0f       	add	r16, r16
     a12:	11 1f       	adc	r17, r17
     a14:	a0 0f       	add	r26, r16
     a16:	b1 1f       	adc	r27, r17
     a18:	a7 59       	subi	r26, 0x97	; 151
     a1a:	bc 4f       	sbci	r27, 0xFC	; 252
     a1c:	18 96       	adiw	r26, 0x08	; 8
     a1e:	0d 90       	ld	r0, X+
     a20:	bc 91       	ld	r27, X
     a22:	a0 2d       	mov	r26, r0
     a24:	ab 2b       	or	r26, r27
     a26:	09 f4       	brne	.+2      	; 0xa2a <addEntryToTimerQueue+0x78>
     a28:	4b c0       	rjmp	.+150    	; 0xac0 <addEntryToTimerQueue+0x10e>
			break;
		if(TimerQueue[i].pointerFct == _theFct){
     a2a:	8f 01       	movw	r16, r30
     a2c:	00 0f       	add	r16, r16
     a2e:	11 1f       	adc	r17, r17
     a30:	df 01       	movw	r26, r30
     a32:	aa 0f       	add	r26, r26
     a34:	bb 1f       	adc	r27, r27
     a36:	aa 0f       	add	r26, r26
     a38:	bb 1f       	adc	r27, r27
     a3a:	aa 0f       	add	r26, r26
     a3c:	bb 1f       	adc	r27, r27
     a3e:	a0 0f       	add	r26, r16
     a40:	b1 1f       	adc	r27, r17
     a42:	a7 59       	subi	r26, 0x97	; 151
     a44:	bc 4f       	sbci	r27, 0xFC	; 252
     a46:	18 96       	adiw	r26, 0x08	; 8
     a48:	0d 90       	ld	r0, X+
     a4a:	bc 91       	ld	r27, X
     a4c:	a0 2d       	mov	r26, r0
     a4e:	31 96       	adiw	r30, 0x01	; 1
     a50:	a8 17       	cp	r26, r24
     a52:	b9 07       	cpc	r27, r25
     a54:	81 f5       	brne	.+96     	; 0xab6 <addEntryToTimerQueue+0x104>
     a56:	02 c0       	rjmp	.+4      	; 0xa5c <addEntryToTimerQueue+0xaa>
void addEntryToTimerQueue(void (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
	cli(); // dezactivare intreruperi
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct == 0)
     a58:	e1 2c       	mov	r14, r1
     a5a:	f1 2c       	mov	r15, r1
			break;
		if(TimerQueue[i].pointerFct == _theFct){
			if(debugging || 1){
     a5c:	80 91 00 01 	lds	r24, 0x0100
				char msg[100];
				sprintf(msg, "Functia asta e deja in coada! cu delay: %lu", TimerQueue[i].delay);
     a60:	f7 01       	movw	r30, r14
     a62:	ee 0f       	add	r30, r30
     a64:	ff 1f       	adc	r31, r31
     a66:	ee 0c       	add	r14, r14
     a68:	ff 1c       	adc	r15, r15
     a6a:	ee 0c       	add	r14, r14
     a6c:	ff 1c       	adc	r15, r15
     a6e:	ee 0c       	add	r14, r14
     a70:	ff 1c       	adc	r15, r15
     a72:	ee 0d       	add	r30, r14
     a74:	ff 1d       	adc	r31, r15
     a76:	e7 59       	subi	r30, 0x97	; 151
     a78:	fc 4f       	sbci	r31, 0xFC	; 252
     a7a:	80 81       	ld	r24, Z
     a7c:	91 81       	ldd	r25, Z+1	; 0x01
     a7e:	a2 81       	ldd	r26, Z+2	; 0x02
     a80:	b3 81       	ldd	r27, Z+3	; 0x03
     a82:	bf 93       	push	r27
     a84:	af 93       	push	r26
     a86:	9f 93       	push	r25
     a88:	8f 93       	push	r24
     a8a:	8b e1       	ldi	r24, 0x1B	; 27
     a8c:	92 e0       	ldi	r25, 0x02	; 2
     a8e:	9f 93       	push	r25
     a90:	8f 93       	push	r24
     a92:	8e 01       	movw	r16, r28
     a94:	05 5f       	subi	r16, 0xF5	; 245
     a96:	1f 4f       	sbci	r17, 0xFF	; 255
     a98:	1f 93       	push	r17
     a9a:	0f 93       	push	r16
     a9c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <sprintf>
				BTTransmitStr(msg);
     aa0:	c8 01       	movw	r24, r16
     aa2:	0e 94 83 00 	call	0x106	; 0x106 <BTTransmitStr>
     aa6:	0f b6       	in	r0, 0x3f	; 63
     aa8:	f8 94       	cli
     aaa:	de bf       	out	0x3e, r29	; 62
     aac:	0f be       	out	0x3f, r0	; 63
     aae:	cd bf       	out	0x3d, r28	; 61
     ab0:	5e c0       	rjmp	.+188    	; 0xb6e <addEntryToTimerQueue+0x1bc>
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct == 0)
			break;
		if(TimerQueue[i].pointerFct == _theFct){
     ab2:	e1 e0       	ldi	r30, 0x01	; 1
     ab4:	f0 e0       	ldi	r31, 0x00	; 0
// delay e in microsecunde (10^-6 secunde)
void addEntryToTimerQueue(void (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
	cli(); // dezactivare intreruperi
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
     ab6:	3e 2f       	mov	r19, r30
     ab8:	ed 15       	cp	r30, r13
     aba:	08 f4       	brcc	.+2      	; 0xabe <addEntryToTimerQueue+0x10c>
     abc:	a0 cf       	rjmp	.-192    	; 0x9fe <addEntryToTimerQueue+0x4c>
     abe:	01 c0       	rjmp	.+2      	; 0xac2 <addEntryToTimerQueue+0x110>
     ac0:	e3 2f       	mov	r30, r19
				BTTransmitStr(msg);
			}
			return;
		}
	}
	if(i == TimerQueueSize){
     ac2:	ed 11       	cpse	r30, r13
     ac4:	08 c0       	rjmp	.+16     	; 0xad6 <addEntryToTimerQueue+0x124>
		//nu mai e loc in coada
		if(debugging || 1)
     ac6:	80 91 00 01 	lds	r24, 0x0100
			BTTransmitStr("Coada e full!");
     aca:	87 e4       	ldi	r24, 0x47	; 71
     acc:	92 e0       	ldi	r25, 0x02	; 2
     ace:	0e 94 83 00 	call	0x106	; 0x106 <BTTransmitStr>
     ad2:	4d c0       	rjmp	.+154    	; 0xb6e <addEntryToTimerQueue+0x1bc>
// delay e in microsecunde (10^-6 secunde)
void addEntryToTimerQueue(void (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
	cli(); // dezactivare intreruperi
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
     ad4:	30 e0       	ldi	r19, 0x00	; 0
	}
	
	//construire entry pentru functia curenta 
	queueEntry thisEntry;
	thisEntry.delay = _delay;
	thisEntry.repeatDelay = _repeat ? _delay :0;
     ad6:	21 11       	cpse	r18, r1
     ad8:	04 c0       	rjmp	.+8      	; 0xae2 <addEntryToTimerQueue+0x130>
     ada:	10 e0       	ldi	r17, 0x00	; 0
     adc:	b0 e0       	ldi	r27, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <addEntryToTimerQueue+0x138>
     ae2:	14 2f       	mov	r17, r20
     ae4:	b5 2f       	mov	r27, r21
     ae6:	a6 2f       	mov	r26, r22
     ae8:	27 2f       	mov	r18, r23
	thisEntry.pointerFct = _theFct;
	
	TimerQueue[i] = thisEntry;
     aea:	e3 2f       	mov	r30, r19
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	49 83       	std	Y+1, r20	; 0x01
     af0:	5a 83       	std	Y+2, r21	; 0x02
     af2:	6b 83       	std	Y+3, r22	; 0x03
     af4:	7c 83       	std	Y+4, r23	; 0x04
     af6:	1d 83       	std	Y+5, r17	; 0x05
     af8:	be 83       	std	Y+6, r27	; 0x06
     afa:	af 83       	std	Y+7, r26	; 0x07
     afc:	28 87       	std	Y+8, r18	; 0x08
     afe:	9a 87       	std	Y+10, r25	; 0x0a
     b00:	89 87       	std	Y+9, r24	; 0x09
     b02:	cf 01       	movw	r24, r30
     b04:	88 0f       	add	r24, r24
     b06:	99 1f       	adc	r25, r25
     b08:	ee 0f       	add	r30, r30
     b0a:	ff 1f       	adc	r31, r31
     b0c:	ee 0f       	add	r30, r30
     b0e:	ff 1f       	adc	r31, r31
     b10:	ee 0f       	add	r30, r30
     b12:	ff 1f       	adc	r31, r31
     b14:	8e 0f       	add	r24, r30
     b16:	9f 1f       	adc	r25, r31
     b18:	87 59       	subi	r24, 0x97	; 151
     b1a:	9c 4f       	sbci	r25, 0xFC	; 252
     b1c:	2a e0       	ldi	r18, 0x0A	; 10
     b1e:	fe 01       	movw	r30, r28
     b20:	31 96       	adiw	r30, 0x01	; 1
     b22:	dc 01       	movw	r26, r24
     b24:	01 90       	ld	r0, Z+
     b26:	0d 92       	st	X+, r0
     b28:	2a 95       	dec	r18
     b2a:	e1 f7       	brne	.-8      	; 0xb24 <addEntryToTimerQueue+0x172>
	
	if(debugging || 1){
     b2c:	20 91 00 01 	lds	r18, 0x0100
		char msg[100];		
		sprintf(msg, "Entry adaugat in coada! la index %d si cu delay: %lu", i, TimerQueue[i].delay);
     b30:	fc 01       	movw	r30, r24
     b32:	80 81       	ld	r24, Z
     b34:	91 81       	ldd	r25, Z+1	; 0x01
     b36:	a2 81       	ldd	r26, Z+2	; 0x02
     b38:	b3 81       	ldd	r27, Z+3	; 0x03
     b3a:	bf 93       	push	r27
     b3c:	af 93       	push	r26
     b3e:	9f 93       	push	r25
     b40:	8f 93       	push	r24
     b42:	1f 92       	push	r1
     b44:	3f 93       	push	r19
     b46:	85 e5       	ldi	r24, 0x55	; 85
     b48:	92 e0       	ldi	r25, 0x02	; 2
     b4a:	9f 93       	push	r25
     b4c:	8f 93       	push	r24
     b4e:	8e 01       	movw	r16, r28
     b50:	05 5f       	subi	r16, 0xF5	; 245
     b52:	1f 4f       	sbci	r17, 0xFF	; 255
     b54:	1f 93       	push	r17
     b56:	0f 93       	push	r16
     b58:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <sprintf>
		BTTransmitStr(msg);
     b5c:	c8 01       	movw	r24, r16
     b5e:	0e 94 83 00 	call	0x106	; 0x106 <BTTransmitStr>
	}
	sei();
     b62:	78 94       	sei
     b64:	0f b6       	in	r0, 0x3f	; 63
     b66:	f8 94       	cli
     b68:	de bf       	out	0x3e, r29	; 62
     b6a:	0f be       	out	0x3f, r0	; 63
     b6c:	cd bf       	out	0x3d, r28	; 61
}
     b6e:	c2 59       	subi	r28, 0x92	; 146
     b70:	df 4f       	sbci	r29, 0xFF	; 255
     b72:	0f b6       	in	r0, 0x3f	; 63
     b74:	f8 94       	cli
     b76:	de bf       	out	0x3e, r29	; 62
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	cd bf       	out	0x3d, r28	; 61
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	ff 90       	pop	r15
     b86:	ef 90       	pop	r14
     b88:	df 90       	pop	r13
     b8a:	08 95       	ret

00000b8c <removeEntryFromTimerQueue>:
void removeEntryFromTimerQueue(void (*_theFct) (void)){
     b8c:	bf 92       	push	r11
     b8e:	cf 92       	push	r12
     b90:	df 92       	push	r13
     b92:	ef 92       	push	r14
     b94:	ff 92       	push	r15
     b96:	0f 93       	push	r16
     b98:	1f 93       	push	r17
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	cd b7       	in	r28, 0x3d	; 61
     ba0:	de b7       	in	r29, 0x3e	; 62
     ba2:	c4 56       	subi	r28, 0x64	; 100
     ba4:	d1 09       	sbc	r29, r1
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	f8 94       	cli
     baa:	de bf       	out	0x3e, r29	; 62
     bac:	0f be       	out	0x3f, r0	; 63
     bae:	cd bf       	out	0x3d, r28	; 61
     bb0:	8c 01       	movw	r16, r24
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
     bb2:	80 91 01 01 	lds	r24, 0x0101
     bb6:	88 23       	and	r24, r24
     bb8:	09 f4       	brne	.+2      	; 0xbbc <removeEntryFromTimerQueue+0x30>
     bba:	52 c0       	rjmp	.+164    	; 0xc60 <removeEntryFromTimerQueue+0xd4>
     bbc:	b1 2c       	mov	r11, r1
			TimerQueue[i].pointerFct = 0;
			TimerQueue[i].delay = 0;
			TimerQueue[i].repeatDelay = 0;
			if(debugging){
				char msg[100];
				sprintf(msg, "Entry sters din coada. de pe pozitia %d", i);
     bbe:	0f 2e       	mov	r0, r31
     bc0:	fa e8       	ldi	r31, 0x8A	; 138
     bc2:	cf 2e       	mov	r12, r31
     bc4:	f2 e0       	ldi	r31, 0x02	; 2
     bc6:	df 2e       	mov	r13, r31
     bc8:	f0 2d       	mov	r31, r0
     bca:	ce 01       	movw	r24, r28
     bcc:	01 96       	adiw	r24, 0x01	; 1
     bce:	7c 01       	movw	r14, r24
	sei();
}
void removeEntryFromTimerQueue(void (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct == _theFct){
     bd0:	2b 2d       	mov	r18, r11
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	f9 01       	movw	r30, r18
     bd6:	ee 0f       	add	r30, r30
     bd8:	ff 1f       	adc	r31, r31
     bda:	c9 01       	movw	r24, r18
     bdc:	88 0f       	add	r24, r24
     bde:	99 1f       	adc	r25, r25
     be0:	88 0f       	add	r24, r24
     be2:	99 1f       	adc	r25, r25
     be4:	88 0f       	add	r24, r24
     be6:	99 1f       	adc	r25, r25
     be8:	e8 0f       	add	r30, r24
     bea:	f9 1f       	adc	r31, r25
     bec:	e7 59       	subi	r30, 0x97	; 151
     bee:	fc 4f       	sbci	r31, 0xFC	; 252
     bf0:	40 85       	ldd	r20, Z+8	; 0x08
     bf2:	51 85       	ldd	r21, Z+9	; 0x09
     bf4:	40 17       	cp	r20, r16
     bf6:	51 07       	cpc	r21, r17
     bf8:	69 f5       	brne	.+90     	; 0xc54 <removeEntryFromTimerQueue+0xc8>
			TimerQueue[i].pointerFct = 0;
     bfa:	c9 01       	movw	r24, r18
     bfc:	88 0f       	add	r24, r24
     bfe:	99 1f       	adc	r25, r25
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	88 0f       	add	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	f9 01       	movw	r30, r18
     c0a:	ee 0f       	add	r30, r30
     c0c:	ff 1f       	adc	r31, r31
     c0e:	e8 0f       	add	r30, r24
     c10:	f9 1f       	adc	r31, r25
     c12:	e7 59       	subi	r30, 0x97	; 151
     c14:	fc 4f       	sbci	r31, 0xFC	; 252
     c16:	11 86       	std	Z+9, r1	; 0x09
     c18:	10 86       	std	Z+8, r1	; 0x08
			TimerQueue[i].delay = 0;
     c1a:	10 82       	st	Z, r1
     c1c:	11 82       	std	Z+1, r1	; 0x01
     c1e:	12 82       	std	Z+2, r1	; 0x02
     c20:	13 82       	std	Z+3, r1	; 0x03
			TimerQueue[i].repeatDelay = 0;
     c22:	14 82       	std	Z+4, r1	; 0x04
     c24:	15 82       	std	Z+5, r1	; 0x05
     c26:	16 82       	std	Z+6, r1	; 0x06
     c28:	17 82       	std	Z+7, r1	; 0x07
			if(debugging){
     c2a:	80 91 00 01 	lds	r24, 0x0100
     c2e:	88 23       	and	r24, r24
     c30:	89 f0       	breq	.+34     	; 0xc54 <removeEntryFromTimerQueue+0xc8>
				char msg[100];
				sprintf(msg, "Entry sters din coada. de pe pozitia %d", i);
     c32:	3f 93       	push	r19
     c34:	bf 92       	push	r11
     c36:	df 92       	push	r13
     c38:	cf 92       	push	r12
     c3a:	ff 92       	push	r15
     c3c:	ef 92       	push	r14
     c3e:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <sprintf>
				BTTransmitStr(msg);
     c42:	c7 01       	movw	r24, r14
     c44:	0e 94 83 00 	call	0x106	; 0x106 <BTTransmitStr>
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
	}
	sei();
}
void removeEntryFromTimerQueue(void (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
     c54:	b3 94       	inc	r11
     c56:	80 91 01 01 	lds	r24, 0x0101
     c5a:	b8 16       	cp	r11, r24
     c5c:	08 f4       	brcc	.+2      	; 0xc60 <removeEntryFromTimerQueue+0xd4>
     c5e:	b8 cf       	rjmp	.-144    	; 0xbd0 <removeEntryFromTimerQueue+0x44>
				sprintf(msg, "Entry sters din coada. de pe pozitia %d", i);
				BTTransmitStr(msg);
			}
		}
	}
}
     c60:	cc 59       	subi	r28, 0x9C	; 156
     c62:	df 4f       	sbci	r29, 0xFF	; 255
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	f8 94       	cli
     c68:	de bf       	out	0x3e, r29	; 62
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	cd bf       	out	0x3d, r28	; 61
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	1f 91       	pop	r17
     c74:	0f 91       	pop	r16
     c76:	ff 90       	pop	r15
     c78:	ef 90       	pop	r14
     c7a:	df 90       	pop	r13
     c7c:	cf 90       	pop	r12
     c7e:	bf 90       	pop	r11
     c80:	08 95       	ret

00000c82 <timePassed>:
}

//se apeleaza din intrerupere (cate microsecunde au trecut)
//pentru fiecare functie(valida) din queue se scade din delay numarul de microsecunde care a trecut

void timePassed(uint32_t passed_us){
     c82:	8f 92       	push	r8
     c84:	9f 92       	push	r9
     c86:	af 92       	push	r10
     c88:	bf 92       	push	r11
     c8a:	df 92       	push	r13
     c8c:	ef 92       	push	r14
     c8e:	ff 92       	push	r15
     c90:	0f 93       	push	r16
     c92:	1f 93       	push	r17
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
     c98:	10 91 01 01 	lds	r17, 0x0101
     c9c:	11 23       	and	r17, r17
     c9e:	09 f4       	brne	.+2      	; 0xca2 <timePassed+0x20>
     ca0:	7b c0       	rjmp	.+246    	; 0xd98 <timePassed+0x116>
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	30 e0       	ldi	r19, 0x00	; 0
		if(TimerQueue[i].pointerFct != 0){
			if(TimerQueue[i].delay > 0)
				TimerQueue[i].delay = TimerQueue[i].delay > passed_us ? TimerQueue[i].delay-passed_us : 0;
     ca6:	d1 2c       	mov	r13, r1
     ca8:	e1 2c       	mov	r14, r1
     caa:	f1 2c       	mov	r15, r1
     cac:	00 e0       	ldi	r16, 0x00	; 0
//pentru fiecare functie(valida) din queue se scade din delay numarul de microsecunde care a trecut

void timePassed(uint32_t passed_us){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct != 0){
     cae:	f9 01       	movw	r30, r18
     cb0:	a9 01       	movw	r20, r18
     cb2:	44 0f       	add	r20, r20
     cb4:	55 1f       	adc	r21, r21
     cb6:	44 0f       	add	r20, r20
     cb8:	55 1f       	adc	r21, r21
     cba:	44 0f       	add	r20, r20
     cbc:	55 1f       	adc	r21, r21
     cbe:	d9 01       	movw	r26, r18
     cc0:	aa 0f       	add	r26, r26
     cc2:	bb 1f       	adc	r27, r27
     cc4:	a4 0f       	add	r26, r20
     cc6:	b5 1f       	adc	r27, r21
     cc8:	a7 59       	subi	r26, 0x97	; 151
     cca:	bc 4f       	sbci	r27, 0xFC	; 252
     ccc:	18 96       	adiw	r26, 0x08	; 8
     cce:	4d 91       	ld	r20, X+
     cd0:	5c 91       	ld	r21, X
     cd2:	19 97       	sbiw	r26, 0x09	; 9
     cd4:	45 2b       	or	r20, r21
     cd6:	09 f4       	brne	.+2      	; 0xcda <timePassed+0x58>
     cd8:	5a c0       	rjmp	.+180    	; 0xd8e <timePassed+0x10c>
			if(TimerQueue[i].delay > 0)
     cda:	a9 01       	movw	r20, r18
     cdc:	44 0f       	add	r20, r20
     cde:	55 1f       	adc	r21, r21
     ce0:	44 0f       	add	r20, r20
     ce2:	55 1f       	adc	r21, r21
     ce4:	44 0f       	add	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	d9 01       	movw	r26, r18
     cea:	aa 0f       	add	r26, r26
     cec:	bb 1f       	adc	r27, r27
     cee:	a4 0f       	add	r26, r20
     cf0:	b5 1f       	adc	r27, r21
     cf2:	a7 59       	subi	r26, 0x97	; 151
     cf4:	bc 4f       	sbci	r27, 0xFC	; 252
     cf6:	8d 90       	ld	r8, X+
     cf8:	9d 90       	ld	r9, X+
     cfa:	ad 90       	ld	r10, X+
     cfc:	bc 90       	ld	r11, X
     cfe:	89 28       	or	r8, r9
     d00:	8a 28       	or	r8, r10
     d02:	8b 28       	or	r8, r11
     d04:	09 f4       	brne	.+2      	; 0xd08 <timePassed+0x86>
     d06:	43 c0       	rjmp	.+134    	; 0xd8e <timePassed+0x10c>
				TimerQueue[i].delay = TimerQueue[i].delay > passed_us ? TimerQueue[i].delay-passed_us : 0;
     d08:	a9 01       	movw	r20, r18
     d0a:	44 0f       	add	r20, r20
     d0c:	55 1f       	adc	r21, r21
     d0e:	44 0f       	add	r20, r20
     d10:	55 1f       	adc	r21, r21
     d12:	44 0f       	add	r20, r20
     d14:	55 1f       	adc	r21, r21
     d16:	d9 01       	movw	r26, r18
     d18:	aa 0f       	add	r26, r26
     d1a:	bb 1f       	adc	r27, r27
     d1c:	a4 0f       	add	r26, r20
     d1e:	b5 1f       	adc	r27, r21
     d20:	a7 59       	subi	r26, 0x97	; 151
     d22:	bc 4f       	sbci	r27, 0xFC	; 252
     d24:	8d 90       	ld	r8, X+
     d26:	9d 90       	ld	r9, X+
     d28:	ad 90       	ld	r10, X+
     d2a:	bc 90       	ld	r11, X
     d2c:	68 15       	cp	r22, r8
     d2e:	79 05       	cpc	r23, r9
     d30:	8a 05       	cpc	r24, r10
     d32:	9b 05       	cpc	r25, r11
     d34:	b8 f4       	brcc	.+46     	; 0xd64 <timePassed+0xe2>
     d36:	a9 01       	movw	r20, r18
     d38:	44 0f       	add	r20, r20
     d3a:	55 1f       	adc	r21, r21
     d3c:	44 0f       	add	r20, r20
     d3e:	55 1f       	adc	r21, r21
     d40:	44 0f       	add	r20, r20
     d42:	55 1f       	adc	r21, r21
     d44:	d9 01       	movw	r26, r18
     d46:	aa 0f       	add	r26, r26
     d48:	bb 1f       	adc	r27, r27
     d4a:	a4 0f       	add	r26, r20
     d4c:	b5 1f       	adc	r27, r21
     d4e:	a7 59       	subi	r26, 0x97	; 151
     d50:	bc 4f       	sbci	r27, 0xFC	; 252
     d52:	8d 90       	ld	r8, X+
     d54:	9d 90       	ld	r9, X+
     d56:	ad 90       	ld	r10, X+
     d58:	bc 90       	ld	r11, X
     d5a:	86 1a       	sub	r8, r22
     d5c:	97 0a       	sbc	r9, r23
     d5e:	a8 0a       	sbc	r10, r24
     d60:	b9 0a       	sbc	r11, r25
     d62:	04 c0       	rjmp	.+8      	; 0xd6c <timePassed+0xea>
     d64:	8d 2c       	mov	r8, r13
     d66:	9e 2c       	mov	r9, r14
     d68:	af 2c       	mov	r10, r15
     d6a:	b0 2e       	mov	r11, r16
     d6c:	ef 01       	movw	r28, r30
     d6e:	cc 0f       	add	r28, r28
     d70:	dd 1f       	adc	r29, r29
     d72:	ee 0f       	add	r30, r30
     d74:	ff 1f       	adc	r31, r31
     d76:	ee 0f       	add	r30, r30
     d78:	ff 1f       	adc	r31, r31
     d7a:	ee 0f       	add	r30, r30
     d7c:	ff 1f       	adc	r31, r31
     d7e:	ec 0f       	add	r30, r28
     d80:	fd 1f       	adc	r31, r29
     d82:	e7 59       	subi	r30, 0x97	; 151
     d84:	fc 4f       	sbci	r31, 0xFC	; 252
     d86:	80 82       	st	Z, r8
     d88:	91 82       	std	Z+1, r9	; 0x01
     d8a:	a2 82       	std	Z+2, r10	; 0x02
     d8c:	b3 82       	std	Z+3, r11	; 0x03
     d8e:	2f 5f       	subi	r18, 0xFF	; 255
     d90:	3f 4f       	sbci	r19, 0xFF	; 255
//se apeleaza din intrerupere (cate microsecunde au trecut)
//pentru fiecare functie(valida) din queue se scade din delay numarul de microsecunde care a trecut

void timePassed(uint32_t passed_us){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
     d92:	21 17       	cp	r18, r17
     d94:	08 f4       	brcc	.+2      	; 0xd98 <timePassed+0x116>
     d96:	8b cf       	rjmp	.-234    	; 0xcae <timePassed+0x2c>
		if(TimerQueue[i].pointerFct != 0){
			if(TimerQueue[i].delay > 0)
				TimerQueue[i].delay = TimerQueue[i].delay > passed_us ? TimerQueue[i].delay-passed_us : 0;
		}
	}
}
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	bf 90       	pop	r11
     da8:	af 90       	pop	r10
     daa:	9f 90       	pop	r9
     dac:	8f 90       	pop	r8
     dae:	08 95       	ret

00000db0 <checkTimeQueue>:

//se apeleaza din main loop
//verifica daca sunt functii care trebuie apelate (daca delay-ul lor a ajuns la 0)
void checkTimeQueue(void){
     db0:	ef 92       	push	r14
     db2:	ff 92       	push	r15
     db4:	1f 93       	push	r17
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
	cli();
     dba:	f8 94       	cli
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
     dbc:	80 91 01 01 	lds	r24, 0x0101
     dc0:	88 23       	and	r24, r24
     dc2:	09 f4       	brne	.+2      	; 0xdc6 <checkTimeQueue+0x16>
     dc4:	57 c0       	rjmp	.+174    	; 0xe74 <checkTimeQueue+0xc4>
     dc6:	10 e0       	ldi	r17, 0x00	; 0
		if(TimerQueue[i].pointerFct != 0){
     dc8:	c1 2f       	mov	r28, r17
     dca:	d0 e0       	ldi	r29, 0x00	; 0
     dcc:	fe 01       	movw	r30, r28
     dce:	ee 0f       	add	r30, r30
     dd0:	ff 1f       	adc	r31, r31
     dd2:	ce 01       	movw	r24, r28
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	e8 0f       	add	r30, r24
     de2:	f9 1f       	adc	r31, r25
     de4:	e7 59       	subi	r30, 0x97	; 151
     de6:	fc 4f       	sbci	r31, 0xFC	; 252
     de8:	80 85       	ldd	r24, Z+8	; 0x08
     dea:	91 85       	ldd	r25, Z+9	; 0x09
     dec:	89 2b       	or	r24, r25
     dee:	e1 f1       	breq	.+120    	; 0xe68 <checkTimeQueue+0xb8>
			if(TimerQueue[i].delay == 0){
     df0:	ce 01       	movw	r24, r28
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	88 0f       	add	r24, r24
     df8:	99 1f       	adc	r25, r25
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	fe 01       	movw	r30, r28
     e00:	ee 0f       	add	r30, r30
     e02:	ff 1f       	adc	r31, r31
     e04:	e8 0f       	add	r30, r24
     e06:	f9 1f       	adc	r31, r25
     e08:	e7 59       	subi	r30, 0x97	; 151
     e0a:	fc 4f       	sbci	r31, 0xFC	; 252
     e0c:	80 81       	ld	r24, Z
     e0e:	91 81       	ldd	r25, Z+1	; 0x01
     e10:	a2 81       	ldd	r26, Z+2	; 0x02
     e12:	b3 81       	ldd	r27, Z+3	; 0x03
     e14:	89 2b       	or	r24, r25
     e16:	8a 2b       	or	r24, r26
     e18:	8b 2b       	or	r24, r27
     e1a:	31 f5       	brne	.+76     	; 0xe68 <checkTimeQueue+0xb8>
				TimerQueue[i].pointerFct();
     e1c:	7f 01       	movw	r14, r30
     e1e:	00 84       	ldd	r0, Z+8	; 0x08
     e20:	f1 85       	ldd	r31, Z+9	; 0x09
     e22:	e0 2d       	mov	r30, r0
     e24:	09 95       	icall
				if(TimerQueue[i].repeatDelay)
     e26:	f7 01       	movw	r30, r14
     e28:	84 81       	ldd	r24, Z+4	; 0x04
     e2a:	95 81       	ldd	r25, Z+5	; 0x05
     e2c:	a6 81       	ldd	r26, Z+6	; 0x06
     e2e:	b7 81       	ldd	r27, Z+7	; 0x07
     e30:	89 2b       	or	r24, r25
     e32:	8a 2b       	or	r24, r26
     e34:	8b 2b       	or	r24, r27
     e36:	49 f0       	breq	.+18     	; 0xe4a <checkTimeQueue+0x9a>
					TimerQueue[i].delay = TimerQueue[i].repeatDelay;
     e38:	84 81       	ldd	r24, Z+4	; 0x04
     e3a:	95 81       	ldd	r25, Z+5	; 0x05
     e3c:	a6 81       	ldd	r26, Z+6	; 0x06
     e3e:	b7 81       	ldd	r27, Z+7	; 0x07
     e40:	80 83       	st	Z, r24
     e42:	91 83       	std	Z+1, r25	; 0x01
     e44:	a2 83       	std	Z+2, r26	; 0x02
     e46:	b3 83       	std	Z+3, r27	; 0x03
     e48:	0f c0       	rjmp	.+30     	; 0xe68 <checkTimeQueue+0xb8>
				else
					TimerQueue[i].pointerFct = 0;
     e4a:	ce 01       	movw	r24, r28
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	cc 0f       	add	r28, r28
     e52:	dd 1f       	adc	r29, r29
     e54:	cc 0f       	add	r28, r28
     e56:	dd 1f       	adc	r29, r29
     e58:	cc 0f       	add	r28, r28
     e5a:	dd 1f       	adc	r29, r29
     e5c:	c8 0f       	add	r28, r24
     e5e:	d9 1f       	adc	r29, r25
     e60:	c7 59       	subi	r28, 0x97	; 151
     e62:	dc 4f       	sbci	r29, 0xFC	; 252
     e64:	19 86       	std	Y+9, r1	; 0x09
     e66:	18 86       	std	Y+8, r1	; 0x08
//se apeleaza din main loop
//verifica daca sunt functii care trebuie apelate (daca delay-ul lor a ajuns la 0)
void checkTimeQueue(void){
	cli();
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
     e68:	1f 5f       	subi	r17, 0xFF	; 255
     e6a:	80 91 01 01 	lds	r24, 0x0101
     e6e:	18 17       	cp	r17, r24
     e70:	08 f4       	brcc	.+2      	; 0xe74 <checkTimeQueue+0xc4>
     e72:	aa cf       	rjmp	.-172    	; 0xdc8 <checkTimeQueue+0x18>
				else
					TimerQueue[i].pointerFct = 0;
			}
		}
	}
	sei();
     e74:	78 94       	sei
}
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	1f 91       	pop	r17
     e7c:	ff 90       	pop	r15
     e7e:	ef 90       	pop	r14
     e80:	08 95       	ret

00000e82 <resetTimerQueue>:

void resetTimerQueue(){
	initTimeQueue();	
     e82:	0e 94 bf 04 	call	0x97e	; 0x97e <initTimeQueue>
     e86:	08 95       	ret

00000e88 <blinkLedD6_v1>:
#include "Car/Engines.h"
#include "PID/PID1.h"

volatile uint8_t e_stins = 0;
void blinkLedD6_v1(){
	if(!e_stins)
     e88:	80 91 23 03 	lds	r24, 0x0323
     e8c:	81 11       	cpse	r24, r1
     e8e:	04 c0       	rjmp	.+8      	; 0xe98 <blinkLedD6_v1+0x10>
		PORTD ^= 1<<PIND6;
     e90:	9b b1       	in	r25, 0x0b	; 11
     e92:	80 e4       	ldi	r24, 0x40	; 64
     e94:	89 27       	eor	r24, r25
     e96:	8b b9       	out	0x0b, r24	; 11
     e98:	08 95       	ret

00000e9a <ledAction>:
void ledAction(char act){
	//char msg[] = "led action:  ";
	//msg[strlen(msg)-1]= act+'0';
	//BTTransmitStr(msg);
	
	switch(act){
     e9a:	81 30       	cpi	r24, 0x01	; 1
     e9c:	71 f0       	breq	.+28     	; 0xeba <ledAction+0x20>
     e9e:	18 f0       	brcs	.+6      	; 0xea6 <ledAction+0xc>
     ea0:	82 30       	cpi	r24, 0x02	; 2
     ea2:	a9 f0       	breq	.+42     	; 0xece <ledAction+0x34>
     ea4:	08 95       	ret
		case 0:
			removeEntryFromTimerQueue(&blinkLedD6_v1);
     ea6:	84 e4       	ldi	r24, 0x44	; 68
     ea8:	97 e0       	ldi	r25, 0x07	; 7
     eaa:	0e 94 c6 05 	call	0xb8c	; 0xb8c <removeEntryFromTimerQueue>
			PORTD &=~ (1<<PIND6);
     eae:	5e 98       	cbi	0x0b, 6	; 11
			//shouldBlink = 0;
			BTTransmitStr("ledul a fost stins.");
     eb0:	82 eb       	ldi	r24, 0xB2	; 178
     eb2:	92 e0       	ldi	r25, 0x02	; 2
     eb4:	0e 94 83 00 	call	0x106	; 0x106 <BTTransmitStr>
			break;
     eb8:	08 95       	ret
		case 1:
			removeEntryFromTimerQueue(&blinkLedD6_v1);
     eba:	84 e4       	ldi	r24, 0x44	; 68
     ebc:	97 e0       	ldi	r25, 0x07	; 7
     ebe:	0e 94 c6 05 	call	0xb8c	; 0xb8c <removeEntryFromTimerQueue>
			PORTD |= 1<<PIND6;
     ec2:	5e 9a       	sbi	0x0b, 6	; 11
			//shouldBlink = 0;
			BTTransmitStr("ledul a fost aprins.");
     ec4:	86 ec       	ldi	r24, 0xC6	; 198
     ec6:	92 e0       	ldi	r25, 0x02	; 2
     ec8:	0e 94 83 00 	call	0x106	; 0x106 <BTTransmitStr>
			break;
     ecc:	08 95       	ret
		
		case 2:
			addEntryToTimerQueue(&blinkLedD6_v1, (500UL * 1000UL), Periodic);
     ece:	21 e0       	ldi	r18, 0x01	; 1
     ed0:	40 e2       	ldi	r20, 0x20	; 32
     ed2:	51 ea       	ldi	r21, 0xA1	; 161
     ed4:	67 e0       	ldi	r22, 0x07	; 7
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	84 e4       	ldi	r24, 0x44	; 68
     eda:	97 e0       	ldi	r25, 0x07	; 7
     edc:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <addEntryToTimerQueue>
			BTTransmitStr("ledul va 'blincari'.");
     ee0:	8b ed       	ldi	r24, 0xDB	; 219
     ee2:	92 e0       	ldi	r25, 0x02	; 2
     ee4:	0e 94 83 00 	call	0x106	; 0x106 <BTTransmitStr>
     ee8:	08 95       	ret

00000eea <initLeds>:
			break;
	}
}

void initLeds(){	
	DDRD |=1<<PIND6;
     eea:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |=1<<PIND5;
     eec:	55 9a       	sbi	0x0a, 5	; 10
     eee:	08 95       	ret

00000ef0 <ReadSensor0>:
}
extern uint32_t time;

void ReadSensor0(){
     ef0:	0f 93       	push	r16
     ef2:	1f 93       	push	r17
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
     efc:	c6 54       	subi	r28, 0x46	; 70
     efe:	d1 09       	sbc	r29, r1
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	f8 94       	cli
     f04:	de bf       	out	0x3e, r29	; 62
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	cd bf       	out	0x3d, r28	; 61
	char msg[70];
	resetSensorQueue(0);
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <resetSensorQueue>
	uint16_t x = getValueOfSensor(0);
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	0e 94 af 03 	call	0x75e	; 0x75e <getValueOfSensor>
	sprintf(msg, "sensor #0: %d", x);	
     f16:	9f 93       	push	r25
     f18:	8f 93       	push	r24
     f1a:	80 ef       	ldi	r24, 0xF0	; 240
     f1c:	92 e0       	ldi	r25, 0x02	; 2
     f1e:	9f 93       	push	r25
     f20:	8f 93       	push	r24
     f22:	8e 01       	movw	r16, r28
     f24:	0f 5f       	subi	r16, 0xFF	; 255
     f26:	1f 4f       	sbci	r17, 0xFF	; 255
     f28:	1f 93       	push	r17
     f2a:	0f 93       	push	r16
     f2c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <sprintf>
	BTTransmitStr(msg);
     f30:	c8 01       	movw	r24, r16
     f32:	0e 94 83 00 	call	0x106	; 0x106 <BTTransmitStr>
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
}
     f42:	ca 5b       	subi	r28, 0xBA	; 186
     f44:	df 4f       	sbci	r29, 0xFF	; 255
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	1f 91       	pop	r17
     f56:	0f 91       	pop	r16
     f58:	08 95       	ret

00000f5a <fctSmechera>:
	sprintf(msg, "t: %lu", time);
	BTTransmitStr(msg);
}
uint8_t started = 0, stopped = 0, reload = 0;
volatile uint32_t lastValues[4];
void fctSmechera(){
     f5a:	cf 92       	push	r12
     f5c:	df 92       	push	r13
     f5e:	ef 92       	push	r14
     f60:	ff 92       	push	r15
     f62:	0f 93       	push	r16
     f64:	1f 93       	push	r17
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
	if(reload){
     f6a:	80 91 20 03 	lds	r24, 0x0320
     f6e:	88 23       	and	r24, r24
     f70:	39 f0       	breq	.+14     	; 0xf80 <fctSmechera+0x26>
		reload = 0;
     f72:	10 92 20 03 	sts	0x0320, r1
		started = stopped = 0;
     f76:	10 92 21 03 	sts	0x0321, r1
     f7a:	10 92 22 03 	sts	0x0322, r1
		return;
     f7e:	9f c0       	rjmp	.+318    	; 0x10be <fctSmechera+0x164>
	}
	if(!started){
     f80:	80 91 22 03 	lds	r24, 0x0322
     f84:	81 11       	cpse	r24, r1
     f86:	2c c0       	rjmp	.+88     	; 0xfe0 <fctSmechera+0x86>
		started = 1;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	80 93 22 03 	sts	0x0322, r24
		lastValues[0] = lastValues[1] = lastValues[2] = lastValues[3] = 0;
     f8e:	10 92 3d 04 	sts	0x043D, r1
     f92:	10 92 3e 04 	sts	0x043E, r1
     f96:	10 92 3f 04 	sts	0x043F, r1
     f9a:	10 92 40 04 	sts	0x0440, r1
     f9e:	10 92 39 04 	sts	0x0439, r1
     fa2:	10 92 3a 04 	sts	0x043A, r1
     fa6:	10 92 3b 04 	sts	0x043B, r1
     faa:	10 92 3c 04 	sts	0x043C, r1
     fae:	10 92 35 04 	sts	0x0435, r1
     fb2:	10 92 36 04 	sts	0x0436, r1
     fb6:	10 92 37 04 	sts	0x0437, r1
     fba:	10 92 38 04 	sts	0x0438, r1
     fbe:	10 92 31 04 	sts	0x0431, r1
     fc2:	10 92 32 04 	sts	0x0432, r1
     fc6:	10 92 33 04 	sts	0x0433, r1
     fca:	10 92 34 04 	sts	0x0434, r1
		goFront(60, 175);
     fce:	6f ea       	ldi	r22, 0xAF	; 175
     fd0:	8c e3       	ldi	r24, 0x3C	; 60
     fd2:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <goFront>
		BTTransmitStr("started!");
     fd6:	8e ef       	ldi	r24, 0xFE	; 254
     fd8:	92 e0       	ldi	r25, 0x02	; 2
     fda:	0e 94 83 00 	call	0x106	; 0x106 <BTTransmitStr>
		return;
     fde:	6f c0       	rjmp	.+222    	; 0x10be <fctSmechera+0x164>
	}
	if(!stopped){
     fe0:	80 91 21 03 	lds	r24, 0x0321
     fe4:	81 11       	cpse	r24, r1
     fe6:	6b c0       	rjmp	.+214    	; 0x10be <fctSmechera+0x164>
		lastValues[0]=lastValues[1];
     fe8:	0f 2e       	mov	r0, r31
     fea:	f5 e3       	ldi	r31, 0x35	; 53
     fec:	ef 2e       	mov	r14, r31
     fee:	f4 e0       	ldi	r31, 0x04	; 4
     ff0:	ff 2e       	mov	r15, r31
     ff2:	f0 2d       	mov	r31, r0
     ff4:	f7 01       	movw	r30, r14
     ff6:	80 81       	ld	r24, Z
     ff8:	91 81       	ldd	r25, Z+1	; 0x01
     ffa:	a2 81       	ldd	r26, Z+2	; 0x02
     ffc:	b3 81       	ldd	r27, Z+3	; 0x03
     ffe:	0f 2e       	mov	r0, r31
    1000:	f1 e3       	ldi	r31, 0x31	; 49
    1002:	cf 2e       	mov	r12, r31
    1004:	f4 e0       	ldi	r31, 0x04	; 4
    1006:	df 2e       	mov	r13, r31
    1008:	f0 2d       	mov	r31, r0
    100a:	f6 01       	movw	r30, r12
    100c:	80 83       	st	Z, r24
    100e:	91 83       	std	Z+1, r25	; 0x01
    1010:	a2 83       	std	Z+2, r26	; 0x02
    1012:	b3 83       	std	Z+3, r27	; 0x03
		lastValues[1]=lastValues[2];
    1014:	09 e3       	ldi	r16, 0x39	; 57
    1016:	14 e0       	ldi	r17, 0x04	; 4
    1018:	f8 01       	movw	r30, r16
    101a:	80 81       	ld	r24, Z
    101c:	91 81       	ldd	r25, Z+1	; 0x01
    101e:	a2 81       	ldd	r26, Z+2	; 0x02
    1020:	b3 81       	ldd	r27, Z+3	; 0x03
    1022:	f7 01       	movw	r30, r14
    1024:	80 83       	st	Z, r24
    1026:	91 83       	std	Z+1, r25	; 0x01
    1028:	a2 83       	std	Z+2, r26	; 0x02
    102a:	b3 83       	std	Z+3, r27	; 0x03
		lastValues[2]=lastValues[3];
    102c:	cd e3       	ldi	r28, 0x3D	; 61
    102e:	d4 e0       	ldi	r29, 0x04	; 4
    1030:	88 81       	ld	r24, Y
    1032:	99 81       	ldd	r25, Y+1	; 0x01
    1034:	aa 81       	ldd	r26, Y+2	; 0x02
    1036:	bb 81       	ldd	r27, Y+3	; 0x03
    1038:	f8 01       	movw	r30, r16
    103a:	80 83       	st	Z, r24
    103c:	91 83       	std	Z+1, r25	; 0x01
    103e:	a2 83       	std	Z+2, r26	; 0x02
    1040:	b3 83       	std	Z+3, r27	; 0x03
		lastValues[3] = getValueOfSensor(0);
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	0e 94 af 03 	call	0x75e	; 0x75e <getValueOfSensor>
    1048:	a0 e0       	ldi	r26, 0x00	; 0
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	88 83       	st	Y, r24
    104e:	99 83       	std	Y+1, r25	; 0x01
    1050:	aa 83       	std	Y+2, r26	; 0x02
    1052:	bb 83       	std	Y+3, r27	; 0x03
		
		if( (lastValues[0] + lastValues[1] + lastValues[2] + lastValues[3])/4 > 300){
    1054:	f6 01       	movw	r30, r12
    1056:	80 81       	ld	r24, Z
    1058:	91 81       	ldd	r25, Z+1	; 0x01
    105a:	a2 81       	ldd	r26, Z+2	; 0x02
    105c:	b3 81       	ldd	r27, Z+3	; 0x03
    105e:	f7 01       	movw	r30, r14
    1060:	c0 80       	ld	r12, Z
    1062:	d1 80       	ldd	r13, Z+1	; 0x01
    1064:	e2 80       	ldd	r14, Z+2	; 0x02
    1066:	f3 80       	ldd	r15, Z+3	; 0x03
    1068:	f8 01       	movw	r30, r16
    106a:	00 81       	ld	r16, Z
    106c:	11 81       	ldd	r17, Z+1	; 0x01
    106e:	22 81       	ldd	r18, Z+2	; 0x02
    1070:	33 81       	ldd	r19, Z+3	; 0x03
    1072:	48 81       	ld	r20, Y
    1074:	59 81       	ldd	r21, Y+1	; 0x01
    1076:	6a 81       	ldd	r22, Y+2	; 0x02
    1078:	7b 81       	ldd	r23, Y+3	; 0x03
    107a:	8c 0d       	add	r24, r12
    107c:	9d 1d       	adc	r25, r13
    107e:	ae 1d       	adc	r26, r14
    1080:	bf 1d       	adc	r27, r15
    1082:	80 0f       	add	r24, r16
    1084:	91 1f       	adc	r25, r17
    1086:	a2 1f       	adc	r26, r18
    1088:	b3 1f       	adc	r27, r19
    108a:	84 0f       	add	r24, r20
    108c:	95 1f       	adc	r25, r21
    108e:	a6 1f       	adc	r26, r22
    1090:	b7 1f       	adc	r27, r23
    1092:	84 3b       	cpi	r24, 0xB4	; 180
    1094:	94 40       	sbci	r25, 0x04	; 4
    1096:	a1 05       	cpc	r26, r1
    1098:	b1 05       	cpc	r27, r1
    109a:	88 f0       	brcs	.+34     	; 0x10be <fctSmechera+0x164>
			stopEngines();
    109c:	0e 94 05 02 	call	0x40a	; 0x40a <stopEngines>
			removeEntryFromTimerQueue(&stopEngines);
    10a0:	85 e0       	ldi	r24, 0x05	; 5
    10a2:	92 e0       	ldi	r25, 0x02	; 2
    10a4:	0e 94 c6 05 	call	0xb8c	; 0xb8c <removeEntryFromTimerQueue>
			removeEntryFromTimerQueue(&fctSmechera); 
    10a8:	8d ea       	ldi	r24, 0xAD	; 173
    10aa:	97 e0       	ldi	r25, 0x07	; 7
    10ac:	0e 94 c6 05 	call	0xb8c	; 0xb8c <removeEntryFromTimerQueue>
			ReadSensor0();
    10b0:	0e 94 78 07 	call	0xef0	; 0xef0 <ReadSensor0>
			stopped = 1;
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	80 93 21 03 	sts	0x0321, r24
			reload = 1;
    10ba:	80 93 20 03 	sts	0x0320, r24
		}
	}
}
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	1f 91       	pop	r17
    10c4:	0f 91       	pop	r16
    10c6:	ff 90       	pop	r15
    10c8:	ef 90       	pop	r14
    10ca:	df 90       	pop	r13
    10cc:	cf 90       	pop	r12
    10ce:	08 95       	ret

000010d0 <ReadSensor1>:
	resetSensorQueue(0);
	uint16_t x = getValueOfSensor(0);
	sprintf(msg, "sensor #0: %d", x);	
	BTTransmitStr(msg);
}
void ReadSensor1(){
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	c6 54       	subi	r28, 0x46	; 70
    10de:	d1 09       	sbc	r29, r1
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	f8 94       	cli
    10e4:	de bf       	out	0x3e, r29	; 62
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	cd bf       	out	0x3d, r28	; 61
	char msg[70];
	resetSensorQueue(1);
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	0e 94 60 03 	call	0x6c0	; 0x6c0 <resetSensorQueue>
	uint16_t x = getValueOfSensor(1);
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	0e 94 af 03 	call	0x75e	; 0x75e <getValueOfSensor>
	sprintf(msg, "sensor #1: %d", x);
    10f6:	9f 93       	push	r25
    10f8:	8f 93       	push	r24
    10fa:	87 e0       	ldi	r24, 0x07	; 7
    10fc:	93 e0       	ldi	r25, 0x03	; 3
    10fe:	9f 93       	push	r25
    1100:	8f 93       	push	r24
    1102:	8e 01       	movw	r16, r28
    1104:	0f 5f       	subi	r16, 0xFF	; 255
    1106:	1f 4f       	sbci	r17, 0xFF	; 255
    1108:	1f 93       	push	r17
    110a:	0f 93       	push	r16
    110c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <sprintf>
	BTTransmitStr(msg);
    1110:	c8 01       	movw	r24, r16
    1112:	0e 94 83 00 	call	0x106	; 0x106 <BTTransmitStr>
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
}
    1122:	ca 5b       	subi	r28, 0xBA	; 186
    1124:	df 4f       	sbci	r29, 0xFF	; 255
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	f8 94       	cli
    112a:	de bf       	out	0x3e, r29	; 62
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	cd bf       	out	0x3d, r28	; 61
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	1f 91       	pop	r17
    1136:	0f 91       	pop	r16
    1138:	08 95       	ret

0000113a <__tablejump2__>:
    113a:	ee 0f       	add	r30, r30
    113c:	ff 1f       	adc	r31, r31

0000113e <__tablejump__>:
    113e:	05 90       	lpm	r0, Z+
    1140:	f4 91       	lpm	r31, Z
    1142:	e0 2d       	mov	r30, r0
    1144:	09 94       	ijmp

00001146 <__umulhisi3>:
    1146:	a2 9f       	mul	r26, r18
    1148:	b0 01       	movw	r22, r0
    114a:	b3 9f       	mul	r27, r19
    114c:	c0 01       	movw	r24, r0
    114e:	a3 9f       	mul	r26, r19
    1150:	70 0d       	add	r23, r0
    1152:	81 1d       	adc	r24, r1
    1154:	11 24       	eor	r1, r1
    1156:	91 1d       	adc	r25, r1
    1158:	b2 9f       	mul	r27, r18
    115a:	70 0d       	add	r23, r0
    115c:	81 1d       	adc	r24, r1
    115e:	11 24       	eor	r1, r1
    1160:	91 1d       	adc	r25, r1
    1162:	08 95       	ret

00001164 <__muluhisi3>:
    1164:	0e 94 a3 08 	call	0x1146	; 0x1146 <__umulhisi3>
    1168:	a5 9f       	mul	r26, r21
    116a:	90 0d       	add	r25, r0
    116c:	b4 9f       	mul	r27, r20
    116e:	90 0d       	add	r25, r0
    1170:	a4 9f       	mul	r26, r20
    1172:	80 0d       	add	r24, r0
    1174:	91 1d       	adc	r25, r1
    1176:	11 24       	eor	r1, r1
    1178:	08 95       	ret

0000117a <printf>:
    117a:	a0 e0       	ldi	r26, 0x00	; 0
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e3 ec       	ldi	r30, 0xC3	; 195
    1180:	f8 e0       	ldi	r31, 0x08	; 8
    1182:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <__prologue_saves__+0x20>
    1186:	fe 01       	movw	r30, r28
    1188:	35 96       	adiw	r30, 0x05	; 5
    118a:	61 91       	ld	r22, Z+
    118c:	71 91       	ld	r23, Z+
    118e:	af 01       	movw	r20, r30
    1190:	80 91 43 04 	lds	r24, 0x0443
    1194:	90 91 44 04 	lds	r25, 0x0444
    1198:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <vfprintf>
    119c:	e2 e0       	ldi	r30, 0x02	; 2
    119e:	0c 94 97 0b 	jmp	0x172e	; 0x172e <__epilogue_restores__+0x20>

000011a2 <sprintf>:
    11a2:	ae e0       	ldi	r26, 0x0E	; 14
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e7 ed       	ldi	r30, 0xD7	; 215
    11a8:	f8 e0       	ldi	r31, 0x08	; 8
    11aa:	0c 94 79 0b 	jmp	0x16f2	; 0x16f2 <__prologue_saves__+0x1c>
    11ae:	0d 89       	ldd	r16, Y+21	; 0x15
    11b0:	1e 89       	ldd	r17, Y+22	; 0x16
    11b2:	86 e0       	ldi	r24, 0x06	; 6
    11b4:	8c 83       	std	Y+4, r24	; 0x04
    11b6:	1a 83       	std	Y+2, r17	; 0x02
    11b8:	09 83       	std	Y+1, r16	; 0x01
    11ba:	8f ef       	ldi	r24, 0xFF	; 255
    11bc:	9f e7       	ldi	r25, 0x7F	; 127
    11be:	9e 83       	std	Y+6, r25	; 0x06
    11c0:	8d 83       	std	Y+5, r24	; 0x05
    11c2:	ae 01       	movw	r20, r28
    11c4:	47 5e       	subi	r20, 0xE7	; 231
    11c6:	5f 4f       	sbci	r21, 0xFF	; 255
    11c8:	6f 89       	ldd	r22, Y+23	; 0x17
    11ca:	78 8d       	ldd	r23, Y+24	; 0x18
    11cc:	ce 01       	movw	r24, r28
    11ce:	01 96       	adiw	r24, 0x01	; 1
    11d0:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <vfprintf>
    11d4:	ef 81       	ldd	r30, Y+7	; 0x07
    11d6:	f8 85       	ldd	r31, Y+8	; 0x08
    11d8:	e0 0f       	add	r30, r16
    11da:	f1 1f       	adc	r31, r17
    11dc:	10 82       	st	Z, r1
    11de:	2e 96       	adiw	r28, 0x0e	; 14
    11e0:	e4 e0       	ldi	r30, 0x04	; 4
    11e2:	0c 94 95 0b 	jmp	0x172a	; 0x172a <__epilogue_restores__+0x1c>

000011e6 <vfprintf>:
    11e6:	ac e0       	ldi	r26, 0x0C	; 12
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e9 ef       	ldi	r30, 0xF9	; 249
    11ec:	f8 e0       	ldi	r31, 0x08	; 8
    11ee:	0c 94 6b 0b 	jmp	0x16d6	; 0x16d6 <__prologue_saves__>
    11f2:	7c 01       	movw	r14, r24
    11f4:	6b 01       	movw	r12, r22
    11f6:	8a 01       	movw	r16, r20
    11f8:	fc 01       	movw	r30, r24
    11fa:	17 82       	std	Z+7, r1	; 0x07
    11fc:	16 82       	std	Z+6, r1	; 0x06
    11fe:	83 81       	ldd	r24, Z+3	; 0x03
    1200:	81 ff       	sbrs	r24, 1
    1202:	bd c1       	rjmp	.+890    	; 0x157e <vfprintf+0x398>
    1204:	ce 01       	movw	r24, r28
    1206:	01 96       	adiw	r24, 0x01	; 1
    1208:	4c 01       	movw	r8, r24
    120a:	f7 01       	movw	r30, r14
    120c:	93 81       	ldd	r25, Z+3	; 0x03
    120e:	f6 01       	movw	r30, r12
    1210:	93 fd       	sbrc	r25, 3
    1212:	85 91       	lpm	r24, Z+
    1214:	93 ff       	sbrs	r25, 3
    1216:	81 91       	ld	r24, Z+
    1218:	6f 01       	movw	r12, r30
    121a:	88 23       	and	r24, r24
    121c:	09 f4       	brne	.+2      	; 0x1220 <vfprintf+0x3a>
    121e:	ab c1       	rjmp	.+854    	; 0x1576 <vfprintf+0x390>
    1220:	85 32       	cpi	r24, 0x25	; 37
    1222:	39 f4       	brne	.+14     	; 0x1232 <vfprintf+0x4c>
    1224:	93 fd       	sbrc	r25, 3
    1226:	85 91       	lpm	r24, Z+
    1228:	93 ff       	sbrs	r25, 3
    122a:	81 91       	ld	r24, Z+
    122c:	6f 01       	movw	r12, r30
    122e:	85 32       	cpi	r24, 0x25	; 37
    1230:	29 f4       	brne	.+10     	; 0x123c <vfprintf+0x56>
    1232:	b7 01       	movw	r22, r14
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <fputc>
    123a:	e7 cf       	rjmp	.-50     	; 0x120a <vfprintf+0x24>
    123c:	51 2c       	mov	r5, r1
    123e:	31 2c       	mov	r3, r1
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	20 32       	cpi	r18, 0x20	; 32
    1244:	a0 f4       	brcc	.+40     	; 0x126e <vfprintf+0x88>
    1246:	8b 32       	cpi	r24, 0x2B	; 43
    1248:	69 f0       	breq	.+26     	; 0x1264 <vfprintf+0x7e>
    124a:	30 f4       	brcc	.+12     	; 0x1258 <vfprintf+0x72>
    124c:	80 32       	cpi	r24, 0x20	; 32
    124e:	59 f0       	breq	.+22     	; 0x1266 <vfprintf+0x80>
    1250:	83 32       	cpi	r24, 0x23	; 35
    1252:	69 f4       	brne	.+26     	; 0x126e <vfprintf+0x88>
    1254:	20 61       	ori	r18, 0x10	; 16
    1256:	2c c0       	rjmp	.+88     	; 0x12b0 <vfprintf+0xca>
    1258:	8d 32       	cpi	r24, 0x2D	; 45
    125a:	39 f0       	breq	.+14     	; 0x126a <vfprintf+0x84>
    125c:	80 33       	cpi	r24, 0x30	; 48
    125e:	39 f4       	brne	.+14     	; 0x126e <vfprintf+0x88>
    1260:	21 60       	ori	r18, 0x01	; 1
    1262:	26 c0       	rjmp	.+76     	; 0x12b0 <vfprintf+0xca>
    1264:	22 60       	ori	r18, 0x02	; 2
    1266:	24 60       	ori	r18, 0x04	; 4
    1268:	23 c0       	rjmp	.+70     	; 0x12b0 <vfprintf+0xca>
    126a:	28 60       	ori	r18, 0x08	; 8
    126c:	21 c0       	rjmp	.+66     	; 0x12b0 <vfprintf+0xca>
    126e:	27 fd       	sbrc	r18, 7
    1270:	27 c0       	rjmp	.+78     	; 0x12c0 <vfprintf+0xda>
    1272:	30 ed       	ldi	r19, 0xD0	; 208
    1274:	38 0f       	add	r19, r24
    1276:	3a 30       	cpi	r19, 0x0A	; 10
    1278:	78 f4       	brcc	.+30     	; 0x1298 <vfprintf+0xb2>
    127a:	26 ff       	sbrs	r18, 6
    127c:	06 c0       	rjmp	.+12     	; 0x128a <vfprintf+0xa4>
    127e:	fa e0       	ldi	r31, 0x0A	; 10
    1280:	5f 9e       	mul	r5, r31
    1282:	30 0d       	add	r19, r0
    1284:	11 24       	eor	r1, r1
    1286:	53 2e       	mov	r5, r19
    1288:	13 c0       	rjmp	.+38     	; 0x12b0 <vfprintf+0xca>
    128a:	8a e0       	ldi	r24, 0x0A	; 10
    128c:	38 9e       	mul	r3, r24
    128e:	30 0d       	add	r19, r0
    1290:	11 24       	eor	r1, r1
    1292:	33 2e       	mov	r3, r19
    1294:	20 62       	ori	r18, 0x20	; 32
    1296:	0c c0       	rjmp	.+24     	; 0x12b0 <vfprintf+0xca>
    1298:	8e 32       	cpi	r24, 0x2E	; 46
    129a:	21 f4       	brne	.+8      	; 0x12a4 <vfprintf+0xbe>
    129c:	26 fd       	sbrc	r18, 6
    129e:	6b c1       	rjmp	.+726    	; 0x1576 <vfprintf+0x390>
    12a0:	20 64       	ori	r18, 0x40	; 64
    12a2:	06 c0       	rjmp	.+12     	; 0x12b0 <vfprintf+0xca>
    12a4:	8c 36       	cpi	r24, 0x6C	; 108
    12a6:	11 f4       	brne	.+4      	; 0x12ac <vfprintf+0xc6>
    12a8:	20 68       	ori	r18, 0x80	; 128
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <vfprintf+0xca>
    12ac:	88 36       	cpi	r24, 0x68	; 104
    12ae:	41 f4       	brne	.+16     	; 0x12c0 <vfprintf+0xda>
    12b0:	f6 01       	movw	r30, r12
    12b2:	93 fd       	sbrc	r25, 3
    12b4:	85 91       	lpm	r24, Z+
    12b6:	93 ff       	sbrs	r25, 3
    12b8:	81 91       	ld	r24, Z+
    12ba:	6f 01       	movw	r12, r30
    12bc:	81 11       	cpse	r24, r1
    12be:	c1 cf       	rjmp	.-126    	; 0x1242 <vfprintf+0x5c>
    12c0:	98 2f       	mov	r25, r24
    12c2:	9f 7d       	andi	r25, 0xDF	; 223
    12c4:	95 54       	subi	r25, 0x45	; 69
    12c6:	93 30       	cpi	r25, 0x03	; 3
    12c8:	28 f4       	brcc	.+10     	; 0x12d4 <vfprintf+0xee>
    12ca:	0c 5f       	subi	r16, 0xFC	; 252
    12cc:	1f 4f       	sbci	r17, 0xFF	; 255
    12ce:	ff e3       	ldi	r31, 0x3F	; 63
    12d0:	f9 83       	std	Y+1, r31	; 0x01
    12d2:	0d c0       	rjmp	.+26     	; 0x12ee <vfprintf+0x108>
    12d4:	83 36       	cpi	r24, 0x63	; 99
    12d6:	31 f0       	breq	.+12     	; 0x12e4 <vfprintf+0xfe>
    12d8:	83 37       	cpi	r24, 0x73	; 115
    12da:	71 f0       	breq	.+28     	; 0x12f8 <vfprintf+0x112>
    12dc:	83 35       	cpi	r24, 0x53	; 83
    12de:	09 f0       	breq	.+2      	; 0x12e2 <vfprintf+0xfc>
    12e0:	5b c0       	rjmp	.+182    	; 0x1398 <vfprintf+0x1b2>
    12e2:	22 c0       	rjmp	.+68     	; 0x1328 <vfprintf+0x142>
    12e4:	f8 01       	movw	r30, r16
    12e6:	80 81       	ld	r24, Z
    12e8:	89 83       	std	Y+1, r24	; 0x01
    12ea:	0e 5f       	subi	r16, 0xFE	; 254
    12ec:	1f 4f       	sbci	r17, 0xFF	; 255
    12ee:	44 24       	eor	r4, r4
    12f0:	43 94       	inc	r4
    12f2:	51 2c       	mov	r5, r1
    12f4:	54 01       	movw	r10, r8
    12f6:	15 c0       	rjmp	.+42     	; 0x1322 <vfprintf+0x13c>
    12f8:	38 01       	movw	r6, r16
    12fa:	f2 e0       	ldi	r31, 0x02	; 2
    12fc:	6f 0e       	add	r6, r31
    12fe:	71 1c       	adc	r7, r1
    1300:	f8 01       	movw	r30, r16
    1302:	a0 80       	ld	r10, Z
    1304:	b1 80       	ldd	r11, Z+1	; 0x01
    1306:	26 ff       	sbrs	r18, 6
    1308:	03 c0       	rjmp	.+6      	; 0x1310 <vfprintf+0x12a>
    130a:	65 2d       	mov	r22, r5
    130c:	70 e0       	ldi	r23, 0x00	; 0
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <vfprintf+0x12e>
    1310:	6f ef       	ldi	r22, 0xFF	; 255
    1312:	7f ef       	ldi	r23, 0xFF	; 255
    1314:	c5 01       	movw	r24, r10
    1316:	2c 87       	std	Y+12, r18	; 0x0c
    1318:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <strnlen>
    131c:	2c 01       	movw	r4, r24
    131e:	83 01       	movw	r16, r6
    1320:	2c 85       	ldd	r18, Y+12	; 0x0c
    1322:	2f 77       	andi	r18, 0x7F	; 127
    1324:	22 2e       	mov	r2, r18
    1326:	17 c0       	rjmp	.+46     	; 0x1356 <vfprintf+0x170>
    1328:	38 01       	movw	r6, r16
    132a:	f2 e0       	ldi	r31, 0x02	; 2
    132c:	6f 0e       	add	r6, r31
    132e:	71 1c       	adc	r7, r1
    1330:	f8 01       	movw	r30, r16
    1332:	a0 80       	ld	r10, Z
    1334:	b1 80       	ldd	r11, Z+1	; 0x01
    1336:	26 ff       	sbrs	r18, 6
    1338:	03 c0       	rjmp	.+6      	; 0x1340 <vfprintf+0x15a>
    133a:	65 2d       	mov	r22, r5
    133c:	70 e0       	ldi	r23, 0x00	; 0
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <vfprintf+0x15e>
    1340:	6f ef       	ldi	r22, 0xFF	; 255
    1342:	7f ef       	ldi	r23, 0xFF	; 255
    1344:	c5 01       	movw	r24, r10
    1346:	2c 87       	std	Y+12, r18	; 0x0c
    1348:	0e 94 c5 0a 	call	0x158a	; 0x158a <strnlen_P>
    134c:	2c 01       	movw	r4, r24
    134e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1350:	20 68       	ori	r18, 0x80	; 128
    1352:	22 2e       	mov	r2, r18
    1354:	83 01       	movw	r16, r6
    1356:	23 fc       	sbrc	r2, 3
    1358:	1b c0       	rjmp	.+54     	; 0x1390 <vfprintf+0x1aa>
    135a:	83 2d       	mov	r24, r3
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	48 16       	cp	r4, r24
    1360:	59 06       	cpc	r5, r25
    1362:	b0 f4       	brcc	.+44     	; 0x1390 <vfprintf+0x1aa>
    1364:	b7 01       	movw	r22, r14
    1366:	80 e2       	ldi	r24, 0x20	; 32
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <fputc>
    136e:	3a 94       	dec	r3
    1370:	f4 cf       	rjmp	.-24     	; 0x135a <vfprintf+0x174>
    1372:	f5 01       	movw	r30, r10
    1374:	27 fc       	sbrc	r2, 7
    1376:	85 91       	lpm	r24, Z+
    1378:	27 fe       	sbrs	r2, 7
    137a:	81 91       	ld	r24, Z+
    137c:	5f 01       	movw	r10, r30
    137e:	b7 01       	movw	r22, r14
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <fputc>
    1386:	31 10       	cpse	r3, r1
    1388:	3a 94       	dec	r3
    138a:	f1 e0       	ldi	r31, 0x01	; 1
    138c:	4f 1a       	sub	r4, r31
    138e:	51 08       	sbc	r5, r1
    1390:	41 14       	cp	r4, r1
    1392:	51 04       	cpc	r5, r1
    1394:	71 f7       	brne	.-36     	; 0x1372 <vfprintf+0x18c>
    1396:	e5 c0       	rjmp	.+458    	; 0x1562 <vfprintf+0x37c>
    1398:	84 36       	cpi	r24, 0x64	; 100
    139a:	11 f0       	breq	.+4      	; 0x13a0 <vfprintf+0x1ba>
    139c:	89 36       	cpi	r24, 0x69	; 105
    139e:	39 f5       	brne	.+78     	; 0x13ee <vfprintf+0x208>
    13a0:	f8 01       	movw	r30, r16
    13a2:	27 ff       	sbrs	r18, 7
    13a4:	07 c0       	rjmp	.+14     	; 0x13b4 <vfprintf+0x1ce>
    13a6:	60 81       	ld	r22, Z
    13a8:	71 81       	ldd	r23, Z+1	; 0x01
    13aa:	82 81       	ldd	r24, Z+2	; 0x02
    13ac:	93 81       	ldd	r25, Z+3	; 0x03
    13ae:	0c 5f       	subi	r16, 0xFC	; 252
    13b0:	1f 4f       	sbci	r17, 0xFF	; 255
    13b2:	08 c0       	rjmp	.+16     	; 0x13c4 <vfprintf+0x1de>
    13b4:	60 81       	ld	r22, Z
    13b6:	71 81       	ldd	r23, Z+1	; 0x01
    13b8:	88 27       	eor	r24, r24
    13ba:	77 fd       	sbrc	r23, 7
    13bc:	80 95       	com	r24
    13be:	98 2f       	mov	r25, r24
    13c0:	0e 5f       	subi	r16, 0xFE	; 254
    13c2:	1f 4f       	sbci	r17, 0xFF	; 255
    13c4:	2f 76       	andi	r18, 0x6F	; 111
    13c6:	b2 2e       	mov	r11, r18
    13c8:	97 ff       	sbrs	r25, 7
    13ca:	09 c0       	rjmp	.+18     	; 0x13de <vfprintf+0x1f8>
    13cc:	90 95       	com	r25
    13ce:	80 95       	com	r24
    13d0:	70 95       	com	r23
    13d2:	61 95       	neg	r22
    13d4:	7f 4f       	sbci	r23, 0xFF	; 255
    13d6:	8f 4f       	sbci	r24, 0xFF	; 255
    13d8:	9f 4f       	sbci	r25, 0xFF	; 255
    13da:	20 68       	ori	r18, 0x80	; 128
    13dc:	b2 2e       	mov	r11, r18
    13de:	2a e0       	ldi	r18, 0x0A	; 10
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	a4 01       	movw	r20, r8
    13e4:	0e 94 0d 0b 	call	0x161a	; 0x161a <__ultoa_invert>
    13e8:	a8 2e       	mov	r10, r24
    13ea:	a8 18       	sub	r10, r8
    13ec:	44 c0       	rjmp	.+136    	; 0x1476 <vfprintf+0x290>
    13ee:	85 37       	cpi	r24, 0x75	; 117
    13f0:	29 f4       	brne	.+10     	; 0x13fc <vfprintf+0x216>
    13f2:	2f 7e       	andi	r18, 0xEF	; 239
    13f4:	b2 2e       	mov	r11, r18
    13f6:	2a e0       	ldi	r18, 0x0A	; 10
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	25 c0       	rjmp	.+74     	; 0x1446 <vfprintf+0x260>
    13fc:	f2 2f       	mov	r31, r18
    13fe:	f9 7f       	andi	r31, 0xF9	; 249
    1400:	bf 2e       	mov	r11, r31
    1402:	8f 36       	cpi	r24, 0x6F	; 111
    1404:	c1 f0       	breq	.+48     	; 0x1436 <vfprintf+0x250>
    1406:	18 f4       	brcc	.+6      	; 0x140e <vfprintf+0x228>
    1408:	88 35       	cpi	r24, 0x58	; 88
    140a:	79 f0       	breq	.+30     	; 0x142a <vfprintf+0x244>
    140c:	b4 c0       	rjmp	.+360    	; 0x1576 <vfprintf+0x390>
    140e:	80 37       	cpi	r24, 0x70	; 112
    1410:	19 f0       	breq	.+6      	; 0x1418 <vfprintf+0x232>
    1412:	88 37       	cpi	r24, 0x78	; 120
    1414:	21 f0       	breq	.+8      	; 0x141e <vfprintf+0x238>
    1416:	af c0       	rjmp	.+350    	; 0x1576 <vfprintf+0x390>
    1418:	2f 2f       	mov	r18, r31
    141a:	20 61       	ori	r18, 0x10	; 16
    141c:	b2 2e       	mov	r11, r18
    141e:	b4 fe       	sbrs	r11, 4
    1420:	0d c0       	rjmp	.+26     	; 0x143c <vfprintf+0x256>
    1422:	8b 2d       	mov	r24, r11
    1424:	84 60       	ori	r24, 0x04	; 4
    1426:	b8 2e       	mov	r11, r24
    1428:	09 c0       	rjmp	.+18     	; 0x143c <vfprintf+0x256>
    142a:	24 ff       	sbrs	r18, 4
    142c:	0a c0       	rjmp	.+20     	; 0x1442 <vfprintf+0x25c>
    142e:	9f 2f       	mov	r25, r31
    1430:	96 60       	ori	r25, 0x06	; 6
    1432:	b9 2e       	mov	r11, r25
    1434:	06 c0       	rjmp	.+12     	; 0x1442 <vfprintf+0x25c>
    1436:	28 e0       	ldi	r18, 0x08	; 8
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	05 c0       	rjmp	.+10     	; 0x1446 <vfprintf+0x260>
    143c:	20 e1       	ldi	r18, 0x10	; 16
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <vfprintf+0x260>
    1442:	20 e1       	ldi	r18, 0x10	; 16
    1444:	32 e0       	ldi	r19, 0x02	; 2
    1446:	f8 01       	movw	r30, r16
    1448:	b7 fe       	sbrs	r11, 7
    144a:	07 c0       	rjmp	.+14     	; 0x145a <vfprintf+0x274>
    144c:	60 81       	ld	r22, Z
    144e:	71 81       	ldd	r23, Z+1	; 0x01
    1450:	82 81       	ldd	r24, Z+2	; 0x02
    1452:	93 81       	ldd	r25, Z+3	; 0x03
    1454:	0c 5f       	subi	r16, 0xFC	; 252
    1456:	1f 4f       	sbci	r17, 0xFF	; 255
    1458:	06 c0       	rjmp	.+12     	; 0x1466 <vfprintf+0x280>
    145a:	60 81       	ld	r22, Z
    145c:	71 81       	ldd	r23, Z+1	; 0x01
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	0e 5f       	subi	r16, 0xFE	; 254
    1464:	1f 4f       	sbci	r17, 0xFF	; 255
    1466:	a4 01       	movw	r20, r8
    1468:	0e 94 0d 0b 	call	0x161a	; 0x161a <__ultoa_invert>
    146c:	a8 2e       	mov	r10, r24
    146e:	a8 18       	sub	r10, r8
    1470:	fb 2d       	mov	r31, r11
    1472:	ff 77       	andi	r31, 0x7F	; 127
    1474:	bf 2e       	mov	r11, r31
    1476:	b6 fe       	sbrs	r11, 6
    1478:	0b c0       	rjmp	.+22     	; 0x1490 <vfprintf+0x2aa>
    147a:	2b 2d       	mov	r18, r11
    147c:	2e 7f       	andi	r18, 0xFE	; 254
    147e:	a5 14       	cp	r10, r5
    1480:	50 f4       	brcc	.+20     	; 0x1496 <vfprintf+0x2b0>
    1482:	b4 fe       	sbrs	r11, 4
    1484:	0a c0       	rjmp	.+20     	; 0x149a <vfprintf+0x2b4>
    1486:	b2 fc       	sbrc	r11, 2
    1488:	08 c0       	rjmp	.+16     	; 0x149a <vfprintf+0x2b4>
    148a:	2b 2d       	mov	r18, r11
    148c:	2e 7e       	andi	r18, 0xEE	; 238
    148e:	05 c0       	rjmp	.+10     	; 0x149a <vfprintf+0x2b4>
    1490:	7a 2c       	mov	r7, r10
    1492:	2b 2d       	mov	r18, r11
    1494:	03 c0       	rjmp	.+6      	; 0x149c <vfprintf+0x2b6>
    1496:	7a 2c       	mov	r7, r10
    1498:	01 c0       	rjmp	.+2      	; 0x149c <vfprintf+0x2b6>
    149a:	75 2c       	mov	r7, r5
    149c:	24 ff       	sbrs	r18, 4
    149e:	0d c0       	rjmp	.+26     	; 0x14ba <vfprintf+0x2d4>
    14a0:	fe 01       	movw	r30, r28
    14a2:	ea 0d       	add	r30, r10
    14a4:	f1 1d       	adc	r31, r1
    14a6:	80 81       	ld	r24, Z
    14a8:	80 33       	cpi	r24, 0x30	; 48
    14aa:	11 f4       	brne	.+4      	; 0x14b0 <vfprintf+0x2ca>
    14ac:	29 7e       	andi	r18, 0xE9	; 233
    14ae:	09 c0       	rjmp	.+18     	; 0x14c2 <vfprintf+0x2dc>
    14b0:	22 ff       	sbrs	r18, 2
    14b2:	06 c0       	rjmp	.+12     	; 0x14c0 <vfprintf+0x2da>
    14b4:	73 94       	inc	r7
    14b6:	73 94       	inc	r7
    14b8:	04 c0       	rjmp	.+8      	; 0x14c2 <vfprintf+0x2dc>
    14ba:	82 2f       	mov	r24, r18
    14bc:	86 78       	andi	r24, 0x86	; 134
    14be:	09 f0       	breq	.+2      	; 0x14c2 <vfprintf+0x2dc>
    14c0:	73 94       	inc	r7
    14c2:	23 fd       	sbrc	r18, 3
    14c4:	13 c0       	rjmp	.+38     	; 0x14ec <vfprintf+0x306>
    14c6:	20 ff       	sbrs	r18, 0
    14c8:	06 c0       	rjmp	.+12     	; 0x14d6 <vfprintf+0x2f0>
    14ca:	5a 2c       	mov	r5, r10
    14cc:	73 14       	cp	r7, r3
    14ce:	18 f4       	brcc	.+6      	; 0x14d6 <vfprintf+0x2f0>
    14d0:	53 0c       	add	r5, r3
    14d2:	57 18       	sub	r5, r7
    14d4:	73 2c       	mov	r7, r3
    14d6:	73 14       	cp	r7, r3
    14d8:	68 f4       	brcc	.+26     	; 0x14f4 <vfprintf+0x30e>
    14da:	b7 01       	movw	r22, r14
    14dc:	80 e2       	ldi	r24, 0x20	; 32
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	2c 87       	std	Y+12, r18	; 0x0c
    14e2:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <fputc>
    14e6:	73 94       	inc	r7
    14e8:	2c 85       	ldd	r18, Y+12	; 0x0c
    14ea:	f5 cf       	rjmp	.-22     	; 0x14d6 <vfprintf+0x2f0>
    14ec:	73 14       	cp	r7, r3
    14ee:	10 f4       	brcc	.+4      	; 0x14f4 <vfprintf+0x30e>
    14f0:	37 18       	sub	r3, r7
    14f2:	01 c0       	rjmp	.+2      	; 0x14f6 <vfprintf+0x310>
    14f4:	31 2c       	mov	r3, r1
    14f6:	24 ff       	sbrs	r18, 4
    14f8:	12 c0       	rjmp	.+36     	; 0x151e <vfprintf+0x338>
    14fa:	b7 01       	movw	r22, r14
    14fc:	80 e3       	ldi	r24, 0x30	; 48
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	2c 87       	std	Y+12, r18	; 0x0c
    1502:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <fputc>
    1506:	2c 85       	ldd	r18, Y+12	; 0x0c
    1508:	22 ff       	sbrs	r18, 2
    150a:	17 c0       	rjmp	.+46     	; 0x153a <vfprintf+0x354>
    150c:	21 ff       	sbrs	r18, 1
    150e:	03 c0       	rjmp	.+6      	; 0x1516 <vfprintf+0x330>
    1510:	88 e5       	ldi	r24, 0x58	; 88
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	02 c0       	rjmp	.+4      	; 0x151a <vfprintf+0x334>
    1516:	88 e7       	ldi	r24, 0x78	; 120
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	b7 01       	movw	r22, r14
    151c:	0c c0       	rjmp	.+24     	; 0x1536 <vfprintf+0x350>
    151e:	82 2f       	mov	r24, r18
    1520:	86 78       	andi	r24, 0x86	; 134
    1522:	59 f0       	breq	.+22     	; 0x153a <vfprintf+0x354>
    1524:	21 fd       	sbrc	r18, 1
    1526:	02 c0       	rjmp	.+4      	; 0x152c <vfprintf+0x346>
    1528:	80 e2       	ldi	r24, 0x20	; 32
    152a:	01 c0       	rjmp	.+2      	; 0x152e <vfprintf+0x348>
    152c:	8b e2       	ldi	r24, 0x2B	; 43
    152e:	27 fd       	sbrc	r18, 7
    1530:	8d e2       	ldi	r24, 0x2D	; 45
    1532:	b7 01       	movw	r22, r14
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <fputc>
    153a:	a5 14       	cp	r10, r5
    153c:	38 f4       	brcc	.+14     	; 0x154c <vfprintf+0x366>
    153e:	b7 01       	movw	r22, r14
    1540:	80 e3       	ldi	r24, 0x30	; 48
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <fputc>
    1548:	5a 94       	dec	r5
    154a:	f7 cf       	rjmp	.-18     	; 0x153a <vfprintf+0x354>
    154c:	aa 94       	dec	r10
    154e:	f4 01       	movw	r30, r8
    1550:	ea 0d       	add	r30, r10
    1552:	f1 1d       	adc	r31, r1
    1554:	80 81       	ld	r24, Z
    1556:	b7 01       	movw	r22, r14
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <fputc>
    155e:	a1 10       	cpse	r10, r1
    1560:	f5 cf       	rjmp	.-22     	; 0x154c <vfprintf+0x366>
    1562:	33 20       	and	r3, r3
    1564:	09 f4       	brne	.+2      	; 0x1568 <vfprintf+0x382>
    1566:	51 ce       	rjmp	.-862    	; 0x120a <vfprintf+0x24>
    1568:	b7 01       	movw	r22, r14
    156a:	80 e2       	ldi	r24, 0x20	; 32
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <fputc>
    1572:	3a 94       	dec	r3
    1574:	f6 cf       	rjmp	.-20     	; 0x1562 <vfprintf+0x37c>
    1576:	f7 01       	movw	r30, r14
    1578:	86 81       	ldd	r24, Z+6	; 0x06
    157a:	97 81       	ldd	r25, Z+7	; 0x07
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <vfprintf+0x39c>
    157e:	8f ef       	ldi	r24, 0xFF	; 255
    1580:	9f ef       	ldi	r25, 0xFF	; 255
    1582:	2c 96       	adiw	r28, 0x0c	; 12
    1584:	e2 e1       	ldi	r30, 0x12	; 18
    1586:	0c 94 87 0b 	jmp	0x170e	; 0x170e <__epilogue_restores__>

0000158a <strnlen_P>:
    158a:	fc 01       	movw	r30, r24
    158c:	05 90       	lpm	r0, Z+
    158e:	61 50       	subi	r22, 0x01	; 1
    1590:	70 40       	sbci	r23, 0x00	; 0
    1592:	01 10       	cpse	r0, r1
    1594:	d8 f7       	brcc	.-10     	; 0x158c <strnlen_P+0x2>
    1596:	80 95       	com	r24
    1598:	90 95       	com	r25
    159a:	8e 0f       	add	r24, r30
    159c:	9f 1f       	adc	r25, r31
    159e:	08 95       	ret

000015a0 <strnlen>:
    15a0:	fc 01       	movw	r30, r24
    15a2:	61 50       	subi	r22, 0x01	; 1
    15a4:	70 40       	sbci	r23, 0x00	; 0
    15a6:	01 90       	ld	r0, Z+
    15a8:	01 10       	cpse	r0, r1
    15aa:	d8 f7       	brcc	.-10     	; 0x15a2 <strnlen+0x2>
    15ac:	80 95       	com	r24
    15ae:	90 95       	com	r25
    15b0:	8e 0f       	add	r24, r30
    15b2:	9f 1f       	adc	r25, r31
    15b4:	08 95       	ret

000015b6 <fputc>:
    15b6:	0f 93       	push	r16
    15b8:	1f 93       	push	r17
    15ba:	cf 93       	push	r28
    15bc:	df 93       	push	r29
    15be:	18 2f       	mov	r17, r24
    15c0:	09 2f       	mov	r16, r25
    15c2:	eb 01       	movw	r28, r22
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	81 fd       	sbrc	r24, 1
    15c8:	03 c0       	rjmp	.+6      	; 0x15d0 <fputc+0x1a>
    15ca:	8f ef       	ldi	r24, 0xFF	; 255
    15cc:	9f ef       	ldi	r25, 0xFF	; 255
    15ce:	20 c0       	rjmp	.+64     	; 0x1610 <fputc+0x5a>
    15d0:	82 ff       	sbrs	r24, 2
    15d2:	10 c0       	rjmp	.+32     	; 0x15f4 <fputc+0x3e>
    15d4:	4e 81       	ldd	r20, Y+6	; 0x06
    15d6:	5f 81       	ldd	r21, Y+7	; 0x07
    15d8:	2c 81       	ldd	r18, Y+4	; 0x04
    15da:	3d 81       	ldd	r19, Y+5	; 0x05
    15dc:	42 17       	cp	r20, r18
    15de:	53 07       	cpc	r21, r19
    15e0:	7c f4       	brge	.+30     	; 0x1600 <fputc+0x4a>
    15e2:	e8 81       	ld	r30, Y
    15e4:	f9 81       	ldd	r31, Y+1	; 0x01
    15e6:	9f 01       	movw	r18, r30
    15e8:	2f 5f       	subi	r18, 0xFF	; 255
    15ea:	3f 4f       	sbci	r19, 0xFF	; 255
    15ec:	39 83       	std	Y+1, r19	; 0x01
    15ee:	28 83       	st	Y, r18
    15f0:	10 83       	st	Z, r17
    15f2:	06 c0       	rjmp	.+12     	; 0x1600 <fputc+0x4a>
    15f4:	e8 85       	ldd	r30, Y+8	; 0x08
    15f6:	f9 85       	ldd	r31, Y+9	; 0x09
    15f8:	81 2f       	mov	r24, r17
    15fa:	09 95       	icall
    15fc:	89 2b       	or	r24, r25
    15fe:	29 f7       	brne	.-54     	; 0x15ca <fputc+0x14>
    1600:	2e 81       	ldd	r18, Y+6	; 0x06
    1602:	3f 81       	ldd	r19, Y+7	; 0x07
    1604:	2f 5f       	subi	r18, 0xFF	; 255
    1606:	3f 4f       	sbci	r19, 0xFF	; 255
    1608:	3f 83       	std	Y+7, r19	; 0x07
    160a:	2e 83       	std	Y+6, r18	; 0x06
    160c:	81 2f       	mov	r24, r17
    160e:	90 2f       	mov	r25, r16
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	1f 91       	pop	r17
    1616:	0f 91       	pop	r16
    1618:	08 95       	ret

0000161a <__ultoa_invert>:
    161a:	fa 01       	movw	r30, r20
    161c:	aa 27       	eor	r26, r26
    161e:	28 30       	cpi	r18, 0x08	; 8
    1620:	51 f1       	breq	.+84     	; 0x1676 <__ultoa_invert+0x5c>
    1622:	20 31       	cpi	r18, 0x10	; 16
    1624:	81 f1       	breq	.+96     	; 0x1686 <__ultoa_invert+0x6c>
    1626:	e8 94       	clt
    1628:	6f 93       	push	r22
    162a:	6e 7f       	andi	r22, 0xFE	; 254
    162c:	6e 5f       	subi	r22, 0xFE	; 254
    162e:	7f 4f       	sbci	r23, 0xFF	; 255
    1630:	8f 4f       	sbci	r24, 0xFF	; 255
    1632:	9f 4f       	sbci	r25, 0xFF	; 255
    1634:	af 4f       	sbci	r26, 0xFF	; 255
    1636:	b1 e0       	ldi	r27, 0x01	; 1
    1638:	3e d0       	rcall	.+124    	; 0x16b6 <__ultoa_invert+0x9c>
    163a:	b4 e0       	ldi	r27, 0x04	; 4
    163c:	3c d0       	rcall	.+120    	; 0x16b6 <__ultoa_invert+0x9c>
    163e:	67 0f       	add	r22, r23
    1640:	78 1f       	adc	r23, r24
    1642:	89 1f       	adc	r24, r25
    1644:	9a 1f       	adc	r25, r26
    1646:	a1 1d       	adc	r26, r1
    1648:	68 0f       	add	r22, r24
    164a:	79 1f       	adc	r23, r25
    164c:	8a 1f       	adc	r24, r26
    164e:	91 1d       	adc	r25, r1
    1650:	a1 1d       	adc	r26, r1
    1652:	6a 0f       	add	r22, r26
    1654:	71 1d       	adc	r23, r1
    1656:	81 1d       	adc	r24, r1
    1658:	91 1d       	adc	r25, r1
    165a:	a1 1d       	adc	r26, r1
    165c:	20 d0       	rcall	.+64     	; 0x169e <__ultoa_invert+0x84>
    165e:	09 f4       	brne	.+2      	; 0x1662 <__ultoa_invert+0x48>
    1660:	68 94       	set
    1662:	3f 91       	pop	r19
    1664:	2a e0       	ldi	r18, 0x0A	; 10
    1666:	26 9f       	mul	r18, r22
    1668:	11 24       	eor	r1, r1
    166a:	30 19       	sub	r19, r0
    166c:	30 5d       	subi	r19, 0xD0	; 208
    166e:	31 93       	st	Z+, r19
    1670:	de f6       	brtc	.-74     	; 0x1628 <__ultoa_invert+0xe>
    1672:	cf 01       	movw	r24, r30
    1674:	08 95       	ret
    1676:	46 2f       	mov	r20, r22
    1678:	47 70       	andi	r20, 0x07	; 7
    167a:	40 5d       	subi	r20, 0xD0	; 208
    167c:	41 93       	st	Z+, r20
    167e:	b3 e0       	ldi	r27, 0x03	; 3
    1680:	0f d0       	rcall	.+30     	; 0x16a0 <__ultoa_invert+0x86>
    1682:	c9 f7       	brne	.-14     	; 0x1676 <__ultoa_invert+0x5c>
    1684:	f6 cf       	rjmp	.-20     	; 0x1672 <__ultoa_invert+0x58>
    1686:	46 2f       	mov	r20, r22
    1688:	4f 70       	andi	r20, 0x0F	; 15
    168a:	40 5d       	subi	r20, 0xD0	; 208
    168c:	4a 33       	cpi	r20, 0x3A	; 58
    168e:	18 f0       	brcs	.+6      	; 0x1696 <__ultoa_invert+0x7c>
    1690:	49 5d       	subi	r20, 0xD9	; 217
    1692:	31 fd       	sbrc	r19, 1
    1694:	40 52       	subi	r20, 0x20	; 32
    1696:	41 93       	st	Z+, r20
    1698:	02 d0       	rcall	.+4      	; 0x169e <__ultoa_invert+0x84>
    169a:	a9 f7       	brne	.-22     	; 0x1686 <__ultoa_invert+0x6c>
    169c:	ea cf       	rjmp	.-44     	; 0x1672 <__ultoa_invert+0x58>
    169e:	b4 e0       	ldi	r27, 0x04	; 4
    16a0:	a6 95       	lsr	r26
    16a2:	97 95       	ror	r25
    16a4:	87 95       	ror	r24
    16a6:	77 95       	ror	r23
    16a8:	67 95       	ror	r22
    16aa:	ba 95       	dec	r27
    16ac:	c9 f7       	brne	.-14     	; 0x16a0 <__ultoa_invert+0x86>
    16ae:	00 97       	sbiw	r24, 0x00	; 0
    16b0:	61 05       	cpc	r22, r1
    16b2:	71 05       	cpc	r23, r1
    16b4:	08 95       	ret
    16b6:	9b 01       	movw	r18, r22
    16b8:	ac 01       	movw	r20, r24
    16ba:	0a 2e       	mov	r0, r26
    16bc:	06 94       	lsr	r0
    16be:	57 95       	ror	r21
    16c0:	47 95       	ror	r20
    16c2:	37 95       	ror	r19
    16c4:	27 95       	ror	r18
    16c6:	ba 95       	dec	r27
    16c8:	c9 f7       	brne	.-14     	; 0x16bc <__ultoa_invert+0xa2>
    16ca:	62 0f       	add	r22, r18
    16cc:	73 1f       	adc	r23, r19
    16ce:	84 1f       	adc	r24, r20
    16d0:	95 1f       	adc	r25, r21
    16d2:	a0 1d       	adc	r26, r0
    16d4:	08 95       	ret

000016d6 <__prologue_saves__>:
    16d6:	2f 92       	push	r2
    16d8:	3f 92       	push	r3
    16da:	4f 92       	push	r4
    16dc:	5f 92       	push	r5
    16de:	6f 92       	push	r6
    16e0:	7f 92       	push	r7
    16e2:	8f 92       	push	r8
    16e4:	9f 92       	push	r9
    16e6:	af 92       	push	r10
    16e8:	bf 92       	push	r11
    16ea:	cf 92       	push	r12
    16ec:	df 92       	push	r13
    16ee:	ef 92       	push	r14
    16f0:	ff 92       	push	r15
    16f2:	0f 93       	push	r16
    16f4:	1f 93       	push	r17
    16f6:	cf 93       	push	r28
    16f8:	df 93       	push	r29
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
    16fe:	ca 1b       	sub	r28, r26
    1700:	db 0b       	sbc	r29, r27
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	f8 94       	cli
    1706:	de bf       	out	0x3e, r29	; 62
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	cd bf       	out	0x3d, r28	; 61
    170c:	09 94       	ijmp

0000170e <__epilogue_restores__>:
    170e:	2a 88       	ldd	r2, Y+18	; 0x12
    1710:	39 88       	ldd	r3, Y+17	; 0x11
    1712:	48 88       	ldd	r4, Y+16	; 0x10
    1714:	5f 84       	ldd	r5, Y+15	; 0x0f
    1716:	6e 84       	ldd	r6, Y+14	; 0x0e
    1718:	7d 84       	ldd	r7, Y+13	; 0x0d
    171a:	8c 84       	ldd	r8, Y+12	; 0x0c
    171c:	9b 84       	ldd	r9, Y+11	; 0x0b
    171e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1720:	b9 84       	ldd	r11, Y+9	; 0x09
    1722:	c8 84       	ldd	r12, Y+8	; 0x08
    1724:	df 80       	ldd	r13, Y+7	; 0x07
    1726:	ee 80       	ldd	r14, Y+6	; 0x06
    1728:	fd 80       	ldd	r15, Y+5	; 0x05
    172a:	0c 81       	ldd	r16, Y+4	; 0x04
    172c:	1b 81       	ldd	r17, Y+3	; 0x03
    172e:	aa 81       	ldd	r26, Y+2	; 0x02
    1730:	b9 81       	ldd	r27, Y+1	; 0x01
    1732:	ce 0f       	add	r28, r30
    1734:	d1 1d       	adc	r29, r1
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	ed 01       	movw	r28, r26
    1742:	08 95       	ret

00001744 <_exit>:
    1744:	f8 94       	cli

00001746 <__stop_program>:
    1746:	ff cf       	rjmp	.-2      	; 0x1746 <__stop_program>
