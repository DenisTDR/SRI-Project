
SRI Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000025a  00800100  00001fb2  00002046  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fb2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000133  0080035a  0080035a  000022a0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000022a0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000238  00000000  00000000  000022fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002237  00000000  00000000  00002534  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a72  00000000  00000000  0000476b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c5b  00000000  00000000  000051dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000674  00000000  00000000  00005e38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007ed  00000000  00000000  000064ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001898  00000000  00000000  00006c99  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001f8  00000000  00000000  00008531  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__ctors_end>
       4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
       8:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
       c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      10:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      14:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      18:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      1c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      20:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      24:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      28:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      2c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      30:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      34:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      38:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      3c:	0c 94 6e 04 	jmp	0x8dc	; 0x8dc <__vector_15>
      40:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      44:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      48:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      4c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      50:	0c 94 a9 04 	jmp	0x952	; 0x952 <__vector_20>
      54:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      58:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      5c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      60:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      68:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      6c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      70:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      74:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      78:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
      7c:	53 01       	movw	r10, r6
      7e:	ea 00       	.word	0x00ea	; ????
      80:	ed 00       	.word	0x00ed	; ????
      82:	60 01       	movw	r12, r0
      84:	60 01       	movw	r12, r0
      86:	60 01       	movw	r12, r0
      88:	60 01       	movw	r12, r0
      8a:	60 01       	movw	r12, r0
      8c:	60 01       	movw	r12, r0
      8e:	60 01       	movw	r12, r0
      90:	60 01       	movw	r12, r0
      92:	60 01       	movw	r12, r0
      94:	60 01       	movw	r12, r0
      96:	49 01       	movw	r8, r18
      98:	f0 00       	.word	0x00f0	; ????
      9a:	f5 00       	.word	0x00f5	; ????
      9c:	36 01       	movw	r6, r12
      9e:	41 01       	movw	r8, r2
      a0:	39 01       	movw	r6, r18

000000a2 <__ctors_end>:
      a2:	11 24       	eor	r1, r1
      a4:	1f be       	out	0x3f, r1	; 63
      a6:	cf ef       	ldi	r28, 0xFF	; 255
      a8:	d0 e1       	ldi	r29, 0x10	; 16
      aa:	de bf       	out	0x3e, r29	; 62
      ac:	cd bf       	out	0x3d, r28	; 61

000000ae <__do_copy_data>:
      ae:	13 e0       	ldi	r17, 0x03	; 3
      b0:	a0 e0       	ldi	r26, 0x00	; 0
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	e2 eb       	ldi	r30, 0xB2	; 178
      b6:	ff e1       	ldi	r31, 0x1F	; 31
      b8:	02 c0       	rjmp	.+4      	; 0xbe <__do_copy_data+0x10>
      ba:	05 90       	lpm	r0, Z+
      bc:	0d 92       	st	X+, r0
      be:	aa 35       	cpi	r26, 0x5A	; 90
      c0:	b1 07       	cpc	r27, r17
      c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0xc>

000000c4 <__do_clear_bss>:
      c4:	24 e0       	ldi	r18, 0x04	; 4
      c6:	aa e5       	ldi	r26, 0x5A	; 90
      c8:	b3 e0       	ldi	r27, 0x03	; 3
      ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
      cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
      ce:	ad 38       	cpi	r26, 0x8D	; 141
      d0:	b2 07       	cpc	r27, r18
      d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
      d4:	0e 94 cf 04 	call	0x99e	; 0x99e <main>
      d8:	0c 94 d7 0f 	jmp	0x1fae	; 0x1fae <_exit>

000000dc <__bad_interrupt>:
      dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e0 <BTTransmitStr>:
}

void BTTransmitStr(char *theString){
	uint8_t len, i;
	
	len = strlen(theString);
      e0:	fc 01       	movw	r30, r24
      e2:	01 90       	ld	r0, Z+
      e4:	00 20       	and	r0, r0
      e6:	e9 f7       	brne	.-6      	; 0xe2 <BTTransmitStr+0x2>
      e8:	31 97       	sbiw	r30, 0x01	; 1
      ea:	e8 1b       	sub	r30, r24
      ec:	f9 0b       	sbc	r31, r25
      ee:	2e 2f       	mov	r18, r30
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
      f0:	3a ea       	ldi	r19, 0xAA	; 170
      f2:	30 93 c6 00 	sts	0x00C6, r19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	af e1       	ldi	r26, 0x1F	; 31
      f8:	be e4       	ldi	r27, 0x4E	; 78
      fa:	11 97       	sbiw	r26, 0x01	; 1
      fc:	f1 f7       	brne	.-4      	; 0xfa <BTTransmitStr+0x1a>
      fe:	00 c0       	rjmp	.+0      	; 0x100 <BTTransmitStr+0x20>
     100:	00 00       	nop
     102:	34 e1       	ldi	r19, 0x14	; 20
     104:	30 93 c6 00 	sts	0x00C6, r19
     108:	af e1       	ldi	r26, 0x1F	; 31
     10a:	be e4       	ldi	r27, 0x4E	; 78
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	f1 f7       	brne	.-4      	; 0x10c <BTTransmitStr+0x2c>
     110:	00 c0       	rjmp	.+0      	; 0x112 <BTTransmitStr+0x32>
     112:	00 00       	nop
     114:	e0 93 c6 00 	sts	0x00C6, r30
     118:	ef e1       	ldi	r30, 0x1F	; 31
     11a:	fe e4       	ldi	r31, 0x4E	; 78
     11c:	31 97       	sbiw	r30, 0x01	; 1
     11e:	f1 f7       	brne	.-4      	; 0x11c <BTTransmitStr+0x3c>
     120:	00 c0       	rjmp	.+0      	; 0x122 <BTTransmitStr+0x42>
     122:	00 00       	nop
	
	BTTransmitChar(0xAA);
	BTTransmitChar(DisplayMessage);
	BTTransmitChar(len);
	
	for(i=0;i<len;i++)
     124:	22 23       	and	r18, r18
     126:	89 f0       	breq	.+34     	; 0x14a <BTTransmitStr+0x6a>
     128:	38 2f       	mov	r19, r24
     12a:	e8 2f       	mov	r30, r24
     12c:	f9 2f       	mov	r31, r25
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     12e:	a6 ec       	ldi	r26, 0xC6	; 198
     130:	b0 e0       	ldi	r27, 0x00	; 0
	BTTransmitChar(DisplayMessage);
	BTTransmitChar(len);
	
	for(i=0;i<len;i++)
	{
		BTTransmitChar(theString[i]);
     132:	81 91       	ld	r24, Z+
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     134:	8c 93       	st	X, r24
     136:	8f e1       	ldi	r24, 0x1F	; 31
     138:	9e e4       	ldi	r25, 0x4E	; 78
     13a:	01 97       	sbiw	r24, 0x01	; 1
     13c:	f1 f7       	brne	.-4      	; 0x13a <BTTransmitStr+0x5a>
     13e:	00 c0       	rjmp	.+0      	; 0x140 <BTTransmitStr+0x60>
     140:	00 00       	nop
     142:	8e 2f       	mov	r24, r30
     144:	83 1b       	sub	r24, r19
	
	BTTransmitChar(0xAA);
	BTTransmitChar(DisplayMessage);
	BTTransmitChar(len);
	
	for(i=0;i<len;i++)
     146:	82 17       	cp	r24, r18
     148:	a0 f3       	brcs	.-24     	; 0x132 <BTTransmitStr+0x52>
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     14a:	85 e5       	ldi	r24, 0x55	; 85
     14c:	80 93 c6 00 	sts	0x00C6, r24
     150:	af e1       	ldi	r26, 0x1F	; 31
     152:	be e4       	ldi	r27, 0x4E	; 78
     154:	11 97       	sbiw	r26, 0x01	; 1
     156:	f1 f7       	brne	.-4      	; 0x154 <BTTransmitStr+0x74>
     158:	00 c0       	rjmp	.+0      	; 0x15a <BTTransmitStr+0x7a>
     15a:	00 00       	nop
     15c:	08 95       	ret

0000015e <prelucreazaDatele>:
extern volatile uint8_t ms2p1_enabled;

void prelucreazaDatele(void){
	//BTTransmitStr("Procesez ceva!");
	//cli();
	if(actiune >= GoFront && actiune <= GoRightB){
     15e:	80 91 6b 03 	lds	r24, 0x036B
     162:	9f ef       	ldi	r25, 0xFF	; 255
     164:	98 0f       	add	r25, r24
     166:	96 30       	cpi	r25, 0x06	; 6
     168:	50 f5       	brcc	.+84     	; 0x1be <prelucreazaDatele+0x60>
		unsigned char timp = date[0];
     16a:	90 91 6c 03 	lds	r25, 0x036C
		unsigned char viteza = date[1];
     16e:	60 91 6d 03 	lds	r22, 0x036D
		switch(actiune){
     172:	83 30       	cpi	r24, 0x03	; 3
     174:	a1 f0       	breq	.+40     	; 0x19e <prelucreazaDatele+0x40>
     176:	28 f4       	brcc	.+10     	; 0x182 <prelucreazaDatele+0x24>
     178:	81 30       	cpi	r24, 0x01	; 1
     17a:	49 f0       	breq	.+18     	; 0x18e <prelucreazaDatele+0x30>
     17c:	82 30       	cpi	r24, 0x02	; 2
     17e:	59 f0       	breq	.+22     	; 0x196 <prelucreazaDatele+0x38>
     180:	08 95       	ret
     182:	85 30       	cpi	r24, 0x05	; 5
     184:	81 f0       	breq	.+32     	; 0x1a6 <prelucreazaDatele+0x48>
     186:	98 f0       	brcs	.+38     	; 0x1ae <prelucreazaDatele+0x50>
     188:	86 30       	cpi	r24, 0x06	; 6
     18a:	a9 f0       	breq	.+42     	; 0x1b6 <prelucreazaDatele+0x58>
     18c:	08 95       	ret
			case GoFront:
			goFront(timp, viteza);
     18e:	89 2f       	mov	r24, r25
     190:	0e 94 5f 02 	call	0x4be	; 0x4be <goFront>
			break;
     194:	08 95       	ret
			case GoBack:
			goBack(timp, viteza);
     196:	89 2f       	mov	r24, r25
     198:	0e 94 87 02 	call	0x50e	; 0x50e <goBack>
			break;
     19c:	08 95       	ret
			case GoLeftF:
			goFrontLeft(timp, viteza);
     19e:	89 2f       	mov	r24, r25
     1a0:	0e 94 af 02 	call	0x55e	; 0x55e <goFrontLeft>
			break;
     1a4:	08 95       	ret
			case GoLeftB:
			goBackLeft(timp, viteza);
     1a6:	89 2f       	mov	r24, r25
     1a8:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <goBackLeft>
			break;
     1ac:	08 95       	ret
			case GoRightF:
				goFrontRight(timp, viteza);
     1ae:	89 2f       	mov	r24, r25
     1b0:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <goFrontRight>
			break;
     1b4:	08 95       	ret
			case GoRightB:
				goBackRight(timp, viteza);
     1b6:	89 2f       	mov	r24, r25
     1b8:	0e 94 21 03 	call	0x642	; 0x642 <goBackRight>
			break;
     1bc:	08 95       	ret
				break;
		}
		return;
	}
	
	switch(actiune){
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	fc 01       	movw	r30, r24
     1c2:	37 97       	sbiw	r30, 0x07	; 7
     1c4:	e3 31       	cpi	r30, 0x13	; 19
     1c6:	f1 05       	cpc	r31, r1
     1c8:	08 f0       	brcs	.+2      	; 0x1cc <prelucreazaDatele+0x6e>
     1ca:	7a c0       	rjmp	.+244    	; 0x2c0 <prelucreazaDatele+0x162>
     1cc:	e2 5c       	subi	r30, 0xC2	; 194
     1ce:	ff 4f       	sbci	r31, 0xFF	; 255
     1d0:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__tablejump2__>
		case GoM2P2:
			completeEnclosedContour();
     1d4:	0e 94 1a 02 	call	0x434	; 0x434 <completeEnclosedContour>
		break;
     1d8:	08 95       	ret
		case GoM2P3:
			checkFreeParallelParkingPlace();
     1da:	0e 94 15 02 	call	0x42a	; 0x42a <checkFreeParallelParkingPlace>
		break;
     1de:	08 95       	ret
		case Led:
			ledAction(date[0]);
     1e0:	80 91 6c 03 	lds	r24, 0x036C
     1e4:	0e 94 5f 08 	call	0x10be	; 0x10be <ledAction>
		break;
     1e8:	08 95       	ret
		case ReadSensorValue:
		{
			if(date[1] == 1){
     1ea:	80 91 6d 03 	lds	r24, 0x036D
     1ee:	81 30       	cpi	r24, 0x01	; 1
     1f0:	89 f5       	brne	.+98     	; 0x254 <prelucreazaDatele+0xf6>
				if(date[0] == 0){
     1f2:	80 91 6c 03 	lds	r24, 0x036C
     1f6:	81 11       	cpse	r24, r1
     1f8:	15 c0       	rjmp	.+42     	; 0x224 <prelucreazaDatele+0xc6>
					if((char)existsEntryInTimerQueue(&ReadSensor0))
     1fa:	8a e8       	ldi	r24, 0x8A	; 138
     1fc:	98 e0       	ldi	r25, 0x08	; 8
     1fe:	0e 94 29 07 	call	0xe52	; 0xe52 <existsEntryInTimerQueue>
     202:	88 23       	and	r24, r24
     204:	29 f0       	breq	.+10     	; 0x210 <prelucreazaDatele+0xb2>
						removeEntryFromTimerQueue(&ReadSensor0);
     206:	8a e8       	ldi	r24, 0x8A	; 138
     208:	98 e0       	ldi	r25, 0x08	; 8
     20a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <removeEntryFromTimerQueue>
     20e:	08 95       	ret
					else
						addEntryToTimerQueue(&ReadSensor0, 1000UL * 1000UL, Periodic);
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	40 e4       	ldi	r20, 0x40	; 64
     214:	52 e4       	ldi	r21, 0x42	; 66
     216:	6f e0       	ldi	r22, 0x0F	; 15
     218:	70 e0       	ldi	r23, 0x00	; 0
     21a:	8a e8       	ldi	r24, 0x8A	; 138
     21c:	98 e0       	ldi	r25, 0x08	; 8
     21e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <addEntryToTimerQueue>
     222:	08 95       	ret
					
				}
				else if(date[0] == 1){
     224:	81 30       	cpi	r24, 0x01	; 1
     226:	09 f0       	breq	.+2      	; 0x22a <prelucreazaDatele+0xcc>
     228:	4b c0       	rjmp	.+150    	; 0x2c0 <prelucreazaDatele+0x162>
					if((char)existsEntryInTimerQueue(&ReadSensor1))
     22a:	87 e7       	ldi	r24, 0x77	; 119
     22c:	99 e0       	ldi	r25, 0x09	; 9
     22e:	0e 94 29 07 	call	0xe52	; 0xe52 <existsEntryInTimerQueue>
     232:	88 23       	and	r24, r24
     234:	29 f0       	breq	.+10     	; 0x240 <prelucreazaDatele+0xe2>
						removeEntryFromTimerQueue(&ReadSensor1);
     236:	87 e7       	ldi	r24, 0x77	; 119
     238:	99 e0       	ldi	r25, 0x09	; 9
     23a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <removeEntryFromTimerQueue>
     23e:	08 95       	ret
					else
						addEntryToTimerQueue(&ReadSensor1, 1000UL * 1000UL, Periodic);
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	40 e4       	ldi	r20, 0x40	; 64
     244:	52 e4       	ldi	r21, 0x42	; 66
     246:	6f e0       	ldi	r22, 0x0F	; 15
     248:	70 e0       	ldi	r23, 0x00	; 0
     24a:	87 e7       	ldi	r24, 0x77	; 119
     24c:	99 e0       	ldi	r25, 0x09	; 9
     24e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <addEntryToTimerQueue>
     252:	08 95       	ret
				}
			}
			else
				if(date[0] == 0)
     254:	80 91 6c 03 	lds	r24, 0x036C
     258:	81 11       	cpse	r24, r1
     25a:	03 c0       	rjmp	.+6      	; 0x262 <prelucreazaDatele+0x104>
					ReadSensor0();
     25c:	0e 94 8a 08 	call	0x1114	; 0x1114 <ReadSensor0>
     260:	08 95       	ret
				else if(date[0] == 1)
     262:	81 30       	cpi	r24, 0x01	; 1
     264:	69 f5       	brne	.+90     	; 0x2c0 <prelucreazaDatele+0x162>
					ReadSensor1();
     266:	0e 94 77 09 	call	0x12ee	; 0x12ee <ReadSensor1>
     26a:	08 95       	ret
			
		}
		break;
		case StopEngines:
			stopEngines();
     26c:	0e 94 08 02 	call	0x410	; 0x410 <stopEngines>
		break;
     270:	08 95       	ret
		case RotirePeLocDreapta:
			rotirePeLoc(date[0], date[1], RightEngines);
     272:	40 e0       	ldi	r20, 0x00	; 0
     274:	60 91 6d 03 	lds	r22, 0x036D
     278:	80 91 6c 03 	lds	r24, 0x036C
     27c:	0e 94 49 03 	call	0x692	; 0x692 <rotirePeLoc>
		break;		
     280:	08 95       	ret
		case RotirePeLocStanga:
			rotirePeLoc(date[0], date[1], LeftEngines);
     282:	41 e0       	ldi	r20, 0x01	; 1
     284:	60 91 6d 03 	lds	r22, 0x036D
     288:	80 91 6c 03 	lds	r24, 0x036C
     28c:	0e 94 49 03 	call	0x692	; 0x692 <rotirePeLoc>
		break;
     290:	08 95       	ret
		case DisplayMessage:
			addEntryToTimerQueue(&fctSmechera, 10UL * 1000UL, Periodic);
     292:	21 e0       	ldi	r18, 0x01	; 1
     294:	40 e1       	ldi	r20, 0x10	; 16
     296:	57 e2       	ldi	r21, 0x27	; 39
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	70 e0       	ldi	r23, 0x00	; 0
     29c:	8c eb       	ldi	r24, 0xBC	; 188
     29e:	98 e0       	ldi	r25, 0x08	; 8
     2a0:	0e 94 ad 05 	call	0xb5a	; 0xb5a <addEntryToTimerQueue>
		break;
     2a4:	08 95       	ret
		case GoM2P1:
			addEntryToTimerQueue(&doTimer, 1000UL * 1000UL, Periodic);
     2a6:	21 e0       	ldi	r18, 0x01	; 1
     2a8:	40 e4       	ldi	r20, 0x40	; 64
     2aa:	52 e4       	ldi	r21, 0x42	; 66
     2ac:	6f e0       	ldi	r22, 0x0F	; 15
     2ae:	70 e0       	ldi	r23, 0x00	; 0
     2b0:	89 ea       	ldi	r24, 0xA9	; 169
     2b2:	99 e0       	ldi	r25, 0x09	; 9
     2b4:	0e 94 ad 05 	call	0xb5a	; 0xb5a <addEntryToTimerQueue>
			BTTransmitStr("doTimer started");
     2b8:	84 e0       	ldi	r24, 0x04	; 4
     2ba:	91 e0       	ldi	r25, 0x01	; 1
     2bc:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
     2c0:	08 95       	ret

000002c2 <BTTransmitMsg>:
	}
	BTTransmitChar(0x55);
	
}

void BTTransmitMsg(char *theString, uint8_t len){
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
	uint16_t i;
	for(i=0;i<len;i++)
     2c6:	70 e0       	ldi	r23, 0x00	; 0
     2c8:	61 15       	cp	r22, r1
     2ca:	71 05       	cpc	r23, r1
     2cc:	91 f0       	breq	.+36     	; 0x2f2 <BTTransmitMsg+0x30>
     2ce:	e8 2f       	mov	r30, r24
     2d0:	f9 2f       	mov	r31, r25
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	90 e0       	ldi	r25, 0x00	; 0
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     2d6:	a6 ec       	ldi	r26, 0xC6	; 198
     2d8:	b0 e0       	ldi	r27, 0x00	; 0

void BTTransmitMsg(char *theString, uint8_t len){
	uint16_t i;
	for(i=0;i<len;i++)
	{
		BTTransmitChar(theString[i]);
     2da:	21 91       	ld	r18, Z+
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     2dc:	2c 93       	st	X, r18
     2de:	cf e1       	ldi	r28, 0x1F	; 31
     2e0:	de e4       	ldi	r29, 0x4E	; 78
     2e2:	21 97       	sbiw	r28, 0x01	; 1
     2e4:	f1 f7       	brne	.-4      	; 0x2e2 <BTTransmitMsg+0x20>
     2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <BTTransmitMsg+0x26>
     2e8:	00 00       	nop
	
}

void BTTransmitMsg(char *theString, uint8_t len){
	uint16_t i;
	for(i=0;i<len;i++)
     2ea:	01 96       	adiw	r24, 0x01	; 1
     2ec:	86 17       	cp	r24, r22
     2ee:	97 07       	cpc	r25, r23
     2f0:	a0 f3       	brcs	.-24     	; 0x2da <BTTransmitMsg+0x18>
	{
		BTTransmitChar(theString[i]);
	}
}
     2f2:	df 91       	pop	r29
     2f4:	cf 91       	pop	r28
     2f6:	08 95       	ret

000002f8 <reTransmit>:
#include "../utile.h"
#include "../Timing/Timing.h"

void prelucreazaDatele(void);

void reTransmit(void){
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	00 d0       	rcall	.+0      	; 0x2fe <reTransmit+0x6>
     2fe:	00 d0       	rcall	.+0      	; 0x300 <reTransmit+0x8>
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
	//trimite un semnal telefonului pentru a retransmite ultimul mesaj
	printf("Trimite din nou ultimul mesaj!!!");
     304:	84 e1       	ldi	r24, 0x14	; 20
     306:	91 e0       	ldi	r25, 0x01	; 1
     308:	9f 93       	push	r25
     30a:	8f 93       	push	r24
     30c:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <printf>
	char msg[] = { StartByte, ReTransmitLastMsg, 0, 0x55 };
     310:	8a ea       	ldi	r24, 0xAA	; 170
     312:	89 83       	std	Y+1, r24	; 0x01
     314:	83 e1       	ldi	r24, 0x13	; 19
     316:	8a 83       	std	Y+2, r24	; 0x02
     318:	1b 82       	std	Y+3, r1	; 0x03
     31a:	85 e5       	ldi	r24, 0x55	; 85
     31c:	8c 83       	std	Y+4, r24	; 0x04
	BTTransmitMsg(msg, 4);
     31e:	64 e0       	ldi	r22, 0x04	; 4
     320:	ce 01       	movw	r24, r28
     322:	01 96       	adiw	r24, 0x01	; 1
     324:	0e 94 61 01 	call	0x2c2	; 0x2c2 <BTTransmitMsg>
}
     328:	0f 90       	pop	r0
     32a:	0f 90       	pop	r0
     32c:	0f 90       	pop	r0
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
     332:	0f 90       	pop	r0
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	08 95       	ret

0000033a <BTProtocolReadByte>:
	state = WaitingStartByte;
}

extern volatile uint8_t debugging;
void BTProtocolReadByte(unsigned char theByte){
	cli();
     33a:	f8 94       	cli
	switch (state){
     33c:	90 91 03 01 	lds	r25, 0x0103
     340:	92 30       	cpi	r25, 0x02	; 2
     342:	21 f1       	breq	.+72     	; 0x38c <BTProtocolReadByte+0x52>
     344:	28 f4       	brcc	.+10     	; 0x350 <BTProtocolReadByte+0x16>
     346:	99 23       	and	r25, r25
     348:	49 f0       	breq	.+18     	; 0x35c <BTProtocolReadByte+0x22>
     34a:	91 30       	cpi	r25, 0x01	; 1
     34c:	91 f0       	breq	.+36     	; 0x372 <BTProtocolReadByte+0x38>
     34e:	4d c0       	rjmp	.+154    	; 0x3ea <BTProtocolReadByte+0xb0>
     350:	93 30       	cpi	r25, 0x03	; 3
     352:	81 f1       	breq	.+96     	; 0x3b4 <BTProtocolReadByte+0x7a>
     354:	94 30       	cpi	r25, 0x04	; 4
     356:	09 f4       	brne	.+2      	; 0x35a <BTProtocolReadByte+0x20>
     358:	3f c0       	rjmp	.+126    	; 0x3d8 <BTProtocolReadByte+0x9e>
     35a:	47 c0       	rjmp	.+142    	; 0x3ea <BTProtocolReadByte+0xb0>
		case WaitingStartByte:
			if(theByte == StartByte){
     35c:	8a 3a       	cpi	r24, 0xAA	; 170
     35e:	09 f0       	breq	.+2      	; 0x362 <BTProtocolReadByte+0x28>
     360:	44 c0       	rjmp	.+136    	; 0x3ea <BTProtocolReadByte+0xb0>
				state = WaitingCarAction;
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	80 93 03 01 	sts	0x0103, r24
				debugging = 0;
     368:	10 92 00 01 	sts	0x0100, r1
				//addEntryToTimerQueue(&resetBTProtocol, 1000UL * 1000UL * 1000UL, Once);
				debugging = 1;
     36c:	80 93 00 01 	sts	0x0100, r24
     370:	3c c0       	rjmp	.+120    	; 0x3ea <BTProtocolReadByte+0xb0>
			}
			break;

		case WaitingCarAction:
			if(theByte >= NoAction && theByte < EndAction){
     372:	8b 31       	cpi	r24, 0x1B	; 27
     374:	30 f4       	brcc	.+12     	; 0x382 <BTProtocolReadByte+0x48>
				state = WaitingDataLength;
     376:	92 e0       	ldi	r25, 0x02	; 2
     378:	90 93 03 01 	sts	0x0103, r25
				actiune = theByte;
     37c:	80 93 6b 03 	sts	0x036B, r24
     380:	34 c0       	rjmp	.+104    	; 0x3ea <BTProtocolReadByte+0xb0>
			}
			else{
				state = WaitingStartByte;
     382:	10 92 03 01 	sts	0x0103, r1
				reTransmit(); // error ocurred, send retransmit signal
     386:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <reTransmit>
     38a:	2f c0       	rjmp	.+94     	; 0x3ea <BTProtocolReadByte+0xb0>
			}
			break;

		case WaitingDataLength:
			if(theByte==0){
     38c:	81 11       	cpse	r24, r1
     38e:	05 c0       	rjmp	.+10     	; 0x39a <BTProtocolReadByte+0x60>
				state = WaitingEndByte;
			}
			state = ReadingData;
			len = theByte;
     390:	10 92 76 03 	sts	0x0376, r1
			dateCrtIndex = 0;
     394:	10 92 6a 03 	sts	0x036A, r1
     398:	0a c0       	rjmp	.+20     	; 0x3ae <BTProtocolReadByte+0x74>

		case WaitingDataLength:
			if(theByte==0){
				state = WaitingEndByte;
			}
			state = ReadingData;
     39a:	93 e0       	ldi	r25, 0x03	; 3
     39c:	90 93 03 01 	sts	0x0103, r25
			len = theByte;
     3a0:	80 93 76 03 	sts	0x0376, r24
			dateCrtIndex = 0;
     3a4:	10 92 6a 03 	sts	0x036A, r1
			if(len<=0 || len>50)
     3a8:	81 50       	subi	r24, 0x01	; 1
     3aa:	82 33       	cpi	r24, 0x32	; 50
     3ac:	f0 f0       	brcs	.+60     	; 0x3ea <BTProtocolReadByte+0xb0>
			state=WaitingStartByte;
     3ae:	10 92 03 01 	sts	0x0103, r1
     3b2:	1b c0       	rjmp	.+54     	; 0x3ea <BTProtocolReadByte+0xb0>
			break;

		case ReadingData:
			date[dateCrtIndex++] = theByte;
     3b4:	e0 91 6a 03 	lds	r30, 0x036A
     3b8:	91 e0       	ldi	r25, 0x01	; 1
     3ba:	9e 0f       	add	r25, r30
     3bc:	90 93 6a 03 	sts	0x036A, r25
     3c0:	f0 e0       	ldi	r31, 0x00	; 0
     3c2:	e4 59       	subi	r30, 0x94	; 148
     3c4:	fc 4f       	sbci	r31, 0xFC	; 252
     3c6:	80 83       	st	Z, r24
			if(dateCrtIndex >= len)
     3c8:	80 91 76 03 	lds	r24, 0x0376
     3cc:	98 17       	cp	r25, r24
     3ce:	68 f0       	brcs	.+26     	; 0x3ea <BTProtocolReadByte+0xb0>
			state = WaitingEndByte;
     3d0:	84 e0       	ldi	r24, 0x04	; 4
     3d2:	80 93 03 01 	sts	0x0103, r24
     3d6:	09 c0       	rjmp	.+18     	; 0x3ea <BTProtocolReadByte+0xb0>
			break;
		case WaitingEndByte:
			if(theByte != 0x55){
     3d8:	85 35       	cpi	r24, 0x55	; 85
     3da:	19 f0       	breq	.+6      	; 0x3e2 <BTProtocolReadByte+0xa8>
				reTransmit(); // error ocurred, send retransmit signal
     3dc:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <reTransmit>
     3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <BTProtocolReadByte+0xac>
			}
			else{
				prelucreazaDatele();
     3e2:	0e 94 af 00 	call	0x15e	; 0x15e <prelucreazaDatele>
			}
			state = WaitingStartByte;
     3e6:	10 92 03 01 	sts	0x0103, r1
			break;

	}
	sei();
     3ea:	78 94       	sei
     3ec:	08 95       	ret

000003ee <BTInit>:
}

void BTInit()
{
	/*Pentru Receive*/
	UBRR0L = 51; //baud rate 9600 bps
     3ee:	83 e3       	ldi	r24, 0x33	; 51
     3f0:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B |= _BV(RXCIE0);
     3f4:	e1 ec       	ldi	r30, 0xC1	; 193
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	80 81       	ld	r24, Z
     3fa:	80 68       	ori	r24, 0x80	; 128
     3fc:	80 83       	st	Z, r24
	UCSR0B |= _BV(RXEN0);
     3fe:	80 81       	ld	r24, Z
     400:	80 61       	ori	r24, 0x10	; 16
     402:	80 83       	st	Z, r24
	UCSR0B |= _BV(TXEN0);
     404:	80 81       	ld	r24, Z
     406:	88 60       	ori	r24, 0x08	; 8
     408:	80 83       	st	Z, r24
	//UCSR0B |= (_BV(TXEN0))|(_BV(RXCIE0))|(_BV(RXCIE0));//activare receive,transmit si receive interrupt
	//UCSR0C |=(1<<UPM01)|(1<<UPM00);
	
	state=WaitingStartByte;
     40a:	10 92 03 01 	sts	0x0103, r1
     40e:	08 95       	ret

00000410 <stopEngines>:
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
}

extern volatile uint32_t time;
void stopEngines(){
    BTTransmitStr("M-am oprit!");
     410:	85 e3       	ldi	r24, 0x35	; 53
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
	
	PORTC &=~ 1<<PINC1;
     418:	88 b1       	in	r24, 0x08	; 8
     41a:	8c 7f       	andi	r24, 0xFC	; 252
     41c:	88 b9       	out	0x08, r24	; 8
	PORTC &=~ 1<<PINC0;	
     41e:	40 98       	cbi	0x08, 0	; 8
	
	OCR0A = 255;
     420:	8f ef       	ldi	r24, 0xFF	; 255
     422:	87 bd       	out	0x27, r24	; 39
	OCR2A = 255;
     424:	80 93 b3 00 	sts	0x00B3, r24
     428:	08 95       	ret

0000042a <checkFreeParallelParkingPlace>:
	//setEnginesSpeed(RightEngines, 1, 0);
	//setEnginesSpeed(LeftEngines, 1, 0);
}
void checkFreeParallelParkingPlace(){
	
    BTTransmitStr("Start Free P P P!");
     42a:	81 e4       	ldi	r24, 0x41	; 65
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
     432:	08 95       	ret

00000434 <completeEnclosedContour>:
}
void completeEnclosedContour(){
	
	
    BTTransmitStr("Start complete enclosed contour!");
     434:	83 e5       	ldi	r24, 0x53	; 83
     436:	91 e0       	ldi	r25, 0x01	; 1
     438:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
     43c:	08 95       	ret

0000043e <initEngines>:


void initEngines()
{
	
	OCR0A = 255;
     43e:	8f ef       	ldi	r24, 0xFF	; 255
     440:	87 bd       	out	0x27, r24	; 39
	OCR2A = 255;
     442:	80 93 b3 00 	sts	0x00B3, r24
	
	PINB|=(1<<PB3);
     446:	1b 9a       	sbi	0x03, 3	; 3
	TCCR0A |=3;
     448:	84 b5       	in	r24, 0x24	; 36
     44a:	83 60       	ori	r24, 0x03	; 3
     44c:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0A0);
     44e:	84 b5       	in	r24, 0x24	; 36
     450:	80 64       	ori	r24, 0x40	; 64
     452:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0A1);
     454:	84 b5       	in	r24, 0x24	; 36
     456:	80 68       	ori	r24, 0x80	; 128
     458:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS00);
     45a:	85 b5       	in	r24, 0x25	; 37
     45c:	81 60       	ori	r24, 0x01	; 1
     45e:	85 bd       	out	0x25, r24	; 37
	DDRB |=1<<PINB3;
     460:	23 9a       	sbi	0x04, 3	; 4
	// motor 2
	DDRD |= (1 << PD7);
     462:	57 9a       	sbi	0x0a, 7	; 10
	TCCR2A|=3;
     464:	e0 eb       	ldi	r30, 0xB0	; 176
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	80 81       	ld	r24, Z
     46a:	83 60       	ori	r24, 0x03	; 3
     46c:	80 83       	st	Z, r24
	TCCR2A |= (1 << COM2A0);
     46e:	80 81       	ld	r24, Z
     470:	80 64       	ori	r24, 0x40	; 64
     472:	80 83       	st	Z, r24
	TCCR2A |= (1 << COM2A1);
     474:	80 81       	ld	r24, Z
     476:	80 68       	ori	r24, 0x80	; 128
     478:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS20);
     47a:	e1 eb       	ldi	r30, 0xB1	; 177
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	80 81       	ld	r24, Z
     480:	81 60       	ori	r24, 0x01	; 1
     482:	80 83       	st	Z, r24
	//sens
	DDRC |= 1<<PINC0;
     484:	38 9a       	sbi	0x07, 0	; 7
	DDRC |= 1<<PINC1;
     486:	39 9a       	sbi	0x07, 1	; 7
	
	
	PORTC &=~ 1<<PINC1;
     488:	88 b1       	in	r24, 0x08	; 8
     48a:	8c 7f       	andi	r24, 0xFC	; 252
     48c:	88 b9       	out	0x08, r24	; 8
	PORTC &=~ 1<<PINC0;	
     48e:	40 98       	cbi	0x08, 0	; 8
     490:	08 95       	ret

00000492 <setEnginesSpeed>:
			PORTC |= 1<<PINC0;	*/
}

void setEnginesSpeed(Engines engine, Sens sens, uint8_t viteza)
{
	if(sens == SensFata)
     492:	61 11       	cpse	r22, r1
     494:	01 c0       	rjmp	.+2      	; 0x498 <setEnginesSpeed+0x6>
		viteza = 255 - viteza;
     496:	40 95       	com	r20
		
	if(engine==RightEngines){
     498:	81 11       	cpse	r24, r1
     49a:	08 c0       	rjmp	.+16     	; 0x4ac <setEnginesSpeed+0x1a>
		OCR2A = viteza;
     49c:	40 93 b3 00 	sts	0x00B3, r20
		if(sens == SensFata){	
     4a0:	61 11       	cpse	r22, r1
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <setEnginesSpeed+0x16>
			PORTC &=~ 1<<PINC0;
     4a4:	40 98       	cbi	0x08, 0	; 8
     4a6:	08 95       	ret
		}			
		else{
			PORTC |= 1<<PINC0;	
     4a8:	40 9a       	sbi	0x08, 0	; 8
     4aa:	08 95       	ret
		}			
	}
	else
	{
		OCR0A = viteza;
     4ac:	47 bd       	out	0x27, r20	; 39
		if(sens == SensFata){	
     4ae:	61 11       	cpse	r22, r1
     4b0:	04 c0       	rjmp	.+8      	; 0x4ba <setEnginesSpeed+0x28>
			PORTC &=~ 1<<PINC1;
     4b2:	88 b1       	in	r24, 0x08	; 8
     4b4:	8c 7f       	andi	r24, 0xFC	; 252
     4b6:	88 b9       	out	0x08, r24	; 8
     4b8:	08 95       	ret
		}			
		else{			
			PORTC |= 1<<PINC1;			
     4ba:	41 9a       	sbi	0x08, 1	; 8
     4bc:	08 95       	ret

000004be <goFront>:
#include "../BTProtocol/BTProtocol.h"
#include "../Timing/Timing.h"

void setEnginesSpeed(Engines, Sens, uint8_t);

void goFront(uint8_t timp, uint8_t viteza){	
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	d8 2f       	mov	r29, r24
     4c4:	c6 2f       	mov	r28, r22
	setEnginesSpeed(RightEngines, SensFata, viteza);
     4c6:	46 2f       	mov	r20, r22
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	0e 94 49 02 	call	0x492	; 0x492 <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensFata, viteza);
     4d0:	4c 2f       	mov	r20, r28
     4d2:	60 e0       	ldi	r22, 0x00	; 0
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	0e 94 49 02 	call	0x492	; 0x492 <setEnginesSpeed>
	removeEntryFromTimerQueue(&stopEngines);
     4da:	88 e0       	ldi	r24, 0x08	; 8
     4dc:	92 e0       	ldi	r25, 0x02	; 2
     4de:	0e 94 ae 06 	call	0xd5c	; 0xd5c <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);	
     4e2:	ad 2f       	mov	r26, r29
     4e4:	b0 e0       	ldi	r27, 0x00	; 0
     4e6:	20 e4       	ldi	r18, 0x40	; 64
     4e8:	32 e4       	ldi	r19, 0x42	; 66
     4ea:	4f e0       	ldi	r20, 0x0F	; 15
     4ec:	50 e0       	ldi	r21, 0x00	; 0
     4ee:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__muluhisi3>
     4f2:	ab 01       	movw	r20, r22
     4f4:	bc 01       	movw	r22, r24
     4f6:	20 e0       	ldi	r18, 0x00	; 0
     4f8:	88 e0       	ldi	r24, 0x08	; 8
     4fa:	92 e0       	ldi	r25, 0x02	; 2
     4fc:	0e 94 ad 05 	call	0xb5a	; 0xb5a <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inainte!");
     500:	84 e7       	ldi	r24, 0x74	; 116
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
}
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	08 95       	ret

0000050e <goBack>:
void goBack(uint8_t timp, uint8_t viteza){
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	d8 2f       	mov	r29, r24
     514:	c6 2f       	mov	r28, r22
	setEnginesSpeed(RightEngines, SensSpate, viteza);
     516:	46 2f       	mov	r20, r22
     518:	61 e0       	ldi	r22, 0x01	; 1
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	0e 94 49 02 	call	0x492	; 0x492 <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensSpate, viteza);
     520:	4c 2f       	mov	r20, r28
     522:	61 e0       	ldi	r22, 0x01	; 1
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	0e 94 49 02 	call	0x492	; 0x492 <setEnginesSpeed>
	removeEntryFromTimerQueue(&stopEngines);
     52a:	88 e0       	ldi	r24, 0x08	; 8
     52c:	92 e0       	ldi	r25, 0x02	; 2
     52e:	0e 94 ae 06 	call	0xd5c	; 0xd5c <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     532:	ad 2f       	mov	r26, r29
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	20 e4       	ldi	r18, 0x40	; 64
     538:	32 e4       	ldi	r19, 0x42	; 66
     53a:	4f e0       	ldi	r20, 0x0F	; 15
     53c:	50 e0       	ldi	r21, 0x00	; 0
     53e:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__muluhisi3>
     542:	ab 01       	movw	r20, r22
     544:	bc 01       	movw	r22, r24
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	88 e0       	ldi	r24, 0x08	; 8
     54a:	92 e0       	ldi	r25, 0x02	; 2
     54c:	0e 94 ad 05 	call	0xb5a	; 0xb5a <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inapoi!");
     550:	84 e8       	ldi	r24, 0x84	; 132
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
}
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	08 95       	ret

0000055e <goFrontLeft>:

void goFrontLeft(uint8_t timp, uint8_t viteza){
     55e:	cf 93       	push	r28
     560:	c8 2f       	mov	r28, r24
     562:	46 2f       	mov	r20, r22
	
	setEnginesSpeed(RightEngines, SensFata, viteza);
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	0e 94 49 02 	call	0x492	; 0x492 <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensFata, 10);
     56c:	4a e0       	ldi	r20, 0x0A	; 10
     56e:	60 e0       	ldi	r22, 0x00	; 0
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	0e 94 49 02 	call	0x492	; 0x492 <setEnginesSpeed>
	removeEntryFromTimerQueue(&stopEngines);
     576:	88 e0       	ldi	r24, 0x08	; 8
     578:	92 e0       	ldi	r25, 0x02	; 2
     57a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     57e:	ac 2f       	mov	r26, r28
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	20 e4       	ldi	r18, 0x40	; 64
     584:	32 e4       	ldi	r19, 0x42	; 66
     586:	4f e0       	ldi	r20, 0x0F	; 15
     588:	50 e0       	ldi	r21, 0x00	; 0
     58a:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__muluhisi3>
     58e:	ab 01       	movw	r20, r22
     590:	bc 01       	movw	r22, r24
     592:	20 e0       	ldi	r18, 0x00	; 0
     594:	88 e0       	ldi	r24, 0x08	; 8
     596:	92 e0       	ldi	r25, 0x02	; 2
     598:	0e 94 ad 05 	call	0xb5a	; 0xb5a <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inainte stanga!");
     59c:	83 e9       	ldi	r24, 0x93	; 147
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
}
     5a4:	cf 91       	pop	r28
     5a6:	08 95       	ret

000005a8 <goFrontRight>:
void goFrontRight(uint8_t timp, uint8_t viteza){
     5a8:	cf 93       	push	r28
     5aa:	df 93       	push	r29
     5ac:	c8 2f       	mov	r28, r24
     5ae:	d6 2f       	mov	r29, r22
	
	setEnginesSpeed(RightEngines, SensFata, 10);
     5b0:	4a e0       	ldi	r20, 0x0A	; 10
     5b2:	60 e0       	ldi	r22, 0x00	; 0
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	0e 94 49 02 	call	0x492	; 0x492 <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensFata, viteza);
     5ba:	4d 2f       	mov	r20, r29
     5bc:	60 e0       	ldi	r22, 0x00	; 0
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	0e 94 49 02 	call	0x492	; 0x492 <setEnginesSpeed>
	removeEntryFromTimerQueue(&stopEngines);
     5c4:	88 e0       	ldi	r24, 0x08	; 8
     5c6:	92 e0       	ldi	r25, 0x02	; 2
     5c8:	0e 94 ae 06 	call	0xd5c	; 0xd5c <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     5cc:	ac 2f       	mov	r26, r28
     5ce:	b0 e0       	ldi	r27, 0x00	; 0
     5d0:	20 e4       	ldi	r18, 0x40	; 64
     5d2:	32 e4       	ldi	r19, 0x42	; 66
     5d4:	4f e0       	ldi	r20, 0x0F	; 15
     5d6:	50 e0       	ldi	r21, 0x00	; 0
     5d8:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__muluhisi3>
     5dc:	ab 01       	movw	r20, r22
     5de:	bc 01       	movw	r22, r24
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	88 e0       	ldi	r24, 0x08	; 8
     5e4:	92 e0       	ldi	r25, 0x02	; 2
     5e6:	0e 94 ad 05 	call	0xb5a	; 0xb5a <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inainte dreapta!");
     5ea:	8a ea       	ldi	r24, 0xAA	; 170
     5ec:	91 e0       	ldi	r25, 0x01	; 1
     5ee:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
}
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	08 95       	ret

000005f8 <goBackLeft>:

void goBackLeft(uint8_t timp, uint8_t viteza){
     5f8:	cf 93       	push	r28
     5fa:	c8 2f       	mov	r28, r24
     5fc:	46 2f       	mov	r20, r22
	
	setEnginesSpeed(RightEngines, SensSpate, viteza);
     5fe:	61 e0       	ldi	r22, 0x01	; 1
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	0e 94 49 02 	call	0x492	; 0x492 <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensSpate, 10);
     606:	4a e0       	ldi	r20, 0x0A	; 10
     608:	61 e0       	ldi	r22, 0x01	; 1
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	0e 94 49 02 	call	0x492	; 0x492 <setEnginesSpeed>
	removeEntryFromTimerQueue(&stopEngines);
     610:	88 e0       	ldi	r24, 0x08	; 8
     612:	92 e0       	ldi	r25, 0x02	; 2
     614:	0e 94 ae 06 	call	0xd5c	; 0xd5c <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     618:	ac 2f       	mov	r26, r28
     61a:	b0 e0       	ldi	r27, 0x00	; 0
     61c:	20 e4       	ldi	r18, 0x40	; 64
     61e:	32 e4       	ldi	r19, 0x42	; 66
     620:	4f e0       	ldi	r20, 0x0F	; 15
     622:	50 e0       	ldi	r21, 0x00	; 0
     624:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__muluhisi3>
     628:	ab 01       	movw	r20, r22
     62a:	bc 01       	movw	r22, r24
     62c:	20 e0       	ldi	r18, 0x00	; 0
     62e:	88 e0       	ldi	r24, 0x08	; 8
     630:	92 e0       	ldi	r25, 0x02	; 2
     632:	0e 94 ad 05 	call	0xb5a	; 0xb5a <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inapoi stanga!");
     636:	82 ec       	ldi	r24, 0xC2	; 194
     638:	91 e0       	ldi	r25, 0x01	; 1
     63a:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
}
     63e:	cf 91       	pop	r28
     640:	08 95       	ret

00000642 <goBackRight>:
void goBackRight(uint8_t timp, uint8_t viteza){
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	c8 2f       	mov	r28, r24
     648:	d6 2f       	mov	r29, r22
	
	setEnginesSpeed(RightEngines, SensSpate, 10);
     64a:	4a e0       	ldi	r20, 0x0A	; 10
     64c:	61 e0       	ldi	r22, 0x01	; 1
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	0e 94 49 02 	call	0x492	; 0x492 <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensSpate, viteza);
     654:	4d 2f       	mov	r20, r29
     656:	61 e0       	ldi	r22, 0x01	; 1
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	0e 94 49 02 	call	0x492	; 0x492 <setEnginesSpeed>
	removeEntryFromTimerQueue(&stopEngines);
     65e:	88 e0       	ldi	r24, 0x08	; 8
     660:	92 e0       	ldi	r25, 0x02	; 2
     662:	0e 94 ae 06 	call	0xd5c	; 0xd5c <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     666:	ac 2f       	mov	r26, r28
     668:	b0 e0       	ldi	r27, 0x00	; 0
     66a:	20 e4       	ldi	r18, 0x40	; 64
     66c:	32 e4       	ldi	r19, 0x42	; 66
     66e:	4f e0       	ldi	r20, 0x0F	; 15
     670:	50 e0       	ldi	r21, 0x00	; 0
     672:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__muluhisi3>
     676:	ab 01       	movw	r20, r22
     678:	bc 01       	movw	r22, r24
     67a:	20 e0       	ldi	r18, 0x00	; 0
     67c:	88 e0       	ldi	r24, 0x08	; 8
     67e:	92 e0       	ldi	r25, 0x02	; 2
     680:	0e 94 ad 05 	call	0xb5a	; 0xb5a <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inapoi dreapta!");
     684:	88 ed       	ldi	r24, 0xD8	; 216
     686:	91 e0       	ldi	r25, 0x01	; 1
     688:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
}
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	08 95       	ret

00000692 <rotirePeLoc>:
void rotirePeLoc(uint8_t timp, uint8_t viteza,  uint8_t engines){
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	d8 2f       	mov	r29, r24
     698:	c6 2f       	mov	r28, r22
	
	if(engines == RightEngines){
     69a:	41 11       	cpse	r20, r1
     69c:	0f c0       	rjmp	.+30     	; 0x6bc <rotirePeLoc+0x2a>
		setEnginesSpeed(LeftEngines, SensFata, viteza);
     69e:	46 2f       	mov	r20, r22
     6a0:	60 e0       	ldi	r22, 0x00	; 0
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	0e 94 49 02 	call	0x492	; 0x492 <setEnginesSpeed>
		setEnginesSpeed(RightEngines, SensSpate, viteza);
     6a8:	4c 2f       	mov	r20, r28
     6aa:	61 e0       	ldi	r22, 0x01	; 1
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	0e 94 49 02 	call	0x492	; 0x492 <setEnginesSpeed>
		BTTransmitStr("ma rotesc spre dreapta");
     6b2:	8f ee       	ldi	r24, 0xEF	; 239
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
     6ba:	0e c0       	rjmp	.+28     	; 0x6d8 <rotirePeLoc+0x46>
	}
	else {
		setEnginesSpeed(LeftEngines, SensSpate,  viteza);
     6bc:	46 2f       	mov	r20, r22
     6be:	61 e0       	ldi	r22, 0x01	; 1
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	0e 94 49 02 	call	0x492	; 0x492 <setEnginesSpeed>
		setEnginesSpeed(RightEngines, SensFata, viteza);
     6c6:	4c 2f       	mov	r20, r28
     6c8:	60 e0       	ldi	r22, 0x00	; 0
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	0e 94 49 02 	call	0x492	; 0x492 <setEnginesSpeed>
		BTTransmitStr("ma rotesc spre stanga");
     6d0:	86 e0       	ldi	r24, 0x06	; 6
     6d2:	92 e0       	ldi	r25, 0x02	; 2
     6d4:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
	}
	removeEntryFromTimerQueue(&stopEngines);
     6d8:	88 e0       	ldi	r24, 0x08	; 8
     6da:	92 e0       	ldi	r25, 0x02	; 2
     6dc:	0e 94 ae 06 	call	0xd5c	; 0xd5c <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     6e0:	ad 2f       	mov	r26, r29
     6e2:	b0 e0       	ldi	r27, 0x00	; 0
     6e4:	20 e4       	ldi	r18, 0x40	; 64
     6e6:	32 e4       	ldi	r19, 0x42	; 66
     6e8:	4f e0       	ldi	r20, 0x0F	; 15
     6ea:	50 e0       	ldi	r21, 0x00	; 0
     6ec:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__muluhisi3>
     6f0:	ab 01       	movw	r20, r22
     6f2:	bc 01       	movw	r22, r24
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	88 e0       	ldi	r24, 0x08	; 8
     6f8:	92 e0       	ldi	r25, 0x02	; 2
     6fa:	0e 94 ad 05 	call	0xb5a	; 0xb5a <addEntryToTimerQueue>
}
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	08 95       	ret

00000704 <resetSensorQueue>:
		
	return s/7;
}

void resetSensorQueue(Sensor sensor){
	sVals[sensor][0] = 0;
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	88 0f       	add	r24, r24
     708:	99 1f       	adc	r25, r25
     70a:	fc 01       	movw	r30, r24
     70c:	ee 0f       	add	r30, r30
     70e:	ff 1f       	adc	r31, r31
     710:	ee 0f       	add	r30, r30
     712:	ff 1f       	adc	r31, r31
     714:	ee 0f       	add	r30, r30
     716:	ff 1f       	adc	r31, r31
     718:	e8 1b       	sub	r30, r24
     71a:	f9 0b       	sbc	r31, r25
     71c:	e9 58       	subi	r30, 0x89	; 137
     71e:	fc 4f       	sbci	r31, 0xFC	; 252
     720:	11 82       	std	Z+1, r1	; 0x01
     722:	10 82       	st	Z, r1
	uint8_t i;
	for(i=0;i<6;i++)
		sVals[sensor][i] = 0;
     724:	13 82       	std	Z+3, r1	; 0x03
     726:	12 82       	std	Z+2, r1	; 0x02
     728:	15 82       	std	Z+5, r1	; 0x05
     72a:	14 82       	std	Z+4, r1	; 0x04
     72c:	17 82       	std	Z+7, r1	; 0x07
     72e:	16 82       	std	Z+6, r1	; 0x06
     730:	11 86       	std	Z+9, r1	; 0x09
     732:	10 86       	std	Z+8, r1	; 0x08
     734:	13 86       	std	Z+11, r1	; 0x0b
     736:	12 86       	std	Z+10, r1	; 0x0a
     738:	08 95       	ret

0000073a <initSensors>:
}

void initSensors(void){
     73a:	87 e7       	ldi	r24, 0x77	; 119
     73c:	93 e0       	ldi	r25, 0x03	; 3
     73e:	2f ea       	ldi	r18, 0xAF	; 175
     740:	33 e0       	ldi	r19, 0x03	; 3
     742:	50 e0       	ldi	r21, 0x00	; 0
     744:	09 c0       	rjmp	.+18     	; 0x758 <initSensors+0x1e>
	
	uint8_t i, j;
	for(i=0; i<4;i++)
		for(j=0; j<7;j++)
			sVals[i][j] = 0;
     746:	11 92       	st	Z+, r1
     748:	11 92       	st	Z+, r1

void initSensors(void){
	
	uint8_t i, j;
	for(i=0; i<4;i++)
		for(j=0; j<7;j++)
     74a:	4f 5f       	subi	r20, 0xFF	; 255
     74c:	47 30       	cpi	r20, 0x07	; 7
     74e:	d9 f7       	brne	.-10     	; 0x746 <initSensors+0xc>
     750:	0e 96       	adiw	r24, 0x0e	; 14
}

void initSensors(void){
	
	uint8_t i, j;
	for(i=0; i<4;i++)
     752:	82 17       	cp	r24, r18
     754:	93 07       	cpc	r25, r19
     756:	19 f0       	breq	.+6      	; 0x75e <initSensors+0x24>
	uint8_t i;
	for(i=0;i<6;i++)
		sVals[sensor][i] = 0;
}

void initSensors(void){
     758:	fc 01       	movw	r30, r24
     75a:	45 2f       	mov	r20, r21
     75c:	f4 cf       	rjmp	.-24     	; 0x746 <initSensors+0xc>
	for(i=0; i<4;i++)
		for(j=0; j<7;j++)
			sVals[i][j] = 0;
	
	//init ADC
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
     75e:	aa e7       	ldi	r26, 0x7A	; 122
     760:	b0 e0       	ldi	r27, 0x00	; 0
     762:	8c 91       	ld	r24, X
     764:	87 60       	ori	r24, 0x07	; 7
     766:	8c 93       	st	X, r24

	ADMUX |= (1 << REFS0);
     768:	ec e7       	ldi	r30, 0x7C	; 124
     76a:	f0 e0       	ldi	r31, 0x00	; 0
     76c:	80 81       	ld	r24, Z
     76e:	80 64       	ori	r24, 0x40	; 64
     770:	80 83       	st	Z, r24
	ADMUX &=~ (1 << REFS1); // Set ADC reference to AVCC
     772:	80 81       	ld	r24, Z
     774:	8f 77       	andi	r24, 0x7F	; 127
     776:	80 83       	st	Z, r24
	
	ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
     778:	80 81       	ld	r24, Z
     77a:	80 62       	ori	r24, 0x20	; 32
     77c:	80 83       	st	Z, r24
	
	//ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running Mode
	
	ADCSRA |= (1 << ADEN);  // Enable ADC
     77e:	8c 91       	ld	r24, X
     780:	80 68       	ori	r24, 0x80	; 128
     782:	8c 93       	st	X, r24
     784:	08 95       	ret

00000786 <startADCConversionForSensor>:
	//ADCSRA |= (1 << ADSC);
}

void startADCConversionForSensor(Sensor sensor){

	ADMUX &= ~31; // set lasts 5 bits to 00000
     786:	ec e7       	ldi	r30, 0x7C	; 124
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	90 81       	ld	r25, Z
     78c:	90 7e       	andi	r25, 0xE0	; 224
     78e:	90 83       	st	Z, r25
	//ADMUX |= 0; // 0-ADC0, 1-ADC1, 2-ADC2 ...    datasheet pg 249-251
	ADMUX |= sensor; // Sensor ia valorile 0,1,2,3, exact ca cele pt ADC-uri
     790:	90 81       	ld	r25, Z
     792:	89 2b       	or	r24, r25
     794:	80 83       	st	Z, r24
	// No MUX values needed to be changed to use ADC0

	
	ADCSRA |= (1 << ADSC);  // Start A2D Conversions
     796:	ea e7       	ldi	r30, 0x7A	; 122
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	80 81       	ld	r24, Z
     79c:	80 64       	ori	r24, 0x40	; 64
     79e:	80 83       	st	Z, r24
     7a0:	08 95       	ret

000007a2 <getValueOfSensor>:
	return val;
}

uint16_t sVals[4][7];

uint16_t getValueOfSensor(Sensor sensor){	
     7a2:	6f 92       	push	r6
     7a4:	7f 92       	push	r7
     7a6:	8f 92       	push	r8
     7a8:	9f 92       	push	r9
     7aa:	af 92       	push	r10
     7ac:	bf 92       	push	r11
     7ae:	cf 92       	push	r12
     7b0:	df 92       	push	r13
     7b2:	ef 92       	push	r14
     7b4:	ff 92       	push	r15
     7b6:	0f 93       	push	r16
     7b8:	1f 93       	push	r17
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	98 2e       	mov	r9, r24
	
	resetSensorQueue(sensor);
     7c0:	0e 94 82 03 	call	0x704	; 0x704 <resetSensorQueue>
	sVals[sensor][0] = 0;
     7c4:	89 2d       	mov	r24, r9
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	9c 01       	movw	r18, r24
     7ca:	22 0f       	add	r18, r18
     7cc:	33 1f       	adc	r19, r19
     7ce:	f9 01       	movw	r30, r18
     7d0:	ee 0f       	add	r30, r30
     7d2:	ff 1f       	adc	r31, r31
     7d4:	ee 0f       	add	r30, r30
     7d6:	ff 1f       	adc	r31, r31
     7d8:	ee 0f       	add	r30, r30
     7da:	ff 1f       	adc	r31, r31
     7dc:	e2 1b       	sub	r30, r18
     7de:	f3 0b       	sbc	r31, r19
     7e0:	e9 58       	subi	r30, 0x89	; 137
     7e2:	fc 4f       	sbci	r31, 0xFC	; 252
     7e4:	11 82       	std	Z+1, r1	; 0x01
     7e6:	10 82       	st	Z, r1
     7e8:	5f 01       	movw	r10, r30
     7ea:	6e 2e       	mov	r6, r30
     7ec:	7b 2c       	mov	r7, r11
	uint8_t i;
	uint16_t s;
	
	while(sVals[sensor][0]==0){
		startADCConversionForSensor(sensor);
     7ee:	0f 2e       	mov	r0, r31
     7f0:	f6 e0       	ldi	r31, 0x06	; 6
     7f2:	8f 2e       	mov	r8, r31
     7f4:	f0 2d       	mov	r31, r0
		for(i=0;i<6;i++)
			sVals[sensor][i] = sVals[sensor][i+1];
		
		while ( ADCSRA & (1 << ADSC));
     7f6:	ca e7       	ldi	r28, 0x7A	; 122
     7f8:	d0 e0       	ldi	r29, 0x00	; 0
		sVals[sensor][6] = ADCL >> 6;
     7fa:	0f 2e       	mov	r0, r31
     7fc:	f8 e7       	ldi	r31, 0x78	; 120
     7fe:	cf 2e       	mov	r12, r31
     800:	d1 2c       	mov	r13, r1
     802:	f0 2d       	mov	r31, r0
     804:	8f 01       	movw	r16, r30
     806:	04 5f       	subi	r16, 0xF4	; 244
     808:	1f 4f       	sbci	r17, 0xFF	; 255
		sVals[sensor][6] |= ADCH << 2;
     80a:	0f 2e       	mov	r0, r31
     80c:	f9 e7       	ldi	r31, 0x79	; 121
     80e:	ef 2e       	mov	r14, r31
     810:	f1 2c       	mov	r15, r1
     812:	f0 2d       	mov	r31, r0
	sVals[sensor][0] = 0;
	uint8_t i;
	uint16_t s;
	
	while(sVals[sensor][0]==0){
		startADCConversionForSensor(sensor);
     814:	89 2d       	mov	r24, r9
     816:	0e 94 c3 03 	call	0x786	; 0x786 <startADCConversionForSensor>
     81a:	5a 2d       	mov	r21, r10
     81c:	4b 2d       	mov	r20, r11
     81e:	e6 2d       	mov	r30, r6
     820:	f7 2d       	mov	r31, r7
     822:	88 2d       	mov	r24, r8
		for(i=0;i<6;i++)
			sVals[sensor][i] = sVals[sensor][i+1];
     824:	22 81       	ldd	r18, Z+2	; 0x02
     826:	33 81       	ldd	r19, Z+3	; 0x03
     828:	21 93       	st	Z+, r18
     82a:	31 93       	st	Z+, r19
     82c:	81 50       	subi	r24, 0x01	; 1
	uint8_t i;
	uint16_t s;
	
	while(sVals[sensor][0]==0){
		startADCConversionForSensor(sensor);
		for(i=0;i<6;i++)
     82e:	d1 f7       	brne	.-12     	; 0x824 <getValueOfSensor+0x82>
			sVals[sensor][i] = sVals[sensor][i+1];
		
		while ( ADCSRA & (1 << ADSC));
     830:	88 81       	ld	r24, Y
     832:	86 fd       	sbrc	r24, 6
     834:	fd cf       	rjmp	.-6      	; 0x830 <getValueOfSensor+0x8e>
		sVals[sensor][6] = ADCL >> 6;
     836:	f6 01       	movw	r30, r12
     838:	80 81       	ld	r24, Z
     83a:	82 95       	swap	r24
     83c:	86 95       	lsr	r24
     83e:	86 95       	lsr	r24
     840:	83 70       	andi	r24, 0x03	; 3
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	f8 01       	movw	r30, r16
     846:	91 83       	std	Z+1, r25	; 0x01
     848:	80 83       	st	Z, r24
		sVals[sensor][6] |= ADCH << 2;
     84a:	f7 01       	movw	r30, r14
     84c:	20 81       	ld	r18, Z
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	22 0f       	add	r18, r18
     852:	33 1f       	adc	r19, r19
     854:	22 0f       	add	r18, r18
     856:	33 1f       	adc	r19, r19
     858:	82 2b       	or	r24, r18
     85a:	93 2b       	or	r25, r19
     85c:	f8 01       	movw	r30, r16
     85e:	91 83       	std	Z+1, r25	; 0x01
     860:	80 83       	st	Z, r24
	resetSensorQueue(sensor);
	sVals[sensor][0] = 0;
	uint8_t i;
	uint16_t s;
	
	while(sVals[sensor][0]==0){
     862:	f5 01       	movw	r30, r10
     864:	80 81       	ld	r24, Z
     866:	91 81       	ldd	r25, Z+1	; 0x01
     868:	89 2b       	or	r24, r25
     86a:	a1 f2       	breq	.-88     	; 0x814 <getValueOfSensor+0x72>
     86c:	e5 2f       	mov	r30, r21
     86e:	f4 2f       	mov	r31, r20
     870:	40 e0       	ldi	r20, 0x00	; 0
     872:	50 e0       	ldi	r21, 0x00	; 0
     874:	20 e0       	ldi	r18, 0x00	; 0
	
	

	s=0;
	for(i=0;i<7;i++)
		s+=sVals[sensor][i];
     876:	81 91       	ld	r24, Z+
     878:	91 91       	ld	r25, Z+
     87a:	48 0f       	add	r20, r24
     87c:	59 1f       	adc	r21, r25
	}
	
	

	s=0;
	for(i=0;i<7;i++)
     87e:	2f 5f       	subi	r18, 0xFF	; 255
     880:	27 30       	cpi	r18, 0x07	; 7
     882:	c9 f7       	brne	.-14     	; 0x876 <getValueOfSensor+0xd4>
		
	//sprintf(msg,"lv: %d %d %d %d %d %d %d  =%d",
	//sVals[sensor][0], sVals[sensor][1], sVals[sensor][2], sVals[sensor][3], sVals[sensor][4], sVals[sensor][5], sVals[sensor][6], s/7);
	//BTTransmitStr(msg);
		
	return s/7;
     884:	9a 01       	movw	r18, r20
     886:	a3 e9       	ldi	r26, 0x93	; 147
     888:	b4 e2       	ldi	r27, 0x24	; 36
     88a:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__umulhisi3>
     88e:	48 1b       	sub	r20, r24
     890:	59 0b       	sbc	r21, r25
     892:	9a 01       	movw	r18, r20
     894:	36 95       	lsr	r19
     896:	27 95       	ror	r18
     898:	82 0f       	add	r24, r18
     89a:	93 1f       	adc	r25, r19
}
     89c:	96 95       	lsr	r25
     89e:	87 95       	ror	r24
     8a0:	96 95       	lsr	r25
     8a2:	87 95       	ror	r24
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	1f 91       	pop	r17
     8aa:	0f 91       	pop	r16
     8ac:	ff 90       	pop	r15
     8ae:	ef 90       	pop	r14
     8b0:	df 90       	pop	r13
     8b2:	cf 90       	pop	r12
     8b4:	bf 90       	pop	r11
     8b6:	af 90       	pop	r10
     8b8:	9f 90       	pop	r9
     8ba:	8f 90       	pop	r8
     8bc:	7f 90       	pop	r7
     8be:	6f 90       	pop	r6
     8c0:	08 95       	ret

000008c2 <timer_init>:

volatile uint32_t time=0;
void timer_init()
{
	//PIND = (1 << PIND0);
	TIMSK1|=(1<<TOIE1);
     8c2:	ef e6       	ldi	r30, 0x6F	; 111
     8c4:	f0 e0       	ldi	r31, 0x00	; 0
     8c6:	80 81       	ld	r24, Z
     8c8:	81 60       	ori	r24, 0x01	; 1
     8ca:	80 83       	st	Z, r24
	TCNT1 = 0x00;
     8cc:	10 92 85 00 	sts	0x0085, r1
     8d0:	10 92 84 00 	sts	0x0084, r1
	TCCR1B = 0x01;//pt ca modificam ultimu bit din datasheet
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	80 93 81 00 	sts	0x0081, r24
     8da:	08 95       	ret

000008dc <__vector_15>:
}
ISR(TIMER1_OVF_vect)// Din datasheet timerq(are 8 mh) => 8/8= 1 microsecunde
{
     8dc:	1f 92       	push	r1
     8de:	0f 92       	push	r0
     8e0:	0f b6       	in	r0, 0x3f	; 63
     8e2:	0f 92       	push	r0
     8e4:	11 24       	eor	r1, r1
     8e6:	2f 93       	push	r18
     8e8:	3f 93       	push	r19
     8ea:	4f 93       	push	r20
     8ec:	5f 93       	push	r21
     8ee:	6f 93       	push	r22
     8f0:	7f 93       	push	r23
     8f2:	8f 93       	push	r24
     8f4:	9f 93       	push	r25
     8f6:	af 93       	push	r26
     8f8:	bf 93       	push	r27
     8fa:	ef 93       	push	r30
     8fc:	ff 93       	push	r31
	time++;
     8fe:	80 91 5a 03 	lds	r24, 0x035A
     902:	90 91 5b 03 	lds	r25, 0x035B
     906:	a0 91 5c 03 	lds	r26, 0x035C
     90a:	b0 91 5d 03 	lds	r27, 0x035D
     90e:	01 96       	adiw	r24, 0x01	; 1
     910:	a1 1d       	adc	r26, r1
     912:	b1 1d       	adc	r27, r1
     914:	80 93 5a 03 	sts	0x035A, r24
     918:	90 93 5b 03 	sts	0x035B, r25
     91c:	a0 93 5c 03 	sts	0x035C, r26
     920:	b0 93 5d 03 	sts	0x035D, r27
	//TCCR1B = 0x01; // init pentru 7.5 ms
	//TCCR1B = 0x02; // init pentru 60 ms
	//timePassed(7500); //7.5 ms = 7500 us;
	timePassed(8800);
     924:	60 e6       	ldi	r22, 0x60	; 96
     926:	72 e2       	ldi	r23, 0x22	; 34
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	0e 94 56 07 	call	0xeac	; 0xeac <timePassed>
	
	//PORTD ^= 1<<PIND5;
}
     930:	ff 91       	pop	r31
     932:	ef 91       	pop	r30
     934:	bf 91       	pop	r27
     936:	af 91       	pop	r26
     938:	9f 91       	pop	r25
     93a:	8f 91       	pop	r24
     93c:	7f 91       	pop	r23
     93e:	6f 91       	pop	r22
     940:	5f 91       	pop	r21
     942:	4f 91       	pop	r20
     944:	3f 91       	pop	r19
     946:	2f 91       	pop	r18
     948:	0f 90       	pop	r0
     94a:	0f be       	out	0x3f, r0	; 63
     94c:	0f 90       	pop	r0
     94e:	1f 90       	pop	r1
     950:	18 95       	reti

00000952 <__vector_20>:

ISR(USART0_RX_vect)
{
     952:	1f 92       	push	r1
     954:	0f 92       	push	r0
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	0f 92       	push	r0
     95a:	11 24       	eor	r1, r1
     95c:	2f 93       	push	r18
     95e:	3f 93       	push	r19
     960:	4f 93       	push	r20
     962:	5f 93       	push	r21
     964:	6f 93       	push	r22
     966:	7f 93       	push	r23
     968:	8f 93       	push	r24
     96a:	9f 93       	push	r25
     96c:	af 93       	push	r26
     96e:	bf 93       	push	r27
     970:	ef 93       	push	r30
     972:	ff 93       	push	r31
	BTProtocolReadByte(UDR0);
     974:	80 91 c6 00 	lds	r24, 0x00C6
     978:	0e 94 9d 01 	call	0x33a	; 0x33a <BTProtocolReadByte>
}
     97c:	ff 91       	pop	r31
     97e:	ef 91       	pop	r30
     980:	bf 91       	pop	r27
     982:	af 91       	pop	r26
     984:	9f 91       	pop	r25
     986:	8f 91       	pop	r24
     988:	7f 91       	pop	r23
     98a:	6f 91       	pop	r22
     98c:	5f 91       	pop	r21
     98e:	4f 91       	pop	r20
     990:	3f 91       	pop	r19
     992:	2f 91       	pop	r18
     994:	0f 90       	pop	r0
     996:	0f be       	out	0x3f, r0	; 63
     998:	0f 90       	pop	r0
     99a:	1f 90       	pop	r1
     99c:	18 95       	reti

0000099e <main>:

volatile uint8_t sradc0, shouldBlink=0;

int main(void)
{
	BTInit();
     99e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <BTInit>
	timer_init();
     9a2:	0e 94 61 04 	call	0x8c2	; 0x8c2 <timer_init>
	initLeds();
     9a6:	0e 94 87 08 	call	0x110e	; 0x110e <initLeds>
	initEngines();
     9aa:	0e 94 1f 02 	call	0x43e	; 0x43e <initEngines>
	initSensors();
     9ae:	0e 94 9d 03 	call	0x73a	; 0x73a <initSensors>
	initTimeQueue();
     9b2:	0e 94 93 05 	call	0xb26	; 0xb26 <initTimeQueue>
	
	sei();
     9b6:	78 94       	sei
	BTTransmitStr("  >>>main start<<<  ");
     9b8:	8c e1       	ldi	r24, 0x1C	; 28
     9ba:	92 e0       	ldi	r25, 0x02	; 2
     9bc:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
	
	PORTD |= 1<<PIND5;
     9c0:	5d 9a       	sbi	0x0b, 5	; 11
	
	addEntryToTimerQueue(&functieRotireStanga, 1000UL * 50UL, Periodic);
     9c2:	21 e0       	ldi	r18, 0x01	; 1
     9c4:	40 e5       	ldi	r20, 0x50	; 80
     9c6:	53 ec       	ldi	r21, 0xC3	; 195
     9c8:	60 e0       	ldi	r22, 0x00	; 0
     9ca:	70 e0       	ldi	r23, 0x00	; 0
     9cc:	8e e2       	ldi	r24, 0x2E	; 46
     9ce:	9a e0       	ldi	r25, 0x0A	; 10
     9d0:	0e 94 ad 05 	call	0xb5a	; 0xb5a <addEntryToTimerQueue>
	
    while(1)
    {
		//_delay_ms(1);
		checkTimeQueue();
     9d4:	0e 94 ed 07 	call	0xfda	; 0xfda <checkTimeQueue>
     9d8:	fd cf       	rjmp	.-6      	; 0x9d4 <main+0x36>

000009da <PID1cal>:
#define Kd 0.01
#define Ki 0.005
static float pre_error= 0;

float PID1cal(float setpoint, float actual_position)
{
     9da:	8f 92       	push	r8
     9dc:	9f 92       	push	r9
     9de:	af 92       	push	r10
     9e0:	bf 92       	push	r11
     9e2:	cf 92       	push	r12
     9e4:	df 92       	push	r13
     9e6:	ef 92       	push	r14
     9e8:	ff 92       	push	r15
	static float integral=0;
	float error;
	float derivative;
	float output;

	error=setpoint- actual_position;
     9ea:	0e 94 b7 0a 	call	0x156e	; 0x156e <__subsf3>
     9ee:	6b 01       	movw	r12, r22
     9f0:	7c 01       	movw	r14, r24
	if(fabs(error)>epsilon)
     9f2:	9f 77       	andi	r25, 0x7F	; 127
     9f4:	2d ec       	ldi	r18, 0xCD	; 205
     9f6:	3c ec       	ldi	r19, 0xCC	; 204
     9f8:	4c ec       	ldi	r20, 0xCC	; 204
     9fa:	5d e3       	ldi	r21, 0x3D	; 61
     9fc:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__gesf2>
     a00:	18 16       	cp	r1, r24
     a02:	e4 f4       	brge	.+56     	; 0xa3c <PID1cal+0x62>
	{
		integral = integral +error*dt;
     a04:	2a e0       	ldi	r18, 0x0A	; 10
     a06:	37 ed       	ldi	r19, 0xD7	; 215
     a08:	43 e2       	ldi	r20, 0x23	; 35
     a0a:	5c e3       	ldi	r21, 0x3C	; 60
     a0c:	c7 01       	movw	r24, r14
     a0e:	b6 01       	movw	r22, r12
     a10:	0e 94 6f 0c 	call	0x18de	; 0x18de <__mulsf3>
     a14:	9b 01       	movw	r18, r22
     a16:	ac 01       	movw	r20, r24
     a18:	60 91 5e 03 	lds	r22, 0x035E
     a1c:	70 91 5f 03 	lds	r23, 0x035F
     a20:	80 91 60 03 	lds	r24, 0x0360
     a24:	90 91 61 03 	lds	r25, 0x0361
     a28:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__addsf3>
     a2c:	60 93 5e 03 	sts	0x035E, r22
     a30:	70 93 5f 03 	sts	0x035F, r23
     a34:	80 93 60 03 	sts	0x0360, r24
     a38:	90 93 61 03 	sts	0x0361, r25
	}
	derivative =(error-pre_error)/dt;
	output = Kp*error + Ki*integral + Kd*derivative;
     a3c:	2d ec       	ldi	r18, 0xCD	; 205
     a3e:	3c ec       	ldi	r19, 0xCC	; 204
     a40:	4c ec       	ldi	r20, 0xCC	; 204
     a42:	5d e3       	ldi	r21, 0x3D	; 61
     a44:	c7 01       	movw	r24, r14
     a46:	b6 01       	movw	r22, r12
     a48:	0e 94 6f 0c 	call	0x18de	; 0x18de <__mulsf3>
     a4c:	4b 01       	movw	r8, r22
     a4e:	5c 01       	movw	r10, r24
     a50:	2a e0       	ldi	r18, 0x0A	; 10
     a52:	37 ed       	ldi	r19, 0xD7	; 215
     a54:	43 ea       	ldi	r20, 0xA3	; 163
     a56:	5b e3       	ldi	r21, 0x3B	; 59
     a58:	60 91 5e 03 	lds	r22, 0x035E
     a5c:	70 91 5f 03 	lds	r23, 0x035F
     a60:	80 91 60 03 	lds	r24, 0x0360
     a64:	90 91 61 03 	lds	r25, 0x0361
     a68:	0e 94 6f 0c 	call	0x18de	; 0x18de <__mulsf3>
     a6c:	9b 01       	movw	r18, r22
     a6e:	ac 01       	movw	r20, r24
     a70:	c5 01       	movw	r24, r10
     a72:	b4 01       	movw	r22, r8
     a74:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__addsf3>
     a78:	4b 01       	movw	r8, r22
     a7a:	5c 01       	movw	r10, r24
	error=setpoint- actual_position;
	if(fabs(error)>epsilon)
	{
		integral = integral +error*dt;
	}
	derivative =(error-pre_error)/dt;
     a7c:	20 91 62 03 	lds	r18, 0x0362
     a80:	30 91 63 03 	lds	r19, 0x0363
     a84:	40 91 64 03 	lds	r20, 0x0364
     a88:	50 91 65 03 	lds	r21, 0x0365
     a8c:	c7 01       	movw	r24, r14
     a8e:	b6 01       	movw	r22, r12
     a90:	0e 94 b7 0a 	call	0x156e	; 0x156e <__subsf3>
     a94:	2a e0       	ldi	r18, 0x0A	; 10
     a96:	37 ed       	ldi	r19, 0xD7	; 215
     a98:	43 e2       	ldi	r20, 0x23	; 35
     a9a:	5c e3       	ldi	r21, 0x3C	; 60
     a9c:	0e 94 20 0b 	call	0x1640	; 0x1640 <__divsf3>
	output = Kp*error + Ki*integral + Kd*derivative;
     aa0:	2a e0       	ldi	r18, 0x0A	; 10
     aa2:	37 ed       	ldi	r19, 0xD7	; 215
     aa4:	43 e2       	ldi	r20, 0x23	; 35
     aa6:	5c e3       	ldi	r21, 0x3C	; 60
     aa8:	0e 94 6f 0c 	call	0x18de	; 0x18de <__mulsf3>
     aac:	9b 01       	movw	r18, r22
     aae:	ac 01       	movw	r20, r24
     ab0:	c5 01       	movw	r24, r10
     ab2:	b4 01       	movw	r22, r8
     ab4:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__addsf3>
     ab8:	4b 01       	movw	r8, r22
     aba:	5c 01       	movw	r10, r24
	if(output > MAX)
     abc:	20 e0       	ldi	r18, 0x00	; 0
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	40 e8       	ldi	r20, 0x80	; 128
     ac2:	50 e4       	ldi	r21, 0x40	; 64
     ac4:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__gesf2>
     ac8:	18 16       	cp	r1, r24
     aca:	5c f0       	brlt	.+22     	; 0xae2 <PID1cal+0x108>
	{
		output=MAX;
	}
	if(output < MIN)
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 e8       	ldi	r20, 0x80	; 128
     ad2:	50 ec       	ldi	r21, 0xC0	; 192
     ad4:	c5 01       	movw	r24, r10
     ad6:	b4 01       	movw	r22, r8
     ad8:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__cmpsf2>
     adc:	88 23       	and	r24, r24
     ade:	44 f0       	brlt	.+16     	; 0xaf0 <PID1cal+0x116>
     ae0:	0f c0       	rjmp	.+30     	; 0xb00 <PID1cal+0x126>
	}
	derivative =(error-pre_error)/dt;
	output = Kp*error + Ki*integral + Kd*derivative;
	if(output > MAX)
	{
		output=MAX;
     ae2:	81 2c       	mov	r8, r1
     ae4:	91 2c       	mov	r9, r1
     ae6:	54 01       	movw	r10, r8
     ae8:	68 94       	set
     aea:	a7 f8       	bld	r10, 7
     aec:	b6 f8       	bld	r11, 6
     aee:	08 c0       	rjmp	.+16     	; 0xb00 <PID1cal+0x126>
	}
	if(output < MIN)
	{
		output=MIN;
     af0:	0f 2e       	mov	r0, r31
     af2:	81 2c       	mov	r8, r1
     af4:	91 2c       	mov	r9, r1
     af6:	f0 e8       	ldi	r31, 0x80	; 128
     af8:	af 2e       	mov	r10, r31
     afa:	f0 ec       	ldi	r31, 0xC0	; 192
     afc:	bf 2e       	mov	r11, r31
     afe:	f0 2d       	mov	r31, r0
	}
	pre_error=error;
     b00:	c0 92 62 03 	sts	0x0362, r12
     b04:	d0 92 63 03 	sts	0x0363, r13
     b08:	e0 92 64 03 	sts	0x0364, r14
     b0c:	f0 92 65 03 	sts	0x0365, r15
	return output;
}
     b10:	c5 01       	movw	r24, r10
     b12:	b4 01       	movw	r22, r8
     b14:	ff 90       	pop	r15
     b16:	ef 90       	pop	r14
     b18:	df 90       	pop	r13
     b1a:	cf 90       	pop	r12
     b1c:	bf 90       	pop	r11
     b1e:	af 90       	pop	r10
     b20:	9f 90       	pop	r9
     b22:	8f 90       	pop	r8
     b24:	08 95       	ret

00000b26 <initTimeQueue>:
extern uint32_t time;

void initTimeQueue(){
	uint8_t i;
	// initializez toti pointerii cu 0, adica pe fiecare pozitie din coada e o structura neocupata
	for(i=0;i<TimerQueueSize;i++)
     b26:	40 91 01 01 	lds	r20, 0x0101
     b2a:	44 23       	and	r20, r20
     b2c:	a9 f0       	breq	.+42     	; 0xb58 <initTimeQueue+0x32>
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	90 e0       	ldi	r25, 0x00	; 0
		TimerQueue[i].pointerFct = 0;
     b32:	fc 01       	movw	r30, r24
     b34:	ee 0f       	add	r30, r30
     b36:	ff 1f       	adc	r31, r31
     b38:	9c 01       	movw	r18, r24
     b3a:	22 0f       	add	r18, r18
     b3c:	33 1f       	adc	r19, r19
     b3e:	22 0f       	add	r18, r18
     b40:	33 1f       	adc	r19, r19
     b42:	22 0f       	add	r18, r18
     b44:	33 1f       	adc	r19, r19
     b46:	e2 0f       	add	r30, r18
     b48:	f3 1f       	adc	r31, r19
     b4a:	e1 55       	subi	r30, 0x51	; 81
     b4c:	fc 4f       	sbci	r31, 0xFC	; 252
     b4e:	11 86       	std	Z+9, r1	; 0x09
     b50:	10 86       	std	Z+8, r1	; 0x08
     b52:	01 96       	adiw	r24, 0x01	; 1
extern uint32_t time;

void initTimeQueue(){
	uint8_t i;
	// initializez toti pointerii cu 0, adica pe fiecare pozitie din coada e o structura neocupata
	for(i=0;i<TimerQueueSize;i++)
     b54:	84 17       	cp	r24, r20
     b56:	68 f3       	brcs	.-38     	; 0xb32 <initTimeQueue+0xc>
     b58:	08 95       	ret

00000b5a <addEntryToTimerQueue>:
		TimerQueue[i].pointerFct = 0;
}

extern volatile uint8_t debugging;
// delay e in microsecunde (10^-6 secunde)
void addEntryToTimerQueue(void (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
     b5a:	df 92       	push	r13
     b5c:	ef 92       	push	r14
     b5e:	ff 92       	push	r15
     b60:	0f 93       	push	r16
     b62:	1f 93       	push	r17
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
     b6c:	ce 56       	subi	r28, 0x6E	; 110
     b6e:	d1 09       	sbc	r29, r1
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	f8 94       	cli
     b74:	de bf       	out	0x3e, r29	; 62
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	cd bf       	out	0x3d, r28	; 61
	cli(); // dezactivare intreruperi
     b7a:	f8 94       	cli
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
     b7c:	d0 90 01 01 	lds	r13, 0x0101
     b80:	dd 20       	and	r13, r13
     b82:	09 f4       	brne	.+2      	; 0xb86 <addEntryToTimerQueue+0x2c>
     b84:	77 c0       	rjmp	.+238    	; 0xc74 <addEntryToTimerQueue+0x11a>
		if(TimerQueue[i].pointerFct == 0)
     b86:	e0 91 b7 03 	lds	r30, 0x03B7
     b8a:	f0 91 b8 03 	lds	r31, 0x03B8
     b8e:	ef 2b       	or	r30, r31
     b90:	09 f4       	brne	.+2      	; 0xb94 <addEntryToTimerQueue+0x3a>
     b92:	7a c0       	rjmp	.+244    	; 0xc88 <addEntryToTimerQueue+0x12e>
			break;
		if(TimerQueue[i].pointerFct == _theFct){
     b94:	e0 91 b7 03 	lds	r30, 0x03B7
     b98:	f0 91 b8 03 	lds	r31, 0x03B8
     b9c:	e8 17       	cp	r30, r24
     b9e:	f9 07       	cpc	r31, r25
     ba0:	09 f0       	breq	.+2      	; 0xba4 <addEntryToTimerQueue+0x4a>
     ba2:	5e c0       	rjmp	.+188    	; 0xc60 <addEntryToTimerQueue+0x106>
     ba4:	2d c0       	rjmp	.+90     	; 0xc00 <addEntryToTimerQueue+0xa6>
void addEntryToTimerQueue(void (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
	cli(); // dezactivare intreruperi
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct == 0)
     ba6:	7f 01       	movw	r14, r30
     ba8:	df 01       	movw	r26, r30
     baa:	aa 0f       	add	r26, r26
     bac:	bb 1f       	adc	r27, r27
     bae:	aa 0f       	add	r26, r26
     bb0:	bb 1f       	adc	r27, r27
     bb2:	aa 0f       	add	r26, r26
     bb4:	bb 1f       	adc	r27, r27
     bb6:	8f 01       	movw	r16, r30
     bb8:	00 0f       	add	r16, r16
     bba:	11 1f       	adc	r17, r17
     bbc:	a0 0f       	add	r26, r16
     bbe:	b1 1f       	adc	r27, r17
     bc0:	a1 55       	subi	r26, 0x51	; 81
     bc2:	bc 4f       	sbci	r27, 0xFC	; 252
     bc4:	18 96       	adiw	r26, 0x08	; 8
     bc6:	0d 90       	ld	r0, X+
     bc8:	bc 91       	ld	r27, X
     bca:	a0 2d       	mov	r26, r0
     bcc:	ab 2b       	or	r26, r27
     bce:	09 f4       	brne	.+2      	; 0xbd2 <addEntryToTimerQueue+0x78>
     bd0:	4e c0       	rjmp	.+156    	; 0xc6e <addEntryToTimerQueue+0x114>
			break;
		if(TimerQueue[i].pointerFct == _theFct){
     bd2:	8f 01       	movw	r16, r30
     bd4:	00 0f       	add	r16, r16
     bd6:	11 1f       	adc	r17, r17
     bd8:	df 01       	movw	r26, r30
     bda:	aa 0f       	add	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	aa 0f       	add	r26, r26
     be0:	bb 1f       	adc	r27, r27
     be2:	aa 0f       	add	r26, r26
     be4:	bb 1f       	adc	r27, r27
     be6:	a0 0f       	add	r26, r16
     be8:	b1 1f       	adc	r27, r17
     bea:	a1 55       	subi	r26, 0x51	; 81
     bec:	bc 4f       	sbci	r27, 0xFC	; 252
     bee:	18 96       	adiw	r26, 0x08	; 8
     bf0:	0d 90       	ld	r0, X+
     bf2:	bc 91       	ld	r27, X
     bf4:	a0 2d       	mov	r26, r0
     bf6:	31 96       	adiw	r30, 0x01	; 1
     bf8:	a8 17       	cp	r26, r24
     bfa:	b9 07       	cpc	r27, r25
     bfc:	99 f5       	brne	.+102    	; 0xc64 <addEntryToTimerQueue+0x10a>
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <addEntryToTimerQueue+0xaa>
void addEntryToTimerQueue(void (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
	cli(); // dezactivare intreruperi
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct == 0)
     c00:	e1 2c       	mov	r14, r1
     c02:	f1 2c       	mov	r15, r1
			break;
		if(TimerQueue[i].pointerFct == _theFct){
			if(debugging){
     c04:	80 91 00 01 	lds	r24, 0x0100
     c08:	88 23       	and	r24, r24
     c0a:	09 f4       	brne	.+2      	; 0xc0e <addEntryToTimerQueue+0xb4>
     c0c:	98 c0       	rjmp	.+304    	; 0xd3e <addEntryToTimerQueue+0x1e4>
				char msg[100];
				sprintf(msg, "Functia asta e deja in coada! cu delay: %lu", TimerQueue[i].delay);
     c0e:	f7 01       	movw	r30, r14
     c10:	ee 0f       	add	r30, r30
     c12:	ff 1f       	adc	r31, r31
     c14:	ee 0c       	add	r14, r14
     c16:	ff 1c       	adc	r15, r15
     c18:	ee 0c       	add	r14, r14
     c1a:	ff 1c       	adc	r15, r15
     c1c:	ee 0c       	add	r14, r14
     c1e:	ff 1c       	adc	r15, r15
     c20:	ee 0d       	add	r30, r14
     c22:	ff 1d       	adc	r31, r15
     c24:	e1 55       	subi	r30, 0x51	; 81
     c26:	fc 4f       	sbci	r31, 0xFC	; 252
     c28:	80 81       	ld	r24, Z
     c2a:	91 81       	ldd	r25, Z+1	; 0x01
     c2c:	a2 81       	ldd	r26, Z+2	; 0x02
     c2e:	b3 81       	ldd	r27, Z+3	; 0x03
     c30:	bf 93       	push	r27
     c32:	af 93       	push	r26
     c34:	9f 93       	push	r25
     c36:	8f 93       	push	r24
     c38:	81 e3       	ldi	r24, 0x31	; 49
     c3a:	92 e0       	ldi	r25, 0x02	; 2
     c3c:	9f 93       	push	r25
     c3e:	8f 93       	push	r24
     c40:	8e 01       	movw	r16, r28
     c42:	05 5f       	subi	r16, 0xF5	; 245
     c44:	1f 4f       	sbci	r17, 0xFF	; 255
     c46:	1f 93       	push	r17
     c48:	0f 93       	push	r16
     c4a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <sprintf>
				BTTransmitStr(msg);
     c4e:	c8 01       	movw	r24, r16
     c50:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	f8 94       	cli
     c58:	de bf       	out	0x3e, r29	; 62
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	cd bf       	out	0x3d, r28	; 61
     c5e:	6f c0       	rjmp	.+222    	; 0xd3e <addEntryToTimerQueue+0x1e4>
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct == 0)
			break;
		if(TimerQueue[i].pointerFct == _theFct){
     c60:	e1 e0       	ldi	r30, 0x01	; 1
     c62:	f0 e0       	ldi	r31, 0x00	; 0
// delay e in microsecunde (10^-6 secunde)
void addEntryToTimerQueue(void (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
	cli(); // dezactivare intreruperi
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
     c64:	3e 2f       	mov	r19, r30
     c66:	ed 15       	cp	r30, r13
     c68:	08 f4       	brcc	.+2      	; 0xc6c <addEntryToTimerQueue+0x112>
     c6a:	9d cf       	rjmp	.-198    	; 0xba6 <addEntryToTimerQueue+0x4c>
     c6c:	01 c0       	rjmp	.+2      	; 0xc70 <addEntryToTimerQueue+0x116>
     c6e:	e3 2f       	mov	r30, r19
				BTTransmitStr(msg);
			}
			return;
		}
	}
	if(i == TimerQueueSize){
     c70:	ed 11       	cpse	r30, r13
     c72:	0b c0       	rjmp	.+22     	; 0xc8a <addEntryToTimerQueue+0x130>
		//nu mai e loc in coada
		if(debugging)
     c74:	80 91 00 01 	lds	r24, 0x0100
     c78:	88 23       	and	r24, r24
     c7a:	09 f4       	brne	.+2      	; 0xc7e <addEntryToTimerQueue+0x124>
     c7c:	60 c0       	rjmp	.+192    	; 0xd3e <addEntryToTimerQueue+0x1e4>
			BTTransmitStr("Coada e full!");
     c7e:	8d e5       	ldi	r24, 0x5D	; 93
     c80:	92 e0       	ldi	r25, 0x02	; 2
     c82:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
     c86:	5b c0       	rjmp	.+182    	; 0xd3e <addEntryToTimerQueue+0x1e4>
// delay e in microsecunde (10^-6 secunde)
void addEntryToTimerQueue(void (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
	cli(); // dezactivare intreruperi
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
     c88:	30 e0       	ldi	r19, 0x00	; 0
	}
	
	//construire entry pentru functia curenta 
	queueEntry thisEntry;
	thisEntry.delay = _delay;
	thisEntry.repeatDelay = _repeat ? _delay :0;
     c8a:	21 11       	cpse	r18, r1
     c8c:	04 c0       	rjmp	.+8      	; 0xc96 <addEntryToTimerQueue+0x13c>
     c8e:	a0 e0       	ldi	r26, 0x00	; 0
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	e0 e0       	ldi	r30, 0x00	; 0
     c94:	04 c0       	rjmp	.+8      	; 0xc9e <addEntryToTimerQueue+0x144>
     c96:	a4 2f       	mov	r26, r20
     c98:	f5 2f       	mov	r31, r21
     c9a:	e6 2f       	mov	r30, r22
     c9c:	27 2f       	mov	r18, r23
	thisEntry.pointerFct = _theFct;
	
	TimerQueue[i] = thisEntry;
     c9e:	03 2f       	mov	r16, r19
     ca0:	10 e0       	ldi	r17, 0x00	; 0
     ca2:	49 83       	std	Y+1, r20	; 0x01
     ca4:	5a 83       	std	Y+2, r21	; 0x02
     ca6:	6b 83       	std	Y+3, r22	; 0x03
     ca8:	7c 83       	std	Y+4, r23	; 0x04
     caa:	ad 83       	std	Y+5, r26	; 0x05
     cac:	fe 83       	std	Y+6, r31	; 0x06
     cae:	ef 83       	std	Y+7, r30	; 0x07
     cb0:	28 87       	std	Y+8, r18	; 0x08
     cb2:	9a 87       	std	Y+10, r25	; 0x0a
     cb4:	89 87       	std	Y+9, r24	; 0x09
     cb6:	d8 01       	movw	r26, r16
     cb8:	aa 0f       	add	r26, r26
     cba:	bb 1f       	adc	r27, r27
     cbc:	c8 01       	movw	r24, r16
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	88 0f       	add	r24, r24
     cc4:	99 1f       	adc	r25, r25
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	a8 0f       	add	r26, r24
     ccc:	b9 1f       	adc	r27, r25
     cce:	a1 55       	subi	r26, 0x51	; 81
     cd0:	bc 4f       	sbci	r27, 0xFC	; 252
     cd2:	8a e0       	ldi	r24, 0x0A	; 10
     cd4:	fe 01       	movw	r30, r28
     cd6:	31 96       	adiw	r30, 0x01	; 1
     cd8:	01 90       	ld	r0, Z+
     cda:	0d 92       	st	X+, r0
     cdc:	8a 95       	dec	r24
     cde:	e1 f7       	brne	.-8      	; 0xcd8 <addEntryToTimerQueue+0x17e>
	
	if(debugging){
     ce0:	80 91 00 01 	lds	r24, 0x0100
     ce4:	88 23       	and	r24, r24
     ce6:	51 f1       	breq	.+84     	; 0xd3c <addEntryToTimerQueue+0x1e2>
		char msg[100];		
		sprintf(msg, "Entry adaugat in coada! la index %d si cu delay: %lu", i, TimerQueue[i].delay);
     ce8:	f8 01       	movw	r30, r16
     cea:	ee 0f       	add	r30, r30
     cec:	ff 1f       	adc	r31, r31
     cee:	00 0f       	add	r16, r16
     cf0:	11 1f       	adc	r17, r17
     cf2:	00 0f       	add	r16, r16
     cf4:	11 1f       	adc	r17, r17
     cf6:	00 0f       	add	r16, r16
     cf8:	11 1f       	adc	r17, r17
     cfa:	e0 0f       	add	r30, r16
     cfc:	f1 1f       	adc	r31, r17
     cfe:	e1 55       	subi	r30, 0x51	; 81
     d00:	fc 4f       	sbci	r31, 0xFC	; 252
     d02:	80 81       	ld	r24, Z
     d04:	91 81       	ldd	r25, Z+1	; 0x01
     d06:	a2 81       	ldd	r26, Z+2	; 0x02
     d08:	b3 81       	ldd	r27, Z+3	; 0x03
     d0a:	bf 93       	push	r27
     d0c:	af 93       	push	r26
     d0e:	9f 93       	push	r25
     d10:	8f 93       	push	r24
     d12:	1f 92       	push	r1
     d14:	3f 93       	push	r19
     d16:	8b e6       	ldi	r24, 0x6B	; 107
     d18:	92 e0       	ldi	r25, 0x02	; 2
     d1a:	9f 93       	push	r25
     d1c:	8f 93       	push	r24
     d1e:	8e 01       	movw	r16, r28
     d20:	05 5f       	subi	r16, 0xF5	; 245
     d22:	1f 4f       	sbci	r17, 0xFF	; 255
     d24:	1f 93       	push	r17
     d26:	0f 93       	push	r16
     d28:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <sprintf>
		BTTransmitStr(msg);
     d2c:	c8 01       	movw	r24, r16
     d2e:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	f8 94       	cli
     d36:	de bf       	out	0x3e, r29	; 62
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	cd bf       	out	0x3d, r28	; 61
	}
	sei();
     d3c:	78 94       	sei
}
     d3e:	c2 59       	subi	r28, 0x92	; 146
     d40:	df 4f       	sbci	r29, 0xFF	; 255
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	f8 94       	cli
     d46:	de bf       	out	0x3e, r29	; 62
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	cd bf       	out	0x3d, r28	; 61
     d4c:	df 91       	pop	r29
     d4e:	cf 91       	pop	r28
     d50:	1f 91       	pop	r17
     d52:	0f 91       	pop	r16
     d54:	ff 90       	pop	r15
     d56:	ef 90       	pop	r14
     d58:	df 90       	pop	r13
     d5a:	08 95       	ret

00000d5c <removeEntryFromTimerQueue>:
void removeEntryFromTimerQueue(void (*_theFct) (void)){
     d5c:	bf 92       	push	r11
     d5e:	cf 92       	push	r12
     d60:	df 92       	push	r13
     d62:	ef 92       	push	r14
     d64:	ff 92       	push	r15
     d66:	0f 93       	push	r16
     d68:	1f 93       	push	r17
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
     d72:	c4 56       	subi	r28, 0x64	; 100
     d74:	d1 09       	sbc	r29, r1
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	de bf       	out	0x3e, r29	; 62
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	cd bf       	out	0x3d, r28	; 61
     d80:	8c 01       	movw	r16, r24
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
     d82:	80 91 01 01 	lds	r24, 0x0101
     d86:	88 23       	and	r24, r24
     d88:	09 f4       	brne	.+2      	; 0xd8c <removeEntryFromTimerQueue+0x30>
     d8a:	52 c0       	rjmp	.+164    	; 0xe30 <removeEntryFromTimerQueue+0xd4>
     d8c:	b1 2c       	mov	r11, r1
			TimerQueue[i].pointerFct = 0;
			TimerQueue[i].delay = 0;
			TimerQueue[i].repeatDelay = 0;
			if(debugging){
				char msg[100];
				sprintf(msg, "Entry sters din coada. de pe pozitia %d", i);
     d8e:	0f 2e       	mov	r0, r31
     d90:	f0 ea       	ldi	r31, 0xA0	; 160
     d92:	cf 2e       	mov	r12, r31
     d94:	f2 e0       	ldi	r31, 0x02	; 2
     d96:	df 2e       	mov	r13, r31
     d98:	f0 2d       	mov	r31, r0
     d9a:	ce 01       	movw	r24, r28
     d9c:	01 96       	adiw	r24, 0x01	; 1
     d9e:	7c 01       	movw	r14, r24
	sei();
}
void removeEntryFromTimerQueue(void (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct == _theFct){
     da0:	2b 2d       	mov	r18, r11
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	f9 01       	movw	r30, r18
     da6:	ee 0f       	add	r30, r30
     da8:	ff 1f       	adc	r31, r31
     daa:	c9 01       	movw	r24, r18
     dac:	88 0f       	add	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	e8 0f       	add	r30, r24
     dba:	f9 1f       	adc	r31, r25
     dbc:	e1 55       	subi	r30, 0x51	; 81
     dbe:	fc 4f       	sbci	r31, 0xFC	; 252
     dc0:	40 85       	ldd	r20, Z+8	; 0x08
     dc2:	51 85       	ldd	r21, Z+9	; 0x09
     dc4:	40 17       	cp	r20, r16
     dc6:	51 07       	cpc	r21, r17
     dc8:	69 f5       	brne	.+90     	; 0xe24 <removeEntryFromTimerQueue+0xc8>
			TimerQueue[i].pointerFct = 0;
     dca:	c9 01       	movw	r24, r18
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	88 0f       	add	r24, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	f9 01       	movw	r30, r18
     dda:	ee 0f       	add	r30, r30
     ddc:	ff 1f       	adc	r31, r31
     dde:	e8 0f       	add	r30, r24
     de0:	f9 1f       	adc	r31, r25
     de2:	e1 55       	subi	r30, 0x51	; 81
     de4:	fc 4f       	sbci	r31, 0xFC	; 252
     de6:	11 86       	std	Z+9, r1	; 0x09
     de8:	10 86       	std	Z+8, r1	; 0x08
			TimerQueue[i].delay = 0;
     dea:	10 82       	st	Z, r1
     dec:	11 82       	std	Z+1, r1	; 0x01
     dee:	12 82       	std	Z+2, r1	; 0x02
     df0:	13 82       	std	Z+3, r1	; 0x03
			TimerQueue[i].repeatDelay = 0;
     df2:	14 82       	std	Z+4, r1	; 0x04
     df4:	15 82       	std	Z+5, r1	; 0x05
     df6:	16 82       	std	Z+6, r1	; 0x06
     df8:	17 82       	std	Z+7, r1	; 0x07
			if(debugging){
     dfa:	80 91 00 01 	lds	r24, 0x0100
     dfe:	88 23       	and	r24, r24
     e00:	89 f0       	breq	.+34     	; 0xe24 <removeEntryFromTimerQueue+0xc8>
				char msg[100];
				sprintf(msg, "Entry sters din coada. de pe pozitia %d", i);
     e02:	3f 93       	push	r19
     e04:	bf 92       	push	r11
     e06:	df 92       	push	r13
     e08:	cf 92       	push	r12
     e0a:	ff 92       	push	r15
     e0c:	ef 92       	push	r14
     e0e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <sprintf>
				BTTransmitStr(msg);
     e12:	c7 01       	movw	r24, r14
     e14:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
	}
	sei();
}
void removeEntryFromTimerQueue(void (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
     e24:	b3 94       	inc	r11
     e26:	80 91 01 01 	lds	r24, 0x0101
     e2a:	b8 16       	cp	r11, r24
     e2c:	08 f4       	brcc	.+2      	; 0xe30 <removeEntryFromTimerQueue+0xd4>
     e2e:	b8 cf       	rjmp	.-144    	; 0xda0 <removeEntryFromTimerQueue+0x44>
				sprintf(msg, "Entry sters din coada. de pe pozitia %d", i);
				BTTransmitStr(msg);
			}
		}
	}
}
     e30:	cc 59       	subi	r28, 0x9C	; 156
     e32:	df 4f       	sbci	r29, 0xFF	; 255
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	f8 94       	cli
     e38:	de bf       	out	0x3e, r29	; 62
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	cd bf       	out	0x3d, r28	; 61
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	1f 91       	pop	r17
     e44:	0f 91       	pop	r16
     e46:	ff 90       	pop	r15
     e48:	ef 90       	pop	r14
     e4a:	df 90       	pop	r13
     e4c:	cf 90       	pop	r12
     e4e:	bf 90       	pop	r11
     e50:	08 95       	ret

00000e52 <existsEntryInTimerQueue>:

uint8_t existsEntryInTimerQueue(void (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
     e52:	60 91 01 01 	lds	r22, 0x0101
     e56:	66 23       	and	r22, r22
     e58:	19 f1       	breq	.+70     	; 0xea0 <existsEntryInTimerQueue+0x4e>
		if(TimerQueue[i].pointerFct == _theFct){
     e5a:	20 91 b7 03 	lds	r18, 0x03B7
     e5e:	30 91 b8 03 	lds	r19, 0x03B8
     e62:	28 17       	cp	r18, r24
     e64:	39 07       	cpc	r19, r25
     e66:	f1 f0       	breq	.+60     	; 0xea4 <existsEntryInTimerQueue+0x52>
     e68:	21 e0       	ldi	r18, 0x01	; 1
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	15 c0       	rjmp	.+42     	; 0xe98 <existsEntryInTimerQueue+0x46>
     e6e:	f9 01       	movw	r30, r18
     e70:	ee 0f       	add	r30, r30
     e72:	ff 1f       	adc	r31, r31
     e74:	a9 01       	movw	r20, r18
     e76:	44 0f       	add	r20, r20
     e78:	55 1f       	adc	r21, r21
     e7a:	44 0f       	add	r20, r20
     e7c:	55 1f       	adc	r21, r21
     e7e:	44 0f       	add	r20, r20
     e80:	55 1f       	adc	r21, r21
     e82:	e4 0f       	add	r30, r20
     e84:	f5 1f       	adc	r31, r21
     e86:	e1 55       	subi	r30, 0x51	; 81
     e88:	fc 4f       	sbci	r31, 0xFC	; 252
     e8a:	40 85       	ldd	r20, Z+8	; 0x08
     e8c:	51 85       	ldd	r21, Z+9	; 0x09
     e8e:	2f 5f       	subi	r18, 0xFF	; 255
     e90:	3f 4f       	sbci	r19, 0xFF	; 255
     e92:	48 17       	cp	r20, r24
     e94:	59 07       	cpc	r21, r25
     e96:	41 f0       	breq	.+16     	; 0xea8 <existsEntryInTimerQueue+0x56>
	}
}

uint8_t existsEntryInTimerQueue(void (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
     e98:	26 17       	cp	r18, r22
     e9a:	48 f3       	brcs	.-46     	; 0xe6e <existsEntryInTimerQueue+0x1c>
		if(TimerQueue[i].pointerFct == _theFct){
			return 1;
		}
	}
	return 0;
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	08 95       	ret
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	08 95       	ret

uint8_t existsEntryInTimerQueue(void (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct == _theFct){
			return 1;
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	08 95       	ret
     ea8:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
     eaa:	08 95       	ret

00000eac <timePassed>:

//se apeleaza din intrerupere (cate microsecunde au trecut)
//pentru fiecare functie(valida) din queue se scade din delay numarul de microsecunde care a trecut

void timePassed(uint32_t passed_us){
     eac:	8f 92       	push	r8
     eae:	9f 92       	push	r9
     eb0:	af 92       	push	r10
     eb2:	bf 92       	push	r11
     eb4:	df 92       	push	r13
     eb6:	ef 92       	push	r14
     eb8:	ff 92       	push	r15
     eba:	0f 93       	push	r16
     ebc:	1f 93       	push	r17
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
     ec2:	10 91 01 01 	lds	r17, 0x0101
     ec6:	11 23       	and	r17, r17
     ec8:	09 f4       	brne	.+2      	; 0xecc <timePassed+0x20>
     eca:	7b c0       	rjmp	.+246    	; 0xfc2 <timePassed+0x116>
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	30 e0       	ldi	r19, 0x00	; 0
		if(TimerQueue[i].pointerFct != 0){
			if(TimerQueue[i].delay > 0)
				TimerQueue[i].delay = TimerQueue[i].delay > passed_us ? TimerQueue[i].delay-passed_us : 0;
     ed0:	d1 2c       	mov	r13, r1
     ed2:	e1 2c       	mov	r14, r1
     ed4:	f1 2c       	mov	r15, r1
     ed6:	00 e0       	ldi	r16, 0x00	; 0
//pentru fiecare functie(valida) din queue se scade din delay numarul de microsecunde care a trecut

void timePassed(uint32_t passed_us){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct != 0){
     ed8:	f9 01       	movw	r30, r18
     eda:	a9 01       	movw	r20, r18
     edc:	44 0f       	add	r20, r20
     ede:	55 1f       	adc	r21, r21
     ee0:	44 0f       	add	r20, r20
     ee2:	55 1f       	adc	r21, r21
     ee4:	44 0f       	add	r20, r20
     ee6:	55 1f       	adc	r21, r21
     ee8:	d9 01       	movw	r26, r18
     eea:	aa 0f       	add	r26, r26
     eec:	bb 1f       	adc	r27, r27
     eee:	a4 0f       	add	r26, r20
     ef0:	b5 1f       	adc	r27, r21
     ef2:	a1 55       	subi	r26, 0x51	; 81
     ef4:	bc 4f       	sbci	r27, 0xFC	; 252
     ef6:	18 96       	adiw	r26, 0x08	; 8
     ef8:	4d 91       	ld	r20, X+
     efa:	5c 91       	ld	r21, X
     efc:	19 97       	sbiw	r26, 0x09	; 9
     efe:	45 2b       	or	r20, r21
     f00:	09 f4       	brne	.+2      	; 0xf04 <timePassed+0x58>
     f02:	5a c0       	rjmp	.+180    	; 0xfb8 <timePassed+0x10c>
			if(TimerQueue[i].delay > 0)
     f04:	a9 01       	movw	r20, r18
     f06:	44 0f       	add	r20, r20
     f08:	55 1f       	adc	r21, r21
     f0a:	44 0f       	add	r20, r20
     f0c:	55 1f       	adc	r21, r21
     f0e:	44 0f       	add	r20, r20
     f10:	55 1f       	adc	r21, r21
     f12:	d9 01       	movw	r26, r18
     f14:	aa 0f       	add	r26, r26
     f16:	bb 1f       	adc	r27, r27
     f18:	a4 0f       	add	r26, r20
     f1a:	b5 1f       	adc	r27, r21
     f1c:	a1 55       	subi	r26, 0x51	; 81
     f1e:	bc 4f       	sbci	r27, 0xFC	; 252
     f20:	8d 90       	ld	r8, X+
     f22:	9d 90       	ld	r9, X+
     f24:	ad 90       	ld	r10, X+
     f26:	bc 90       	ld	r11, X
     f28:	89 28       	or	r8, r9
     f2a:	8a 28       	or	r8, r10
     f2c:	8b 28       	or	r8, r11
     f2e:	09 f4       	brne	.+2      	; 0xf32 <timePassed+0x86>
     f30:	43 c0       	rjmp	.+134    	; 0xfb8 <timePassed+0x10c>
				TimerQueue[i].delay = TimerQueue[i].delay > passed_us ? TimerQueue[i].delay-passed_us : 0;
     f32:	a9 01       	movw	r20, r18
     f34:	44 0f       	add	r20, r20
     f36:	55 1f       	adc	r21, r21
     f38:	44 0f       	add	r20, r20
     f3a:	55 1f       	adc	r21, r21
     f3c:	44 0f       	add	r20, r20
     f3e:	55 1f       	adc	r21, r21
     f40:	d9 01       	movw	r26, r18
     f42:	aa 0f       	add	r26, r26
     f44:	bb 1f       	adc	r27, r27
     f46:	a4 0f       	add	r26, r20
     f48:	b5 1f       	adc	r27, r21
     f4a:	a1 55       	subi	r26, 0x51	; 81
     f4c:	bc 4f       	sbci	r27, 0xFC	; 252
     f4e:	8d 90       	ld	r8, X+
     f50:	9d 90       	ld	r9, X+
     f52:	ad 90       	ld	r10, X+
     f54:	bc 90       	ld	r11, X
     f56:	68 15       	cp	r22, r8
     f58:	79 05       	cpc	r23, r9
     f5a:	8a 05       	cpc	r24, r10
     f5c:	9b 05       	cpc	r25, r11
     f5e:	b8 f4       	brcc	.+46     	; 0xf8e <timePassed+0xe2>
     f60:	a9 01       	movw	r20, r18
     f62:	44 0f       	add	r20, r20
     f64:	55 1f       	adc	r21, r21
     f66:	44 0f       	add	r20, r20
     f68:	55 1f       	adc	r21, r21
     f6a:	44 0f       	add	r20, r20
     f6c:	55 1f       	adc	r21, r21
     f6e:	d9 01       	movw	r26, r18
     f70:	aa 0f       	add	r26, r26
     f72:	bb 1f       	adc	r27, r27
     f74:	a4 0f       	add	r26, r20
     f76:	b5 1f       	adc	r27, r21
     f78:	a1 55       	subi	r26, 0x51	; 81
     f7a:	bc 4f       	sbci	r27, 0xFC	; 252
     f7c:	8d 90       	ld	r8, X+
     f7e:	9d 90       	ld	r9, X+
     f80:	ad 90       	ld	r10, X+
     f82:	bc 90       	ld	r11, X
     f84:	86 1a       	sub	r8, r22
     f86:	97 0a       	sbc	r9, r23
     f88:	a8 0a       	sbc	r10, r24
     f8a:	b9 0a       	sbc	r11, r25
     f8c:	04 c0       	rjmp	.+8      	; 0xf96 <timePassed+0xea>
     f8e:	8d 2c       	mov	r8, r13
     f90:	9e 2c       	mov	r9, r14
     f92:	af 2c       	mov	r10, r15
     f94:	b0 2e       	mov	r11, r16
     f96:	ef 01       	movw	r28, r30
     f98:	cc 0f       	add	r28, r28
     f9a:	dd 1f       	adc	r29, r29
     f9c:	ee 0f       	add	r30, r30
     f9e:	ff 1f       	adc	r31, r31
     fa0:	ee 0f       	add	r30, r30
     fa2:	ff 1f       	adc	r31, r31
     fa4:	ee 0f       	add	r30, r30
     fa6:	ff 1f       	adc	r31, r31
     fa8:	ec 0f       	add	r30, r28
     faa:	fd 1f       	adc	r31, r29
     fac:	e1 55       	subi	r30, 0x51	; 81
     fae:	fc 4f       	sbci	r31, 0xFC	; 252
     fb0:	80 82       	st	Z, r8
     fb2:	91 82       	std	Z+1, r9	; 0x01
     fb4:	a2 82       	std	Z+2, r10	; 0x02
     fb6:	b3 82       	std	Z+3, r11	; 0x03
     fb8:	2f 5f       	subi	r18, 0xFF	; 255
     fba:	3f 4f       	sbci	r19, 0xFF	; 255
//se apeleaza din intrerupere (cate microsecunde au trecut)
//pentru fiecare functie(valida) din queue se scade din delay numarul de microsecunde care a trecut

void timePassed(uint32_t passed_us){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
     fbc:	21 17       	cp	r18, r17
     fbe:	08 f4       	brcc	.+2      	; 0xfc2 <timePassed+0x116>
     fc0:	8b cf       	rjmp	.-234    	; 0xed8 <timePassed+0x2c>
		if(TimerQueue[i].pointerFct != 0){
			if(TimerQueue[i].delay > 0)
				TimerQueue[i].delay = TimerQueue[i].delay > passed_us ? TimerQueue[i].delay-passed_us : 0;
		}
	}
}
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	1f 91       	pop	r17
     fc8:	0f 91       	pop	r16
     fca:	ff 90       	pop	r15
     fcc:	ef 90       	pop	r14
     fce:	df 90       	pop	r13
     fd0:	bf 90       	pop	r11
     fd2:	af 90       	pop	r10
     fd4:	9f 90       	pop	r9
     fd6:	8f 90       	pop	r8
     fd8:	08 95       	ret

00000fda <checkTimeQueue>:

//se apeleaza din main loop
//verifica daca sunt functii care trebuie apelate (daca delay-ul lor a ajuns la 0)
void checkTimeQueue(void){
     fda:	ef 92       	push	r14
     fdc:	ff 92       	push	r15
     fde:	1f 93       	push	r17
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
	cli();
     fe4:	f8 94       	cli
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
     fe6:	80 91 01 01 	lds	r24, 0x0101
     fea:	88 23       	and	r24, r24
     fec:	09 f4       	brne	.+2      	; 0xff0 <checkTimeQueue+0x16>
     fee:	57 c0       	rjmp	.+174    	; 0x109e <checkTimeQueue+0xc4>
     ff0:	10 e0       	ldi	r17, 0x00	; 0
		if(TimerQueue[i].pointerFct != 0){
     ff2:	c1 2f       	mov	r28, r17
     ff4:	d0 e0       	ldi	r29, 0x00	; 0
     ff6:	fe 01       	movw	r30, r28
     ff8:	ee 0f       	add	r30, r30
     ffa:	ff 1f       	adc	r31, r31
     ffc:	ce 01       	movw	r24, r28
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	e8 0f       	add	r30, r24
    100c:	f9 1f       	adc	r31, r25
    100e:	e1 55       	subi	r30, 0x51	; 81
    1010:	fc 4f       	sbci	r31, 0xFC	; 252
    1012:	80 85       	ldd	r24, Z+8	; 0x08
    1014:	91 85       	ldd	r25, Z+9	; 0x09
    1016:	89 2b       	or	r24, r25
    1018:	e1 f1       	breq	.+120    	; 0x1092 <checkTimeQueue+0xb8>
			if(TimerQueue[i].delay == 0){
    101a:	ce 01       	movw	r24, r28
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	fe 01       	movw	r30, r28
    102a:	ee 0f       	add	r30, r30
    102c:	ff 1f       	adc	r31, r31
    102e:	e8 0f       	add	r30, r24
    1030:	f9 1f       	adc	r31, r25
    1032:	e1 55       	subi	r30, 0x51	; 81
    1034:	fc 4f       	sbci	r31, 0xFC	; 252
    1036:	80 81       	ld	r24, Z
    1038:	91 81       	ldd	r25, Z+1	; 0x01
    103a:	a2 81       	ldd	r26, Z+2	; 0x02
    103c:	b3 81       	ldd	r27, Z+3	; 0x03
    103e:	89 2b       	or	r24, r25
    1040:	8a 2b       	or	r24, r26
    1042:	8b 2b       	or	r24, r27
    1044:	31 f5       	brne	.+76     	; 0x1092 <checkTimeQueue+0xb8>
				TimerQueue[i].pointerFct();
    1046:	7f 01       	movw	r14, r30
    1048:	00 84       	ldd	r0, Z+8	; 0x08
    104a:	f1 85       	ldd	r31, Z+9	; 0x09
    104c:	e0 2d       	mov	r30, r0
    104e:	09 95       	icall
				if(TimerQueue[i].repeatDelay)
    1050:	f7 01       	movw	r30, r14
    1052:	84 81       	ldd	r24, Z+4	; 0x04
    1054:	95 81       	ldd	r25, Z+5	; 0x05
    1056:	a6 81       	ldd	r26, Z+6	; 0x06
    1058:	b7 81       	ldd	r27, Z+7	; 0x07
    105a:	89 2b       	or	r24, r25
    105c:	8a 2b       	or	r24, r26
    105e:	8b 2b       	or	r24, r27
    1060:	49 f0       	breq	.+18     	; 0x1074 <checkTimeQueue+0x9a>
					TimerQueue[i].delay = TimerQueue[i].repeatDelay;
    1062:	84 81       	ldd	r24, Z+4	; 0x04
    1064:	95 81       	ldd	r25, Z+5	; 0x05
    1066:	a6 81       	ldd	r26, Z+6	; 0x06
    1068:	b7 81       	ldd	r27, Z+7	; 0x07
    106a:	80 83       	st	Z, r24
    106c:	91 83       	std	Z+1, r25	; 0x01
    106e:	a2 83       	std	Z+2, r26	; 0x02
    1070:	b3 83       	std	Z+3, r27	; 0x03
    1072:	0f c0       	rjmp	.+30     	; 0x1092 <checkTimeQueue+0xb8>
				else
					TimerQueue[i].pointerFct = 0;
    1074:	ce 01       	movw	r24, r28
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	cc 0f       	add	r28, r28
    107c:	dd 1f       	adc	r29, r29
    107e:	cc 0f       	add	r28, r28
    1080:	dd 1f       	adc	r29, r29
    1082:	cc 0f       	add	r28, r28
    1084:	dd 1f       	adc	r29, r29
    1086:	c8 0f       	add	r28, r24
    1088:	d9 1f       	adc	r29, r25
    108a:	c1 55       	subi	r28, 0x51	; 81
    108c:	dc 4f       	sbci	r29, 0xFC	; 252
    108e:	19 86       	std	Y+9, r1	; 0x09
    1090:	18 86       	std	Y+8, r1	; 0x08
//se apeleaza din main loop
//verifica daca sunt functii care trebuie apelate (daca delay-ul lor a ajuns la 0)
void checkTimeQueue(void){
	cli();
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
    1092:	1f 5f       	subi	r17, 0xFF	; 255
    1094:	80 91 01 01 	lds	r24, 0x0101
    1098:	18 17       	cp	r17, r24
    109a:	08 f4       	brcc	.+2      	; 0x109e <checkTimeQueue+0xc4>
    109c:	aa cf       	rjmp	.-172    	; 0xff2 <checkTimeQueue+0x18>
				else
					TimerQueue[i].pointerFct = 0;
			}
		}
	}
	sei();
    109e:	78 94       	sei
}
    10a0:	df 91       	pop	r29
    10a2:	cf 91       	pop	r28
    10a4:	1f 91       	pop	r17
    10a6:	ff 90       	pop	r15
    10a8:	ef 90       	pop	r14
    10aa:	08 95       	ret

000010ac <blinkLedD6_v1>:
#include "Car/Engines.h"
#include "PID/PID1.h"

volatile uint8_t e_stins = 0;
void blinkLedD6_v1(){
	if(!e_stins)
    10ac:	80 91 69 03 	lds	r24, 0x0369
    10b0:	81 11       	cpse	r24, r1
    10b2:	04 c0       	rjmp	.+8      	; 0x10bc <blinkLedD6_v1+0x10>
		PORTD ^= 1<<PIND6;
    10b4:	9b b1       	in	r25, 0x0b	; 11
    10b6:	80 e4       	ldi	r24, 0x40	; 64
    10b8:	89 27       	eor	r24, r25
    10ba:	8b b9       	out	0x0b, r24	; 11
    10bc:	08 95       	ret

000010be <ledAction>:
void ledAction(char act){
	//char msg[] = "led action:  ";
	//msg[strlen(msg)-1]= act+'0';
	//BTTransmitStr(msg);
	
	switch(act){
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	71 f0       	breq	.+28     	; 0x10de <ledAction+0x20>
    10c2:	18 f0       	brcs	.+6      	; 0x10ca <ledAction+0xc>
    10c4:	82 30       	cpi	r24, 0x02	; 2
    10c6:	a9 f0       	breq	.+42     	; 0x10f2 <ledAction+0x34>
    10c8:	08 95       	ret
		case 0:
			removeEntryFromTimerQueue(&blinkLedD6_v1);
    10ca:	86 e5       	ldi	r24, 0x56	; 86
    10cc:	98 e0       	ldi	r25, 0x08	; 8
    10ce:	0e 94 ae 06 	call	0xd5c	; 0xd5c <removeEntryFromTimerQueue>
			PORTD &=~ (1<<PIND6);
    10d2:	5e 98       	cbi	0x0b, 6	; 11
			//shouldBlink = 0;
			BTTransmitStr("ledul a fost stins.");
    10d4:	88 ec       	ldi	r24, 0xC8	; 200
    10d6:	92 e0       	ldi	r25, 0x02	; 2
    10d8:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
			break;
    10dc:	08 95       	ret
		case 1:
			removeEntryFromTimerQueue(&blinkLedD6_v1);
    10de:	86 e5       	ldi	r24, 0x56	; 86
    10e0:	98 e0       	ldi	r25, 0x08	; 8
    10e2:	0e 94 ae 06 	call	0xd5c	; 0xd5c <removeEntryFromTimerQueue>
			PORTD |= 1<<PIND6;
    10e6:	5e 9a       	sbi	0x0b, 6	; 11
			//shouldBlink = 0;
			BTTransmitStr("ledul a fost aprins.");
    10e8:	8c ed       	ldi	r24, 0xDC	; 220
    10ea:	92 e0       	ldi	r25, 0x02	; 2
    10ec:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
			break;
    10f0:	08 95       	ret
		
		case 2:
			addEntryToTimerQueue(&blinkLedD6_v1, (1000UL * 1000UL), Periodic);
    10f2:	21 e0       	ldi	r18, 0x01	; 1
    10f4:	40 e4       	ldi	r20, 0x40	; 64
    10f6:	52 e4       	ldi	r21, 0x42	; 66
    10f8:	6f e0       	ldi	r22, 0x0F	; 15
    10fa:	70 e0       	ldi	r23, 0x00	; 0
    10fc:	86 e5       	ldi	r24, 0x56	; 86
    10fe:	98 e0       	ldi	r25, 0x08	; 8
    1100:	0e 94 ad 05 	call	0xb5a	; 0xb5a <addEntryToTimerQueue>
			BTTransmitStr("ledul va 'blincari'.");
    1104:	81 ef       	ldi	r24, 0xF1	; 241
    1106:	92 e0       	ldi	r25, 0x02	; 2
    1108:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
    110c:	08 95       	ret

0000110e <initLeds>:
			break;
	}
}

void initLeds(){	
	DDRD |=1<<PIND6;
    110e:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |=1<<PIND5;
    1110:	55 9a       	sbi	0x0a, 5	; 10
    1112:	08 95       	ret

00001114 <ReadSensor0>:
}
extern uint32_t time;

void ReadSensor0(){
    1114:	0f 93       	push	r16
    1116:	1f 93       	push	r17
    1118:	cf 93       	push	r28
    111a:	df 93       	push	r29
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
    1120:	c6 54       	subi	r28, 0x46	; 70
    1122:	d1 09       	sbc	r29, r1
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	de bf       	out	0x3e, r29	; 62
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	cd bf       	out	0x3d, r28	; 61
	char msg[70];
	//resetSensorQueue(0);
	uint16_t x = getValueOfSensor(0);
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <getValueOfSensor>
	sprintf(msg, "sensor #0: %d", x);	
    1134:	9f 93       	push	r25
    1136:	8f 93       	push	r24
    1138:	86 e0       	ldi	r24, 0x06	; 6
    113a:	93 e0       	ldi	r25, 0x03	; 3
    113c:	9f 93       	push	r25
    113e:	8f 93       	push	r24
    1140:	8e 01       	movw	r16, r28
    1142:	0f 5f       	subi	r16, 0xFF	; 255
    1144:	1f 4f       	sbci	r17, 0xFF	; 255
    1146:	1f 93       	push	r17
    1148:	0f 93       	push	r16
    114a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <sprintf>
	BTTransmitStr(msg);
    114e:	c8 01       	movw	r24, r16
    1150:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
}
    1160:	ca 5b       	subi	r28, 0xBA	; 186
    1162:	df 4f       	sbci	r29, 0xFF	; 255
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	f8 94       	cli
    1168:	de bf       	out	0x3e, r29	; 62
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	cd bf       	out	0x3d, r28	; 61
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	1f 91       	pop	r17
    1174:	0f 91       	pop	r16
    1176:	08 95       	ret

00001178 <fctSmechera>:
	sprintf(msg, "t: %lu", time);
	BTTransmitStr(msg);
}
uint8_t started = 0, stopped = 0, reload = 0;
volatile uint32_t lastValues[4];
void fctSmechera(){
    1178:	cf 92       	push	r12
    117a:	df 92       	push	r13
    117c:	ef 92       	push	r14
    117e:	ff 92       	push	r15
    1180:	0f 93       	push	r16
    1182:	1f 93       	push	r17
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
	if(reload){
    1188:	80 91 66 03 	lds	r24, 0x0366
    118c:	88 23       	and	r24, r24
    118e:	39 f0       	breq	.+14     	; 0x119e <fctSmechera+0x26>
		reload = 0;
    1190:	10 92 66 03 	sts	0x0366, r1
		started = stopped = 0;
    1194:	10 92 67 03 	sts	0x0367, r1
    1198:	10 92 68 03 	sts	0x0368, r1
		return;
    119c:	9f c0       	rjmp	.+318    	; 0x12dc <fctSmechera+0x164>
	}
	if(!started){
    119e:	80 91 68 03 	lds	r24, 0x0368
    11a2:	81 11       	cpse	r24, r1
    11a4:	2c c0       	rjmp	.+88     	; 0x11fe <fctSmechera+0x86>
		started = 1;
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	80 93 68 03 	sts	0x0368, r24
		lastValues[0] = lastValues[1] = lastValues[2] = lastValues[3] = 0;
    11ac:	10 92 83 04 	sts	0x0483, r1
    11b0:	10 92 84 04 	sts	0x0484, r1
    11b4:	10 92 85 04 	sts	0x0485, r1
    11b8:	10 92 86 04 	sts	0x0486, r1
    11bc:	10 92 7f 04 	sts	0x047F, r1
    11c0:	10 92 80 04 	sts	0x0480, r1
    11c4:	10 92 81 04 	sts	0x0481, r1
    11c8:	10 92 82 04 	sts	0x0482, r1
    11cc:	10 92 7b 04 	sts	0x047B, r1
    11d0:	10 92 7c 04 	sts	0x047C, r1
    11d4:	10 92 7d 04 	sts	0x047D, r1
    11d8:	10 92 7e 04 	sts	0x047E, r1
    11dc:	10 92 77 04 	sts	0x0477, r1
    11e0:	10 92 78 04 	sts	0x0478, r1
    11e4:	10 92 79 04 	sts	0x0479, r1
    11e8:	10 92 7a 04 	sts	0x047A, r1
		goFront(60, 175);
    11ec:	6f ea       	ldi	r22, 0xAF	; 175
    11ee:	8c e3       	ldi	r24, 0x3C	; 60
    11f0:	0e 94 5f 02 	call	0x4be	; 0x4be <goFront>
		BTTransmitStr("started!");
    11f4:	84 e1       	ldi	r24, 0x14	; 20
    11f6:	93 e0       	ldi	r25, 0x03	; 3
    11f8:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
		return;
    11fc:	6f c0       	rjmp	.+222    	; 0x12dc <fctSmechera+0x164>
	}
	if(!stopped){
    11fe:	80 91 67 03 	lds	r24, 0x0367
    1202:	81 11       	cpse	r24, r1
    1204:	6b c0       	rjmp	.+214    	; 0x12dc <fctSmechera+0x164>
		lastValues[0]=lastValues[1];
    1206:	0f 2e       	mov	r0, r31
    1208:	fb e7       	ldi	r31, 0x7B	; 123
    120a:	ef 2e       	mov	r14, r31
    120c:	f4 e0       	ldi	r31, 0x04	; 4
    120e:	ff 2e       	mov	r15, r31
    1210:	f0 2d       	mov	r31, r0
    1212:	f7 01       	movw	r30, r14
    1214:	80 81       	ld	r24, Z
    1216:	91 81       	ldd	r25, Z+1	; 0x01
    1218:	a2 81       	ldd	r26, Z+2	; 0x02
    121a:	b3 81       	ldd	r27, Z+3	; 0x03
    121c:	0f 2e       	mov	r0, r31
    121e:	f7 e7       	ldi	r31, 0x77	; 119
    1220:	cf 2e       	mov	r12, r31
    1222:	f4 e0       	ldi	r31, 0x04	; 4
    1224:	df 2e       	mov	r13, r31
    1226:	f0 2d       	mov	r31, r0
    1228:	f6 01       	movw	r30, r12
    122a:	80 83       	st	Z, r24
    122c:	91 83       	std	Z+1, r25	; 0x01
    122e:	a2 83       	std	Z+2, r26	; 0x02
    1230:	b3 83       	std	Z+3, r27	; 0x03
		lastValues[1]=lastValues[2];
    1232:	0f e7       	ldi	r16, 0x7F	; 127
    1234:	14 e0       	ldi	r17, 0x04	; 4
    1236:	f8 01       	movw	r30, r16
    1238:	80 81       	ld	r24, Z
    123a:	91 81       	ldd	r25, Z+1	; 0x01
    123c:	a2 81       	ldd	r26, Z+2	; 0x02
    123e:	b3 81       	ldd	r27, Z+3	; 0x03
    1240:	f7 01       	movw	r30, r14
    1242:	80 83       	st	Z, r24
    1244:	91 83       	std	Z+1, r25	; 0x01
    1246:	a2 83       	std	Z+2, r26	; 0x02
    1248:	b3 83       	std	Z+3, r27	; 0x03
		lastValues[2]=lastValues[3];
    124a:	c3 e8       	ldi	r28, 0x83	; 131
    124c:	d4 e0       	ldi	r29, 0x04	; 4
    124e:	88 81       	ld	r24, Y
    1250:	99 81       	ldd	r25, Y+1	; 0x01
    1252:	aa 81       	ldd	r26, Y+2	; 0x02
    1254:	bb 81       	ldd	r27, Y+3	; 0x03
    1256:	f8 01       	movw	r30, r16
    1258:	80 83       	st	Z, r24
    125a:	91 83       	std	Z+1, r25	; 0x01
    125c:	a2 83       	std	Z+2, r26	; 0x02
    125e:	b3 83       	std	Z+3, r27	; 0x03
		lastValues[3] = getValueOfSensor(0);
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <getValueOfSensor>
    1266:	a0 e0       	ldi	r26, 0x00	; 0
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	88 83       	st	Y, r24
    126c:	99 83       	std	Y+1, r25	; 0x01
    126e:	aa 83       	std	Y+2, r26	; 0x02
    1270:	bb 83       	std	Y+3, r27	; 0x03
		
		if( (lastValues[0] + lastValues[1] + lastValues[2] + lastValues[3])/4 > 300){
    1272:	f6 01       	movw	r30, r12
    1274:	80 81       	ld	r24, Z
    1276:	91 81       	ldd	r25, Z+1	; 0x01
    1278:	a2 81       	ldd	r26, Z+2	; 0x02
    127a:	b3 81       	ldd	r27, Z+3	; 0x03
    127c:	f7 01       	movw	r30, r14
    127e:	c0 80       	ld	r12, Z
    1280:	d1 80       	ldd	r13, Z+1	; 0x01
    1282:	e2 80       	ldd	r14, Z+2	; 0x02
    1284:	f3 80       	ldd	r15, Z+3	; 0x03
    1286:	f8 01       	movw	r30, r16
    1288:	00 81       	ld	r16, Z
    128a:	11 81       	ldd	r17, Z+1	; 0x01
    128c:	22 81       	ldd	r18, Z+2	; 0x02
    128e:	33 81       	ldd	r19, Z+3	; 0x03
    1290:	48 81       	ld	r20, Y
    1292:	59 81       	ldd	r21, Y+1	; 0x01
    1294:	6a 81       	ldd	r22, Y+2	; 0x02
    1296:	7b 81       	ldd	r23, Y+3	; 0x03
    1298:	8c 0d       	add	r24, r12
    129a:	9d 1d       	adc	r25, r13
    129c:	ae 1d       	adc	r26, r14
    129e:	bf 1d       	adc	r27, r15
    12a0:	80 0f       	add	r24, r16
    12a2:	91 1f       	adc	r25, r17
    12a4:	a2 1f       	adc	r26, r18
    12a6:	b3 1f       	adc	r27, r19
    12a8:	84 0f       	add	r24, r20
    12aa:	95 1f       	adc	r25, r21
    12ac:	a6 1f       	adc	r26, r22
    12ae:	b7 1f       	adc	r27, r23
    12b0:	84 3b       	cpi	r24, 0xB4	; 180
    12b2:	94 40       	sbci	r25, 0x04	; 4
    12b4:	a1 05       	cpc	r26, r1
    12b6:	b1 05       	cpc	r27, r1
    12b8:	88 f0       	brcs	.+34     	; 0x12dc <fctSmechera+0x164>
			stopEngines();
    12ba:	0e 94 08 02 	call	0x410	; 0x410 <stopEngines>
			removeEntryFromTimerQueue(&stopEngines);
    12be:	88 e0       	ldi	r24, 0x08	; 8
    12c0:	92 e0       	ldi	r25, 0x02	; 2
    12c2:	0e 94 ae 06 	call	0xd5c	; 0xd5c <removeEntryFromTimerQueue>
			removeEntryFromTimerQueue(&fctSmechera); 
    12c6:	8c eb       	ldi	r24, 0xBC	; 188
    12c8:	98 e0       	ldi	r25, 0x08	; 8
    12ca:	0e 94 ae 06 	call	0xd5c	; 0xd5c <removeEntryFromTimerQueue>
			ReadSensor0();
    12ce:	0e 94 8a 08 	call	0x1114	; 0x1114 <ReadSensor0>
			stopped = 1;
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	80 93 67 03 	sts	0x0367, r24
			reload = 1;
    12d8:	80 93 66 03 	sts	0x0366, r24
		}
	}
}
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	1f 91       	pop	r17
    12e2:	0f 91       	pop	r16
    12e4:	ff 90       	pop	r15
    12e6:	ef 90       	pop	r14
    12e8:	df 90       	pop	r13
    12ea:	cf 90       	pop	r12
    12ec:	08 95       	ret

000012ee <ReadSensor1>:
	//resetSensorQueue(0);
	uint16_t x = getValueOfSensor(0);
	sprintf(msg, "sensor #0: %d", x);	
	BTTransmitStr(msg);
}
void ReadSensor1(){
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	c6 54       	subi	r28, 0x46	; 70
    12fc:	d1 09       	sbc	r29, r1
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	f8 94       	cli
    1302:	de bf       	out	0x3e, r29	; 62
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	cd bf       	out	0x3d, r28	; 61
	char msg[70];
	//resetSensorQueue(1);
	uint16_t x = getValueOfSensor(1);
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <getValueOfSensor>
	sprintf(msg, "sensor #1: %d", x);
    130e:	9f 93       	push	r25
    1310:	8f 93       	push	r24
    1312:	8d e1       	ldi	r24, 0x1D	; 29
    1314:	93 e0       	ldi	r25, 0x03	; 3
    1316:	9f 93       	push	r25
    1318:	8f 93       	push	r24
    131a:	8e 01       	movw	r16, r28
    131c:	0f 5f       	subi	r16, 0xFF	; 255
    131e:	1f 4f       	sbci	r17, 0xFF	; 255
    1320:	1f 93       	push	r17
    1322:	0f 93       	push	r16
    1324:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <sprintf>
	BTTransmitStr(msg);
    1328:	c8 01       	movw	r24, r16
    132a:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
}
    133a:	ca 5b       	subi	r28, 0xBA	; 186
    133c:	df 4f       	sbci	r29, 0xFF	; 255
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	f8 94       	cli
    1342:	de bf       	out	0x3e, r29	; 62
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	cd bf       	out	0x3d, r28	; 61
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	1f 91       	pop	r17
    134e:	0f 91       	pop	r16
    1350:	08 95       	ret

00001352 <doTimer>:
			reload = 1;
		}
	}
}
volatile uint8_t state=-1;
void doTimer(){
    1352:	cf 92       	push	r12
    1354:	df 92       	push	r13
    1356:	ef 92       	push	r14
    1358:	ff 92       	push	r15
    135a:	0f 93       	push	r16
    135c:	1f 93       	push	r17
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	69 97       	sbiw	r28, 0x19	; 25
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	f8 94       	cli
    136c:	de bf       	out	0x3e, r29	; 62
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	cd bf       	out	0x3d, r28	; 61
	uint16_t sensorValue = getValueOfSensor(1);
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <getValueOfSensor>
    1378:	8c 01       	movw	r16, r24
	if(sensorValue < 430 && 430 - sensorValue >15)
    137a:	0e 3a       	cpi	r16, 0xAE	; 174
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	18 07       	cpc	r17, r24
    1380:	48 f4       	brcc	.+18     	; 0x1394 <doTimer+0x42>
    1382:	8e ea       	ldi	r24, 0xAE	; 174
    1384:	91 e0       	ldi	r25, 0x01	; 1
    1386:	80 1b       	sub	r24, r16
    1388:	91 0b       	sbc	r25, r17
    138a:	40 97       	sbiw	r24, 0x10	; 16
    138c:	18 f0       	brcs	.+6      	; 0x1394 <doTimer+0x42>
		sensorValue +=15;
    138e:	01 5f       	subi	r16, 0xF1	; 241
    1390:	1f 4f       	sbci	r17, 0xFF	; 255
    1392:	06 c0       	rjmp	.+12     	; 0x13a0 <doTimer+0x4e>
	else
		if(sensorValue > 430 && sensorValue-430 > 15)
    1394:	0e 3b       	cpi	r16, 0xBE	; 190
    1396:	91 e0       	ldi	r25, 0x01	; 1
    1398:	19 07       	cpc	r17, r25
    139a:	10 f0       	brcs	.+4      	; 0x13a0 <doTimer+0x4e>
			sensorValue-=15;
    139c:	0f 50       	subi	r16, 0x0F	; 15
    139e:	11 09       	sbc	r17, r1

	float diff = PID1cal(430, sensorValue);
    13a0:	b8 01       	movw	r22, r16
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__floatunsisf>
    13aa:	9b 01       	movw	r18, r22
    13ac:	ac 01       	movw	r20, r24
    13ae:	60 e0       	ldi	r22, 0x00	; 0
    13b0:	70 e0       	ldi	r23, 0x00	; 0
    13b2:	87 ed       	ldi	r24, 0xD7	; 215
    13b4:	93 e4       	ldi	r25, 0x43	; 67
    13b6:	0e 94 ed 04 	call	0x9da	; 0x9da <PID1cal>
    13ba:	6b 01       	movw	r12, r22
    13bc:	7c 01       	movw	r14, r24
	int diffi8 = (int)(diff*100);
	char str[25];
	sprintf(str, "%d %d", diffi8, sensorValue);
    13be:	1f 93       	push	r17
    13c0:	0f 93       	push	r16
	else
		if(sensorValue > 430 && sensorValue-430 > 15)
			sensorValue-=15;

	float diff = PID1cal(430, sensorValue);
	int diffi8 = (int)(diff*100);
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	48 ec       	ldi	r20, 0xC8	; 200
    13c8:	52 e4       	ldi	r21, 0x42	; 66
    13ca:	0e 94 6f 0c 	call	0x18de	; 0x18de <__mulsf3>
    13ce:	0e 94 88 0b 	call	0x1710	; 0x1710 <__fixsfsi>
	char str[25];
	sprintf(str, "%d %d", diffi8, sensorValue);
    13d2:	7f 93       	push	r23
    13d4:	6f 93       	push	r22
    13d6:	82 e3       	ldi	r24, 0x32	; 50
    13d8:	93 e0       	ldi	r25, 0x03	; 3
    13da:	9f 93       	push	r25
    13dc:	8f 93       	push	r24
    13de:	8e 01       	movw	r16, r28
    13e0:	0f 5f       	subi	r16, 0xFF	; 255
    13e2:	1f 4f       	sbci	r17, 0xFF	; 255
    13e4:	1f 93       	push	r17
    13e6:	0f 93       	push	r16
    13e8:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <sprintf>
	BTTransmitStr(str);
    13ec:	c8 01       	movw	r24, r16
    13ee:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
			//goFront(10, 175),
			BTTransmitStr("front"),
			state = 0;
			
	}
	else if(diff>2){
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	f8 94       	cli
    13f6:	de bf       	out	0x3e, r29	; 62
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	cd bf       	out	0x3d, r28	; 61
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	40 e0       	ldi	r20, 0x00	; 0
    1402:	50 e4       	ldi	r21, 0x40	; 64
    1404:	c7 01       	movw	r24, r14
    1406:	b6 01       	movw	r22, r12
    1408:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__gesf2>
    140c:	18 16       	cp	r1, r24
    140e:	64 f4       	brge	.+24     	; 0x1428 <doTimer+0xd6>
		if(state!=1)
    1410:	80 91 03 01 	lds	r24, 0x0103
    1414:	81 30       	cpi	r24, 0x01	; 1
    1416:	99 f0       	breq	.+38     	; 0x143e <doTimer+0xec>
			//goFrontRight(10, 175),
			BTTransmitStr("right"),
    1418:	88 e3       	ldi	r24, 0x38	; 56
    141a:	93 e0       	ldi	r25, 0x03	; 3
    141c:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
			state = 1;
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	80 93 03 01 	sts	0x0103, r24
    1426:	0b c0       	rjmp	.+22     	; 0x143e <doTimer+0xec>
	}
	else{
		if(state!=2)
    1428:	80 91 03 01 	lds	r24, 0x0103
    142c:	82 30       	cpi	r24, 0x02	; 2
    142e:	39 f0       	breq	.+14     	; 0x143e <doTimer+0xec>
			//goFrontLeft(10, 175),
			BTTransmitStr("left"),
    1430:	8e e3       	ldi	r24, 0x3E	; 62
    1432:	93 e0       	ldi	r25, 0x03	; 3
    1434:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
			state = 2;
    1438:	82 e0       	ldi	r24, 0x02	; 2
    143a:	80 93 03 01 	sts	0x0103, r24
	}
		
	
}
    143e:	69 96       	adiw	r28, 0x19	; 25
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	f8 94       	cli
    1444:	de bf       	out	0x3e, r29	; 62
    1446:	0f be       	out	0x3f, r0	; 63
    1448:	cd bf       	out	0x3d, r28	; 61
    144a:	df 91       	pop	r29
    144c:	cf 91       	pop	r28
    144e:	1f 91       	pop	r17
    1450:	0f 91       	pop	r16
    1452:	ff 90       	pop	r15
    1454:	ef 90       	pop	r14
    1456:	df 90       	pop	r13
    1458:	cf 90       	pop	r12
    145a:	08 95       	ret

0000145c <functieRotireStanga>:

uint8_t stare = 100;
extern volatile uint8_t debugging;
void functieRotireStanga(void){
    145c:	cf 92       	push	r12
    145e:	df 92       	push	r13
    1460:	ef 92       	push	r14
    1462:	ff 92       	push	r15
    1464:	0f 93       	push	r16
    1466:	1f 93       	push	r17
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
    1470:	c4 56       	subi	r28, 0x64	; 100
    1472:	d1 09       	sbc	r29, r1
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	f8 94       	cli
    1478:	de bf       	out	0x3e, r29	; 62
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	cd bf       	out	0x3d, r28	; 61
	uint16_t sf = getValueOfSensor(0);
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <getValueOfSensor>
    1484:	7c 01       	movw	r14, r24
	debugging = 0;
    1486:	10 92 00 01 	sts	0x0100, r1
	uint16_t sd = getValueOfSensor(1);
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <getValueOfSensor>
    1490:	6c 01       	movw	r12, r24
	
	char str[100];
	sprintf(str, "sf=%d  sd=%d  stare=%d", sf, sd, stare);
    1492:	80 91 02 01 	lds	r24, 0x0102
    1496:	1f 92       	push	r1
    1498:	8f 93       	push	r24
    149a:	df 92       	push	r13
    149c:	cf 92       	push	r12
    149e:	ff 92       	push	r15
    14a0:	ef 92       	push	r14
    14a2:	83 e4       	ldi	r24, 0x43	; 67
    14a4:	93 e0       	ldi	r25, 0x03	; 3
    14a6:	9f 93       	push	r25
    14a8:	8f 93       	push	r24
    14aa:	8e 01       	movw	r16, r28
    14ac:	0f 5f       	subi	r16, 0xFF	; 255
    14ae:	1f 4f       	sbci	r17, 0xFF	; 255
    14b0:	1f 93       	push	r17
    14b2:	0f 93       	push	r16
    14b4:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <sprintf>
	BTTransmitStr(str);
    14b8:	c8 01       	movw	r24, r16
    14ba:	0e 94 70 00 	call	0xe0	; 0xe0 <BTTransmitStr>
	
	switch(stare){
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	cd bf       	out	0x3d, r28	; 61
    14c8:	80 91 02 01 	lds	r24, 0x0102
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	31 f1       	breq	.+76     	; 0x151c <functieRotireStanga+0xc0>
    14d0:	58 f0       	brcs	.+22     	; 0x14e8 <functieRotireStanga+0x8c>
    14d2:	82 30       	cpi	r24, 0x02	; 2
    14d4:	79 f1       	breq	.+94     	; 0x1534 <functieRotireStanga+0xd8>
    14d6:	84 36       	cpi	r24, 0x64	; 100
    14d8:	b9 f5       	brne	.+110    	; 0x1548 <functieRotireStanga+0xec>
		case 100:
			stare = 0;
    14da:	10 92 02 01 	sts	0x0102, r1
			goFront(60, 200);
    14de:	68 ec       	ldi	r22, 0xC8	; 200
    14e0:	8c e3       	ldi	r24, 0x3C	; 60
    14e2:	0e 94 5f 02 	call	0x4be	; 0x4be <goFront>
		break;
    14e6:	30 c0       	rjmp	.+96     	; 0x1548 <functieRotireStanga+0xec>
		case 0: // merge in fata
			if(sf > 300){
    14e8:	9d e2       	ldi	r25, 0x2D	; 45
    14ea:	e9 16       	cp	r14, r25
    14ec:	91 e0       	ldi	r25, 0x01	; 1
    14ee:	f9 06       	cpc	r15, r25
    14f0:	40 f0       	brcs	.+16     	; 0x1502 <functieRotireStanga+0xa6>
				stare = 2;
    14f2:	82 e0       	ldi	r24, 0x02	; 2
    14f4:	80 93 02 01 	sts	0x0102, r24
				//goFrontLeft(60, 250);
				rotirePeLoc(60, 250, LeftEngines);
    14f8:	41 e0       	ldi	r20, 0x01	; 1
    14fa:	6a ef       	ldi	r22, 0xFA	; 250
    14fc:	8c e3       	ldi	r24, 0x3C	; 60
    14fe:	0e 94 49 03 	call	0x692	; 0x692 <rotirePeLoc>
			}
			if(sd > 400){
    1502:	81 e9       	ldi	r24, 0x91	; 145
    1504:	c8 16       	cp	r12, r24
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	d8 06       	cpc	r13, r24
    150a:	f0 f0       	brcs	.+60     	; 0x1548 <functieRotireStanga+0xec>
				stare = 1;
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	80 93 02 01 	sts	0x0102, r24
				goFrontLeft(60, 200);
    1512:	68 ec       	ldi	r22, 0xC8	; 200
    1514:	8c e3       	ldi	r24, 0x3C	; 60
    1516:	0e 94 af 02 	call	0x55e	; 0x55e <goFrontLeft>
    151a:	16 c0       	rjmp	.+44     	; 0x1548 <functieRotireStanga+0xec>
			}		
		break;
		case 1:
			if(sd < 300){
    151c:	9c e2       	ldi	r25, 0x2C	; 44
    151e:	c9 16       	cp	r12, r25
    1520:	91 e0       	ldi	r25, 0x01	; 1
    1522:	d9 06       	cpc	r13, r25
    1524:	88 f4       	brcc	.+34     	; 0x1548 <functieRotireStanga+0xec>
				stare = 0;
    1526:	10 92 02 01 	sts	0x0102, r1
				goFront(60, 200);
    152a:	68 ec       	ldi	r22, 0xC8	; 200
    152c:	8c e3       	ldi	r24, 0x3C	; 60
    152e:	0e 94 5f 02 	call	0x4be	; 0x4be <goFront>
    1532:	0a c0       	rjmp	.+20     	; 0x1548 <functieRotireStanga+0xec>
			}
		
		break;
		case 2:
			if(sf < 200){
    1534:	88 ec       	ldi	r24, 0xC8	; 200
    1536:	e8 16       	cp	r14, r24
    1538:	f1 04       	cpc	r15, r1
    153a:	30 f4       	brcc	.+12     	; 0x1548 <functieRotireStanga+0xec>
				goFront(60, 200);
    153c:	68 ec       	ldi	r22, 0xC8	; 200
    153e:	8c e3       	ldi	r24, 0x3C	; 60
    1540:	0e 94 5f 02 	call	0x4be	; 0x4be <goFront>
				stare = 0;
    1544:	10 92 02 01 	sts	0x0102, r1
			}
		break;
	}
	
	debugging = 1;
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	80 93 00 01 	sts	0x0100, r24
	
    154e:	cc 59       	subi	r28, 0x9C	; 156
    1550:	df 4f       	sbci	r29, 0xFF	; 255
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	f8 94       	cli
    1556:	de bf       	out	0x3e, r29	; 62
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	cd bf       	out	0x3d, r28	; 61
    155c:	df 91       	pop	r29
    155e:	cf 91       	pop	r28
    1560:	1f 91       	pop	r17
    1562:	0f 91       	pop	r16
    1564:	ff 90       	pop	r15
    1566:	ef 90       	pop	r14
    1568:	df 90       	pop	r13
    156a:	cf 90       	pop	r12
    156c:	08 95       	ret

0000156e <__subsf3>:
    156e:	50 58       	subi	r21, 0x80	; 128

00001570 <__addsf3>:
    1570:	bb 27       	eor	r27, r27
    1572:	aa 27       	eor	r26, r26
    1574:	0e d0       	rcall	.+28     	; 0x1592 <__addsf3x>
    1576:	75 c1       	rjmp	.+746    	; 0x1862 <__fp_round>
    1578:	66 d1       	rcall	.+716    	; 0x1846 <__fp_pscA>
    157a:	30 f0       	brcs	.+12     	; 0x1588 <__addsf3+0x18>
    157c:	6b d1       	rcall	.+726    	; 0x1854 <__fp_pscB>
    157e:	20 f0       	brcs	.+8      	; 0x1588 <__addsf3+0x18>
    1580:	31 f4       	brne	.+12     	; 0x158e <__addsf3+0x1e>
    1582:	9f 3f       	cpi	r25, 0xFF	; 255
    1584:	11 f4       	brne	.+4      	; 0x158a <__addsf3+0x1a>
    1586:	1e f4       	brtc	.+6      	; 0x158e <__addsf3+0x1e>
    1588:	5b c1       	rjmp	.+694    	; 0x1840 <__fp_nan>
    158a:	0e f4       	brtc	.+2      	; 0x158e <__addsf3+0x1e>
    158c:	e0 95       	com	r30
    158e:	e7 fb       	bst	r30, 7
    1590:	51 c1       	rjmp	.+674    	; 0x1834 <__fp_inf>

00001592 <__addsf3x>:
    1592:	e9 2f       	mov	r30, r25
    1594:	77 d1       	rcall	.+750    	; 0x1884 <__fp_split3>
    1596:	80 f3       	brcs	.-32     	; 0x1578 <__addsf3+0x8>
    1598:	ba 17       	cp	r27, r26
    159a:	62 07       	cpc	r22, r18
    159c:	73 07       	cpc	r23, r19
    159e:	84 07       	cpc	r24, r20
    15a0:	95 07       	cpc	r25, r21
    15a2:	18 f0       	brcs	.+6      	; 0x15aa <__addsf3x+0x18>
    15a4:	71 f4       	brne	.+28     	; 0x15c2 <__addsf3x+0x30>
    15a6:	9e f5       	brtc	.+102    	; 0x160e <__addsf3x+0x7c>
    15a8:	8f c1       	rjmp	.+798    	; 0x18c8 <__fp_zero>
    15aa:	0e f4       	brtc	.+2      	; 0x15ae <__addsf3x+0x1c>
    15ac:	e0 95       	com	r30
    15ae:	0b 2e       	mov	r0, r27
    15b0:	ba 2f       	mov	r27, r26
    15b2:	a0 2d       	mov	r26, r0
    15b4:	0b 01       	movw	r0, r22
    15b6:	b9 01       	movw	r22, r18
    15b8:	90 01       	movw	r18, r0
    15ba:	0c 01       	movw	r0, r24
    15bc:	ca 01       	movw	r24, r20
    15be:	a0 01       	movw	r20, r0
    15c0:	11 24       	eor	r1, r1
    15c2:	ff 27       	eor	r31, r31
    15c4:	59 1b       	sub	r21, r25
    15c6:	99 f0       	breq	.+38     	; 0x15ee <__addsf3x+0x5c>
    15c8:	59 3f       	cpi	r21, 0xF9	; 249
    15ca:	50 f4       	brcc	.+20     	; 0x15e0 <__addsf3x+0x4e>
    15cc:	50 3e       	cpi	r21, 0xE0	; 224
    15ce:	68 f1       	brcs	.+90     	; 0x162a <__addsf3x+0x98>
    15d0:	1a 16       	cp	r1, r26
    15d2:	f0 40       	sbci	r31, 0x00	; 0
    15d4:	a2 2f       	mov	r26, r18
    15d6:	23 2f       	mov	r18, r19
    15d8:	34 2f       	mov	r19, r20
    15da:	44 27       	eor	r20, r20
    15dc:	58 5f       	subi	r21, 0xF8	; 248
    15de:	f3 cf       	rjmp	.-26     	; 0x15c6 <__addsf3x+0x34>
    15e0:	46 95       	lsr	r20
    15e2:	37 95       	ror	r19
    15e4:	27 95       	ror	r18
    15e6:	a7 95       	ror	r26
    15e8:	f0 40       	sbci	r31, 0x00	; 0
    15ea:	53 95       	inc	r21
    15ec:	c9 f7       	brne	.-14     	; 0x15e0 <__addsf3x+0x4e>
    15ee:	7e f4       	brtc	.+30     	; 0x160e <__addsf3x+0x7c>
    15f0:	1f 16       	cp	r1, r31
    15f2:	ba 0b       	sbc	r27, r26
    15f4:	62 0b       	sbc	r22, r18
    15f6:	73 0b       	sbc	r23, r19
    15f8:	84 0b       	sbc	r24, r20
    15fa:	ba f0       	brmi	.+46     	; 0x162a <__addsf3x+0x98>
    15fc:	91 50       	subi	r25, 0x01	; 1
    15fe:	a1 f0       	breq	.+40     	; 0x1628 <__addsf3x+0x96>
    1600:	ff 0f       	add	r31, r31
    1602:	bb 1f       	adc	r27, r27
    1604:	66 1f       	adc	r22, r22
    1606:	77 1f       	adc	r23, r23
    1608:	88 1f       	adc	r24, r24
    160a:	c2 f7       	brpl	.-16     	; 0x15fc <__addsf3x+0x6a>
    160c:	0e c0       	rjmp	.+28     	; 0x162a <__addsf3x+0x98>
    160e:	ba 0f       	add	r27, r26
    1610:	62 1f       	adc	r22, r18
    1612:	73 1f       	adc	r23, r19
    1614:	84 1f       	adc	r24, r20
    1616:	48 f4       	brcc	.+18     	; 0x162a <__addsf3x+0x98>
    1618:	87 95       	ror	r24
    161a:	77 95       	ror	r23
    161c:	67 95       	ror	r22
    161e:	b7 95       	ror	r27
    1620:	f7 95       	ror	r31
    1622:	9e 3f       	cpi	r25, 0xFE	; 254
    1624:	08 f0       	brcs	.+2      	; 0x1628 <__addsf3x+0x96>
    1626:	b3 cf       	rjmp	.-154    	; 0x158e <__addsf3+0x1e>
    1628:	93 95       	inc	r25
    162a:	88 0f       	add	r24, r24
    162c:	08 f0       	brcs	.+2      	; 0x1630 <__addsf3x+0x9e>
    162e:	99 27       	eor	r25, r25
    1630:	ee 0f       	add	r30, r30
    1632:	97 95       	ror	r25
    1634:	87 95       	ror	r24
    1636:	08 95       	ret

00001638 <__cmpsf2>:
    1638:	d9 d0       	rcall	.+434    	; 0x17ec <__fp_cmp>
    163a:	08 f4       	brcc	.+2      	; 0x163e <__cmpsf2+0x6>
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	08 95       	ret

00001640 <__divsf3>:
    1640:	0c d0       	rcall	.+24     	; 0x165a <__divsf3x>
    1642:	0f c1       	rjmp	.+542    	; 0x1862 <__fp_round>
    1644:	07 d1       	rcall	.+526    	; 0x1854 <__fp_pscB>
    1646:	40 f0       	brcs	.+16     	; 0x1658 <__divsf3+0x18>
    1648:	fe d0       	rcall	.+508    	; 0x1846 <__fp_pscA>
    164a:	30 f0       	brcs	.+12     	; 0x1658 <__divsf3+0x18>
    164c:	21 f4       	brne	.+8      	; 0x1656 <__divsf3+0x16>
    164e:	5f 3f       	cpi	r21, 0xFF	; 255
    1650:	19 f0       	breq	.+6      	; 0x1658 <__divsf3+0x18>
    1652:	f0 c0       	rjmp	.+480    	; 0x1834 <__fp_inf>
    1654:	51 11       	cpse	r21, r1
    1656:	39 c1       	rjmp	.+626    	; 0x18ca <__fp_szero>
    1658:	f3 c0       	rjmp	.+486    	; 0x1840 <__fp_nan>

0000165a <__divsf3x>:
    165a:	14 d1       	rcall	.+552    	; 0x1884 <__fp_split3>
    165c:	98 f3       	brcs	.-26     	; 0x1644 <__divsf3+0x4>

0000165e <__divsf3_pse>:
    165e:	99 23       	and	r25, r25
    1660:	c9 f3       	breq	.-14     	; 0x1654 <__divsf3+0x14>
    1662:	55 23       	and	r21, r21
    1664:	b1 f3       	breq	.-20     	; 0x1652 <__divsf3+0x12>
    1666:	95 1b       	sub	r25, r21
    1668:	55 0b       	sbc	r21, r21
    166a:	bb 27       	eor	r27, r27
    166c:	aa 27       	eor	r26, r26
    166e:	62 17       	cp	r22, r18
    1670:	73 07       	cpc	r23, r19
    1672:	84 07       	cpc	r24, r20
    1674:	38 f0       	brcs	.+14     	; 0x1684 <__divsf3_pse+0x26>
    1676:	9f 5f       	subi	r25, 0xFF	; 255
    1678:	5f 4f       	sbci	r21, 0xFF	; 255
    167a:	22 0f       	add	r18, r18
    167c:	33 1f       	adc	r19, r19
    167e:	44 1f       	adc	r20, r20
    1680:	aa 1f       	adc	r26, r26
    1682:	a9 f3       	breq	.-22     	; 0x166e <__divsf3_pse+0x10>
    1684:	33 d0       	rcall	.+102    	; 0x16ec <__divsf3_pse+0x8e>
    1686:	0e 2e       	mov	r0, r30
    1688:	3a f0       	brmi	.+14     	; 0x1698 <__divsf3_pse+0x3a>
    168a:	e0 e8       	ldi	r30, 0x80	; 128
    168c:	30 d0       	rcall	.+96     	; 0x16ee <__divsf3_pse+0x90>
    168e:	91 50       	subi	r25, 0x01	; 1
    1690:	50 40       	sbci	r21, 0x00	; 0
    1692:	e6 95       	lsr	r30
    1694:	00 1c       	adc	r0, r0
    1696:	ca f7       	brpl	.-14     	; 0x168a <__divsf3_pse+0x2c>
    1698:	29 d0       	rcall	.+82     	; 0x16ec <__divsf3_pse+0x8e>
    169a:	fe 2f       	mov	r31, r30
    169c:	27 d0       	rcall	.+78     	; 0x16ec <__divsf3_pse+0x8e>
    169e:	66 0f       	add	r22, r22
    16a0:	77 1f       	adc	r23, r23
    16a2:	88 1f       	adc	r24, r24
    16a4:	bb 1f       	adc	r27, r27
    16a6:	26 17       	cp	r18, r22
    16a8:	37 07       	cpc	r19, r23
    16aa:	48 07       	cpc	r20, r24
    16ac:	ab 07       	cpc	r26, r27
    16ae:	b0 e8       	ldi	r27, 0x80	; 128
    16b0:	09 f0       	breq	.+2      	; 0x16b4 <__divsf3_pse+0x56>
    16b2:	bb 0b       	sbc	r27, r27
    16b4:	80 2d       	mov	r24, r0
    16b6:	bf 01       	movw	r22, r30
    16b8:	ff 27       	eor	r31, r31
    16ba:	93 58       	subi	r25, 0x83	; 131
    16bc:	5f 4f       	sbci	r21, 0xFF	; 255
    16be:	2a f0       	brmi	.+10     	; 0x16ca <__divsf3_pse+0x6c>
    16c0:	9e 3f       	cpi	r25, 0xFE	; 254
    16c2:	51 05       	cpc	r21, r1
    16c4:	68 f0       	brcs	.+26     	; 0x16e0 <__divsf3_pse+0x82>
    16c6:	b6 c0       	rjmp	.+364    	; 0x1834 <__fp_inf>
    16c8:	00 c1       	rjmp	.+512    	; 0x18ca <__fp_szero>
    16ca:	5f 3f       	cpi	r21, 0xFF	; 255
    16cc:	ec f3       	brlt	.-6      	; 0x16c8 <__divsf3_pse+0x6a>
    16ce:	98 3e       	cpi	r25, 0xE8	; 232
    16d0:	dc f3       	brlt	.-10     	; 0x16c8 <__divsf3_pse+0x6a>
    16d2:	86 95       	lsr	r24
    16d4:	77 95       	ror	r23
    16d6:	67 95       	ror	r22
    16d8:	b7 95       	ror	r27
    16da:	f7 95       	ror	r31
    16dc:	9f 5f       	subi	r25, 0xFF	; 255
    16de:	c9 f7       	brne	.-14     	; 0x16d2 <__divsf3_pse+0x74>
    16e0:	88 0f       	add	r24, r24
    16e2:	91 1d       	adc	r25, r1
    16e4:	96 95       	lsr	r25
    16e6:	87 95       	ror	r24
    16e8:	97 f9       	bld	r25, 7
    16ea:	08 95       	ret
    16ec:	e1 e0       	ldi	r30, 0x01	; 1
    16ee:	66 0f       	add	r22, r22
    16f0:	77 1f       	adc	r23, r23
    16f2:	88 1f       	adc	r24, r24
    16f4:	bb 1f       	adc	r27, r27
    16f6:	62 17       	cp	r22, r18
    16f8:	73 07       	cpc	r23, r19
    16fa:	84 07       	cpc	r24, r20
    16fc:	ba 07       	cpc	r27, r26
    16fe:	20 f0       	brcs	.+8      	; 0x1708 <__divsf3_pse+0xaa>
    1700:	62 1b       	sub	r22, r18
    1702:	73 0b       	sbc	r23, r19
    1704:	84 0b       	sbc	r24, r20
    1706:	ba 0b       	sbc	r27, r26
    1708:	ee 1f       	adc	r30, r30
    170a:	88 f7       	brcc	.-30     	; 0x16ee <__divsf3_pse+0x90>
    170c:	e0 95       	com	r30
    170e:	08 95       	ret

00001710 <__fixsfsi>:
    1710:	04 d0       	rcall	.+8      	; 0x171a <__fixunssfsi>
    1712:	68 94       	set
    1714:	b1 11       	cpse	r27, r1
    1716:	d9 c0       	rjmp	.+434    	; 0x18ca <__fp_szero>
    1718:	08 95       	ret

0000171a <__fixunssfsi>:
    171a:	bc d0       	rcall	.+376    	; 0x1894 <__fp_splitA>
    171c:	88 f0       	brcs	.+34     	; 0x1740 <__fixunssfsi+0x26>
    171e:	9f 57       	subi	r25, 0x7F	; 127
    1720:	90 f0       	brcs	.+36     	; 0x1746 <__fixunssfsi+0x2c>
    1722:	b9 2f       	mov	r27, r25
    1724:	99 27       	eor	r25, r25
    1726:	b7 51       	subi	r27, 0x17	; 23
    1728:	a0 f0       	brcs	.+40     	; 0x1752 <__fixunssfsi+0x38>
    172a:	d1 f0       	breq	.+52     	; 0x1760 <__fixunssfsi+0x46>
    172c:	66 0f       	add	r22, r22
    172e:	77 1f       	adc	r23, r23
    1730:	88 1f       	adc	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	1a f0       	brmi	.+6      	; 0x173c <__fixunssfsi+0x22>
    1736:	ba 95       	dec	r27
    1738:	c9 f7       	brne	.-14     	; 0x172c <__fixunssfsi+0x12>
    173a:	12 c0       	rjmp	.+36     	; 0x1760 <__fixunssfsi+0x46>
    173c:	b1 30       	cpi	r27, 0x01	; 1
    173e:	81 f0       	breq	.+32     	; 0x1760 <__fixunssfsi+0x46>
    1740:	c3 d0       	rcall	.+390    	; 0x18c8 <__fp_zero>
    1742:	b1 e0       	ldi	r27, 0x01	; 1
    1744:	08 95       	ret
    1746:	c0 c0       	rjmp	.+384    	; 0x18c8 <__fp_zero>
    1748:	67 2f       	mov	r22, r23
    174a:	78 2f       	mov	r23, r24
    174c:	88 27       	eor	r24, r24
    174e:	b8 5f       	subi	r27, 0xF8	; 248
    1750:	39 f0       	breq	.+14     	; 0x1760 <__fixunssfsi+0x46>
    1752:	b9 3f       	cpi	r27, 0xF9	; 249
    1754:	cc f3       	brlt	.-14     	; 0x1748 <__fixunssfsi+0x2e>
    1756:	86 95       	lsr	r24
    1758:	77 95       	ror	r23
    175a:	67 95       	ror	r22
    175c:	b3 95       	inc	r27
    175e:	d9 f7       	brne	.-10     	; 0x1756 <__fixunssfsi+0x3c>
    1760:	3e f4       	brtc	.+14     	; 0x1770 <__fixunssfsi+0x56>
    1762:	90 95       	com	r25
    1764:	80 95       	com	r24
    1766:	70 95       	com	r23
    1768:	61 95       	neg	r22
    176a:	7f 4f       	sbci	r23, 0xFF	; 255
    176c:	8f 4f       	sbci	r24, 0xFF	; 255
    176e:	9f 4f       	sbci	r25, 0xFF	; 255
    1770:	08 95       	ret

00001772 <__floatunsisf>:
    1772:	e8 94       	clt
    1774:	09 c0       	rjmp	.+18     	; 0x1788 <__floatsisf+0x12>

00001776 <__floatsisf>:
    1776:	97 fb       	bst	r25, 7
    1778:	3e f4       	brtc	.+14     	; 0x1788 <__floatsisf+0x12>
    177a:	90 95       	com	r25
    177c:	80 95       	com	r24
    177e:	70 95       	com	r23
    1780:	61 95       	neg	r22
    1782:	7f 4f       	sbci	r23, 0xFF	; 255
    1784:	8f 4f       	sbci	r24, 0xFF	; 255
    1786:	9f 4f       	sbci	r25, 0xFF	; 255
    1788:	99 23       	and	r25, r25
    178a:	a9 f0       	breq	.+42     	; 0x17b6 <__floatsisf+0x40>
    178c:	f9 2f       	mov	r31, r25
    178e:	96 e9       	ldi	r25, 0x96	; 150
    1790:	bb 27       	eor	r27, r27
    1792:	93 95       	inc	r25
    1794:	f6 95       	lsr	r31
    1796:	87 95       	ror	r24
    1798:	77 95       	ror	r23
    179a:	67 95       	ror	r22
    179c:	b7 95       	ror	r27
    179e:	f1 11       	cpse	r31, r1
    17a0:	f8 cf       	rjmp	.-16     	; 0x1792 <__floatsisf+0x1c>
    17a2:	fa f4       	brpl	.+62     	; 0x17e2 <__floatsisf+0x6c>
    17a4:	bb 0f       	add	r27, r27
    17a6:	11 f4       	brne	.+4      	; 0x17ac <__floatsisf+0x36>
    17a8:	60 ff       	sbrs	r22, 0
    17aa:	1b c0       	rjmp	.+54     	; 0x17e2 <__floatsisf+0x6c>
    17ac:	6f 5f       	subi	r22, 0xFF	; 255
    17ae:	7f 4f       	sbci	r23, 0xFF	; 255
    17b0:	8f 4f       	sbci	r24, 0xFF	; 255
    17b2:	9f 4f       	sbci	r25, 0xFF	; 255
    17b4:	16 c0       	rjmp	.+44     	; 0x17e2 <__floatsisf+0x6c>
    17b6:	88 23       	and	r24, r24
    17b8:	11 f0       	breq	.+4      	; 0x17be <__floatsisf+0x48>
    17ba:	96 e9       	ldi	r25, 0x96	; 150
    17bc:	11 c0       	rjmp	.+34     	; 0x17e0 <__floatsisf+0x6a>
    17be:	77 23       	and	r23, r23
    17c0:	21 f0       	breq	.+8      	; 0x17ca <__floatsisf+0x54>
    17c2:	9e e8       	ldi	r25, 0x8E	; 142
    17c4:	87 2f       	mov	r24, r23
    17c6:	76 2f       	mov	r23, r22
    17c8:	05 c0       	rjmp	.+10     	; 0x17d4 <__floatsisf+0x5e>
    17ca:	66 23       	and	r22, r22
    17cc:	71 f0       	breq	.+28     	; 0x17ea <__floatsisf+0x74>
    17ce:	96 e8       	ldi	r25, 0x86	; 134
    17d0:	86 2f       	mov	r24, r22
    17d2:	70 e0       	ldi	r23, 0x00	; 0
    17d4:	60 e0       	ldi	r22, 0x00	; 0
    17d6:	2a f0       	brmi	.+10     	; 0x17e2 <__floatsisf+0x6c>
    17d8:	9a 95       	dec	r25
    17da:	66 0f       	add	r22, r22
    17dc:	77 1f       	adc	r23, r23
    17de:	88 1f       	adc	r24, r24
    17e0:	da f7       	brpl	.-10     	; 0x17d8 <__floatsisf+0x62>
    17e2:	88 0f       	add	r24, r24
    17e4:	96 95       	lsr	r25
    17e6:	87 95       	ror	r24
    17e8:	97 f9       	bld	r25, 7
    17ea:	08 95       	ret

000017ec <__fp_cmp>:
    17ec:	99 0f       	add	r25, r25
    17ee:	00 08       	sbc	r0, r0
    17f0:	55 0f       	add	r21, r21
    17f2:	aa 0b       	sbc	r26, r26
    17f4:	e0 e8       	ldi	r30, 0x80	; 128
    17f6:	fe ef       	ldi	r31, 0xFE	; 254
    17f8:	16 16       	cp	r1, r22
    17fa:	17 06       	cpc	r1, r23
    17fc:	e8 07       	cpc	r30, r24
    17fe:	f9 07       	cpc	r31, r25
    1800:	c0 f0       	brcs	.+48     	; 0x1832 <__fp_cmp+0x46>
    1802:	12 16       	cp	r1, r18
    1804:	13 06       	cpc	r1, r19
    1806:	e4 07       	cpc	r30, r20
    1808:	f5 07       	cpc	r31, r21
    180a:	98 f0       	brcs	.+38     	; 0x1832 <__fp_cmp+0x46>
    180c:	62 1b       	sub	r22, r18
    180e:	73 0b       	sbc	r23, r19
    1810:	84 0b       	sbc	r24, r20
    1812:	95 0b       	sbc	r25, r21
    1814:	39 f4       	brne	.+14     	; 0x1824 <__fp_cmp+0x38>
    1816:	0a 26       	eor	r0, r26
    1818:	61 f0       	breq	.+24     	; 0x1832 <__fp_cmp+0x46>
    181a:	23 2b       	or	r18, r19
    181c:	24 2b       	or	r18, r20
    181e:	25 2b       	or	r18, r21
    1820:	21 f4       	brne	.+8      	; 0x182a <__fp_cmp+0x3e>
    1822:	08 95       	ret
    1824:	0a 26       	eor	r0, r26
    1826:	09 f4       	brne	.+2      	; 0x182a <__fp_cmp+0x3e>
    1828:	a1 40       	sbci	r26, 0x01	; 1
    182a:	a6 95       	lsr	r26
    182c:	8f ef       	ldi	r24, 0xFF	; 255
    182e:	81 1d       	adc	r24, r1
    1830:	81 1d       	adc	r24, r1
    1832:	08 95       	ret

00001834 <__fp_inf>:
    1834:	97 f9       	bld	r25, 7
    1836:	9f 67       	ori	r25, 0x7F	; 127
    1838:	80 e8       	ldi	r24, 0x80	; 128
    183a:	70 e0       	ldi	r23, 0x00	; 0
    183c:	60 e0       	ldi	r22, 0x00	; 0
    183e:	08 95       	ret

00001840 <__fp_nan>:
    1840:	9f ef       	ldi	r25, 0xFF	; 255
    1842:	80 ec       	ldi	r24, 0xC0	; 192
    1844:	08 95       	ret

00001846 <__fp_pscA>:
    1846:	00 24       	eor	r0, r0
    1848:	0a 94       	dec	r0
    184a:	16 16       	cp	r1, r22
    184c:	17 06       	cpc	r1, r23
    184e:	18 06       	cpc	r1, r24
    1850:	09 06       	cpc	r0, r25
    1852:	08 95       	ret

00001854 <__fp_pscB>:
    1854:	00 24       	eor	r0, r0
    1856:	0a 94       	dec	r0
    1858:	12 16       	cp	r1, r18
    185a:	13 06       	cpc	r1, r19
    185c:	14 06       	cpc	r1, r20
    185e:	05 06       	cpc	r0, r21
    1860:	08 95       	ret

00001862 <__fp_round>:
    1862:	09 2e       	mov	r0, r25
    1864:	03 94       	inc	r0
    1866:	00 0c       	add	r0, r0
    1868:	11 f4       	brne	.+4      	; 0x186e <__fp_round+0xc>
    186a:	88 23       	and	r24, r24
    186c:	52 f0       	brmi	.+20     	; 0x1882 <__fp_round+0x20>
    186e:	bb 0f       	add	r27, r27
    1870:	40 f4       	brcc	.+16     	; 0x1882 <__fp_round+0x20>
    1872:	bf 2b       	or	r27, r31
    1874:	11 f4       	brne	.+4      	; 0x187a <__fp_round+0x18>
    1876:	60 ff       	sbrs	r22, 0
    1878:	04 c0       	rjmp	.+8      	; 0x1882 <__fp_round+0x20>
    187a:	6f 5f       	subi	r22, 0xFF	; 255
    187c:	7f 4f       	sbci	r23, 0xFF	; 255
    187e:	8f 4f       	sbci	r24, 0xFF	; 255
    1880:	9f 4f       	sbci	r25, 0xFF	; 255
    1882:	08 95       	ret

00001884 <__fp_split3>:
    1884:	57 fd       	sbrc	r21, 7
    1886:	90 58       	subi	r25, 0x80	; 128
    1888:	44 0f       	add	r20, r20
    188a:	55 1f       	adc	r21, r21
    188c:	59 f0       	breq	.+22     	; 0x18a4 <__fp_splitA+0x10>
    188e:	5f 3f       	cpi	r21, 0xFF	; 255
    1890:	71 f0       	breq	.+28     	; 0x18ae <__fp_splitA+0x1a>
    1892:	47 95       	ror	r20

00001894 <__fp_splitA>:
    1894:	88 0f       	add	r24, r24
    1896:	97 fb       	bst	r25, 7
    1898:	99 1f       	adc	r25, r25
    189a:	61 f0       	breq	.+24     	; 0x18b4 <__fp_splitA+0x20>
    189c:	9f 3f       	cpi	r25, 0xFF	; 255
    189e:	79 f0       	breq	.+30     	; 0x18be <__fp_splitA+0x2a>
    18a0:	87 95       	ror	r24
    18a2:	08 95       	ret
    18a4:	12 16       	cp	r1, r18
    18a6:	13 06       	cpc	r1, r19
    18a8:	14 06       	cpc	r1, r20
    18aa:	55 1f       	adc	r21, r21
    18ac:	f2 cf       	rjmp	.-28     	; 0x1892 <__fp_split3+0xe>
    18ae:	46 95       	lsr	r20
    18b0:	f1 df       	rcall	.-30     	; 0x1894 <__fp_splitA>
    18b2:	08 c0       	rjmp	.+16     	; 0x18c4 <__fp_splitA+0x30>
    18b4:	16 16       	cp	r1, r22
    18b6:	17 06       	cpc	r1, r23
    18b8:	18 06       	cpc	r1, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	f1 cf       	rjmp	.-30     	; 0x18a0 <__fp_splitA+0xc>
    18be:	86 95       	lsr	r24
    18c0:	71 05       	cpc	r23, r1
    18c2:	61 05       	cpc	r22, r1
    18c4:	08 94       	sec
    18c6:	08 95       	ret

000018c8 <__fp_zero>:
    18c8:	e8 94       	clt

000018ca <__fp_szero>:
    18ca:	bb 27       	eor	r27, r27
    18cc:	66 27       	eor	r22, r22
    18ce:	77 27       	eor	r23, r23
    18d0:	cb 01       	movw	r24, r22
    18d2:	97 f9       	bld	r25, 7
    18d4:	08 95       	ret

000018d6 <__gesf2>:
    18d6:	8a df       	rcall	.-236    	; 0x17ec <__fp_cmp>
    18d8:	08 f4       	brcc	.+2      	; 0x18dc <__gesf2+0x6>
    18da:	8f ef       	ldi	r24, 0xFF	; 255
    18dc:	08 95       	ret

000018de <__mulsf3>:
    18de:	0b d0       	rcall	.+22     	; 0x18f6 <__mulsf3x>
    18e0:	c0 cf       	rjmp	.-128    	; 0x1862 <__fp_round>
    18e2:	b1 df       	rcall	.-158    	; 0x1846 <__fp_pscA>
    18e4:	28 f0       	brcs	.+10     	; 0x18f0 <__mulsf3+0x12>
    18e6:	b6 df       	rcall	.-148    	; 0x1854 <__fp_pscB>
    18e8:	18 f0       	brcs	.+6      	; 0x18f0 <__mulsf3+0x12>
    18ea:	95 23       	and	r25, r21
    18ec:	09 f0       	breq	.+2      	; 0x18f0 <__mulsf3+0x12>
    18ee:	a2 cf       	rjmp	.-188    	; 0x1834 <__fp_inf>
    18f0:	a7 cf       	rjmp	.-178    	; 0x1840 <__fp_nan>
    18f2:	11 24       	eor	r1, r1
    18f4:	ea cf       	rjmp	.-44     	; 0x18ca <__fp_szero>

000018f6 <__mulsf3x>:
    18f6:	c6 df       	rcall	.-116    	; 0x1884 <__fp_split3>
    18f8:	a0 f3       	brcs	.-24     	; 0x18e2 <__mulsf3+0x4>

000018fa <__mulsf3_pse>:
    18fa:	95 9f       	mul	r25, r21
    18fc:	d1 f3       	breq	.-12     	; 0x18f2 <__mulsf3+0x14>
    18fe:	95 0f       	add	r25, r21
    1900:	50 e0       	ldi	r21, 0x00	; 0
    1902:	55 1f       	adc	r21, r21
    1904:	62 9f       	mul	r22, r18
    1906:	f0 01       	movw	r30, r0
    1908:	72 9f       	mul	r23, r18
    190a:	bb 27       	eor	r27, r27
    190c:	f0 0d       	add	r31, r0
    190e:	b1 1d       	adc	r27, r1
    1910:	63 9f       	mul	r22, r19
    1912:	aa 27       	eor	r26, r26
    1914:	f0 0d       	add	r31, r0
    1916:	b1 1d       	adc	r27, r1
    1918:	aa 1f       	adc	r26, r26
    191a:	64 9f       	mul	r22, r20
    191c:	66 27       	eor	r22, r22
    191e:	b0 0d       	add	r27, r0
    1920:	a1 1d       	adc	r26, r1
    1922:	66 1f       	adc	r22, r22
    1924:	82 9f       	mul	r24, r18
    1926:	22 27       	eor	r18, r18
    1928:	b0 0d       	add	r27, r0
    192a:	a1 1d       	adc	r26, r1
    192c:	62 1f       	adc	r22, r18
    192e:	73 9f       	mul	r23, r19
    1930:	b0 0d       	add	r27, r0
    1932:	a1 1d       	adc	r26, r1
    1934:	62 1f       	adc	r22, r18
    1936:	83 9f       	mul	r24, r19
    1938:	a0 0d       	add	r26, r0
    193a:	61 1d       	adc	r22, r1
    193c:	22 1f       	adc	r18, r18
    193e:	74 9f       	mul	r23, r20
    1940:	33 27       	eor	r19, r19
    1942:	a0 0d       	add	r26, r0
    1944:	61 1d       	adc	r22, r1
    1946:	23 1f       	adc	r18, r19
    1948:	84 9f       	mul	r24, r20
    194a:	60 0d       	add	r22, r0
    194c:	21 1d       	adc	r18, r1
    194e:	82 2f       	mov	r24, r18
    1950:	76 2f       	mov	r23, r22
    1952:	6a 2f       	mov	r22, r26
    1954:	11 24       	eor	r1, r1
    1956:	9f 57       	subi	r25, 0x7F	; 127
    1958:	50 40       	sbci	r21, 0x00	; 0
    195a:	8a f0       	brmi	.+34     	; 0x197e <__mulsf3_pse+0x84>
    195c:	e1 f0       	breq	.+56     	; 0x1996 <__mulsf3_pse+0x9c>
    195e:	88 23       	and	r24, r24
    1960:	4a f0       	brmi	.+18     	; 0x1974 <__mulsf3_pse+0x7a>
    1962:	ee 0f       	add	r30, r30
    1964:	ff 1f       	adc	r31, r31
    1966:	bb 1f       	adc	r27, r27
    1968:	66 1f       	adc	r22, r22
    196a:	77 1f       	adc	r23, r23
    196c:	88 1f       	adc	r24, r24
    196e:	91 50       	subi	r25, 0x01	; 1
    1970:	50 40       	sbci	r21, 0x00	; 0
    1972:	a9 f7       	brne	.-22     	; 0x195e <__mulsf3_pse+0x64>
    1974:	9e 3f       	cpi	r25, 0xFE	; 254
    1976:	51 05       	cpc	r21, r1
    1978:	70 f0       	brcs	.+28     	; 0x1996 <__mulsf3_pse+0x9c>
    197a:	5c cf       	rjmp	.-328    	; 0x1834 <__fp_inf>
    197c:	a6 cf       	rjmp	.-180    	; 0x18ca <__fp_szero>
    197e:	5f 3f       	cpi	r21, 0xFF	; 255
    1980:	ec f3       	brlt	.-6      	; 0x197c <__mulsf3_pse+0x82>
    1982:	98 3e       	cpi	r25, 0xE8	; 232
    1984:	dc f3       	brlt	.-10     	; 0x197c <__mulsf3_pse+0x82>
    1986:	86 95       	lsr	r24
    1988:	77 95       	ror	r23
    198a:	67 95       	ror	r22
    198c:	b7 95       	ror	r27
    198e:	f7 95       	ror	r31
    1990:	e7 95       	ror	r30
    1992:	9f 5f       	subi	r25, 0xFF	; 255
    1994:	c1 f7       	brne	.-16     	; 0x1986 <__mulsf3_pse+0x8c>
    1996:	fe 2b       	or	r31, r30
    1998:	88 0f       	add	r24, r24
    199a:	91 1d       	adc	r25, r1
    199c:	96 95       	lsr	r25
    199e:	87 95       	ror	r24
    19a0:	97 f9       	bld	r25, 7
    19a2:	08 95       	ret

000019a4 <__tablejump2__>:
    19a4:	ee 0f       	add	r30, r30
    19a6:	ff 1f       	adc	r31, r31

000019a8 <__tablejump__>:
    19a8:	05 90       	lpm	r0, Z+
    19aa:	f4 91       	lpm	r31, Z
    19ac:	e0 2d       	mov	r30, r0
    19ae:	09 94       	ijmp

000019b0 <__umulhisi3>:
    19b0:	a2 9f       	mul	r26, r18
    19b2:	b0 01       	movw	r22, r0
    19b4:	b3 9f       	mul	r27, r19
    19b6:	c0 01       	movw	r24, r0
    19b8:	a3 9f       	mul	r26, r19
    19ba:	70 0d       	add	r23, r0
    19bc:	81 1d       	adc	r24, r1
    19be:	11 24       	eor	r1, r1
    19c0:	91 1d       	adc	r25, r1
    19c2:	b2 9f       	mul	r27, r18
    19c4:	70 0d       	add	r23, r0
    19c6:	81 1d       	adc	r24, r1
    19c8:	11 24       	eor	r1, r1
    19ca:	91 1d       	adc	r25, r1
    19cc:	08 95       	ret

000019ce <__muluhisi3>:
    19ce:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__umulhisi3>
    19d2:	a5 9f       	mul	r26, r21
    19d4:	90 0d       	add	r25, r0
    19d6:	b4 9f       	mul	r27, r20
    19d8:	90 0d       	add	r25, r0
    19da:	a4 9f       	mul	r26, r20
    19dc:	80 0d       	add	r24, r0
    19de:	91 1d       	adc	r25, r1
    19e0:	11 24       	eor	r1, r1
    19e2:	08 95       	ret

000019e4 <printf>:
    19e4:	a0 e0       	ldi	r26, 0x00	; 0
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e8 ef       	ldi	r30, 0xF8	; 248
    19ea:	fc e0       	ldi	r31, 0x0C	; 12
    19ec:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__prologue_saves__+0x20>
    19f0:	fe 01       	movw	r30, r28
    19f2:	35 96       	adiw	r30, 0x05	; 5
    19f4:	61 91       	ld	r22, Z+
    19f6:	71 91       	ld	r23, Z+
    19f8:	af 01       	movw	r20, r30
    19fa:	80 91 89 04 	lds	r24, 0x0489
    19fe:	90 91 8a 04 	lds	r25, 0x048A
    1a02:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <vfprintf>
    1a06:	e2 e0       	ldi	r30, 0x02	; 2
    1a08:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <__epilogue_restores__+0x20>

00001a0c <sprintf>:
    1a0c:	ae e0       	ldi	r26, 0x0E	; 14
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	ec e0       	ldi	r30, 0x0C	; 12
    1a12:	fd e0       	ldi	r31, 0x0D	; 13
    1a14:	0c 94 ae 0f 	jmp	0x1f5c	; 0x1f5c <__prologue_saves__+0x1c>
    1a18:	0d 89       	ldd	r16, Y+21	; 0x15
    1a1a:	1e 89       	ldd	r17, Y+22	; 0x16
    1a1c:	86 e0       	ldi	r24, 0x06	; 6
    1a1e:	8c 83       	std	Y+4, r24	; 0x04
    1a20:	1a 83       	std	Y+2, r17	; 0x02
    1a22:	09 83       	std	Y+1, r16	; 0x01
    1a24:	8f ef       	ldi	r24, 0xFF	; 255
    1a26:	9f e7       	ldi	r25, 0x7F	; 127
    1a28:	9e 83       	std	Y+6, r25	; 0x06
    1a2a:	8d 83       	std	Y+5, r24	; 0x05
    1a2c:	ae 01       	movw	r20, r28
    1a2e:	47 5e       	subi	r20, 0xE7	; 231
    1a30:	5f 4f       	sbci	r21, 0xFF	; 255
    1a32:	6f 89       	ldd	r22, Y+23	; 0x17
    1a34:	78 8d       	ldd	r23, Y+24	; 0x18
    1a36:	ce 01       	movw	r24, r28
    1a38:	01 96       	adiw	r24, 0x01	; 1
    1a3a:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <vfprintf>
    1a3e:	ef 81       	ldd	r30, Y+7	; 0x07
    1a40:	f8 85       	ldd	r31, Y+8	; 0x08
    1a42:	e0 0f       	add	r30, r16
    1a44:	f1 1f       	adc	r31, r17
    1a46:	10 82       	st	Z, r1
    1a48:	2e 96       	adiw	r28, 0x0e	; 14
    1a4a:	e4 e0       	ldi	r30, 0x04	; 4
    1a4c:	0c 94 ca 0f 	jmp	0x1f94	; 0x1f94 <__epilogue_restores__+0x1c>

00001a50 <vfprintf>:
    1a50:	ac e0       	ldi	r26, 0x0C	; 12
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	ee e2       	ldi	r30, 0x2E	; 46
    1a56:	fd e0       	ldi	r31, 0x0D	; 13
    1a58:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <__prologue_saves__>
    1a5c:	7c 01       	movw	r14, r24
    1a5e:	6b 01       	movw	r12, r22
    1a60:	8a 01       	movw	r16, r20
    1a62:	fc 01       	movw	r30, r24
    1a64:	17 82       	std	Z+7, r1	; 0x07
    1a66:	16 82       	std	Z+6, r1	; 0x06
    1a68:	83 81       	ldd	r24, Z+3	; 0x03
    1a6a:	81 ff       	sbrs	r24, 1
    1a6c:	bd c1       	rjmp	.+890    	; 0x1de8 <vfprintf+0x398>
    1a6e:	ce 01       	movw	r24, r28
    1a70:	01 96       	adiw	r24, 0x01	; 1
    1a72:	4c 01       	movw	r8, r24
    1a74:	f7 01       	movw	r30, r14
    1a76:	93 81       	ldd	r25, Z+3	; 0x03
    1a78:	f6 01       	movw	r30, r12
    1a7a:	93 fd       	sbrc	r25, 3
    1a7c:	85 91       	lpm	r24, Z+
    1a7e:	93 ff       	sbrs	r25, 3
    1a80:	81 91       	ld	r24, Z+
    1a82:	6f 01       	movw	r12, r30
    1a84:	88 23       	and	r24, r24
    1a86:	09 f4       	brne	.+2      	; 0x1a8a <vfprintf+0x3a>
    1a88:	ab c1       	rjmp	.+854    	; 0x1de0 <vfprintf+0x390>
    1a8a:	85 32       	cpi	r24, 0x25	; 37
    1a8c:	39 f4       	brne	.+14     	; 0x1a9c <vfprintf+0x4c>
    1a8e:	93 fd       	sbrc	r25, 3
    1a90:	85 91       	lpm	r24, Z+
    1a92:	93 ff       	sbrs	r25, 3
    1a94:	81 91       	ld	r24, Z+
    1a96:	6f 01       	movw	r12, r30
    1a98:	85 32       	cpi	r24, 0x25	; 37
    1a9a:	29 f4       	brne	.+10     	; 0x1aa6 <vfprintf+0x56>
    1a9c:	b7 01       	movw	r22, r14
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <fputc>
    1aa4:	e7 cf       	rjmp	.-50     	; 0x1a74 <vfprintf+0x24>
    1aa6:	51 2c       	mov	r5, r1
    1aa8:	31 2c       	mov	r3, r1
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	20 32       	cpi	r18, 0x20	; 32
    1aae:	a0 f4       	brcc	.+40     	; 0x1ad8 <vfprintf+0x88>
    1ab0:	8b 32       	cpi	r24, 0x2B	; 43
    1ab2:	69 f0       	breq	.+26     	; 0x1ace <vfprintf+0x7e>
    1ab4:	30 f4       	brcc	.+12     	; 0x1ac2 <vfprintf+0x72>
    1ab6:	80 32       	cpi	r24, 0x20	; 32
    1ab8:	59 f0       	breq	.+22     	; 0x1ad0 <vfprintf+0x80>
    1aba:	83 32       	cpi	r24, 0x23	; 35
    1abc:	69 f4       	brne	.+26     	; 0x1ad8 <vfprintf+0x88>
    1abe:	20 61       	ori	r18, 0x10	; 16
    1ac0:	2c c0       	rjmp	.+88     	; 0x1b1a <vfprintf+0xca>
    1ac2:	8d 32       	cpi	r24, 0x2D	; 45
    1ac4:	39 f0       	breq	.+14     	; 0x1ad4 <vfprintf+0x84>
    1ac6:	80 33       	cpi	r24, 0x30	; 48
    1ac8:	39 f4       	brne	.+14     	; 0x1ad8 <vfprintf+0x88>
    1aca:	21 60       	ori	r18, 0x01	; 1
    1acc:	26 c0       	rjmp	.+76     	; 0x1b1a <vfprintf+0xca>
    1ace:	22 60       	ori	r18, 0x02	; 2
    1ad0:	24 60       	ori	r18, 0x04	; 4
    1ad2:	23 c0       	rjmp	.+70     	; 0x1b1a <vfprintf+0xca>
    1ad4:	28 60       	ori	r18, 0x08	; 8
    1ad6:	21 c0       	rjmp	.+66     	; 0x1b1a <vfprintf+0xca>
    1ad8:	27 fd       	sbrc	r18, 7
    1ada:	27 c0       	rjmp	.+78     	; 0x1b2a <vfprintf+0xda>
    1adc:	30 ed       	ldi	r19, 0xD0	; 208
    1ade:	38 0f       	add	r19, r24
    1ae0:	3a 30       	cpi	r19, 0x0A	; 10
    1ae2:	78 f4       	brcc	.+30     	; 0x1b02 <vfprintf+0xb2>
    1ae4:	26 ff       	sbrs	r18, 6
    1ae6:	06 c0       	rjmp	.+12     	; 0x1af4 <vfprintf+0xa4>
    1ae8:	fa e0       	ldi	r31, 0x0A	; 10
    1aea:	5f 9e       	mul	r5, r31
    1aec:	30 0d       	add	r19, r0
    1aee:	11 24       	eor	r1, r1
    1af0:	53 2e       	mov	r5, r19
    1af2:	13 c0       	rjmp	.+38     	; 0x1b1a <vfprintf+0xca>
    1af4:	8a e0       	ldi	r24, 0x0A	; 10
    1af6:	38 9e       	mul	r3, r24
    1af8:	30 0d       	add	r19, r0
    1afa:	11 24       	eor	r1, r1
    1afc:	33 2e       	mov	r3, r19
    1afe:	20 62       	ori	r18, 0x20	; 32
    1b00:	0c c0       	rjmp	.+24     	; 0x1b1a <vfprintf+0xca>
    1b02:	8e 32       	cpi	r24, 0x2E	; 46
    1b04:	21 f4       	brne	.+8      	; 0x1b0e <vfprintf+0xbe>
    1b06:	26 fd       	sbrc	r18, 6
    1b08:	6b c1       	rjmp	.+726    	; 0x1de0 <vfprintf+0x390>
    1b0a:	20 64       	ori	r18, 0x40	; 64
    1b0c:	06 c0       	rjmp	.+12     	; 0x1b1a <vfprintf+0xca>
    1b0e:	8c 36       	cpi	r24, 0x6C	; 108
    1b10:	11 f4       	brne	.+4      	; 0x1b16 <vfprintf+0xc6>
    1b12:	20 68       	ori	r18, 0x80	; 128
    1b14:	02 c0       	rjmp	.+4      	; 0x1b1a <vfprintf+0xca>
    1b16:	88 36       	cpi	r24, 0x68	; 104
    1b18:	41 f4       	brne	.+16     	; 0x1b2a <vfprintf+0xda>
    1b1a:	f6 01       	movw	r30, r12
    1b1c:	93 fd       	sbrc	r25, 3
    1b1e:	85 91       	lpm	r24, Z+
    1b20:	93 ff       	sbrs	r25, 3
    1b22:	81 91       	ld	r24, Z+
    1b24:	6f 01       	movw	r12, r30
    1b26:	81 11       	cpse	r24, r1
    1b28:	c1 cf       	rjmp	.-126    	; 0x1aac <vfprintf+0x5c>
    1b2a:	98 2f       	mov	r25, r24
    1b2c:	9f 7d       	andi	r25, 0xDF	; 223
    1b2e:	95 54       	subi	r25, 0x45	; 69
    1b30:	93 30       	cpi	r25, 0x03	; 3
    1b32:	28 f4       	brcc	.+10     	; 0x1b3e <vfprintf+0xee>
    1b34:	0c 5f       	subi	r16, 0xFC	; 252
    1b36:	1f 4f       	sbci	r17, 0xFF	; 255
    1b38:	ff e3       	ldi	r31, 0x3F	; 63
    1b3a:	f9 83       	std	Y+1, r31	; 0x01
    1b3c:	0d c0       	rjmp	.+26     	; 0x1b58 <vfprintf+0x108>
    1b3e:	83 36       	cpi	r24, 0x63	; 99
    1b40:	31 f0       	breq	.+12     	; 0x1b4e <vfprintf+0xfe>
    1b42:	83 37       	cpi	r24, 0x73	; 115
    1b44:	71 f0       	breq	.+28     	; 0x1b62 <vfprintf+0x112>
    1b46:	83 35       	cpi	r24, 0x53	; 83
    1b48:	09 f0       	breq	.+2      	; 0x1b4c <vfprintf+0xfc>
    1b4a:	5b c0       	rjmp	.+182    	; 0x1c02 <vfprintf+0x1b2>
    1b4c:	22 c0       	rjmp	.+68     	; 0x1b92 <vfprintf+0x142>
    1b4e:	f8 01       	movw	r30, r16
    1b50:	80 81       	ld	r24, Z
    1b52:	89 83       	std	Y+1, r24	; 0x01
    1b54:	0e 5f       	subi	r16, 0xFE	; 254
    1b56:	1f 4f       	sbci	r17, 0xFF	; 255
    1b58:	44 24       	eor	r4, r4
    1b5a:	43 94       	inc	r4
    1b5c:	51 2c       	mov	r5, r1
    1b5e:	54 01       	movw	r10, r8
    1b60:	15 c0       	rjmp	.+42     	; 0x1b8c <vfprintf+0x13c>
    1b62:	38 01       	movw	r6, r16
    1b64:	f2 e0       	ldi	r31, 0x02	; 2
    1b66:	6f 0e       	add	r6, r31
    1b68:	71 1c       	adc	r7, r1
    1b6a:	f8 01       	movw	r30, r16
    1b6c:	a0 80       	ld	r10, Z
    1b6e:	b1 80       	ldd	r11, Z+1	; 0x01
    1b70:	26 ff       	sbrs	r18, 6
    1b72:	03 c0       	rjmp	.+6      	; 0x1b7a <vfprintf+0x12a>
    1b74:	65 2d       	mov	r22, r5
    1b76:	70 e0       	ldi	r23, 0x00	; 0
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <vfprintf+0x12e>
    1b7a:	6f ef       	ldi	r22, 0xFF	; 255
    1b7c:	7f ef       	ldi	r23, 0xFF	; 255
    1b7e:	c5 01       	movw	r24, r10
    1b80:	2c 87       	std	Y+12, r18	; 0x0c
    1b82:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <strnlen>
    1b86:	2c 01       	movw	r4, r24
    1b88:	83 01       	movw	r16, r6
    1b8a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b8c:	2f 77       	andi	r18, 0x7F	; 127
    1b8e:	22 2e       	mov	r2, r18
    1b90:	17 c0       	rjmp	.+46     	; 0x1bc0 <vfprintf+0x170>
    1b92:	38 01       	movw	r6, r16
    1b94:	f2 e0       	ldi	r31, 0x02	; 2
    1b96:	6f 0e       	add	r6, r31
    1b98:	71 1c       	adc	r7, r1
    1b9a:	f8 01       	movw	r30, r16
    1b9c:	a0 80       	ld	r10, Z
    1b9e:	b1 80       	ldd	r11, Z+1	; 0x01
    1ba0:	26 ff       	sbrs	r18, 6
    1ba2:	03 c0       	rjmp	.+6      	; 0x1baa <vfprintf+0x15a>
    1ba4:	65 2d       	mov	r22, r5
    1ba6:	70 e0       	ldi	r23, 0x00	; 0
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <vfprintf+0x15e>
    1baa:	6f ef       	ldi	r22, 0xFF	; 255
    1bac:	7f ef       	ldi	r23, 0xFF	; 255
    1bae:	c5 01       	movw	r24, r10
    1bb0:	2c 87       	std	Y+12, r18	; 0x0c
    1bb2:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <strnlen_P>
    1bb6:	2c 01       	movw	r4, r24
    1bb8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bba:	20 68       	ori	r18, 0x80	; 128
    1bbc:	22 2e       	mov	r2, r18
    1bbe:	83 01       	movw	r16, r6
    1bc0:	23 fc       	sbrc	r2, 3
    1bc2:	1b c0       	rjmp	.+54     	; 0x1bfa <vfprintf+0x1aa>
    1bc4:	83 2d       	mov	r24, r3
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	48 16       	cp	r4, r24
    1bca:	59 06       	cpc	r5, r25
    1bcc:	b0 f4       	brcc	.+44     	; 0x1bfa <vfprintf+0x1aa>
    1bce:	b7 01       	movw	r22, r14
    1bd0:	80 e2       	ldi	r24, 0x20	; 32
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <fputc>
    1bd8:	3a 94       	dec	r3
    1bda:	f4 cf       	rjmp	.-24     	; 0x1bc4 <vfprintf+0x174>
    1bdc:	f5 01       	movw	r30, r10
    1bde:	27 fc       	sbrc	r2, 7
    1be0:	85 91       	lpm	r24, Z+
    1be2:	27 fe       	sbrs	r2, 7
    1be4:	81 91       	ld	r24, Z+
    1be6:	5f 01       	movw	r10, r30
    1be8:	b7 01       	movw	r22, r14
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <fputc>
    1bf0:	31 10       	cpse	r3, r1
    1bf2:	3a 94       	dec	r3
    1bf4:	f1 e0       	ldi	r31, 0x01	; 1
    1bf6:	4f 1a       	sub	r4, r31
    1bf8:	51 08       	sbc	r5, r1
    1bfa:	41 14       	cp	r4, r1
    1bfc:	51 04       	cpc	r5, r1
    1bfe:	71 f7       	brne	.-36     	; 0x1bdc <vfprintf+0x18c>
    1c00:	e5 c0       	rjmp	.+458    	; 0x1dcc <vfprintf+0x37c>
    1c02:	84 36       	cpi	r24, 0x64	; 100
    1c04:	11 f0       	breq	.+4      	; 0x1c0a <vfprintf+0x1ba>
    1c06:	89 36       	cpi	r24, 0x69	; 105
    1c08:	39 f5       	brne	.+78     	; 0x1c58 <vfprintf+0x208>
    1c0a:	f8 01       	movw	r30, r16
    1c0c:	27 ff       	sbrs	r18, 7
    1c0e:	07 c0       	rjmp	.+14     	; 0x1c1e <vfprintf+0x1ce>
    1c10:	60 81       	ld	r22, Z
    1c12:	71 81       	ldd	r23, Z+1	; 0x01
    1c14:	82 81       	ldd	r24, Z+2	; 0x02
    1c16:	93 81       	ldd	r25, Z+3	; 0x03
    1c18:	0c 5f       	subi	r16, 0xFC	; 252
    1c1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c1c:	08 c0       	rjmp	.+16     	; 0x1c2e <vfprintf+0x1de>
    1c1e:	60 81       	ld	r22, Z
    1c20:	71 81       	ldd	r23, Z+1	; 0x01
    1c22:	88 27       	eor	r24, r24
    1c24:	77 fd       	sbrc	r23, 7
    1c26:	80 95       	com	r24
    1c28:	98 2f       	mov	r25, r24
    1c2a:	0e 5f       	subi	r16, 0xFE	; 254
    1c2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2e:	2f 76       	andi	r18, 0x6F	; 111
    1c30:	b2 2e       	mov	r11, r18
    1c32:	97 ff       	sbrs	r25, 7
    1c34:	09 c0       	rjmp	.+18     	; 0x1c48 <vfprintf+0x1f8>
    1c36:	90 95       	com	r25
    1c38:	80 95       	com	r24
    1c3a:	70 95       	com	r23
    1c3c:	61 95       	neg	r22
    1c3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c40:	8f 4f       	sbci	r24, 0xFF	; 255
    1c42:	9f 4f       	sbci	r25, 0xFF	; 255
    1c44:	20 68       	ori	r18, 0x80	; 128
    1c46:	b2 2e       	mov	r11, r18
    1c48:	2a e0       	ldi	r18, 0x0A	; 10
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	a4 01       	movw	r20, r8
    1c4e:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__ultoa_invert>
    1c52:	a8 2e       	mov	r10, r24
    1c54:	a8 18       	sub	r10, r8
    1c56:	44 c0       	rjmp	.+136    	; 0x1ce0 <vfprintf+0x290>
    1c58:	85 37       	cpi	r24, 0x75	; 117
    1c5a:	29 f4       	brne	.+10     	; 0x1c66 <vfprintf+0x216>
    1c5c:	2f 7e       	andi	r18, 0xEF	; 239
    1c5e:	b2 2e       	mov	r11, r18
    1c60:	2a e0       	ldi	r18, 0x0A	; 10
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	25 c0       	rjmp	.+74     	; 0x1cb0 <vfprintf+0x260>
    1c66:	f2 2f       	mov	r31, r18
    1c68:	f9 7f       	andi	r31, 0xF9	; 249
    1c6a:	bf 2e       	mov	r11, r31
    1c6c:	8f 36       	cpi	r24, 0x6F	; 111
    1c6e:	c1 f0       	breq	.+48     	; 0x1ca0 <vfprintf+0x250>
    1c70:	18 f4       	brcc	.+6      	; 0x1c78 <vfprintf+0x228>
    1c72:	88 35       	cpi	r24, 0x58	; 88
    1c74:	79 f0       	breq	.+30     	; 0x1c94 <vfprintf+0x244>
    1c76:	b4 c0       	rjmp	.+360    	; 0x1de0 <vfprintf+0x390>
    1c78:	80 37       	cpi	r24, 0x70	; 112
    1c7a:	19 f0       	breq	.+6      	; 0x1c82 <vfprintf+0x232>
    1c7c:	88 37       	cpi	r24, 0x78	; 120
    1c7e:	21 f0       	breq	.+8      	; 0x1c88 <vfprintf+0x238>
    1c80:	af c0       	rjmp	.+350    	; 0x1de0 <vfprintf+0x390>
    1c82:	2f 2f       	mov	r18, r31
    1c84:	20 61       	ori	r18, 0x10	; 16
    1c86:	b2 2e       	mov	r11, r18
    1c88:	b4 fe       	sbrs	r11, 4
    1c8a:	0d c0       	rjmp	.+26     	; 0x1ca6 <vfprintf+0x256>
    1c8c:	8b 2d       	mov	r24, r11
    1c8e:	84 60       	ori	r24, 0x04	; 4
    1c90:	b8 2e       	mov	r11, r24
    1c92:	09 c0       	rjmp	.+18     	; 0x1ca6 <vfprintf+0x256>
    1c94:	24 ff       	sbrs	r18, 4
    1c96:	0a c0       	rjmp	.+20     	; 0x1cac <vfprintf+0x25c>
    1c98:	9f 2f       	mov	r25, r31
    1c9a:	96 60       	ori	r25, 0x06	; 6
    1c9c:	b9 2e       	mov	r11, r25
    1c9e:	06 c0       	rjmp	.+12     	; 0x1cac <vfprintf+0x25c>
    1ca0:	28 e0       	ldi	r18, 0x08	; 8
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	05 c0       	rjmp	.+10     	; 0x1cb0 <vfprintf+0x260>
    1ca6:	20 e1       	ldi	r18, 0x10	; 16
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	02 c0       	rjmp	.+4      	; 0x1cb0 <vfprintf+0x260>
    1cac:	20 e1       	ldi	r18, 0x10	; 16
    1cae:	32 e0       	ldi	r19, 0x02	; 2
    1cb0:	f8 01       	movw	r30, r16
    1cb2:	b7 fe       	sbrs	r11, 7
    1cb4:	07 c0       	rjmp	.+14     	; 0x1cc4 <vfprintf+0x274>
    1cb6:	60 81       	ld	r22, Z
    1cb8:	71 81       	ldd	r23, Z+1	; 0x01
    1cba:	82 81       	ldd	r24, Z+2	; 0x02
    1cbc:	93 81       	ldd	r25, Z+3	; 0x03
    1cbe:	0c 5f       	subi	r16, 0xFC	; 252
    1cc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc2:	06 c0       	rjmp	.+12     	; 0x1cd0 <vfprintf+0x280>
    1cc4:	60 81       	ld	r22, Z
    1cc6:	71 81       	ldd	r23, Z+1	; 0x01
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	0e 5f       	subi	r16, 0xFE	; 254
    1cce:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd0:	a4 01       	movw	r20, r8
    1cd2:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__ultoa_invert>
    1cd6:	a8 2e       	mov	r10, r24
    1cd8:	a8 18       	sub	r10, r8
    1cda:	fb 2d       	mov	r31, r11
    1cdc:	ff 77       	andi	r31, 0x7F	; 127
    1cde:	bf 2e       	mov	r11, r31
    1ce0:	b6 fe       	sbrs	r11, 6
    1ce2:	0b c0       	rjmp	.+22     	; 0x1cfa <vfprintf+0x2aa>
    1ce4:	2b 2d       	mov	r18, r11
    1ce6:	2e 7f       	andi	r18, 0xFE	; 254
    1ce8:	a5 14       	cp	r10, r5
    1cea:	50 f4       	brcc	.+20     	; 0x1d00 <vfprintf+0x2b0>
    1cec:	b4 fe       	sbrs	r11, 4
    1cee:	0a c0       	rjmp	.+20     	; 0x1d04 <vfprintf+0x2b4>
    1cf0:	b2 fc       	sbrc	r11, 2
    1cf2:	08 c0       	rjmp	.+16     	; 0x1d04 <vfprintf+0x2b4>
    1cf4:	2b 2d       	mov	r18, r11
    1cf6:	2e 7e       	andi	r18, 0xEE	; 238
    1cf8:	05 c0       	rjmp	.+10     	; 0x1d04 <vfprintf+0x2b4>
    1cfa:	7a 2c       	mov	r7, r10
    1cfc:	2b 2d       	mov	r18, r11
    1cfe:	03 c0       	rjmp	.+6      	; 0x1d06 <vfprintf+0x2b6>
    1d00:	7a 2c       	mov	r7, r10
    1d02:	01 c0       	rjmp	.+2      	; 0x1d06 <vfprintf+0x2b6>
    1d04:	75 2c       	mov	r7, r5
    1d06:	24 ff       	sbrs	r18, 4
    1d08:	0d c0       	rjmp	.+26     	; 0x1d24 <vfprintf+0x2d4>
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	ea 0d       	add	r30, r10
    1d0e:	f1 1d       	adc	r31, r1
    1d10:	80 81       	ld	r24, Z
    1d12:	80 33       	cpi	r24, 0x30	; 48
    1d14:	11 f4       	brne	.+4      	; 0x1d1a <vfprintf+0x2ca>
    1d16:	29 7e       	andi	r18, 0xE9	; 233
    1d18:	09 c0       	rjmp	.+18     	; 0x1d2c <vfprintf+0x2dc>
    1d1a:	22 ff       	sbrs	r18, 2
    1d1c:	06 c0       	rjmp	.+12     	; 0x1d2a <vfprintf+0x2da>
    1d1e:	73 94       	inc	r7
    1d20:	73 94       	inc	r7
    1d22:	04 c0       	rjmp	.+8      	; 0x1d2c <vfprintf+0x2dc>
    1d24:	82 2f       	mov	r24, r18
    1d26:	86 78       	andi	r24, 0x86	; 134
    1d28:	09 f0       	breq	.+2      	; 0x1d2c <vfprintf+0x2dc>
    1d2a:	73 94       	inc	r7
    1d2c:	23 fd       	sbrc	r18, 3
    1d2e:	13 c0       	rjmp	.+38     	; 0x1d56 <vfprintf+0x306>
    1d30:	20 ff       	sbrs	r18, 0
    1d32:	06 c0       	rjmp	.+12     	; 0x1d40 <vfprintf+0x2f0>
    1d34:	5a 2c       	mov	r5, r10
    1d36:	73 14       	cp	r7, r3
    1d38:	18 f4       	brcc	.+6      	; 0x1d40 <vfprintf+0x2f0>
    1d3a:	53 0c       	add	r5, r3
    1d3c:	57 18       	sub	r5, r7
    1d3e:	73 2c       	mov	r7, r3
    1d40:	73 14       	cp	r7, r3
    1d42:	68 f4       	brcc	.+26     	; 0x1d5e <vfprintf+0x30e>
    1d44:	b7 01       	movw	r22, r14
    1d46:	80 e2       	ldi	r24, 0x20	; 32
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	2c 87       	std	Y+12, r18	; 0x0c
    1d4c:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <fputc>
    1d50:	73 94       	inc	r7
    1d52:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d54:	f5 cf       	rjmp	.-22     	; 0x1d40 <vfprintf+0x2f0>
    1d56:	73 14       	cp	r7, r3
    1d58:	10 f4       	brcc	.+4      	; 0x1d5e <vfprintf+0x30e>
    1d5a:	37 18       	sub	r3, r7
    1d5c:	01 c0       	rjmp	.+2      	; 0x1d60 <vfprintf+0x310>
    1d5e:	31 2c       	mov	r3, r1
    1d60:	24 ff       	sbrs	r18, 4
    1d62:	12 c0       	rjmp	.+36     	; 0x1d88 <vfprintf+0x338>
    1d64:	b7 01       	movw	r22, r14
    1d66:	80 e3       	ldi	r24, 0x30	; 48
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	2c 87       	std	Y+12, r18	; 0x0c
    1d6c:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <fputc>
    1d70:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d72:	22 ff       	sbrs	r18, 2
    1d74:	17 c0       	rjmp	.+46     	; 0x1da4 <vfprintf+0x354>
    1d76:	21 ff       	sbrs	r18, 1
    1d78:	03 c0       	rjmp	.+6      	; 0x1d80 <vfprintf+0x330>
    1d7a:	88 e5       	ldi	r24, 0x58	; 88
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	02 c0       	rjmp	.+4      	; 0x1d84 <vfprintf+0x334>
    1d80:	88 e7       	ldi	r24, 0x78	; 120
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	b7 01       	movw	r22, r14
    1d86:	0c c0       	rjmp	.+24     	; 0x1da0 <vfprintf+0x350>
    1d88:	82 2f       	mov	r24, r18
    1d8a:	86 78       	andi	r24, 0x86	; 134
    1d8c:	59 f0       	breq	.+22     	; 0x1da4 <vfprintf+0x354>
    1d8e:	21 fd       	sbrc	r18, 1
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <vfprintf+0x346>
    1d92:	80 e2       	ldi	r24, 0x20	; 32
    1d94:	01 c0       	rjmp	.+2      	; 0x1d98 <vfprintf+0x348>
    1d96:	8b e2       	ldi	r24, 0x2B	; 43
    1d98:	27 fd       	sbrc	r18, 7
    1d9a:	8d e2       	ldi	r24, 0x2D	; 45
    1d9c:	b7 01       	movw	r22, r14
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <fputc>
    1da4:	a5 14       	cp	r10, r5
    1da6:	38 f4       	brcc	.+14     	; 0x1db6 <vfprintf+0x366>
    1da8:	b7 01       	movw	r22, r14
    1daa:	80 e3       	ldi	r24, 0x30	; 48
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <fputc>
    1db2:	5a 94       	dec	r5
    1db4:	f7 cf       	rjmp	.-18     	; 0x1da4 <vfprintf+0x354>
    1db6:	aa 94       	dec	r10
    1db8:	f4 01       	movw	r30, r8
    1dba:	ea 0d       	add	r30, r10
    1dbc:	f1 1d       	adc	r31, r1
    1dbe:	80 81       	ld	r24, Z
    1dc0:	b7 01       	movw	r22, r14
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <fputc>
    1dc8:	a1 10       	cpse	r10, r1
    1dca:	f5 cf       	rjmp	.-22     	; 0x1db6 <vfprintf+0x366>
    1dcc:	33 20       	and	r3, r3
    1dce:	09 f4       	brne	.+2      	; 0x1dd2 <vfprintf+0x382>
    1dd0:	51 ce       	rjmp	.-862    	; 0x1a74 <vfprintf+0x24>
    1dd2:	b7 01       	movw	r22, r14
    1dd4:	80 e2       	ldi	r24, 0x20	; 32
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <fputc>
    1ddc:	3a 94       	dec	r3
    1dde:	f6 cf       	rjmp	.-20     	; 0x1dcc <vfprintf+0x37c>
    1de0:	f7 01       	movw	r30, r14
    1de2:	86 81       	ldd	r24, Z+6	; 0x06
    1de4:	97 81       	ldd	r25, Z+7	; 0x07
    1de6:	02 c0       	rjmp	.+4      	; 0x1dec <vfprintf+0x39c>
    1de8:	8f ef       	ldi	r24, 0xFF	; 255
    1dea:	9f ef       	ldi	r25, 0xFF	; 255
    1dec:	2c 96       	adiw	r28, 0x0c	; 12
    1dee:	e2 e1       	ldi	r30, 0x12	; 18
    1df0:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__epilogue_restores__>

00001df4 <strnlen_P>:
    1df4:	fc 01       	movw	r30, r24
    1df6:	05 90       	lpm	r0, Z+
    1df8:	61 50       	subi	r22, 0x01	; 1
    1dfa:	70 40       	sbci	r23, 0x00	; 0
    1dfc:	01 10       	cpse	r0, r1
    1dfe:	d8 f7       	brcc	.-10     	; 0x1df6 <strnlen_P+0x2>
    1e00:	80 95       	com	r24
    1e02:	90 95       	com	r25
    1e04:	8e 0f       	add	r24, r30
    1e06:	9f 1f       	adc	r25, r31
    1e08:	08 95       	ret

00001e0a <strnlen>:
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	61 50       	subi	r22, 0x01	; 1
    1e0e:	70 40       	sbci	r23, 0x00	; 0
    1e10:	01 90       	ld	r0, Z+
    1e12:	01 10       	cpse	r0, r1
    1e14:	d8 f7       	brcc	.-10     	; 0x1e0c <strnlen+0x2>
    1e16:	80 95       	com	r24
    1e18:	90 95       	com	r25
    1e1a:	8e 0f       	add	r24, r30
    1e1c:	9f 1f       	adc	r25, r31
    1e1e:	08 95       	ret

00001e20 <fputc>:
    1e20:	0f 93       	push	r16
    1e22:	1f 93       	push	r17
    1e24:	cf 93       	push	r28
    1e26:	df 93       	push	r29
    1e28:	18 2f       	mov	r17, r24
    1e2a:	09 2f       	mov	r16, r25
    1e2c:	eb 01       	movw	r28, r22
    1e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e30:	81 fd       	sbrc	r24, 1
    1e32:	03 c0       	rjmp	.+6      	; 0x1e3a <fputc+0x1a>
    1e34:	8f ef       	ldi	r24, 0xFF	; 255
    1e36:	9f ef       	ldi	r25, 0xFF	; 255
    1e38:	20 c0       	rjmp	.+64     	; 0x1e7a <fputc+0x5a>
    1e3a:	82 ff       	sbrs	r24, 2
    1e3c:	10 c0       	rjmp	.+32     	; 0x1e5e <fputc+0x3e>
    1e3e:	4e 81       	ldd	r20, Y+6	; 0x06
    1e40:	5f 81       	ldd	r21, Y+7	; 0x07
    1e42:	2c 81       	ldd	r18, Y+4	; 0x04
    1e44:	3d 81       	ldd	r19, Y+5	; 0x05
    1e46:	42 17       	cp	r20, r18
    1e48:	53 07       	cpc	r21, r19
    1e4a:	7c f4       	brge	.+30     	; 0x1e6a <fputc+0x4a>
    1e4c:	e8 81       	ld	r30, Y
    1e4e:	f9 81       	ldd	r31, Y+1	; 0x01
    1e50:	9f 01       	movw	r18, r30
    1e52:	2f 5f       	subi	r18, 0xFF	; 255
    1e54:	3f 4f       	sbci	r19, 0xFF	; 255
    1e56:	39 83       	std	Y+1, r19	; 0x01
    1e58:	28 83       	st	Y, r18
    1e5a:	10 83       	st	Z, r17
    1e5c:	06 c0       	rjmp	.+12     	; 0x1e6a <fputc+0x4a>
    1e5e:	e8 85       	ldd	r30, Y+8	; 0x08
    1e60:	f9 85       	ldd	r31, Y+9	; 0x09
    1e62:	81 2f       	mov	r24, r17
    1e64:	09 95       	icall
    1e66:	89 2b       	or	r24, r25
    1e68:	29 f7       	brne	.-54     	; 0x1e34 <fputc+0x14>
    1e6a:	2e 81       	ldd	r18, Y+6	; 0x06
    1e6c:	3f 81       	ldd	r19, Y+7	; 0x07
    1e6e:	2f 5f       	subi	r18, 0xFF	; 255
    1e70:	3f 4f       	sbci	r19, 0xFF	; 255
    1e72:	3f 83       	std	Y+7, r19	; 0x07
    1e74:	2e 83       	std	Y+6, r18	; 0x06
    1e76:	81 2f       	mov	r24, r17
    1e78:	90 2f       	mov	r25, r16
    1e7a:	df 91       	pop	r29
    1e7c:	cf 91       	pop	r28
    1e7e:	1f 91       	pop	r17
    1e80:	0f 91       	pop	r16
    1e82:	08 95       	ret

00001e84 <__ultoa_invert>:
    1e84:	fa 01       	movw	r30, r20
    1e86:	aa 27       	eor	r26, r26
    1e88:	28 30       	cpi	r18, 0x08	; 8
    1e8a:	51 f1       	breq	.+84     	; 0x1ee0 <__ultoa_invert+0x5c>
    1e8c:	20 31       	cpi	r18, 0x10	; 16
    1e8e:	81 f1       	breq	.+96     	; 0x1ef0 <__ultoa_invert+0x6c>
    1e90:	e8 94       	clt
    1e92:	6f 93       	push	r22
    1e94:	6e 7f       	andi	r22, 0xFE	; 254
    1e96:	6e 5f       	subi	r22, 0xFE	; 254
    1e98:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e9e:	af 4f       	sbci	r26, 0xFF	; 255
    1ea0:	b1 e0       	ldi	r27, 0x01	; 1
    1ea2:	3e d0       	rcall	.+124    	; 0x1f20 <__ultoa_invert+0x9c>
    1ea4:	b4 e0       	ldi	r27, 0x04	; 4
    1ea6:	3c d0       	rcall	.+120    	; 0x1f20 <__ultoa_invert+0x9c>
    1ea8:	67 0f       	add	r22, r23
    1eaa:	78 1f       	adc	r23, r24
    1eac:	89 1f       	adc	r24, r25
    1eae:	9a 1f       	adc	r25, r26
    1eb0:	a1 1d       	adc	r26, r1
    1eb2:	68 0f       	add	r22, r24
    1eb4:	79 1f       	adc	r23, r25
    1eb6:	8a 1f       	adc	r24, r26
    1eb8:	91 1d       	adc	r25, r1
    1eba:	a1 1d       	adc	r26, r1
    1ebc:	6a 0f       	add	r22, r26
    1ebe:	71 1d       	adc	r23, r1
    1ec0:	81 1d       	adc	r24, r1
    1ec2:	91 1d       	adc	r25, r1
    1ec4:	a1 1d       	adc	r26, r1
    1ec6:	20 d0       	rcall	.+64     	; 0x1f08 <__ultoa_invert+0x84>
    1ec8:	09 f4       	brne	.+2      	; 0x1ecc <__ultoa_invert+0x48>
    1eca:	68 94       	set
    1ecc:	3f 91       	pop	r19
    1ece:	2a e0       	ldi	r18, 0x0A	; 10
    1ed0:	26 9f       	mul	r18, r22
    1ed2:	11 24       	eor	r1, r1
    1ed4:	30 19       	sub	r19, r0
    1ed6:	30 5d       	subi	r19, 0xD0	; 208
    1ed8:	31 93       	st	Z+, r19
    1eda:	de f6       	brtc	.-74     	; 0x1e92 <__ultoa_invert+0xe>
    1edc:	cf 01       	movw	r24, r30
    1ede:	08 95       	ret
    1ee0:	46 2f       	mov	r20, r22
    1ee2:	47 70       	andi	r20, 0x07	; 7
    1ee4:	40 5d       	subi	r20, 0xD0	; 208
    1ee6:	41 93       	st	Z+, r20
    1ee8:	b3 e0       	ldi	r27, 0x03	; 3
    1eea:	0f d0       	rcall	.+30     	; 0x1f0a <__ultoa_invert+0x86>
    1eec:	c9 f7       	brne	.-14     	; 0x1ee0 <__ultoa_invert+0x5c>
    1eee:	f6 cf       	rjmp	.-20     	; 0x1edc <__ultoa_invert+0x58>
    1ef0:	46 2f       	mov	r20, r22
    1ef2:	4f 70       	andi	r20, 0x0F	; 15
    1ef4:	40 5d       	subi	r20, 0xD0	; 208
    1ef6:	4a 33       	cpi	r20, 0x3A	; 58
    1ef8:	18 f0       	brcs	.+6      	; 0x1f00 <__ultoa_invert+0x7c>
    1efa:	49 5d       	subi	r20, 0xD9	; 217
    1efc:	31 fd       	sbrc	r19, 1
    1efe:	40 52       	subi	r20, 0x20	; 32
    1f00:	41 93       	st	Z+, r20
    1f02:	02 d0       	rcall	.+4      	; 0x1f08 <__ultoa_invert+0x84>
    1f04:	a9 f7       	brne	.-22     	; 0x1ef0 <__ultoa_invert+0x6c>
    1f06:	ea cf       	rjmp	.-44     	; 0x1edc <__ultoa_invert+0x58>
    1f08:	b4 e0       	ldi	r27, 0x04	; 4
    1f0a:	a6 95       	lsr	r26
    1f0c:	97 95       	ror	r25
    1f0e:	87 95       	ror	r24
    1f10:	77 95       	ror	r23
    1f12:	67 95       	ror	r22
    1f14:	ba 95       	dec	r27
    1f16:	c9 f7       	brne	.-14     	; 0x1f0a <__ultoa_invert+0x86>
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	61 05       	cpc	r22, r1
    1f1c:	71 05       	cpc	r23, r1
    1f1e:	08 95       	ret
    1f20:	9b 01       	movw	r18, r22
    1f22:	ac 01       	movw	r20, r24
    1f24:	0a 2e       	mov	r0, r26
    1f26:	06 94       	lsr	r0
    1f28:	57 95       	ror	r21
    1f2a:	47 95       	ror	r20
    1f2c:	37 95       	ror	r19
    1f2e:	27 95       	ror	r18
    1f30:	ba 95       	dec	r27
    1f32:	c9 f7       	brne	.-14     	; 0x1f26 <__ultoa_invert+0xa2>
    1f34:	62 0f       	add	r22, r18
    1f36:	73 1f       	adc	r23, r19
    1f38:	84 1f       	adc	r24, r20
    1f3a:	95 1f       	adc	r25, r21
    1f3c:	a0 1d       	adc	r26, r0
    1f3e:	08 95       	ret

00001f40 <__prologue_saves__>:
    1f40:	2f 92       	push	r2
    1f42:	3f 92       	push	r3
    1f44:	4f 92       	push	r4
    1f46:	5f 92       	push	r5
    1f48:	6f 92       	push	r6
    1f4a:	7f 92       	push	r7
    1f4c:	8f 92       	push	r8
    1f4e:	9f 92       	push	r9
    1f50:	af 92       	push	r10
    1f52:	bf 92       	push	r11
    1f54:	cf 92       	push	r12
    1f56:	df 92       	push	r13
    1f58:	ef 92       	push	r14
    1f5a:	ff 92       	push	r15
    1f5c:	0f 93       	push	r16
    1f5e:	1f 93       	push	r17
    1f60:	cf 93       	push	r28
    1f62:	df 93       	push	r29
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
    1f68:	ca 1b       	sub	r28, r26
    1f6a:	db 0b       	sbc	r29, r27
    1f6c:	0f b6       	in	r0, 0x3f	; 63
    1f6e:	f8 94       	cli
    1f70:	de bf       	out	0x3e, r29	; 62
    1f72:	0f be       	out	0x3f, r0	; 63
    1f74:	cd bf       	out	0x3d, r28	; 61
    1f76:	09 94       	ijmp

00001f78 <__epilogue_restores__>:
    1f78:	2a 88       	ldd	r2, Y+18	; 0x12
    1f7a:	39 88       	ldd	r3, Y+17	; 0x11
    1f7c:	48 88       	ldd	r4, Y+16	; 0x10
    1f7e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f80:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f82:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f84:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f86:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f88:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f8a:	b9 84       	ldd	r11, Y+9	; 0x09
    1f8c:	c8 84       	ldd	r12, Y+8	; 0x08
    1f8e:	df 80       	ldd	r13, Y+7	; 0x07
    1f90:	ee 80       	ldd	r14, Y+6	; 0x06
    1f92:	fd 80       	ldd	r15, Y+5	; 0x05
    1f94:	0c 81       	ldd	r16, Y+4	; 0x04
    1f96:	1b 81       	ldd	r17, Y+3	; 0x03
    1f98:	aa 81       	ldd	r26, Y+2	; 0x02
    1f9a:	b9 81       	ldd	r27, Y+1	; 0x01
    1f9c:	ce 0f       	add	r28, r30
    1f9e:	d1 1d       	adc	r29, r1
    1fa0:	0f b6       	in	r0, 0x3f	; 63
    1fa2:	f8 94       	cli
    1fa4:	de bf       	out	0x3e, r29	; 62
    1fa6:	0f be       	out	0x3f, r0	; 63
    1fa8:	cd bf       	out	0x3d, r28	; 61
    1faa:	ed 01       	movw	r28, r26
    1fac:	08 95       	ret

00001fae <_exit>:
    1fae:	f8 94       	cli

00001fb0 <__stop_program>:
    1fb0:	ff cf       	rjmp	.-2      	; 0x1fb0 <__stop_program>
