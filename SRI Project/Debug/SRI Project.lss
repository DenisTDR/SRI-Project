
SRI Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002f6  00800100  00003330  000033c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003330  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001c4  008003f6  008003f6  000036ba  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000036ba  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000378  00000000  00000000  00003716  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003fe5  00000000  00000000  00003a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001280  00000000  00000000  00007a73  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000014d3  00000000  00000000  00008cf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b40  00000000  00000000  0000a1c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000cf6  00000000  00000000  0000ad08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000287e  00000000  00000000  0000b9fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000338  00000000  00000000  0000e27c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c3 00 	jmp	0x186	; 0x186 <__ctors_end>
       4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
       8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
       c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      10:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      14:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__vector_5>
      18:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      1c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      20:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      24:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      28:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      2c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      30:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      34:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      38:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      3c:	0c 94 26 0d 	jmp	0x1a4c	; 0x1a4c <__vector_15>
      40:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      44:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      48:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      4c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      50:	0c 94 86 02 	jmp	0x50c	; 0x50c <__vector_20>
      54:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      58:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      5c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      60:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      64:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      68:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      6c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      70:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      74:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      78:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
      7c:	53 01       	movw	r10, r6
      7e:	4b 01       	movw	r8, r22
      80:	95 01       	movw	r18, r10
      82:	5e 01       	movw	r10, r28
      84:	36 01       	movw	r6, r12
      86:	39 01       	movw	r6, r18
      88:	b0 01       	movw	r22, r0
      8a:	92 01       	movw	r18, r4
      8c:	b0 01       	movw	r22, r0
      8e:	b0 01       	movw	r22, r0
      90:	b0 01       	movw	r22, r0
      92:	b0 01       	movw	r22, r0
      94:	b0 01       	movw	r22, r0
      96:	b0 01       	movw	r22, r0
      98:	5b 01       	movw	r10, r22
      9a:	3c 01       	movw	r6, r24
      9c:	43 01       	movw	r8, r6
      9e:	48 01       	movw	r8, r16
      a0:	72 01       	movw	r14, r4
      a2:	77 01       	movw	r14, r14
      a4:	6c 01       	movw	r12, r24
      a6:	ae 01       	movw	r20, r28
      a8:	a5 01       	movw	r20, r10
      aa:	17 0a       	sbc	r1, r23
      ac:	1f 0a       	sbc	r1, r31
      ae:	92 0a       	sbc	r9, r18
      b0:	8a 0a       	sbc	r8, r26
      b2:	7f 0a       	sbc	r7, r31
      b4:	27 0a       	sbc	r2, r23
      b6:	67 0a       	sbc	r6, r23
      b8:	78 0a       	sbc	r7, r24
      ba:	a1 0a       	sbc	r10, r17
      bc:	89 13       	cpse	r24, r25
      be:	96 13       	cpse	r25, r22
      c0:	a7 13       	cpse	r26, r23
      c2:	11 14       	cp	r1, r1
      c4:	65 14       	cp	r6, r5
      c6:	76 14       	cp	r7, r6
      c8:	86 14       	cp	r8, r6
      ca:	9c 14       	cp	r9, r12
      cc:	aa 14       	cp	r10, r10
      ce:	fe 14       	cp	r15, r14
      d0:	4b 15       	cp	r20, r11
      d2:	a1 15       	cp	r26, r1
      d4:	3b 16       	cp	r3, r27
      d6:	48 16       	cp	r4, r24
      d8:	48 16       	cp	r4, r24
      da:	48 16       	cp	r4, r24
      dc:	48 16       	cp	r4, r24
      de:	48 16       	cp	r4, r24
      e0:	48 16       	cp	r4, r24
      e2:	48 16       	cp	r4, r24
      e4:	48 16       	cp	r4, r24
      e6:	48 16       	cp	r4, r24
      e8:	48 16       	cp	r4, r24
      ea:	48 16       	cp	r4, r24
      ec:	48 16       	cp	r4, r24
      ee:	48 16       	cp	r4, r24
      f0:	48 16       	cp	r4, r24
      f2:	48 16       	cp	r4, r24
      f4:	48 16       	cp	r4, r24
      f6:	48 16       	cp	r4, r24
      f8:	48 16       	cp	r4, r24
      fa:	48 16       	cp	r4, r24
      fc:	48 16       	cp	r4, r24
      fe:	f0 12       	cpse	r15, r16
     100:	3d 13       	cpse	r19, r29
     102:	48 16       	cp	r4, r24
     104:	48 16       	cp	r4, r24
     106:	48 16       	cp	r4, r24
     108:	48 16       	cp	r4, r24
     10a:	48 16       	cp	r4, r24
     10c:	48 16       	cp	r4, r24
     10e:	48 16       	cp	r4, r24
     110:	48 16       	cp	r4, r24
     112:	48 16       	cp	r4, r24
     114:	48 16       	cp	r4, r24
     116:	48 16       	cp	r4, r24
     118:	48 16       	cp	r4, r24
     11a:	48 16       	cp	r4, r24
     11c:	48 16       	cp	r4, r24
     11e:	48 16       	cp	r4, r24
     120:	48 16       	cp	r4, r24
     122:	48 16       	cp	r4, r24
     124:	48 16       	cp	r4, r24
     126:	48 16       	cp	r4, r24
     128:	48 16       	cp	r4, r24
     12a:	48 16       	cp	r4, r24
     12c:	48 16       	cp	r4, r24
     12e:	48 16       	cp	r4, r24
     130:	48 16       	cp	r4, r24
     132:	48 16       	cp	r4, r24
     134:	48 16       	cp	r4, r24
     136:	48 16       	cp	r4, r24
     138:	48 16       	cp	r4, r24
     13a:	48 16       	cp	r4, r24
     13c:	48 16       	cp	r4, r24
     13e:	48 16       	cp	r4, r24
     140:	48 16       	cp	r4, r24
     142:	48 16       	cp	r4, r24
     144:	48 16       	cp	r4, r24
     146:	48 16       	cp	r4, r24
     148:	48 16       	cp	r4, r24
     14a:	48 16       	cp	r4, r24
     14c:	48 16       	cp	r4, r24
     14e:	48 16       	cp	r4, r24
     150:	48 16       	cp	r4, r24
     152:	48 16       	cp	r4, r24
     154:	48 16       	cp	r4, r24
     156:	48 16       	cp	r4, r24
     158:	48 16       	cp	r4, r24
     15a:	48 16       	cp	r4, r24
     15c:	48 16       	cp	r4, r24
     15e:	48 16       	cp	r4, r24
     160:	48 16       	cp	r4, r24
     162:	48 16       	cp	r4, r24
     164:	48 16       	cp	r4, r24
     166:	48 16       	cp	r4, r24
     168:	48 16       	cp	r4, r24
     16a:	48 16       	cp	r4, r24
     16c:	48 16       	cp	r4, r24
     16e:	48 16       	cp	r4, r24
     170:	48 16       	cp	r4, r24
     172:	48 16       	cp	r4, r24
     174:	48 16       	cp	r4, r24
     176:	48 16       	cp	r4, r24
     178:	48 16       	cp	r4, r24
     17a:	48 16       	cp	r4, r24
     17c:	48 16       	cp	r4, r24
     17e:	48 16       	cp	r4, r24
     180:	48 16       	cp	r4, r24
     182:	48 16       	cp	r4, r24
     184:	b8 13       	cpse	r27, r24

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d0 e1       	ldi	r29, 0x10	; 16
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61

00000192 <__do_copy_data>:
     192:	13 e0       	ldi	r17, 0x03	; 3
     194:	a0 e0       	ldi	r26, 0x00	; 0
     196:	b1 e0       	ldi	r27, 0x01	; 1
     198:	e0 e3       	ldi	r30, 0x30	; 48
     19a:	f3 e3       	ldi	r31, 0x33	; 51
     19c:	02 c0       	rjmp	.+4      	; 0x1a2 <__do_copy_data+0x10>
     19e:	05 90       	lpm	r0, Z+
     1a0:	0d 92       	st	X+, r0
     1a2:	a6 3f       	cpi	r26, 0xF6	; 246
     1a4:	b1 07       	cpc	r27, r17
     1a6:	d9 f7       	brne	.-10     	; 0x19e <__do_copy_data+0xc>

000001a8 <__do_clear_bss>:
     1a8:	25 e0       	ldi	r18, 0x05	; 5
     1aa:	a6 ef       	ldi	r26, 0xF6	; 246
     1ac:	b3 e0       	ldi	r27, 0x03	; 3
     1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <.do_clear_bss_start>

000001b0 <.do_clear_bss_loop>:
     1b0:	1d 92       	st	X+, r1

000001b2 <.do_clear_bss_start>:
     1b2:	aa 3b       	cpi	r26, 0xBA	; 186
     1b4:	b2 07       	cpc	r27, r18
     1b6:	e1 f7       	brne	.-8      	; 0x1b0 <.do_clear_bss_loop>
     1b8:	0e 94 be 0a 	call	0x157c	; 0x157c <main>
     1bc:	0c 94 96 19 	jmp	0x332c	; 0x332c <_exit>

000001c0 <__bad_interrupt>:
     1c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c4 <prelucreazaDatele>:
	sei();
	//printf("\nstare noua %d: ", state);
}
extern volatile uint8_t ms2p1_enabled;

void prelucreazaDatele(void){
     1c4:	0f 93       	push	r16
     1c6:	cf 93       	push	r28
     1c8:	df 93       	push	r29
	
	//BTTransmitStr("Procesez ceva!");
	//cli();
	if(actiune >= GoFront && actiune <= GoRightB){
     1ca:	80 91 00 04 	lds	r24, 0x0400
     1ce:	9f ef       	ldi	r25, 0xFF	; 255
     1d0:	98 0f       	add	r25, r24
     1d2:	96 30       	cpi	r25, 0x06	; 6
     1d4:	08 f0       	brcs	.+2      	; 0x1d8 <prelucreazaDatele+0x14>
     1d6:	3f c0       	rjmp	.+126    	; 0x256 <prelucreazaDatele+0x92>
		unsigned char timp = date[0];
     1d8:	c0 91 01 04 	lds	r28, 0x0401
		unsigned char viteza = date[1];
     1dc:	d0 91 02 04 	lds	r29, 0x0402
		if(dateCrtIndex == 3)
     1e0:	90 91 ff 03 	lds	r25, 0x03FF
     1e4:	93 30       	cpi	r25, 0x03	; 3
     1e6:	11 f4       	brne	.+4      	; 0x1ec <prelucreazaDatele+0x28>
			toggleDebuggingOff();
     1e8:	0e 94 01 0b 	call	0x1602	; 0x1602 <toggleDebuggingOff>
		switch(actiune){
     1ec:	90 91 00 04 	lds	r25, 0x0400
     1f0:	93 30       	cpi	r25, 0x03	; 3
     1f2:	b1 f0       	breq	.+44     	; 0x220 <prelucreazaDatele+0x5c>
     1f4:	28 f4       	brcc	.+10     	; 0x200 <prelucreazaDatele+0x3c>
     1f6:	91 30       	cpi	r25, 0x01	; 1
     1f8:	49 f0       	breq	.+18     	; 0x20c <prelucreazaDatele+0x48>
     1fa:	92 30       	cpi	r25, 0x02	; 2
     1fc:	61 f0       	breq	.+24     	; 0x216 <prelucreazaDatele+0x52>
     1fe:	23 c0       	rjmp	.+70     	; 0x246 <prelucreazaDatele+0x82>
     200:	95 30       	cpi	r25, 0x05	; 5
     202:	99 f0       	breq	.+38     	; 0x22a <prelucreazaDatele+0x66>
     204:	b8 f0       	brcs	.+46     	; 0x234 <prelucreazaDatele+0x70>
     206:	96 30       	cpi	r25, 0x06	; 6
     208:	d1 f0       	breq	.+52     	; 0x23e <prelucreazaDatele+0x7a>
     20a:	1d c0       	rjmp	.+58     	; 0x246 <prelucreazaDatele+0x82>
			case GoFront:
			goFront(timp, viteza);
     20c:	6d 2f       	mov	r22, r29
     20e:	8c 2f       	mov	r24, r28
     210:	0e 94 03 05 	call	0xa06	; 0xa06 <goFront>
			break;
     214:	18 c0       	rjmp	.+48     	; 0x246 <prelucreazaDatele+0x82>
			case GoBack:
			goBack(timp, viteza);
     216:	6d 2f       	mov	r22, r29
     218:	8c 2f       	mov	r24, r28
     21a:	0e 94 33 05 	call	0xa66	; 0xa66 <goBack>
			break;
     21e:	13 c0       	rjmp	.+38     	; 0x246 <prelucreazaDatele+0x82>
			case GoLeftF:
			goFrontLeft(timp, viteza);
     220:	6d 2f       	mov	r22, r29
     222:	8c 2f       	mov	r24, r28
     224:	0e 94 63 05 	call	0xac6	; 0xac6 <goFrontLeft>
			break;
     228:	0e c0       	rjmp	.+28     	; 0x246 <prelucreazaDatele+0x82>
			case GoLeftB:
			goBackLeft(timp, viteza);
     22a:	6d 2f       	mov	r22, r29
     22c:	8c 2f       	mov	r24, r28
     22e:	0e 94 c2 05 	call	0xb84	; 0xb84 <goBackLeft>
			break;
     232:	09 c0       	rjmp	.+18     	; 0x246 <prelucreazaDatele+0x82>
			case GoRightF:
				goFrontRight(timp, viteza);
     234:	6d 2f       	mov	r22, r29
     236:	8c 2f       	mov	r24, r28
     238:	0e 94 91 05 	call	0xb22	; 0xb22 <goFrontRight>
			break;
     23c:	04 c0       	rjmp	.+8      	; 0x246 <prelucreazaDatele+0x82>
			case GoRightB:
				goBackRight(timp, viteza);
     23e:	6d 2f       	mov	r22, r29
     240:	8c 2f       	mov	r24, r28
     242:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <goBackRight>
			break;
			default:
				break;
		}
		if(dateCrtIndex == 3)
     246:	80 91 ff 03 	lds	r24, 0x03FF
     24a:	83 30       	cpi	r24, 0x03	; 3
     24c:	09 f0       	breq	.+2      	; 0x250 <prelucreazaDatele+0x8c>
     24e:	88 c0       	rjmp	.+272    	; 0x360 <prelucreazaDatele+0x19c>
			toggleDebuggingOff();
     250:	0e 94 01 0b 	call	0x1602	; 0x1602 <toggleDebuggingOff>
     254:	85 c0       	rjmp	.+266    	; 0x360 <prelucreazaDatele+0x19c>
			
		return;
	}
	
	switch(actiune){
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	fc 01       	movw	r30, r24
     25a:	37 97       	sbiw	r30, 0x07	; 7
     25c:	e7 31       	cpi	r30, 0x17	; 23
     25e:	f1 05       	cpc	r31, r1
     260:	08 f0       	brcs	.+2      	; 0x264 <prelucreazaDatele+0xa0>
     262:	7e c0       	rjmp	.+252    	; 0x360 <prelucreazaDatele+0x19c>
     264:	e2 5c       	subi	r30, 0xC2	; 194
     266:	ff 4f       	sbci	r31, 0xFF	; 255
     268:	0c 94 91 16 	jmp	0x2d22	; 0x2d22 <__tablejump2__>
		case GoM2P2:
			initParalelCheck();
     26c:	0e 94 bb 11 	call	0x2376	; 0x2376 <initParalelCheck>
		break;
     270:	77 c0       	rjmp	.+238    	; 0x360 <prelucreazaDatele+0x19c>
		case GoM2P3:
			checkFreeParallelParkingPlace();
     272:	0e 94 a2 04 	call	0x944	; 0x944 <checkFreeParallelParkingPlace>
		break;
     276:	74 c0       	rjmp	.+232    	; 0x360 <prelucreazaDatele+0x19c>
		case Led:
			ledAction(date[0], date[1]);
     278:	60 91 02 04 	lds	r22, 0x0402
     27c:	80 91 01 04 	lds	r24, 0x0401
     280:	0e 94 37 10 	call	0x206e	; 0x206e <ledAction>
		break;
     284:	6d c0       	rjmp	.+218    	; 0x360 <prelucreazaDatele+0x19c>
		case ReadSensorValue:
			toggleSensorSend(date[0]);		
     286:	80 91 01 04 	lds	r24, 0x0401
     28a:	0e 94 c0 07 	call	0xf80	; 0xf80 <toggleSensorSend>
		break;
     28e:	68 c0       	rjmp	.+208    	; 0x360 <prelucreazaDatele+0x19c>
		case StopEngines:
			stopEngines();
     290:	0e 94 85 04 	call	0x90a	; 0x90a <stopEngines>
		break;
     294:	65 c0       	rjmp	.+202    	; 0x360 <prelucreazaDatele+0x19c>
		case RotirePeLocDreapta:
			rotirePeLoc(date[0], date[1], LeftEngines);
     296:	41 e0       	ldi	r20, 0x01	; 1
     298:	60 91 02 04 	lds	r22, 0x0402
     29c:	80 91 01 04 	lds	r24, 0x0401
     2a0:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <rotirePeLoc>
		break;		
     2a4:	5d c0       	rjmp	.+186    	; 0x360 <prelucreazaDatele+0x19c>
		case RotirePeLocStanga:
			rotirePeLoc(date[0], date[1], RightEngines);
     2a6:	40 e0       	ldi	r20, 0x00	; 0
     2a8:	60 91 02 04 	lds	r22, 0x0402
     2ac:	80 91 01 04 	lds	r24, 0x0401
     2b0:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <rotirePeLoc>
		break;
     2b4:	55 c0       	rjmp	.+170    	; 0x360 <prelucreazaDatele+0x19c>
		case DisplayMessage:
			//addEntryToTimerQueue(&fctSmechera, 10UL * 1000UL, Periodic);
			//addEntryToTimerQueue(&testFct1, 500UL * 1000UL, Periodic);
			initAndStartStateMachineTest1();
     2b6:	0e 94 42 10 	call	0x2084	; 0x2084 <initAndStartStateMachineTest1>
		break;
     2ba:	52 c0       	rjmp	.+164    	; 0x360 <prelucreazaDatele+0x19c>
		case GoM2P1:
			addEntryToTimerQueue(&functieRotireStanga, 1000UL * 500UL, Periodic);
     2bc:	21 e0       	ldi	r18, 0x01	; 1
     2be:	40 e2       	ldi	r20, 0x20	; 32
     2c0:	51 ea       	ldi	r21, 0xA1	; 161
     2c2:	67 e0       	ldi	r22, 0x07	; 7
     2c4:	70 e0       	ldi	r23, 0x00	; 0
     2c6:	88 ec       	ldi	r24, 0xC8	; 200
     2c8:	99 e0       	ldi	r25, 0x09	; 9
     2ca:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <addEntryToTimerQueue>
			iesire=date[0];
     2ce:	80 91 01 04 	lds	r24, 0x0401
     2d2:	80 93 fa 03 	sts	0x03FA, r24
		break;
     2d6:	44 c0       	rjmp	.+136    	; 0x360 <prelucreazaDatele+0x19c>
		case ResetThings:
			stopEngines();
     2d8:	0e 94 85 04 	call	0x90a	; 0x90a <stopEngines>
			resetTimerQueue(1);
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <resetTimerQueue>
		break;
     2e2:	3e c0       	rjmp	.+124    	; 0x360 <prelucreazaDatele+0x19c>
		case GetAverageSpeed:
			getAverageSpeed(date[0]);
     2e4:	80 91 01 04 	lds	r24, 0x0401
     2e8:	0e 94 b8 03 	call	0x770	; 0x770 <getAverageSpeed>
		break;
     2ec:	39 c0       	rjmp	.+114    	; 0x360 <prelucreazaDatele+0x19c>
		case ParcurgereDistanta:
			if(len<3)
     2ee:	80 91 0b 04 	lds	r24, 0x040B
     2f2:	83 30       	cpi	r24, 0x03	; 3
     2f4:	a8 f1       	brcs	.+106    	; 0x360 <prelucreazaDatele+0x19c>
				break;
			uint32_t distDP=0;
			distDP = date[0]*256UL + date[1];
     2f6:	60 91 01 04 	lds	r22, 0x0401
     2fa:	86 2f       	mov	r24, r22
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	a0 e0       	ldi	r26, 0x00	; 0
     300:	b0 e0       	ldi	r27, 0x00	; 0
     302:	ba 2f       	mov	r27, r26
     304:	a9 2f       	mov	r26, r25
     306:	98 2f       	mov	r25, r24
     308:	88 27       	eor	r24, r24
     30a:	20 91 02 04 	lds	r18, 0x0402
     30e:	bc 01       	movw	r22, r24
     310:	cd 01       	movw	r24, r26
     312:	62 0f       	add	r22, r18
     314:	71 1d       	adc	r23, r1
     316:	81 1d       	adc	r24, r1
     318:	91 1d       	adc	r25, r1
			initParcurgereDistanta(distDP, date[2]);
     31a:	40 91 03 04 	lds	r20, 0x0403
     31e:	0e 94 4e 10 	call	0x209c	; 0x209c <initParcurgereDistanta>
		break;
     322:	1e c0       	rjmp	.+60     	; 0x360 <prelucreazaDatele+0x19c>
		case ParallelPark:
			initParalelParking();
     324:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <initParalelParking>
		break;
     328:	1b c0       	rjmp	.+54     	; 0x360 <prelucreazaDatele+0x19c>
		case RotireSmechera:
			if(len<4)
     32a:	80 91 0b 04 	lds	r24, 0x040B
     32e:	84 30       	cpi	r24, 0x04	; 4
     330:	b8 f0       	brcs	.+46     	; 0x360 <prelucreazaDatele+0x19c>
				break;
			rotireSmechera(2, date[0], date[1], date[2], date[3]);
     332:	00 91 04 04 	lds	r16, 0x0404
     336:	20 91 03 04 	lds	r18, 0x0403
     33a:	40 91 02 04 	lds	r20, 0x0402
     33e:	60 91 01 04 	lds	r22, 0x0401
     342:	82 e0       	ldi	r24, 0x02	; 2
     344:	0e 94 21 06 	call	0xc42	; 0xc42 <rotireSmechera>
		break;
     348:	0b c0       	rjmp	.+22     	; 0x360 <prelucreazaDatele+0x19c>
		case SetSettings:
			if(len==1)
     34a:	80 91 0b 04 	lds	r24, 0x040B
     34e:	81 30       	cpi	r24, 0x01	; 1
     350:	39 f4       	brne	.+14     	; 0x360 <prelucreazaDatele+0x19c>
				setSettings(date[0]);
     352:	80 91 01 04 	lds	r24, 0x0401
     356:	0e 94 36 0b 	call	0x166c	; 0x166c <setSettings>
     35a:	02 c0       	rjmp	.+4      	; 0x360 <prelucreazaDatele+0x19c>
		break;
		case GetSettings:
			getSettings();
     35c:	0e 94 16 0b 	call	0x162c	; 0x162c <getSettings>
		default:
		break;
	}
	//alta actiune...
	//sei();
}
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	0f 91       	pop	r16
     366:	08 95       	ret

00000368 <BTTransmitStr>:

void BTTransmitStr(char *theString){
	uint8_t len, i;
	
	len = strlen(theString);
     368:	fc 01       	movw	r30, r24
     36a:	01 90       	ld	r0, Z+
     36c:	00 20       	and	r0, r0
     36e:	e9 f7       	brne	.-6      	; 0x36a <BTTransmitStr+0x2>
     370:	31 97       	sbiw	r30, 0x01	; 1
     372:	e8 1b       	sub	r30, r24
     374:	f9 0b       	sbc	r31, r25
     376:	2e 2f       	mov	r18, r30
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     378:	3a ea       	ldi	r19, 0xAA	; 170
     37a:	30 93 c6 00 	sts	0x00C6, r19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     37e:	ab ed       	ldi	r26, 0xDB	; 219
     380:	b5 e0       	ldi	r27, 0x05	; 5
     382:	11 97       	sbiw	r26, 0x01	; 1
     384:	f1 f7       	brne	.-4      	; 0x382 <BTTransmitStr+0x1a>
     386:	00 c0       	rjmp	.+0      	; 0x388 <BTTransmitStr+0x20>
     388:	00 00       	nop
     38a:	35 e1       	ldi	r19, 0x15	; 21
     38c:	30 93 c6 00 	sts	0x00C6, r19
     390:	ab ed       	ldi	r26, 0xDB	; 219
     392:	b5 e0       	ldi	r27, 0x05	; 5
     394:	11 97       	sbiw	r26, 0x01	; 1
     396:	f1 f7       	brne	.-4      	; 0x394 <BTTransmitStr+0x2c>
     398:	00 c0       	rjmp	.+0      	; 0x39a <BTTransmitStr+0x32>
     39a:	00 00       	nop
     39c:	e0 93 c6 00 	sts	0x00C6, r30
     3a0:	eb ed       	ldi	r30, 0xDB	; 219
     3a2:	f5 e0       	ldi	r31, 0x05	; 5
     3a4:	31 97       	sbiw	r30, 0x01	; 1
     3a6:	f1 f7       	brne	.-4      	; 0x3a4 <BTTransmitStr+0x3c>
     3a8:	00 c0       	rjmp	.+0      	; 0x3aa <BTTransmitStr+0x42>
     3aa:	00 00       	nop
	
	BTTransmitChar(0xAA);
	BTTransmitChar(DisplayMessage);
	BTTransmitChar(len);
	
	for(i=0;i<len;i++)
     3ac:	22 23       	and	r18, r18
     3ae:	89 f0       	breq	.+34     	; 0x3d2 <BTTransmitStr+0x6a>
     3b0:	38 2f       	mov	r19, r24
     3b2:	e8 2f       	mov	r30, r24
     3b4:	f9 2f       	mov	r31, r25
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     3b6:	a6 ec       	ldi	r26, 0xC6	; 198
     3b8:	b0 e0       	ldi	r27, 0x00	; 0
	BTTransmitChar(DisplayMessage);
	BTTransmitChar(len);
	
	for(i=0;i<len;i++)
	{
		BTTransmitChar(theString[i]);
     3ba:	81 91       	ld	r24, Z+
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     3bc:	8c 93       	st	X, r24
     3be:	8b ed       	ldi	r24, 0xDB	; 219
     3c0:	95 e0       	ldi	r25, 0x05	; 5
     3c2:	01 97       	sbiw	r24, 0x01	; 1
     3c4:	f1 f7       	brne	.-4      	; 0x3c2 <BTTransmitStr+0x5a>
     3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <BTTransmitStr+0x60>
     3c8:	00 00       	nop
     3ca:	8e 2f       	mov	r24, r30
     3cc:	83 1b       	sub	r24, r19
	
	BTTransmitChar(0xAA);
	BTTransmitChar(DisplayMessage);
	BTTransmitChar(len);
	
	for(i=0;i<len;i++)
     3ce:	82 17       	cp	r24, r18
     3d0:	a0 f3       	brcs	.-24     	; 0x3ba <BTTransmitStr+0x52>
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     3d2:	85 e5       	ldi	r24, 0x55	; 85
     3d4:	80 93 c6 00 	sts	0x00C6, r24
     3d8:	ab ed       	ldi	r26, 0xDB	; 219
     3da:	b5 e0       	ldi	r27, 0x05	; 5
     3dc:	11 97       	sbiw	r26, 0x01	; 1
     3de:	f1 f7       	brne	.-4      	; 0x3dc <BTTransmitStr+0x74>
     3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <BTTransmitStr+0x7a>
     3e2:	00 00       	nop
     3e4:	08 95       	ret

000003e6 <BTTransmitMsg>:
	}
	BTTransmitChar(0x55);
	
}

void BTTransmitMsg(char *theString, uint8_t len){
     3e6:	cf 93       	push	r28
     3e8:	df 93       	push	r29
	uint16_t i;
	for(i=0;i<len;i++)
     3ea:	70 e0       	ldi	r23, 0x00	; 0
     3ec:	61 15       	cp	r22, r1
     3ee:	71 05       	cpc	r23, r1
     3f0:	91 f0       	breq	.+36     	; 0x416 <BTTransmitMsg+0x30>
     3f2:	e8 2f       	mov	r30, r24
     3f4:	f9 2f       	mov	r31, r25
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	90 e0       	ldi	r25, 0x00	; 0
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     3fa:	a6 ec       	ldi	r26, 0xC6	; 198
     3fc:	b0 e0       	ldi	r27, 0x00	; 0

void BTTransmitMsg(char *theString, uint8_t len){
	uint16_t i;
	for(i=0;i<len;i++)
	{
		BTTransmitChar(theString[i]);
     3fe:	21 91       	ld	r18, Z+
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     400:	2c 93       	st	X, r18
     402:	cb ed       	ldi	r28, 0xDB	; 219
     404:	d5 e0       	ldi	r29, 0x05	; 5
     406:	21 97       	sbiw	r28, 0x01	; 1
     408:	f1 f7       	brne	.-4      	; 0x406 <BTTransmitMsg+0x20>
     40a:	00 c0       	rjmp	.+0      	; 0x40c <BTTransmitMsg+0x26>
     40c:	00 00       	nop
	
}

void BTTransmitMsg(char *theString, uint8_t len){
	uint16_t i;
	for(i=0;i<len;i++)
     40e:	01 96       	adiw	r24, 0x01	; 1
     410:	86 17       	cp	r24, r22
     412:	97 07       	cpc	r25, r23
     414:	a0 f3       	brcs	.-24     	; 0x3fe <BTTransmitMsg+0x18>
	{
		BTTransmitChar(theString[i]);
	}
}
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	08 95       	ret

0000041c <reTransmit>:
{
	BTProtocolReadByte(UDR0);
}


void reTransmit(void){
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	00 d0       	rcall	.+0      	; 0x422 <reTransmit+0x6>
     422:	00 d0       	rcall	.+0      	; 0x424 <reTransmit+0x8>
     424:	cd b7       	in	r28, 0x3d	; 61
     426:	de b7       	in	r29, 0x3e	; 62
	//trimite un semnal telefonului pentru a retransmite ultimul mesaj
	printf("Trimite din nou ultimul mesaj!!!");
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	9f 93       	push	r25
     42e:	8f 93       	push	r24
     430:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <printf>
	char msg[] = { StartByte, ReTransmitLastMsg, 0, 0x55 };
     434:	8a ea       	ldi	r24, 0xAA	; 170
     436:	89 83       	std	Y+1, r24	; 0x01
     438:	84 e1       	ldi	r24, 0x14	; 20
     43a:	8a 83       	std	Y+2, r24	; 0x02
     43c:	1b 82       	std	Y+3, r1	; 0x03
     43e:	85 e5       	ldi	r24, 0x55	; 85
     440:	8c 83       	std	Y+4, r24	; 0x04
	BTTransmitMsg(msg, 4);
     442:	64 e0       	ldi	r22, 0x04	; 4
     444:	ce 01       	movw	r24, r28
     446:	01 96       	adiw	r24, 0x01	; 1
     448:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <BTTransmitMsg>
}
     44c:	0f 90       	pop	r0
     44e:	0f 90       	pop	r0
     450:	0f 90       	pop	r0
     452:	0f 90       	pop	r0
     454:	0f 90       	pop	r0
     456:	0f 90       	pop	r0
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	08 95       	ret

0000045e <BTProtocolReadByte>:
	state = WaitingStartByte;
}

extern volatile uint8_t iesire;
void BTProtocolReadByte(unsigned char theByte){
	cli();
     45e:	f8 94       	cli
	switch (state){
     460:	90 91 fe 03 	lds	r25, 0x03FE
     464:	92 30       	cpi	r25, 0x02	; 2
     466:	f1 f0       	breq	.+60     	; 0x4a4 <BTProtocolReadByte+0x46>
     468:	28 f4       	brcc	.+10     	; 0x474 <BTProtocolReadByte+0x16>
     46a:	99 23       	and	r25, r25
     46c:	41 f0       	breq	.+16     	; 0x47e <BTProtocolReadByte+0x20>
     46e:	91 30       	cpi	r25, 0x01	; 1
     470:	61 f0       	breq	.+24     	; 0x48a <BTProtocolReadByte+0x2c>
     472:	40 c0       	rjmp	.+128    	; 0x4f4 <BTProtocolReadByte+0x96>
     474:	93 30       	cpi	r25, 0x03	; 3
     476:	19 f1       	breq	.+70     	; 0x4be <BTProtocolReadByte+0x60>
     478:	94 30       	cpi	r25, 0x04	; 4
     47a:	99 f1       	breq	.+102    	; 0x4e2 <BTProtocolReadByte+0x84>
     47c:	3b c0       	rjmp	.+118    	; 0x4f4 <BTProtocolReadByte+0x96>
		case WaitingStartByte:
			if(theByte == StartByte){
     47e:	8a 3a       	cpi	r24, 0xAA	; 170
     480:	c9 f5       	brne	.+114    	; 0x4f4 <BTProtocolReadByte+0x96>
				state = WaitingCarAction;
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	80 93 fe 03 	sts	0x03FE, r24
     488:	35 c0       	rjmp	.+106    	; 0x4f4 <BTProtocolReadByte+0x96>
				//addEntryToTimerQueue(&resetBTProtocol, 1000UL * 1000UL * 1000UL, Once);
			}
			break;

		case WaitingCarAction:
			if(theByte >= NoAction && theByte < EndAction){
     48a:	8e 31       	cpi	r24, 0x1E	; 30
     48c:	30 f4       	brcc	.+12     	; 0x49a <BTProtocolReadByte+0x3c>
				state = WaitingDataLength;
     48e:	92 e0       	ldi	r25, 0x02	; 2
     490:	90 93 fe 03 	sts	0x03FE, r25
				actiune = theByte;
     494:	80 93 00 04 	sts	0x0400, r24
     498:	2d c0       	rjmp	.+90     	; 0x4f4 <BTProtocolReadByte+0x96>
			}
			else{
				state = WaitingStartByte;
     49a:	10 92 fe 03 	sts	0x03FE, r1
				reTransmit(); // error ocurred, send retransmit signal
     49e:	0e 94 0e 02 	call	0x41c	; 0x41c <reTransmit>
     4a2:	28 c0       	rjmp	.+80     	; 0x4f4 <BTProtocolReadByte+0x96>
			}
			break;

		case WaitingDataLength:
			if(theByte==0){
     4a4:	81 11       	cpse	r24, r1
     4a6:	28 c0       	rjmp	.+80     	; 0x4f8 <BTProtocolReadByte+0x9a>
				state = WaitingEndByte;
			}
			state = ReadingData;
			len = theByte;
     4a8:	10 92 0b 04 	sts	0x040B, r1
			dateCrtIndex = 0;
     4ac:	10 92 ff 03 	sts	0x03FF, r1
			if(len==0)
				state = WaitingEndByte;
     4b0:	84 e0       	ldi	r24, 0x04	; 4
     4b2:	80 93 fe 03 	sts	0x03FE, r24
     4b6:	1e c0       	rjmp	.+60     	; 0x4f4 <BTProtocolReadByte+0x96>
			else if(len<0 || len>50)
				state = WaitingStartByte;
     4b8:	10 92 fe 03 	sts	0x03FE, r1
     4bc:	1b c0       	rjmp	.+54     	; 0x4f4 <BTProtocolReadByte+0x96>
			break;

		case ReadingData:
			date[dateCrtIndex++] = theByte;
     4be:	e0 91 ff 03 	lds	r30, 0x03FF
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	9e 0f       	add	r25, r30
     4c6:	90 93 ff 03 	sts	0x03FF, r25
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	ef 5f       	subi	r30, 0xFF	; 255
     4ce:	fb 4f       	sbci	r31, 0xFB	; 251
     4d0:	80 83       	st	Z, r24
			if(dateCrtIndex >= len)
     4d2:	80 91 0b 04 	lds	r24, 0x040B
     4d6:	98 17       	cp	r25, r24
     4d8:	68 f0       	brcs	.+26     	; 0x4f4 <BTProtocolReadByte+0x96>
			state = WaitingEndByte;
     4da:	84 e0       	ldi	r24, 0x04	; 4
     4dc:	80 93 fe 03 	sts	0x03FE, r24
     4e0:	09 c0       	rjmp	.+18     	; 0x4f4 <BTProtocolReadByte+0x96>
			break;
		case WaitingEndByte:
			if(theByte != 0x55){
     4e2:	85 35       	cpi	r24, 0x55	; 85
     4e4:	19 f0       	breq	.+6      	; 0x4ec <BTProtocolReadByte+0x8e>
				reTransmit(); // error ocurred, send retransmit signal
     4e6:	0e 94 0e 02 	call	0x41c	; 0x41c <reTransmit>
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <BTProtocolReadByte+0x92>
			}
			else{
				prelucreazaDatele();
     4ec:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <prelucreazaDatele>
			}
			state = WaitingStartByte;
     4f0:	10 92 fe 03 	sts	0x03FE, r1
			break;

	}
	sei();
     4f4:	78 94       	sei
     4f6:	08 95       	ret

		case WaitingDataLength:
			if(theByte==0){
				state = WaitingEndByte;
			}
			state = ReadingData;
     4f8:	93 e0       	ldi	r25, 0x03	; 3
     4fa:	90 93 fe 03 	sts	0x03FE, r25
			len = theByte;
     4fe:	80 93 0b 04 	sts	0x040B, r24
			dateCrtIndex = 0;
     502:	10 92 ff 03 	sts	0x03FF, r1
			if(len==0)
				state = WaitingEndByte;
			else if(len<0 || len>50)
     506:	83 33       	cpi	r24, 0x33	; 51
     508:	b8 f6       	brcc	.-82     	; 0x4b8 <BTProtocolReadByte+0x5a>
     50a:	f4 cf       	rjmp	.-24     	; 0x4f4 <BTProtocolReadByte+0x96>

0000050c <__vector_20>:

void prelucreazaDatele(void);
void BTProtocolReadByte(unsigned char theByte);

ISR(USART0_RX_vect)
{
     50c:	1f 92       	push	r1
     50e:	0f 92       	push	r0
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	0f 92       	push	r0
     514:	11 24       	eor	r1, r1
     516:	2f 93       	push	r18
     518:	3f 93       	push	r19
     51a:	4f 93       	push	r20
     51c:	5f 93       	push	r21
     51e:	6f 93       	push	r22
     520:	7f 93       	push	r23
     522:	8f 93       	push	r24
     524:	9f 93       	push	r25
     526:	af 93       	push	r26
     528:	bf 93       	push	r27
     52a:	ef 93       	push	r30
     52c:	ff 93       	push	r31
	BTProtocolReadByte(UDR0);
     52e:	80 91 c6 00 	lds	r24, 0x00C6
     532:	0e 94 2f 02 	call	0x45e	; 0x45e <BTProtocolReadByte>
}
     536:	ff 91       	pop	r31
     538:	ef 91       	pop	r30
     53a:	bf 91       	pop	r27
     53c:	af 91       	pop	r26
     53e:	9f 91       	pop	r25
     540:	8f 91       	pop	r24
     542:	7f 91       	pop	r23
     544:	6f 91       	pop	r22
     546:	5f 91       	pop	r21
     548:	4f 91       	pop	r20
     54a:	3f 91       	pop	r19
     54c:	2f 91       	pop	r18
     54e:	0f 90       	pop	r0
     550:	0f be       	out	0x3f, r0	; 63
     552:	0f 90       	pop	r0
     554:	1f 90       	pop	r1
     556:	18 95       	reti

00000558 <BTTransmitMsgU>:
	for(i=0;i<len;i++)
	{
		BTTransmitChar(theString[i]);
	}
}
void BTTransmitMsgU(unsigned char *theString, uint8_t len){
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
	uint16_t i;
	for(i=0;i<len;i++)
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	61 15       	cp	r22, r1
     560:	71 05       	cpc	r23, r1
     562:	91 f0       	breq	.+36     	; 0x588 <BTTransmitMsgU+0x30>
     564:	e8 2f       	mov	r30, r24
     566:	f9 2f       	mov	r31, r25
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	90 e0       	ldi	r25, 0x00	; 0
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     56c:	a6 ec       	ldi	r26, 0xC6	; 198
     56e:	b0 e0       	ldi	r27, 0x00	; 0
}
void BTTransmitMsgU(unsigned char *theString, uint8_t len){
	uint16_t i;
	for(i=0;i<len;i++)
	{
		BTTransmitChar(theString[i]);
     570:	21 91       	ld	r18, Z+
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     572:	2c 93       	st	X, r18
     574:	cb ed       	ldi	r28, 0xDB	; 219
     576:	d5 e0       	ldi	r29, 0x05	; 5
     578:	21 97       	sbiw	r28, 0x01	; 1
     57a:	f1 f7       	brne	.-4      	; 0x578 <BTTransmitMsgU+0x20>
     57c:	00 c0       	rjmp	.+0      	; 0x57e <BTTransmitMsgU+0x26>
     57e:	00 00       	nop
		BTTransmitChar(theString[i]);
	}
}
void BTTransmitMsgU(unsigned char *theString, uint8_t len){
	uint16_t i;
	for(i=0;i<len;i++)
     580:	01 96       	adiw	r24, 0x01	; 1
     582:	86 17       	cp	r24, r22
     584:	97 07       	cpc	r25, r23
     586:	a0 f3       	brcs	.-24     	; 0x570 <BTTransmitMsgU+0x18>
	{
		BTTransmitChar(theString[i]);
	}
}
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
     58c:	08 95       	ret

0000058e <initBTProtocol>:
}

void initBTProtocol()
{
	/*Pentru Receive*/
	UBRR0L = 25; //baud rate 9600 bps
     58e:	89 e1       	ldi	r24, 0x19	; 25
     590:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B |= _BV(RXCIE0);
     594:	e1 ec       	ldi	r30, 0xC1	; 193
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	80 81       	ld	r24, Z
     59a:	80 68       	ori	r24, 0x80	; 128
     59c:	80 83       	st	Z, r24
	UCSR0B |= _BV(RXEN0);
     59e:	80 81       	ld	r24, Z
     5a0:	80 61       	ori	r24, 0x10	; 16
     5a2:	80 83       	st	Z, r24
	UCSR0B |= _BV(TXEN0);
     5a4:	80 81       	ld	r24, Z
     5a6:	88 60       	ori	r24, 0x08	; 8
     5a8:	80 83       	st	Z, r24
		
	state = WaitingStartByte;
     5aa:	10 92 fe 03 	sts	0x03FE, r1
     5ae:	08 95       	ret

000005b0 <countTimeForEncoders>:
		encoder2CNT = encoder1CNT = 0;
		deciSecondsPassed = 0;
	}
}
uint8_t countTimeForEncoders(){
	deciSecondsPassed += 2;
     5b0:	80 91 f6 03 	lds	r24, 0x03F6
     5b4:	90 91 f7 03 	lds	r25, 0x03F7
     5b8:	a0 91 f8 03 	lds	r26, 0x03F8
     5bc:	b0 91 f9 03 	lds	r27, 0x03F9
     5c0:	02 96       	adiw	r24, 0x02	; 2
     5c2:	a1 1d       	adc	r26, r1
     5c4:	b1 1d       	adc	r27, r1
     5c6:	80 93 f6 03 	sts	0x03F6, r24
     5ca:	90 93 f7 03 	sts	0x03F7, r25
     5ce:	a0 93 f8 03 	sts	0x03F8, r26
     5d2:	b0 93 f9 03 	sts	0x03F9, r27
	return 0;
}
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	08 95       	ret

000005da <sendDistAndTimePeriodically>:
		removeEntryFromTimerQueue(&countTimeForEncoders);
		countTimeForEncoders();
	}
}

uint8_t sendDistAndTimePeriodically(void){
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	cd b7       	in	r28, 0x3d	; 61
     5e4:	de b7       	in	r29, 0x3e	; 62
     5e6:	64 97       	sbiw	r28, 0x14	; 20
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	f8 94       	cli
     5ec:	de bf       	out	0x3e, r29	; 62
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	cd bf       	out	0x3d, r28	; 61
	//BTTransmitStr("no aci");
	//return NO;
	uint32_t dist = DISTANTA_PARCURSA;
     5f2:	80 91 0c 04 	lds	r24, 0x040C
     5f6:	90 91 0d 04 	lds	r25, 0x040D
     5fa:	a0 91 0e 04 	lds	r26, 0x040E
     5fe:	b0 91 0f 04 	lds	r27, 0x040F
     602:	40 91 12 04 	lds	r20, 0x0412
     606:	50 91 13 04 	lds	r21, 0x0413
     60a:	60 91 14 04 	lds	r22, 0x0414
     60e:	70 91 15 04 	lds	r23, 0x0415
     612:	84 0f       	add	r24, r20
     614:	95 1f       	adc	r25, r21
     616:	a6 1f       	adc	r26, r22
     618:	b7 1f       	adc	r27, r23
     61a:	ac 01       	movw	r20, r24
     61c:	bd 01       	movw	r22, r26
     61e:	44 0f       	add	r20, r20
     620:	55 1f       	adc	r21, r21
     622:	66 1f       	adc	r22, r22
     624:	77 1f       	adc	r23, r23
     626:	44 0f       	add	r20, r20
     628:	55 1f       	adc	r21, r21
     62a:	66 1f       	adc	r22, r22
     62c:	77 1f       	adc	r23, r23
     62e:	8a 01       	movw	r16, r20
     630:	9b 01       	movw	r18, r22
     632:	00 0f       	add	r16, r16
     634:	11 1f       	adc	r17, r17
     636:	22 1f       	adc	r18, r18
     638:	33 1f       	adc	r19, r19
     63a:	00 0f       	add	r16, r16
     63c:	11 1f       	adc	r17, r17
     63e:	22 1f       	adc	r18, r18
     640:	33 1f       	adc	r19, r19
     642:	40 0f       	add	r20, r16
     644:	51 1f       	adc	r21, r17
     646:	62 1f       	adc	r22, r18
     648:	73 1f       	adc	r23, r19
     64a:	84 0f       	add	r24, r20
     64c:	95 1f       	adc	r25, r21
     64e:	a6 1f       	adc	r26, r22
     650:	b7 1f       	adc	r27, r23
     652:	ac 01       	movw	r20, r24
     654:	bd 01       	movw	r22, r26
     656:	76 95       	lsr	r23
     658:	67 95       	ror	r22
     65a:	57 95       	ror	r21
     65c:	47 95       	ror	r20
     65e:	76 95       	lsr	r23
     660:	67 95       	ror	r22
     662:	57 95       	ror	r21
     664:	47 95       	ror	r20
	uint32_t time = deciSecondsPassed;
     666:	80 91 f6 03 	lds	r24, 0x03F6
     66a:	90 91 f7 03 	lds	r25, 0x03F7
     66e:	a0 91 f8 03 	lds	r26, 0x03F8
     672:	b0 91 f9 03 	lds	r27, 0x03F9
	uint8_t buffer[20];
	buffer[0] = StartByte;
     676:	2a ea       	ldi	r18, 0xAA	; 170
     678:	29 83       	std	Y+1, r18	; 0x01
	buffer[1] = InfoCarStats;
     67a:	22 e1       	ldi	r18, 0x12	; 18
     67c:	2a 83       	std	Y+2, r18	; 0x02
	buffer[2] = 8;
     67e:	28 e0       	ldi	r18, 0x08	; 8
     680:	2b 83       	std	Y+3, r18	; 0x03
	
	buffer[3] = dist >> 24;
     682:	7c 83       	std	Y+4, r23	; 0x04
	buffer[4] = (uint8_t)(dist >> 16);
     684:	6d 83       	std	Y+5, r22	; 0x05
	buffer[5] = (uint8_t)(dist >> 8);
     686:	5e 83       	std	Y+6, r21	; 0x06
	buffer[6] = (uint8_t)(dist);
     688:	4f 83       	std	Y+7, r20	; 0x07
	
	buffer[7] = time >> 24;
     68a:	b8 87       	std	Y+8, r27	; 0x08
	buffer[8] = (uint8_t)(time >> 16);
     68c:	a9 87       	std	Y+9, r26	; 0x09
	buffer[9] = (uint8_t)(time >> 8);
     68e:	9a 87       	std	Y+10, r25	; 0x0a
	buffer[10] = (uint8_t)(time);
     690:	8b 87       	std	Y+11, r24	; 0x0b
	
	buffer[11] = EndByte;
     692:	85 e5       	ldi	r24, 0x55	; 85
     694:	8c 87       	std	Y+12, r24	; 0x0c
	BTTransmitMsgU(buffer, (uint8_t)12);
     696:	6c e0       	ldi	r22, 0x0C	; 12
     698:	ce 01       	movw	r24, r28
     69a:	01 96       	adiw	r24, 0x01	; 1
     69c:	0e 94 ac 02 	call	0x558	; 0x558 <BTTransmitMsgU>
	return NO;
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	64 96       	adiw	r28, 0x14	; 20
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	f8 94       	cli
     6a8:	de bf       	out	0x3e, r29	; 62
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	cd bf       	out	0x3d, r28	; 61
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	1f 91       	pop	r17
     6b4:	0f 91       	pop	r16
     6b6:	08 95       	ret

000006b8 <__vector_5>:

volatile uint32_t encoder1CNT, encoder2CNT;
volatile uint8_t lastPB0, lastPB7;
volatile uint32_t deciSecondsPassed = 0;
ISR(PCINT1_vect)
{
     6b8:	1f 92       	push	r1
     6ba:	0f 92       	push	r0
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	0f 92       	push	r0
     6c0:	11 24       	eor	r1, r1
     6c2:	8f 93       	push	r24
     6c4:	9f 93       	push	r25
     6c6:	af 93       	push	r26
     6c8:	bf 93       	push	r27
	if( (PINB & _BV(PB0)) ^ lastPB0){
     6ca:	83 b1       	in	r24, 0x03	; 3
     6cc:	90 91 11 04 	lds	r25, 0x0411
     6d0:	81 70       	andi	r24, 0x01	; 1
     6d2:	98 17       	cp	r25, r24
     6d4:	b9 f0       	breq	.+46     	; 0x704 <__vector_5+0x4c>
		lastPB0 = (PINB & _BV(PB0));
     6d6:	83 b1       	in	r24, 0x03	; 3
     6d8:	81 70       	andi	r24, 0x01	; 1
     6da:	80 93 11 04 	sts	0x0411, r24
		encoder1CNT++;
     6de:	80 91 0c 04 	lds	r24, 0x040C
     6e2:	90 91 0d 04 	lds	r25, 0x040D
     6e6:	a0 91 0e 04 	lds	r26, 0x040E
     6ea:	b0 91 0f 04 	lds	r27, 0x040F
     6ee:	01 96       	adiw	r24, 0x01	; 1
     6f0:	a1 1d       	adc	r26, r1
     6f2:	b1 1d       	adc	r27, r1
     6f4:	80 93 0c 04 	sts	0x040C, r24
     6f8:	90 93 0d 04 	sts	0x040D, r25
     6fc:	a0 93 0e 04 	sts	0x040E, r26
     700:	b0 93 0f 04 	sts	0x040F, r27
	}
	if( (PINB & _BV(PB7)) ^ lastPB7){
     704:	93 b1       	in	r25, 0x03	; 3
     706:	80 91 10 04 	lds	r24, 0x0410
     70a:	90 78       	andi	r25, 0x80	; 128
     70c:	98 17       	cp	r25, r24
     70e:	b9 f0       	breq	.+46     	; 0x73e <__vector_5+0x86>
		lastPB7 = (PINB & _BV(PB7));
     710:	83 b1       	in	r24, 0x03	; 3
     712:	80 78       	andi	r24, 0x80	; 128
     714:	80 93 10 04 	sts	0x0410, r24
		encoder2CNT++;
     718:	80 91 12 04 	lds	r24, 0x0412
     71c:	90 91 13 04 	lds	r25, 0x0413
     720:	a0 91 14 04 	lds	r26, 0x0414
     724:	b0 91 15 04 	lds	r27, 0x0415
     728:	01 96       	adiw	r24, 0x01	; 1
     72a:	a1 1d       	adc	r26, r1
     72c:	b1 1d       	adc	r27, r1
     72e:	80 93 12 04 	sts	0x0412, r24
     732:	90 93 13 04 	sts	0x0413, r25
     736:	a0 93 14 04 	sts	0x0414, r26
     73a:	b0 93 15 04 	sts	0x0415, r27
	}
} 
     73e:	bf 91       	pop	r27
     740:	af 91       	pop	r26
     742:	9f 91       	pop	r25
     744:	8f 91       	pop	r24
     746:	0f 90       	pop	r0
     748:	0f be       	out	0x3f, r0	; 63
     74a:	0f 90       	pop	r0
     74c:	1f 90       	pop	r1
     74e:	18 95       	reti

00000750 <initEncoders>:

void initEncoders(){		
	PCMSK1 |= _BV(PCINT8);
     750:	ec e6       	ldi	r30, 0x6C	; 108
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	80 81       	ld	r24, Z
     756:	81 60       	ori	r24, 0x01	; 1
     758:	80 83       	st	Z, r24
	DDRB &= ~_BV(PINB0);	
     75a:	20 98       	cbi	0x04, 0	; 4
	PCMSK1 |= _BV(PCINT15);
     75c:	80 81       	ld	r24, Z
     75e:	80 68       	ori	r24, 0x80	; 128
     760:	80 83       	st	Z, r24
	DDRB &= ~_BV(PINB7);	
     762:	27 98       	cbi	0x04, 7	; 4
	PCICR |= _BV(PCIE1);
     764:	e8 e6       	ldi	r30, 0x68	; 104
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	80 81       	ld	r24, Z
     76a:	82 60       	ori	r24, 0x02	; 2
     76c:	80 83       	st	Z, r24
     76e:	08 95       	ret

00000770 <getAverageSpeed>:
}
uint8_t sendDistAndTimePeriodically(void);

void getAverageSpeed(uint8_t reset){
     770:	ff 92       	push	r15
     772:	0f 93       	push	r16
     774:	1f 93       	push	r17
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	cd b7       	in	r28, 0x3d	; 61
     77c:	de b7       	in	r29, 0x3e	; 62
     77e:	c4 56       	subi	r28, 0x64	; 100
     780:	d1 09       	sbc	r29, r1
     782:	0f b6       	in	r0, 0x3f	; 63
     784:	f8 94       	cli
     786:	de bf       	out	0x3e, r29	; 62
     788:	0f be       	out	0x3f, r0	; 63
     78a:	cd bf       	out	0x3d, r28	; 61
     78c:	f8 2e       	mov	r15, r24
	char strBuffer[100];
	sprintf(strBuffer, "\n   dist: %lu \n   timp: %lu",  DISTANTA_PARCURSA, deciSecondsPassed);
     78e:	00 91 f6 03 	lds	r16, 0x03F6
     792:	10 91 f7 03 	lds	r17, 0x03F7
     796:	20 91 f8 03 	lds	r18, 0x03F8
     79a:	30 91 f9 03 	lds	r19, 0x03F9
     79e:	80 91 0c 04 	lds	r24, 0x040C
     7a2:	90 91 0d 04 	lds	r25, 0x040D
     7a6:	a0 91 0e 04 	lds	r26, 0x040E
     7aa:	b0 91 0f 04 	lds	r27, 0x040F
     7ae:	40 91 12 04 	lds	r20, 0x0412
     7b2:	50 91 13 04 	lds	r21, 0x0413
     7b6:	60 91 14 04 	lds	r22, 0x0414
     7ba:	70 91 15 04 	lds	r23, 0x0415
     7be:	3f 93       	push	r19
     7c0:	2f 93       	push	r18
     7c2:	1f 93       	push	r17
     7c4:	0f 93       	push	r16
     7c6:	8a 01       	movw	r16, r20
     7c8:	9b 01       	movw	r18, r22
     7ca:	08 0f       	add	r16, r24
     7cc:	19 1f       	adc	r17, r25
     7ce:	2a 1f       	adc	r18, r26
     7d0:	3b 1f       	adc	r19, r27
     7d2:	d9 01       	movw	r26, r18
     7d4:	c8 01       	movw	r24, r16
     7d6:	88 0f       	add	r24, r24
     7d8:	99 1f       	adc	r25, r25
     7da:	aa 1f       	adc	r26, r26
     7dc:	bb 1f       	adc	r27, r27
     7de:	88 0f       	add	r24, r24
     7e0:	99 1f       	adc	r25, r25
     7e2:	aa 1f       	adc	r26, r26
     7e4:	bb 1f       	adc	r27, r27
     7e6:	ac 01       	movw	r20, r24
     7e8:	bd 01       	movw	r22, r26
     7ea:	44 0f       	add	r20, r20
     7ec:	55 1f       	adc	r21, r21
     7ee:	66 1f       	adc	r22, r22
     7f0:	77 1f       	adc	r23, r23
     7f2:	44 0f       	add	r20, r20
     7f4:	55 1f       	adc	r21, r21
     7f6:	66 1f       	adc	r22, r22
     7f8:	77 1f       	adc	r23, r23
     7fa:	84 0f       	add	r24, r20
     7fc:	95 1f       	adc	r25, r21
     7fe:	a6 1f       	adc	r26, r22
     800:	b7 1f       	adc	r27, r23
     802:	08 0f       	add	r16, r24
     804:	19 1f       	adc	r17, r25
     806:	2a 1f       	adc	r18, r26
     808:	3b 1f       	adc	r19, r27
     80a:	b9 01       	movw	r22, r18
     80c:	a8 01       	movw	r20, r16
     80e:	76 95       	lsr	r23
     810:	67 95       	ror	r22
     812:	57 95       	ror	r21
     814:	47 95       	ror	r20
     816:	76 95       	lsr	r23
     818:	67 95       	ror	r22
     81a:	57 95       	ror	r21
     81c:	47 95       	ror	r20
     81e:	7f 93       	push	r23
     820:	6f 93       	push	r22
     822:	5f 93       	push	r21
     824:	4f 93       	push	r20
     826:	82 e2       	ldi	r24, 0x22	; 34
     828:	91 e0       	ldi	r25, 0x01	; 1
     82a:	9f 93       	push	r25
     82c:	8f 93       	push	r24
     82e:	8e 01       	movw	r16, r28
     830:	0f 5f       	subi	r16, 0xFF	; 255
     832:	1f 4f       	sbci	r17, 0xFF	; 255
     834:	1f 93       	push	r17
     836:	0f 93       	push	r16
     838:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <sprintf>
	BTTransmitStr(strBuffer);
     83c:	c8 01       	movw	r24, r16
     83e:	0e 94 b4 01 	call	0x368	; 0x368 <BTTransmitStr>
	
	if(!existsEntryInTimerQueue(&sendDistAndTimePeriodically))
     842:	8d ee       	ldi	r24, 0xED	; 237
     844:	92 e0       	ldi	r25, 0x02	; 2
     846:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <existsEntryInTimerQueue>
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	de bf       	out	0x3e, r29	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	cd bf       	out	0x3d, r28	; 61
     854:	81 11       	cpse	r24, r1
     856:	0a c0       	rjmp	.+20     	; 0x86c <getAverageSpeed+0xfc>
		addEntryToTimerQueue(&sendDistAndTimePeriodically, 1001 * 1000UL, Periodic);
     858:	21 e0       	ldi	r18, 0x01	; 1
     85a:	48 e2       	ldi	r20, 0x28	; 40
     85c:	56 e4       	ldi	r21, 0x46	; 70
     85e:	6f e0       	ldi	r22, 0x0F	; 15
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	8d ee       	ldi	r24, 0xED	; 237
     864:	92 e0       	ldi	r25, 0x02	; 2
     866:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <addEntryToTimerQueue>
     86a:	04 c0       	rjmp	.+8      	; 0x874 <getAverageSpeed+0x104>
	else
		removeEntryFromTimerQueue(&sendDistAndTimePeriodically);
     86c:	8d ee       	ldi	r24, 0xED	; 237
     86e:	92 e0       	ldi	r25, 0x02	; 2
     870:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <removeEntryFromTimerQueue>
	if(reset){
     874:	ff 20       	and	r15, r15
     876:	c1 f0       	breq	.+48     	; 0x8a8 <getAverageSpeed+0x138>
		encoder2CNT = encoder1CNT = 0;
     878:	10 92 0c 04 	sts	0x040C, r1
     87c:	10 92 0d 04 	sts	0x040D, r1
     880:	10 92 0e 04 	sts	0x040E, r1
     884:	10 92 0f 04 	sts	0x040F, r1
     888:	10 92 12 04 	sts	0x0412, r1
     88c:	10 92 13 04 	sts	0x0413, r1
     890:	10 92 14 04 	sts	0x0414, r1
     894:	10 92 15 04 	sts	0x0415, r1
		deciSecondsPassed = 0;
     898:	10 92 f6 03 	sts	0x03F6, r1
     89c:	10 92 f7 03 	sts	0x03F7, r1
     8a0:	10 92 f8 03 	sts	0x03F8, r1
     8a4:	10 92 f9 03 	sts	0x03F9, r1
	}
}
     8a8:	cc 59       	subi	r28, 0x9C	; 156
     8aa:	df 4f       	sbci	r29, 0xFF	; 255
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	f8 94       	cli
     8b0:	de bf       	out	0x3e, r29	; 62
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	cd bf       	out	0x3d, r28	; 61
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	1f 91       	pop	r17
     8bc:	0f 91       	pop	r16
     8be:	ff 90       	pop	r15
     8c0:	08 95       	ret

000008c2 <setSendingDistAndTime>:
void resetEncoders(){
	encoder2CNT = encoder1CNT = 0;
	lastPB7 = lastPB0 = 0;
}
void setSendingDistAndTime(uint8_t on){
	if(on)
     8c2:	88 23       	and	r24, r24
     8c4:	51 f0       	breq	.+20     	; 0x8da <setSendingDistAndTime+0x18>
		addEntryIfNotExists(&sendDistAndTimePeriodically, 500 * 1000UL, Periodic);
     8c6:	21 e0       	ldi	r18, 0x01	; 1
     8c8:	40 e2       	ldi	r20, 0x20	; 32
     8ca:	51 ea       	ldi	r21, 0xA1	; 161
     8cc:	67 e0       	ldi	r22, 0x07	; 7
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	8d ee       	ldi	r24, 0xED	; 237
     8d2:	92 e0       	ldi	r25, 0x02	; 2
     8d4:	0e 94 22 0c 	call	0x1844	; 0x1844 <addEntryIfNotExists>
     8d8:	08 95       	ret
	else
		removeEntryFromTimerQueue(&sendDistAndTimePeriodically);
     8da:	8d ee       	ldi	r24, 0xED	; 237
     8dc:	92 e0       	ldi	r25, 0x02	; 2
     8de:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <removeEntryFromTimerQueue>
     8e2:	08 95       	ret

000008e4 <toggleCountingTimeForEncoders>:
}
void toggleCountingTimeForEncoders(uint8_t on){
	if(on)
     8e4:	88 23       	and	r24, r24
     8e6:	51 f0       	breq	.+20     	; 0x8fc <toggleCountingTimeForEncoders+0x18>
		addEntryIfNotExists(&countTimeForEncoders, 200 * 1000UL, Periodic);
     8e8:	21 e0       	ldi	r18, 0x01	; 1
     8ea:	40 e4       	ldi	r20, 0x40	; 64
     8ec:	5d e0       	ldi	r21, 0x0D	; 13
     8ee:	63 e0       	ldi	r22, 0x03	; 3
     8f0:	70 e0       	ldi	r23, 0x00	; 0
     8f2:	88 ed       	ldi	r24, 0xD8	; 216
     8f4:	92 e0       	ldi	r25, 0x02	; 2
     8f6:	0e 94 22 0c 	call	0x1844	; 0x1844 <addEntryIfNotExists>
     8fa:	08 95       	ret
	else{
		removeEntryFromTimerQueue(&countTimeForEncoders);
     8fc:	88 ed       	ldi	r24, 0xD8	; 216
     8fe:	92 e0       	ldi	r25, 0x02	; 2
     900:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <removeEntryFromTimerQueue>
		countTimeForEncoders();
     904:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <countTimeForEncoders>
     908:	08 95       	ret

0000090a <stopEngines>:
	addEntryIfNotExists(&stopEngines, 1000UL*1000UL*timp, Once);
}


uint8_t stopEngines(){
	OCR0A = 0;
     90a:	17 bc       	out	0x27, r1	; 39
	OCR2A = 0;
     90c:	10 92 b3 00 	sts	0x00B3, r1
	
	PORTD &= ~ 1<<PIND2;
     910:	8b b1       	in	r24, 0x0b	; 11
     912:	88 7f       	andi	r24, 0xF8	; 248
     914:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~ 1<<PIND4;
     916:	8b b1       	in	r24, 0x0b	; 11
     918:	80 7e       	andi	r24, 0xE0	; 224
     91a:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~ 1<<PIND3;
     91c:	8b b1       	in	r24, 0x0b	; 11
     91e:	80 7f       	andi	r24, 0xF0	; 240
     920:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~ 1<<PIND5;
     922:	8b b1       	in	r24, 0x0b	; 11
     924:	80 7c       	andi	r24, 0xC0	; 192
     926:	8b b9       	out	0x0b, r24	; 11
	
	toggleCountingTimeForEncoders(OFF);
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <toggleCountingTimeForEncoders>
	PORTA |= _BV(PINA5);
     92e:	15 9a       	sbi	0x02, 5	; 2
	
	doBlinkLeds(0, 0);
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	a9 01       	movw	r20, r18
     936:	60 e0       	ldi	r22, 0x00	; 0
     938:	70 e0       	ldi	r23, 0x00	; 0
     93a:	cb 01       	movw	r24, r22
     93c:	0e 94 3c 07 	call	0xe78	; 0xe78 <doBlinkLeds>
		//BTTransmitStr("M-am oprit!");
	
	//setEnginesSpeed(RightEngines, 1, 0);
	//setEnginesSpeed(LeftEngines, 1, 0);
	return NO;
}
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	08 95       	ret

00000944 <checkFreeParallelParkingPlace>:
void checkFreeParallelParkingPlace(){
    if(DEBUGGING)
     944:	80 91 fc 03 	lds	r24, 0x03FC
     948:	80 ff       	sbrs	r24, 0
     94a:	04 c0       	rjmp	.+8      	; 0x954 <checkFreeParallelParkingPlace+0x10>
		BTTransmitStr("Start Free P P P!");
     94c:	8e e3       	ldi	r24, 0x3E	; 62
     94e:	91 e0       	ldi	r25, 0x01	; 1
     950:	0e 94 b4 01 	call	0x368	; 0x368 <BTTransmitStr>
     954:	08 95       	ret

00000956 <initEngines>:


void initEngines()
{
	
	OCR0A = 0;
     956:	17 bc       	out	0x27, r1	; 39
	OCR2A = 0;
     958:	10 92 b3 00 	sts	0x00B3, r1
	
	//PINB|=(1<<PB3);
	
	
	DDRB |=1<<PINB3;
     95c:	23 9a       	sbi	0x04, 3	; 4
	TCCR0A |=3;
     95e:	84 b5       	in	r24, 0x24	; 36
     960:	83 60       	ori	r24, 0x03	; 3
     962:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0A0);
     964:	84 b5       	in	r24, 0x24	; 36
     966:	80 64       	ori	r24, 0x40	; 64
     968:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0A1);
     96a:	84 b5       	in	r24, 0x24	; 36
     96c:	80 68       	ori	r24, 0x80	; 128
     96e:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS00);
     970:	85 b5       	in	r24, 0x25	; 37
     972:	81 60       	ori	r24, 0x01	; 1
     974:	85 bd       	out	0x25, r24	; 37
	// motor 2
	
	DDRD |= (1 << PD7);
     976:	57 9a       	sbi	0x0a, 7	; 10
	TCCR2A|=3;
     978:	e0 eb       	ldi	r30, 0xB0	; 176
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	80 81       	ld	r24, Z
     97e:	83 60       	ori	r24, 0x03	; 3
     980:	80 83       	st	Z, r24
	TCCR2A |= (1 << COM2A0);
     982:	80 81       	ld	r24, Z
     984:	80 64       	ori	r24, 0x40	; 64
     986:	80 83       	st	Z, r24
	TCCR2A |= (1 << COM2A1);
     988:	80 81       	ld	r24, Z
     98a:	80 68       	ori	r24, 0x80	; 128
     98c:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS20);
     98e:	e1 eb       	ldi	r30, 0xB1	; 177
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	80 81       	ld	r24, Z
     994:	81 60       	ori	r24, 0x01	; 1
     996:	80 83       	st	Z, r24
	
		/*	PORTC |= 1<<PINC1;	
			PORTC |= 1<<PINC0;	*/
		
	//enable standby
	DDRB |= 1<<PINB5;
     998:	25 9a       	sbi	0x04, 5	; 4
	PORTB |= 1<<PINB5;	
     99a:	2d 9a       	sbi	0x05, 5	; 5
	DDRB |= 1<<PINB4;
     99c:	24 9a       	sbi	0x04, 4	; 4
	PORTB |= 1<<PINB4;
     99e:	2c 9a       	sbi	0x05, 4	; 5
	
	
	//in1 & in2 4 left engines
	DDRD |= 1<<PIND3;
     9a0:	53 9a       	sbi	0x0a, 3	; 10
	DDRD |= 1<<PIND5;
     9a2:	55 9a       	sbi	0x0a, 5	; 10
	PORTD &= ~ 1<<PIND3;
     9a4:	8b b1       	in	r24, 0x0b	; 11
     9a6:	80 7f       	andi	r24, 0xF0	; 240
     9a8:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~ 1<<PIND5;
     9aa:	8b b1       	in	r24, 0x0b	; 11
     9ac:	80 7c       	andi	r24, 0xC0	; 192
     9ae:	8b b9       	out	0x0b, r24	; 11
	
	//in1 & in2 4 left engines
	DDRD |= 1<<PIND2;
     9b0:	52 9a       	sbi	0x0a, 2	; 10
	DDRD |= 1<<PIND4;
     9b2:	54 9a       	sbi	0x0a, 4	; 10
	PORTD &= ~ 1<<PIND2;
     9b4:	8b b1       	in	r24, 0x0b	; 11
     9b6:	88 7f       	andi	r24, 0xF8	; 248
     9b8:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~ 1<<PIND4;
     9ba:	8b b1       	in	r24, 0x0b	; 11
     9bc:	80 7e       	andi	r24, 0xE0	; 224
     9be:	8b b9       	out	0x0b, r24	; 11
     9c0:	08 95       	ret

000009c2 <setEnginesSpeed>:

Sens lastSensLeft=0, lastSensRight=0;
uint8_t lastVitLeft=0, lastVitRight=0;

void setEnginesSpeed(Engines engine, Sens sens, uint8_t viteza)
{
     9c2:	1f 93       	push	r17
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
     9c8:	d8 2f       	mov	r29, r24
     9ca:	c6 2f       	mov	r28, r22
     9cc:	14 2f       	mov	r17, r20
	toggleCountingTimeForEncoders(ON);
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <toggleCountingTimeForEncoders>
	viteza = 255 - viteza;
     9d4:	10 95       	com	r17
		
	if(engine==RightEngines){
     9d6:	d1 11       	cpse	r29, r1
     9d8:	0a c0       	rjmp	.+20     	; 0x9ee <setEnginesSpeed+0x2c>
		if(sens != SensFata){
     9da:	cc 23       	and	r28, r28
     9dc:	19 f0       	breq	.+6      	; 0x9e4 <setEnginesSpeed+0x22>
			PORTD |=  1<<PIND3;
     9de:	5b 9a       	sbi	0x0b, 3	; 11
			PORTD &= ~ (1<<PIND5);
     9e0:	5d 98       	cbi	0x0b, 5	; 11
     9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <setEnginesSpeed+0x26>
		}			
		else{
			PORTD &= ~ (1<<PIND3);
     9e4:	5b 98       	cbi	0x0b, 3	; 11
			PORTD |=  1<<PIND5;
     9e6:	5d 9a       	sbi	0x0b, 5	; 11
		}
		OCR2A = viteza;	
     9e8:	10 93 b3 00 	sts	0x00B3, r17
     9ec:	08 c0       	rjmp	.+16     	; 0x9fe <setEnginesSpeed+0x3c>
	}
	else
	{
		if(sens != SensFata){
     9ee:	cc 23       	and	r28, r28
     9f0:	19 f0       	breq	.+6      	; 0x9f8 <setEnginesSpeed+0x36>
			PORTD &= ~ (1<<PIND2);
     9f2:	5a 98       	cbi	0x0b, 2	; 11
			PORTD |=  1<<PIND4;	
     9f4:	5c 9a       	sbi	0x0b, 4	; 11
     9f6:	02 c0       	rjmp	.+4      	; 0x9fc <setEnginesSpeed+0x3a>
		}			
		else{			
			PORTD |=  1<<PIND2;
     9f8:	5a 9a       	sbi	0x0b, 2	; 11
			PORTD &= ~( 1<<PIND4);	
     9fa:	5c 98       	cbi	0x0b, 4	; 11
		}
		OCR0A = viteza;
     9fc:	17 bd       	out	0x27, r17	; 39
	}		
}
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	1f 91       	pop	r17
     a04:	08 95       	ret

00000a06 <goFront>:
#include "Lights.h"
#include "../utile.h"

void setEnginesSpeed(Engines, Sens, uint8_t);

void goFront(uint8_t timp, uint8_t viteza){	
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	d8 2f       	mov	r29, r24
     a0c:	c6 2f       	mov	r28, r22
	setEnginesSpeed(RightEngines, SensFata, viteza);
     a0e:	46 2f       	mov	r20, r22
     a10:	60 e0       	ldi	r22, 0x00	; 0
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensFata, viteza);
     a18:	4c 2f       	mov	r20, r28
     a1a:	60 e0       	ldi	r22, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <setEnginesSpeed>
	addEntryIfNotExists(&stopEngines, 1000UL*1000UL*timp, Once);	
     a22:	ad 2f       	mov	r26, r29
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	20 e4       	ldi	r18, 0x40	; 64
     a28:	32 e4       	ldi	r19, 0x42	; 66
     a2a:	4f e0       	ldi	r20, 0x0F	; 15
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <__muluhisi3>
     a32:	ab 01       	movw	r20, r22
     a34:	bc 01       	movw	r22, r24
     a36:	20 e0       	ldi	r18, 0x00	; 0
     a38:	85 e8       	ldi	r24, 0x85	; 133
     a3a:	94 e0       	ldi	r25, 0x04	; 4
     a3c:	0e 94 22 0c 	call	0x1844	; 0x1844 <addEntryIfNotExists>
	doBlinkLeds(0, 0);
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	a9 01       	movw	r20, r18
     a46:	60 e0       	ldi	r22, 0x00	; 0
     a48:	70 e0       	ldi	r23, 0x00	; 0
     a4a:	cb 01       	movw	r24, r22
     a4c:	0e 94 3c 07 	call	0xe78	; 0xe78 <doBlinkLeds>
	if(DEBUGGING)
     a50:	80 91 fc 03 	lds	r24, 0x03FC
     a54:	80 ff       	sbrs	r24, 0
     a56:	04 c0       	rjmp	.+8      	; 0xa60 <goFront+0x5a>
		BTTransmitStr("Ma duc inainte!");
     a58:	81 e7       	ldi	r24, 0x71	; 113
     a5a:	91 e0       	ldi	r25, 0x01	; 1
     a5c:	0e 94 b4 01 	call	0x368	; 0x368 <BTTransmitStr>
}
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	08 95       	ret

00000a66 <goBack>:
void goBack(uint8_t timp, uint8_t viteza){
     a66:	cf 93       	push	r28
     a68:	df 93       	push	r29
     a6a:	d8 2f       	mov	r29, r24
     a6c:	c6 2f       	mov	r28, r22
	setEnginesSpeed(RightEngines, SensSpate, viteza);
     a6e:	46 2f       	mov	r20, r22
     a70:	61 e0       	ldi	r22, 0x01	; 1
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensSpate, viteza);
     a78:	4c 2f       	mov	r20, r28
     a7a:	61 e0       	ldi	r22, 0x01	; 1
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <setEnginesSpeed>
	addEntryIfNotExists(&stopEngines, 1000UL*1000UL*timp, Once);
     a82:	ad 2f       	mov	r26, r29
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	20 e4       	ldi	r18, 0x40	; 64
     a88:	32 e4       	ldi	r19, 0x42	; 66
     a8a:	4f e0       	ldi	r20, 0x0F	; 15
     a8c:	50 e0       	ldi	r21, 0x00	; 0
     a8e:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <__muluhisi3>
     a92:	ab 01       	movw	r20, r22
     a94:	bc 01       	movw	r22, r24
     a96:	20 e0       	ldi	r18, 0x00	; 0
     a98:	85 e8       	ldi	r24, 0x85	; 133
     a9a:	94 e0       	ldi	r25, 0x04	; 4
     a9c:	0e 94 22 0c 	call	0x1844	; 0x1844 <addEntryIfNotExists>
	doBlinkLeds(0, 0);
     aa0:	20 e0       	ldi	r18, 0x00	; 0
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	a9 01       	movw	r20, r18
     aa6:	60 e0       	ldi	r22, 0x00	; 0
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	cb 01       	movw	r24, r22
     aac:	0e 94 3c 07 	call	0xe78	; 0xe78 <doBlinkLeds>
    if(DEBUGGING)
     ab0:	80 91 fc 03 	lds	r24, 0x03FC
     ab4:	80 ff       	sbrs	r24, 0
     ab6:	04 c0       	rjmp	.+8      	; 0xac0 <goBack+0x5a>
		BTTransmitStr("Ma duc inapoi!");
     ab8:	81 e8       	ldi	r24, 0x81	; 129
     aba:	91 e0       	ldi	r25, 0x01	; 1
     abc:	0e 94 b4 01 	call	0x368	; 0x368 <BTTransmitStr>
}
     ac0:	df 91       	pop	r29
     ac2:	cf 91       	pop	r28
     ac4:	08 95       	ret

00000ac6 <goFrontLeft>:

void goFrontLeft(uint8_t timp, uint8_t viteza){
     ac6:	cf 93       	push	r28
     ac8:	c8 2f       	mov	r28, r24
     aca:	46 2f       	mov	r20, r22
	
	setEnginesSpeed(RightEngines, SensFata, viteza);
     acc:	60 e0       	ldi	r22, 0x00	; 0
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensFata, 10);
     ad4:	4a e0       	ldi	r20, 0x0A	; 10
     ad6:	60 e0       	ldi	r22, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <setEnginesSpeed>
	addEntryIfNotExists(&stopEngines, 1000UL*1000UL*timp, Once);
     ade:	ac 2f       	mov	r26, r28
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	20 e4       	ldi	r18, 0x40	; 64
     ae4:	32 e4       	ldi	r19, 0x42	; 66
     ae6:	4f e0       	ldi	r20, 0x0F	; 15
     ae8:	50 e0       	ldi	r21, 0x00	; 0
     aea:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <__muluhisi3>
     aee:	ab 01       	movw	r20, r22
     af0:	bc 01       	movw	r22, r24
     af2:	20 e0       	ldi	r18, 0x00	; 0
     af4:	85 e8       	ldi	r24, 0x85	; 133
     af6:	94 e0       	ldi	r25, 0x04	; 4
     af8:	0e 94 22 0c 	call	0x1844	; 0x1844 <addEntryIfNotExists>
	doBlinkLeds(500*1000UL, 0);
     afc:	20 e0       	ldi	r18, 0x00	; 0
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	a9 01       	movw	r20, r18
     b02:	60 e2       	ldi	r22, 0x20	; 32
     b04:	71 ea       	ldi	r23, 0xA1	; 161
     b06:	87 e0       	ldi	r24, 0x07	; 7
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	0e 94 3c 07 	call	0xe78	; 0xe78 <doBlinkLeds>
    if(DEBUGGING)
     b0e:	80 91 fc 03 	lds	r24, 0x03FC
     b12:	80 ff       	sbrs	r24, 0
     b14:	04 c0       	rjmp	.+8      	; 0xb1e <goFrontLeft+0x58>
		BTTransmitStr("Ma duc inainte stanga!");
     b16:	80 e9       	ldi	r24, 0x90	; 144
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	0e 94 b4 01 	call	0x368	; 0x368 <BTTransmitStr>
}
     b1e:	cf 91       	pop	r28
     b20:	08 95       	ret

00000b22 <goFrontRight>:
void goFrontRight(uint8_t timp, uint8_t viteza){
     b22:	cf 93       	push	r28
     b24:	df 93       	push	r29
     b26:	c8 2f       	mov	r28, r24
     b28:	d6 2f       	mov	r29, r22
	
	setEnginesSpeed(RightEngines, SensFata, 10);
     b2a:	4a e0       	ldi	r20, 0x0A	; 10
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensFata, viteza);
     b34:	4d 2f       	mov	r20, r29
     b36:	60 e0       	ldi	r22, 0x00	; 0
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <setEnginesSpeed>
	addEntryIfNotExists(&stopEngines, 1000UL*1000UL*timp, Once);
     b3e:	ac 2f       	mov	r26, r28
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	20 e4       	ldi	r18, 0x40	; 64
     b44:	32 e4       	ldi	r19, 0x42	; 66
     b46:	4f e0       	ldi	r20, 0x0F	; 15
     b48:	50 e0       	ldi	r21, 0x00	; 0
     b4a:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <__muluhisi3>
     b4e:	ab 01       	movw	r20, r22
     b50:	bc 01       	movw	r22, r24
     b52:	20 e0       	ldi	r18, 0x00	; 0
     b54:	85 e8       	ldi	r24, 0x85	; 133
     b56:	94 e0       	ldi	r25, 0x04	; 4
     b58:	0e 94 22 0c 	call	0x1844	; 0x1844 <addEntryIfNotExists>
	doBlinkLeds(0, 500*1000UL);
     b5c:	20 e2       	ldi	r18, 0x20	; 32
     b5e:	31 ea       	ldi	r19, 0xA1	; 161
     b60:	47 e0       	ldi	r20, 0x07	; 7
     b62:	50 e0       	ldi	r21, 0x00	; 0
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	cb 01       	movw	r24, r22
     b6a:	0e 94 3c 07 	call	0xe78	; 0xe78 <doBlinkLeds>
    if(DEBUGGING)
     b6e:	80 91 fc 03 	lds	r24, 0x03FC
     b72:	80 ff       	sbrs	r24, 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <goFrontRight+0x5c>
		BTTransmitStr("Ma duc inainte dreapta!");
     b76:	87 ea       	ldi	r24, 0xA7	; 167
     b78:	91 e0       	ldi	r25, 0x01	; 1
     b7a:	0e 94 b4 01 	call	0x368	; 0x368 <BTTransmitStr>
}
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	08 95       	ret

00000b84 <goBackLeft>:

void goBackLeft(uint8_t timp, uint8_t viteza){
     b84:	cf 93       	push	r28
     b86:	c8 2f       	mov	r28, r24
     b88:	46 2f       	mov	r20, r22
	
	setEnginesSpeed(RightEngines, SensSpate, viteza);
     b8a:	61 e0       	ldi	r22, 0x01	; 1
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensSpate, 10);
     b92:	4a e0       	ldi	r20, 0x0A	; 10
     b94:	61 e0       	ldi	r22, 0x01	; 1
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <setEnginesSpeed>
	addEntryIfNotExists(&stopEngines, 1000UL*1000UL*timp, Once);
     b9c:	ac 2f       	mov	r26, r28
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	20 e4       	ldi	r18, 0x40	; 64
     ba2:	32 e4       	ldi	r19, 0x42	; 66
     ba4:	4f e0       	ldi	r20, 0x0F	; 15
     ba6:	50 e0       	ldi	r21, 0x00	; 0
     ba8:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <__muluhisi3>
     bac:	ab 01       	movw	r20, r22
     bae:	bc 01       	movw	r22, r24
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	85 e8       	ldi	r24, 0x85	; 133
     bb4:	94 e0       	ldi	r25, 0x04	; 4
     bb6:	0e 94 22 0c 	call	0x1844	; 0x1844 <addEntryIfNotExists>
	doBlinkLeds(500*1000UL, 0);
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	a9 01       	movw	r20, r18
     bc0:	60 e2       	ldi	r22, 0x20	; 32
     bc2:	71 ea       	ldi	r23, 0xA1	; 161
     bc4:	87 e0       	ldi	r24, 0x07	; 7
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 94 3c 07 	call	0xe78	; 0xe78 <doBlinkLeds>
    if(DEBUGGING)
     bcc:	80 91 fc 03 	lds	r24, 0x03FC
     bd0:	80 ff       	sbrs	r24, 0
     bd2:	04 c0       	rjmp	.+8      	; 0xbdc <goBackLeft+0x58>
		BTTransmitStr("Ma duc inapoi stanga!");
     bd4:	8f eb       	ldi	r24, 0xBF	; 191
     bd6:	91 e0       	ldi	r25, 0x01	; 1
     bd8:	0e 94 b4 01 	call	0x368	; 0x368 <BTTransmitStr>
}
     bdc:	cf 91       	pop	r28
     bde:	08 95       	ret

00000be0 <goBackRight>:
void goBackRight(uint8_t timp, uint8_t viteza){
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	c8 2f       	mov	r28, r24
     be6:	d6 2f       	mov	r29, r22
		
	setEnginesSpeed(RightEngines, SensSpate, 10);
     be8:	4a e0       	ldi	r20, 0x0A	; 10
     bea:	61 e0       	ldi	r22, 0x01	; 1
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensSpate, viteza);
     bf2:	4d 2f       	mov	r20, r29
     bf4:	61 e0       	ldi	r22, 0x01	; 1
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <setEnginesSpeed>
	addEntryIfNotExists(&stopEngines, 1000UL*1000UL*timp, Once);
     bfc:	ac 2f       	mov	r26, r28
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	20 e4       	ldi	r18, 0x40	; 64
     c02:	32 e4       	ldi	r19, 0x42	; 66
     c04:	4f e0       	ldi	r20, 0x0F	; 15
     c06:	50 e0       	ldi	r21, 0x00	; 0
     c08:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <__muluhisi3>
     c0c:	ab 01       	movw	r20, r22
     c0e:	bc 01       	movw	r22, r24
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	85 e8       	ldi	r24, 0x85	; 133
     c14:	94 e0       	ldi	r25, 0x04	; 4
     c16:	0e 94 22 0c 	call	0x1844	; 0x1844 <addEntryIfNotExists>
	doBlinkLeds(0, 500*1000UL);
     c1a:	20 e2       	ldi	r18, 0x20	; 32
     c1c:	31 ea       	ldi	r19, 0xA1	; 161
     c1e:	47 e0       	ldi	r20, 0x07	; 7
     c20:	50 e0       	ldi	r21, 0x00	; 0
     c22:	60 e0       	ldi	r22, 0x00	; 0
     c24:	70 e0       	ldi	r23, 0x00	; 0
     c26:	cb 01       	movw	r24, r22
     c28:	0e 94 3c 07 	call	0xe78	; 0xe78 <doBlinkLeds>
    if(DEBUGGING)
     c2c:	80 91 fc 03 	lds	r24, 0x03FC
     c30:	80 ff       	sbrs	r24, 0
     c32:	04 c0       	rjmp	.+8      	; 0xc3c <goBackRight+0x5c>
		BTTransmitStr("Ma duc inapoi dreapta!");
     c34:	85 ed       	ldi	r24, 0xD5	; 213
     c36:	91 e0       	ldi	r25, 0x01	; 1
     c38:	0e 94 b4 01 	call	0x368	; 0x368 <BTTransmitStr>
}
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	08 95       	ret

00000c42 <rotireSmechera>:
void rotireSmechera(uint8_t timp, Sens sensStanga, uint8_t vitezaStanga, Sens sensDreapta, uint8_t vitezaDreapta){
     c42:	df 92       	push	r13
     c44:	ef 92       	push	r14
     c46:	ff 92       	push	r15
     c48:	0f 93       	push	r16
     c4a:	1f 93       	push	r17
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	c4 56       	subi	r28, 0x64	; 100
     c56:	d1 09       	sbc	r29, r1
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	f8 94       	cli
     c5c:	de bf       	out	0x3e, r29	; 62
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	cd bf       	out	0x3d, r28	; 61
     c62:	d8 2e       	mov	r13, r24
     c64:	e6 2e       	mov	r14, r22
     c66:	f4 2e       	mov	r15, r20
     c68:	12 2f       	mov	r17, r18
	setEnginesSpeed(RightEngines, sensDreapta, vitezaDreapta);
     c6a:	40 2f       	mov	r20, r16
     c6c:	62 2f       	mov	r22, r18
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, sensStanga, vitezaStanga);
     c74:	4f 2d       	mov	r20, r15
     c76:	6e 2d       	mov	r22, r14
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <setEnginesSpeed>
	addEntryIfNotExists(&stopEngines, 1000UL*1000 * timp, Once);
     c7e:	ad 2d       	mov	r26, r13
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	20 e4       	ldi	r18, 0x40	; 64
     c84:	32 e4       	ldi	r19, 0x42	; 66
     c86:	4f e0       	ldi	r20, 0x0F	; 15
     c88:	50 e0       	ldi	r21, 0x00	; 0
     c8a:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <__muluhisi3>
     c8e:	ab 01       	movw	r20, r22
     c90:	bc 01       	movw	r22, r24
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	85 e8       	ldi	r24, 0x85	; 133
     c96:	94 e0       	ldi	r25, 0x04	; 4
     c98:	0e 94 22 0c 	call	0x1844	; 0x1844 <addEntryIfNotExists>
	
	if(sensDreapta == SensFata && sensStanga == SensSpate){
     c9c:	11 11       	cpse	r17, r1
     c9e:	0d c0       	rjmp	.+26     	; 0xcba <rotireSmechera+0x78>
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	e8 12       	cpse	r14, r24
     ca4:	18 c0       	rjmp	.+48     	; 0xcd6 <rotireSmechera+0x94>
		doBlinkLeds(500*1000UL, 0);
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	a9 01       	movw	r20, r18
     cac:	60 e2       	ldi	r22, 0x20	; 32
     cae:	71 ea       	ldi	r23, 0xA1	; 161
     cb0:	87 e0       	ldi	r24, 0x07	; 7
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	0e 94 3c 07 	call	0xe78	; 0xe78 <doBlinkLeds>
     cb8:	51 c0       	rjmp	.+162    	; 0xd5c <rotireSmechera+0x11a>
	}
	else if(sensDreapta == SensSpate && sensStanga == SensFata){
     cba:	11 30       	cpi	r17, 0x01	; 1
     cbc:	79 f5       	brne	.+94     	; 0xd1c <rotireSmechera+0xda>
     cbe:	e1 10       	cpse	r14, r1
     cc0:	2d c0       	rjmp	.+90     	; 0xd1c <rotireSmechera+0xda>
		doBlinkLeds(0, 500*1000UL);
     cc2:	20 e2       	ldi	r18, 0x20	; 32
     cc4:	31 ea       	ldi	r19, 0xA1	; 161
     cc6:	47 e0       	ldi	r20, 0x07	; 7
     cc8:	50 e0       	ldi	r21, 0x00	; 0
     cca:	60 e0       	ldi	r22, 0x00	; 0
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	cb 01       	movw	r24, r22
     cd0:	0e 94 3c 07 	call	0xe78	; 0xe78 <doBlinkLeds>
     cd4:	43 c0       	rjmp	.+134    	; 0xd5c <rotireSmechera+0x11a>
	}
	else if(sensDreapta == SensFata && sensStanga == SensFata){
     cd6:	e1 10       	cpse	r14, r1
     cd8:	21 c0       	rjmp	.+66     	; 0xd1c <rotireSmechera+0xda>
		if(vitezaStanga > vitezaDreapta)			
     cda:	0f 15       	cp	r16, r15
     cdc:	50 f4       	brcc	.+20     	; 0xcf2 <rotireSmechera+0xb0>
			doBlinkLeds(0, 500*1000UL);	
     cde:	20 e2       	ldi	r18, 0x20	; 32
     ce0:	31 ea       	ldi	r19, 0xA1	; 161
     ce2:	47 e0       	ldi	r20, 0x07	; 7
     ce4:	50 e0       	ldi	r21, 0x00	; 0
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	cb 01       	movw	r24, r22
     cec:	0e 94 3c 07 	call	0xe78	; 0xe78 <doBlinkLeds>
     cf0:	35 c0       	rjmp	.+106    	; 0xd5c <rotireSmechera+0x11a>
		else if(vitezaStanga < vitezaDreapta)
     cf2:	f0 16       	cp	r15, r16
     cf4:	50 f4       	brcc	.+20     	; 0xd0a <rotireSmechera+0xc8>
			doBlinkLeds(500*1000UL, 0);
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	a9 01       	movw	r20, r18
     cfc:	60 e2       	ldi	r22, 0x20	; 32
     cfe:	71 ea       	ldi	r23, 0xA1	; 161
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 3c 07 	call	0xe78	; 0xe78 <doBlinkLeds>
     d08:	29 c0       	rjmp	.+82     	; 0xd5c <rotireSmechera+0x11a>
		else
			doBlinkLeds(0, 0);
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	a9 01       	movw	r20, r18
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	cb 01       	movw	r24, r22
     d16:	0e 94 3c 07 	call	0xe78	; 0xe78 <doBlinkLeds>
     d1a:	20 c0       	rjmp	.+64     	; 0xd5c <rotireSmechera+0x11a>
	}
	else {
		if(vitezaStanga < vitezaDreapta)
     d1c:	f0 16       	cp	r15, r16
     d1e:	50 f4       	brcc	.+20     	; 0xd34 <rotireSmechera+0xf2>
			doBlinkLeds(500*1000UL, 0);
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	a9 01       	movw	r20, r18
     d26:	60 e2       	ldi	r22, 0x20	; 32
     d28:	71 ea       	ldi	r23, 0xA1	; 161
     d2a:	87 e0       	ldi	r24, 0x07	; 7
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	0e 94 3c 07 	call	0xe78	; 0xe78 <doBlinkLeds>
     d32:	14 c0       	rjmp	.+40     	; 0xd5c <rotireSmechera+0x11a>
		else if(vitezaStanga > vitezaDreapta)
     d34:	0f 15       	cp	r16, r15
     d36:	50 f4       	brcc	.+20     	; 0xd4c <rotireSmechera+0x10a>
			doBlinkLeds(0, 500*1000UL);
     d38:	20 e2       	ldi	r18, 0x20	; 32
     d3a:	31 ea       	ldi	r19, 0xA1	; 161
     d3c:	47 e0       	ldi	r20, 0x07	; 7
     d3e:	50 e0       	ldi	r21, 0x00	; 0
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	cb 01       	movw	r24, r22
     d46:	0e 94 3c 07 	call	0xe78	; 0xe78 <doBlinkLeds>
     d4a:	08 c0       	rjmp	.+16     	; 0xd5c <rotireSmechera+0x11a>
		else
			doBlinkLeds(0, 0);
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	a9 01       	movw	r20, r18
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	70 e0       	ldi	r23, 0x00	; 0
     d56:	cb 01       	movw	r24, r22
     d58:	0e 94 3c 07 	call	0xe78	; 0xe78 <doBlinkLeds>
	}
	
	if(DEBUGGING){
     d5c:	80 91 fc 03 	lds	r24, 0x03FC
     d60:	80 ff       	sbrs	r24, 0
     d62:	1b c0       	rjmp	.+54     	; 0xd9a <rotireSmechera+0x158>
		char bfr[100];
		sprintf(bfr, "rotire smechera : %u %u %u %u", sensStanga, vitezaStanga, sensDreapta, vitezaDreapta);
     d64:	1f 92       	push	r1
     d66:	0f 93       	push	r16
     d68:	1f 92       	push	r1
     d6a:	1f 93       	push	r17
     d6c:	1f 92       	push	r1
     d6e:	ff 92       	push	r15
     d70:	1f 92       	push	r1
     d72:	ef 92       	push	r14
     d74:	8c ee       	ldi	r24, 0xEC	; 236
     d76:	91 e0       	ldi	r25, 0x01	; 1
     d78:	9f 93       	push	r25
     d7a:	8f 93       	push	r24
     d7c:	8e 01       	movw	r16, r28
     d7e:	0f 5f       	subi	r16, 0xFF	; 255
     d80:	1f 4f       	sbci	r17, 0xFF	; 255
     d82:	1f 93       	push	r17
     d84:	0f 93       	push	r16
     d86:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <sprintf>
		BTTransmitStr(bfr);		
     d8a:	c8 01       	movw	r24, r16
     d8c:	0e 94 b4 01 	call	0x368	; 0x368 <BTTransmitStr>
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	f8 94       	cli
     d94:	de bf       	out	0x3e, r29	; 62
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	cd bf       	out	0x3d, r28	; 61
	}
		
}
     d9a:	cc 59       	subi	r28, 0x9C	; 156
     d9c:	df 4f       	sbci	r29, 0xFF	; 255
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	f8 94       	cli
     da2:	de bf       	out	0x3e, r29	; 62
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	cd bf       	out	0x3d, r28	; 61
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	1f 91       	pop	r17
     dae:	0f 91       	pop	r16
     db0:	ff 90       	pop	r15
     db2:	ef 90       	pop	r14
     db4:	df 90       	pop	r13
     db6:	08 95       	ret

00000db8 <rotirePeLoc>:
void rotirePeLoc(uint8_t timp, uint8_t viteza,  uint8_t engines){
     db8:	cf 93       	push	r28
     dba:	df 93       	push	r29
     dbc:	d8 2f       	mov	r29, r24
     dbe:	c6 2f       	mov	r28, r22
	
	if(engines == RightEngines){
     dc0:	41 11       	cpse	r20, r1
     dc2:	1c c0       	rjmp	.+56     	; 0xdfc <rotirePeLoc+0x44>
		setEnginesSpeed(LeftEngines, SensSpate,  viteza);
     dc4:	46 2f       	mov	r20, r22
     dc6:	61 e0       	ldi	r22, 0x01	; 1
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <setEnginesSpeed>
		setEnginesSpeed(RightEngines, SensFata, viteza);
     dce:	4c 2f       	mov	r20, r28
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <setEnginesSpeed>
		if(DEBUGGING)
     dd8:	80 91 fc 03 	lds	r24, 0x03FC
     ddc:	80 ff       	sbrs	r24, 0
     dde:	04 c0       	rjmp	.+8      	; 0xde8 <rotirePeLoc+0x30>
			BTTransmitStr("ma rotesc spre dreapta");
     de0:	8a e0       	ldi	r24, 0x0A	; 10
     de2:	92 e0       	ldi	r25, 0x02	; 2
     de4:	0e 94 b4 01 	call	0x368	; 0x368 <BTTransmitStr>
		doBlinkLeds(500*1000UL, 0);
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	a9 01       	movw	r20, r18
     dee:	60 e2       	ldi	r22, 0x20	; 32
     df0:	71 ea       	ldi	r23, 0xA1	; 161
     df2:	87 e0       	ldi	r24, 0x07	; 7
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	0e 94 3c 07 	call	0xe78	; 0xe78 <doBlinkLeds>
     dfa:	1b c0       	rjmp	.+54     	; 0xe32 <rotirePeLoc+0x7a>
	}
	else {
		setEnginesSpeed(LeftEngines, SensFata, viteza);
     dfc:	46 2f       	mov	r20, r22
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <setEnginesSpeed>
		setEnginesSpeed(RightEngines, SensSpate, viteza);
     e06:	4c 2f       	mov	r20, r28
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <setEnginesSpeed>
		if(DEBUGGING)
     e10:	80 91 fc 03 	lds	r24, 0x03FC
     e14:	80 ff       	sbrs	r24, 0
     e16:	04 c0       	rjmp	.+8      	; 0xe20 <rotirePeLoc+0x68>
			BTTransmitStr("ma rotesc spre stanga");
     e18:	81 e2       	ldi	r24, 0x21	; 33
     e1a:	92 e0       	ldi	r25, 0x02	; 2
     e1c:	0e 94 b4 01 	call	0x368	; 0x368 <BTTransmitStr>
		doBlinkLeds(0, 500*1000UL);
     e20:	20 e2       	ldi	r18, 0x20	; 32
     e22:	31 ea       	ldi	r19, 0xA1	; 161
     e24:	47 e0       	ldi	r20, 0x07	; 7
     e26:	50 e0       	ldi	r21, 0x00	; 0
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	cb 01       	movw	r24, r22
     e2e:	0e 94 3c 07 	call	0xe78	; 0xe78 <doBlinkLeds>
	}
	addEntryIfNotExists(&stopEngines, 1000UL*1000UL*timp, Once);
     e32:	ad 2f       	mov	r26, r29
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	20 e4       	ldi	r18, 0x40	; 64
     e38:	32 e4       	ldi	r19, 0x42	; 66
     e3a:	4f e0       	ldi	r20, 0x0F	; 15
     e3c:	50 e0       	ldi	r21, 0x00	; 0
     e3e:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <__muluhisi3>
     e42:	ab 01       	movw	r20, r22
     e44:	bc 01       	movw	r22, r24
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	85 e8       	ldi	r24, 0x85	; 133
     e4a:	94 e0       	ldi	r25, 0x04	; 4
     e4c:	0e 94 22 0c 	call	0x1844	; 0x1844 <addEntryIfNotExists>
}
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	08 95       	ret

00000e56 <blinkLeftLeds>:
	PORTA |= _BV(PINA4);
	PORTA |= _BV(PINA5);
}

uint8_t blinkLeftLeds(){
	PORTA ^= _BV(PINA5);
     e56:	92 b1       	in	r25, 0x02	; 2
     e58:	80 e2       	ldi	r24, 0x20	; 32
     e5a:	89 27       	eor	r24, r25
     e5c:	82 b9       	out	0x02, r24	; 2
	return NO;
}
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	08 95       	ret

00000e62 <blinkRightLeds>:

uint8_t blinkRightLeds(){
	PORTA ^= _BV(PINA4);
     e62:	92 b1       	in	r25, 0x02	; 2
     e64:	80 e1       	ldi	r24, 0x10	; 16
     e66:	89 27       	eor	r24, r25
     e68:	82 b9       	out	0x02, r24	; 2
	return NO;
}
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	08 95       	ret

00000e6e <initLights>:
#include "../Timing//Timing.h"
#include "../Constants.c"
#include "../utile.h"

void initLights(){	
	DDRA |= _BV(PINA4);
     e6e:	0c 9a       	sbi	0x01, 4	; 1
	DDRA |= _BV(PINA5);
     e70:	0d 9a       	sbi	0x01, 5	; 1
	PORTA |= _BV(PINA4);
     e72:	14 9a       	sbi	0x02, 4	; 2
	PORTA |= _BV(PINA5);
     e74:	15 9a       	sbi	0x02, 5	; 2
     e76:	08 95       	ret

00000e78 <doBlinkLeds>:
uint8_t blinkRightLeds(){
	PORTA ^= _BV(PINA4);
	return NO;
}

void doBlinkLeds(uint32_t perioadaStanga, uint32_t perioadaDreapta){
     e78:	cf 92       	push	r12
     e7a:	df 92       	push	r13
     e7c:	ef 92       	push	r14
     e7e:	ff 92       	push	r15
     e80:	69 01       	movw	r12, r18
     e82:	7a 01       	movw	r14, r20
	if(perioadaStanga == 0){
     e84:	61 15       	cp	r22, r1
     e86:	71 05       	cpc	r23, r1
     e88:	81 05       	cpc	r24, r1
     e8a:	91 05       	cpc	r25, r1
     e8c:	31 f4       	brne	.+12     	; 0xe9a <doBlinkLeds+0x22>
		removeEntryFromTimerQueue(&blinkLeftLeds);
     e8e:	8b e2       	ldi	r24, 0x2B	; 43
     e90:	97 e0       	ldi	r25, 0x07	; 7
     e92:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <removeEntryFromTimerQueue>
		PORTA &=~ _BV(PINA4);
     e96:	14 98       	cbi	0x02, 4	; 2
     e98:	07 c0       	rjmp	.+14     	; 0xea8 <doBlinkLeds+0x30>
	}
	else{
		addEntryIfNotExists(&blinkLeftLeds, perioadaStanga, Periodic);
     e9a:	21 e0       	ldi	r18, 0x01	; 1
     e9c:	ab 01       	movw	r20, r22
     e9e:	bc 01       	movw	r22, r24
     ea0:	8b e2       	ldi	r24, 0x2B	; 43
     ea2:	97 e0       	ldi	r25, 0x07	; 7
     ea4:	0e 94 22 0c 	call	0x1844	; 0x1844 <addEntryIfNotExists>
	}
	if(perioadaDreapta == 0){
     ea8:	c1 14       	cp	r12, r1
     eaa:	d1 04       	cpc	r13, r1
     eac:	e1 04       	cpc	r14, r1
     eae:	f1 04       	cpc	r15, r1
     eb0:	31 f4       	brne	.+12     	; 0xebe <doBlinkLeds+0x46>
		removeEntryFromTimerQueue(&blinkRightLeds);
     eb2:	81 e3       	ldi	r24, 0x31	; 49
     eb4:	97 e0       	ldi	r25, 0x07	; 7
     eb6:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <removeEntryFromTimerQueue>
		PORTA &=~ _BV(PINA5);
     eba:	15 98       	cbi	0x02, 5	; 2
     ebc:	07 c0       	rjmp	.+14     	; 0xecc <doBlinkLeds+0x54>
	}
	else{
		addEntryIfNotExists(&blinkRightLeds, perioadaDreapta, Periodic);
     ebe:	21 e0       	ldi	r18, 0x01	; 1
     ec0:	b7 01       	movw	r22, r14
     ec2:	a6 01       	movw	r20, r12
     ec4:	81 e3       	ldi	r24, 0x31	; 49
     ec6:	97 e0       	ldi	r25, 0x07	; 7
     ec8:	0e 94 22 0c 	call	0x1844	; 0x1844 <addEntryIfNotExists>
	}
}
     ecc:	ff 90       	pop	r15
     ece:	ef 90       	pop	r14
     ed0:	df 90       	pop	r13
     ed2:	cf 90       	pop	r12
     ed4:	08 95       	ret

00000ed6 <sendSensor>:

uint16_t getValueOfSensor(Sensor sensor){
	return lastCMValue[sensor];
}

uint8_t sendSensor(){
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	c0 e0       	ldi	r28, 0x00	; 0
     ee4:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	
	for(i=0;i<4;i++){		
		if(sensorsToSend & (1<<i)){			
			sprintf(msgBuffer, "sensor #%d = %lu", i, lastCMValue[i]);			
     ee6:	0f 2e       	mov	r0, r31
     ee8:	f7 e3       	ldi	r31, 0x37	; 55
     eea:	ef 2e       	mov	r14, r31
     eec:	f2 e0       	ldi	r31, 0x02	; 2
     eee:	ff 2e       	mov	r15, r31
     ef0:	f0 2d       	mov	r31, r0
     ef2:	0e e2       	ldi	r16, 0x2E	; 46
     ef4:	14 e0       	ldi	r17, 0x04	; 4

uint8_t sendSensor(){
	uint8_t i;
	
	for(i=0;i<4;i++){		
		if(sensorsToSend & (1<<i)){			
     ef6:	80 91 61 04 	lds	r24, 0x0461
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	0c 2e       	mov	r0, r28
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <sendSensor+0x2e>
     f00:	95 95       	asr	r25
     f02:	87 95       	ror	r24
     f04:	0a 94       	dec	r0
     f06:	e2 f7       	brpl	.-8      	; 0xf00 <sendSensor+0x2a>
     f08:	80 ff       	sbrs	r24, 0
     f0a:	22 c0       	rjmp	.+68     	; 0xf50 <sendSensor+0x7a>
			sprintf(msgBuffer, "sensor #%d = %lu", i, lastCMValue[i]);			
     f0c:	fe 01       	movw	r30, r28
     f0e:	ee 0f       	add	r30, r30
     f10:	ff 1f       	adc	r31, r31
     f12:	ee 0f       	add	r30, r30
     f14:	ff 1f       	adc	r31, r31
     f16:	e2 5e       	subi	r30, 0xE2	; 226
     f18:	fb 4f       	sbci	r31, 0xFB	; 251
     f1a:	40 81       	ld	r20, Z
     f1c:	51 81       	ldd	r21, Z+1	; 0x01
     f1e:	62 81       	ldd	r22, Z+2	; 0x02
     f20:	73 81       	ldd	r23, Z+3	; 0x03
     f22:	7f 93       	push	r23
     f24:	6f 93       	push	r22
     f26:	5f 93       	push	r21
     f28:	4f 93       	push	r20
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	ff 92       	push	r15
     f30:	ef 92       	push	r14
     f32:	1f 93       	push	r17
     f34:	0f 93       	push	r16
     f36:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <sprintf>
			BTTransmitStr(msgBuffer);			
     f3a:	c8 01       	movw	r24, r16
     f3c:	0e 94 b4 01 	call	0x368	; 0x368 <BTTransmitStr>
     f40:	8d b7       	in	r24, 0x3d	; 61
     f42:	9e b7       	in	r25, 0x3e	; 62
     f44:	0a 96       	adiw	r24, 0x0a	; 10
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	9e bf       	out	0x3e, r25	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	8d bf       	out	0x3d, r24	; 61
     f50:	21 96       	adiw	r28, 0x01	; 1
}

uint8_t sendSensor(){
	uint8_t i;
	
	for(i=0;i<4;i++){		
     f52:	c4 30       	cpi	r28, 0x04	; 4
     f54:	d1 05       	cpc	r29, r1
     f56:	79 f6       	brne	.-98     	; 0xef6 <sendSensor+0x20>
			sprintf(msgBuffer, "sensor #%d = %lu", i, lastCMValue[i]);			
			BTTransmitStr(msgBuffer);			
		}
	}
	return NO;
}
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	1f 91       	pop	r17
     f60:	0f 91       	pop	r16
     f62:	ff 90       	pop	r15
     f64:	ef 90       	pop	r14
     f66:	08 95       	ret

00000f68 <getValueOfSensor>:
char msgBuffer[50];
volatile uint16_t oldValue[4];
volatile uint32_t lastCMValue[4];

uint16_t getValueOfSensor(Sensor sensor){
	return lastCMValue[sensor];
     f68:	24 e0       	ldi	r18, 0x04	; 4
     f6a:	82 9f       	mul	r24, r18
     f6c:	c0 01       	movw	r24, r0
     f6e:	11 24       	eor	r1, r1
     f70:	fc 01       	movw	r30, r24
     f72:	e2 5e       	subi	r30, 0xE2	; 226
     f74:	fb 4f       	sbci	r31, 0xFB	; 251
     f76:	80 81       	ld	r24, Z
     f78:	91 81       	ldd	r25, Z+1	; 0x01
     f7a:	a2 81       	ldd	r26, Z+2	; 0x02
     f7c:	b3 81       	ldd	r27, Z+3	; 0x03
}
     f7e:	08 95       	ret

00000f80 <toggleSensorSend>:
		}
	}
	return NO;
}
uint8_t readSensors();
void toggleSensorSend(Sensor sensor){
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
	sensorsToSend ^= 1<<sensor;
     f84:	40 91 61 04 	lds	r20, 0x0461
     f88:	21 e0       	ldi	r18, 0x01	; 1
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	b9 01       	movw	r22, r18
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <toggleSensorSend+0x14>
     f90:	66 0f       	add	r22, r22
     f92:	77 1f       	adc	r23, r23
     f94:	8a 95       	dec	r24
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <toggleSensorSend+0x10>
     f98:	cb 01       	movw	r24, r22
     f9a:	84 27       	eor	r24, r20
     f9c:	80 93 61 04 	sts	0x0461, r24
	
	sprintf(msgBuffer, "sensorsToSend %d %d %d %d ", sensorsToSend&1, (sensorsToSend&2)>>1, (sensorsToSend&4)>>2, (sensorsToSend&8)>>3);
     fa0:	30 91 61 04 	lds	r19, 0x0461
     fa4:	20 91 61 04 	lds	r18, 0x0461
     fa8:	90 91 61 04 	lds	r25, 0x0461
     fac:	80 91 61 04 	lds	r24, 0x0461
     fb0:	33 fb       	bst	r19, 3
     fb2:	33 27       	eor	r19, r19
     fb4:	30 f9       	bld	r19, 0
     fb6:	1f 92       	push	r1
     fb8:	3f 93       	push	r19
     fba:	22 fb       	bst	r18, 2
     fbc:	22 27       	eor	r18, r18
     fbe:	20 f9       	bld	r18, 0
     fc0:	1f 92       	push	r1
     fc2:	2f 93       	push	r18
     fc4:	96 95       	lsr	r25
     fc6:	91 70       	andi	r25, 0x01	; 1
     fc8:	1f 92       	push	r1
     fca:	9f 93       	push	r25
     fcc:	81 70       	andi	r24, 0x01	; 1
     fce:	1f 92       	push	r1
     fd0:	8f 93       	push	r24
     fd2:	88 e4       	ldi	r24, 0x48	; 72
     fd4:	92 e0       	ldi	r25, 0x02	; 2
     fd6:	9f 93       	push	r25
     fd8:	8f 93       	push	r24
     fda:	ce e2       	ldi	r28, 0x2E	; 46
     fdc:	d4 e0       	ldi	r29, 0x04	; 4
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <sprintf>
	BTTransmitStr(msgBuffer);
     fe6:	ce 01       	movw	r24, r28
     fe8:	0e 94 b4 01 	call	0x368	; 0x368 <BTTransmitStr>
	sprintf(msgBuffer, "sensorsToRead %d %d %d %d <<--", sensorsToRead&1, (sensorsToRead&2)>>1, (sensorsToRead&4)>>2, (sensorsToRead&8)>>3);
     fec:	30 91 60 04 	lds	r19, 0x0460
     ff0:	20 91 60 04 	lds	r18, 0x0460
     ff4:	90 91 60 04 	lds	r25, 0x0460
     ff8:	80 91 60 04 	lds	r24, 0x0460
     ffc:	33 fb       	bst	r19, 3
     ffe:	33 27       	eor	r19, r19
    1000:	30 f9       	bld	r19, 0
    1002:	1f 92       	push	r1
    1004:	3f 93       	push	r19
    1006:	22 fb       	bst	r18, 2
    1008:	22 27       	eor	r18, r18
    100a:	20 f9       	bld	r18, 0
    100c:	1f 92       	push	r1
    100e:	2f 93       	push	r18
    1010:	96 95       	lsr	r25
    1012:	91 70       	andi	r25, 0x01	; 1
    1014:	1f 92       	push	r1
    1016:	9f 93       	push	r25
    1018:	81 70       	andi	r24, 0x01	; 1
    101a:	1f 92       	push	r1
    101c:	8f 93       	push	r24
    101e:	83 e6       	ldi	r24, 0x63	; 99
    1020:	92 e0       	ldi	r25, 0x02	; 2
    1022:	9f 93       	push	r25
    1024:	8f 93       	push	r24
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <sprintf>
	BTTransmitStr(msgBuffer);
    102e:	ce 01       	movw	r24, r28
    1030:	0e 94 b4 01 	call	0x368	; 0x368 <BTTransmitStr>
	
	uint8_t existsInTimerQueue = existsEntryInTimerQueue(&sendSensor);
    1034:	8b e6       	ldi	r24, 0x6B	; 107
    1036:	97 e0       	ldi	r25, 0x07	; 7
    1038:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <existsEntryInTimerQueue>
	//toggleSensorRead(sensor);
	if(sensorsToSend && !existsInTimerQueue){
    103c:	90 91 61 04 	lds	r25, 0x0461
    1040:	6d b7       	in	r22, 0x3d	; 61
    1042:	7e b7       	in	r23, 0x3e	; 62
    1044:	68 5e       	subi	r22, 0xE8	; 232
    1046:	7f 4f       	sbci	r23, 0xFF	; 255
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	7e bf       	out	0x3e, r23	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	6d bf       	out	0x3d, r22	; 61
    1052:	99 23       	and	r25, r25
    1054:	61 f0       	breq	.+24     	; 0x106e <toggleSensorSend+0xee>
    1056:	81 11       	cpse	r24, r1
    1058:	15 c0       	rjmp	.+42     	; 0x1084 <toggleSensorSend+0x104>
		addEntryToTimerQueue(&sendSensor, 1000UL * 1000UL, Periodic);
    105a:	21 e0       	ldi	r18, 0x01	; 1
    105c:	40 e4       	ldi	r20, 0x40	; 64
    105e:	52 e4       	ldi	r21, 0x42	; 66
    1060:	6f e0       	ldi	r22, 0x0F	; 15
    1062:	70 e0       	ldi	r23, 0x00	; 0
    1064:	8b e6       	ldi	r24, 0x6B	; 107
    1066:	97 e0       	ldi	r25, 0x07	; 7
    1068:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <addEntryToTimerQueue>
    106c:	0f c0       	rjmp	.+30     	; 0x108c <toggleSensorSend+0x10c>
	}
	else{
		if(!sensorsToSend && existsInTimerQueue)
    106e:	90 91 61 04 	lds	r25, 0x0461
    1072:	91 11       	cpse	r25, r1
    1074:	0b c0       	rjmp	.+22     	; 0x108c <toggleSensorSend+0x10c>
    1076:	88 23       	and	r24, r24
    1078:	49 f0       	breq	.+18     	; 0x108c <toggleSensorSend+0x10c>
		removeEntryFromTimerQueue(&sendSensor);
    107a:	8b e6       	ldi	r24, 0x6B	; 107
    107c:	97 e0       	ldi	r25, 0x07	; 7
    107e:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <removeEntryFromTimerQueue>
    1082:	04 c0       	rjmp	.+8      	; 0x108c <toggleSensorSend+0x10c>
	//toggleSensorRead(sensor);
	if(sensorsToSend && !existsInTimerQueue){
		addEntryToTimerQueue(&sendSensor, 1000UL * 1000UL, Periodic);
	}
	else{
		if(!sensorsToSend && existsInTimerQueue)
    1084:	80 91 61 04 	lds	r24, 0x0461
    1088:	88 23       	and	r24, r24
    108a:	b9 f3       	breq	.-18     	; 0x107a <toggleSensorSend+0xfa>
		removeEntryFromTimerQueue(&sendSensor);
	}
}
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	08 95       	ret

00001092 <setSensorsRead>:
			removeEntryFromTimerQueue(&readSensors);
		}
	}
}
void setSensorsRead(uint8_t val){
	if(val){
    1092:	88 23       	and	r24, r24
    1094:	69 f0       	breq	.+26     	; 0x10b0 <setSensorsRead+0x1e>
		sensorsToRead = 15;
    1096:	8f e0       	ldi	r24, 0x0F	; 15
    1098:	80 93 60 04 	sts	0x0460, r24
		addEntryIfNotExists(&readSensors, 100UL * 1000UL, Periodic);
    109c:	21 e0       	ldi	r18, 0x01	; 1
    109e:	40 ea       	ldi	r20, 0xA0	; 160
    10a0:	56 e8       	ldi	r21, 0x86	; 134
    10a2:	61 e0       	ldi	r22, 0x01	; 1
    10a4:	70 e0       	ldi	r23, 0x00	; 0
    10a6:	8a e8       	ldi	r24, 0x8A	; 138
    10a8:	99 e0       	ldi	r25, 0x09	; 9
    10aa:	0e 94 22 0c 	call	0x1844	; 0x1844 <addEntryIfNotExists>
    10ae:	08 95       	ret
	}
	else{
		removeEntryFromTimerQueue(&readSensors);
    10b0:	8a e8       	ldi	r24, 0x8A	; 138
    10b2:	99 e0       	ldi	r25, 0x09	; 9
    10b4:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <removeEntryFromTimerQueue>
    10b8:	08 95       	ret

000010ba <initSensors>:


void initSensors(void){
		
	//init ADC
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
    10ba:	aa e7       	ldi	r26, 0x7A	; 122
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	8c 91       	ld	r24, X
    10c0:	87 60       	ori	r24, 0x07	; 7
    10c2:	8c 93       	st	X, r24

	ADMUX |= (1 << REFS0);
    10c4:	ec e7       	ldi	r30, 0x7C	; 124
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	80 64       	ori	r24, 0x40	; 64
    10cc:	80 83       	st	Z, r24
	ADMUX &=~ (1 << REFS1); // Set ADC reference to AVCC
    10ce:	80 81       	ld	r24, Z
    10d0:	8f 77       	andi	r24, 0x7F	; 127
    10d2:	80 83       	st	Z, r24
	
	ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
    10d4:	80 81       	ld	r24, Z
    10d6:	80 62       	ori	r24, 0x20	; 32
    10d8:	80 83       	st	Z, r24
	
	//ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running Mode
	
	ADCSRA |= (1 << ADEN);  // Enable ADC
    10da:	8c 91       	ld	r24, X
    10dc:	80 68       	ori	r24, 0x80	; 128
    10de:	8c 93       	st	X, r24
	//ADCSRA |= (1 << ADSC);  // start adc
	sensorsToRead = sensorsToSend = 0;
    10e0:	10 92 61 04 	sts	0x0461, r1
    10e4:	10 92 60 04 	sts	0x0460, r1
    10e8:	08 95       	ret

000010ea <startADCConversionForSensor>:
	//toggleSensorRead(3);
}

void startADCConversionForSensor(Sensor sensor){

	ADMUX &= ~31; // set lasts 5 bits to 00000
    10ea:	ec e7       	ldi	r30, 0x7C	; 124
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	90 81       	ld	r25, Z
    10f0:	90 7e       	andi	r25, 0xE0	; 224
    10f2:	90 83       	st	Z, r25
	//ADMUX |= 0; // 0-ADC0, 1-ADC1, 2-ADC2 ...    datasheet pg 249-251
	ADMUX |= sensor; // Sensor ia valorile 0,1,2,3, exact ca cele pt ADC-uri
    10f4:	90 81       	ld	r25, Z
    10f6:	89 2b       	or	r24, r25
    10f8:	80 83       	st	Z, r24
	// No MUX values needed to be changed to use ADC0

	
	ADCSRA |= (1 << ADSC);  // Start A2D Conversions
    10fa:	ea e7       	ldi	r30, 0x7A	; 122
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	80 64       	ori	r24, 0x40	; 64
    1102:	80 83       	st	Z, r24
    1104:	08 95       	ret

00001106 <getCurrentValueOfSensor>:
#include "../Timing/Timing.h"


uint32_t getValueOfSensor3(Sensor sensor);
uint16_t getCurrentValueOfSensor(Sensor sensor){	
	startADCConversionForSensor(sensor);	
    1106:	0e 94 75 08 	call	0x10ea	; 0x10ea <startADCConversionForSensor>
	while ( ADCSRA & (1 << ADSC));	
    110a:	ea e7       	ldi	r30, 0x7A	; 122
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	86 fd       	sbrc	r24, 6
    1112:	fd cf       	rjmp	.-6      	; 0x110e <getCurrentValueOfSensor+0x8>
	uint16_t val;
	val = ADCL >> 6;
    1114:	20 91 78 00 	lds	r18, 0x0078
    1118:	22 95       	swap	r18
    111a:	26 95       	lsr	r18
    111c:	26 95       	lsr	r18
    111e:	23 70       	andi	r18, 0x03	; 3
	val |= ADCH << 2;	
    1120:	80 91 79 00 	lds	r24, 0x0079
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
	return val;
}
    112e:	82 2b       	or	r24, r18
    1130:	08 95       	ret

00001132 <getValueOfSensor3>:
	else{
		removeEntryFromTimerQueue(&readSensors);
	}
}

uint32_t getValueOfSensor3(Sensor sensor){
    1132:	8f 92       	push	r8
    1134:	9f 92       	push	r9
    1136:	af 92       	push	r10
    1138:	bf 92       	push	r11
    113a:	cf 92       	push	r12
    113c:	df 92       	push	r13
    113e:	ef 92       	push	r14
    1140:	ff 92       	push	r15
    1142:	0f 93       	push	r16
    1144:	1f 93       	push	r17
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	2e 97       	sbiw	r28, 0x0e	; 14
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	f8 94       	cli
    1154:	de bf       	out	0x3e, r29	; 62
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	cd bf       	out	0x3d, r28	; 61
    115a:	18 2f       	mov	r17, r24
    115c:	9e 01       	movw	r18, r28
    115e:	2f 5f       	subi	r18, 0xFF	; 255
    1160:	3f 4f       	sbci	r19, 0xFF	; 255
    1162:	79 01       	movw	r14, r18
    1164:	6e 01       	movw	r12, r28
    1166:	3f e0       	ldi	r19, 0x0F	; 15
    1168:	c3 0e       	add	r12, r19
    116a:	d1 1c       	adc	r13, r1
	uint8_t i;
	uint16_t s, sVals[7];
	
	//citesc 7 valori ale senzorului
	for(i=0;i<7;i++)
		sVals[i] = getCurrentValueOfSensor(sensor);
    116c:	81 2f       	mov	r24, r17
    116e:	0e 94 83 08 	call	0x1106	; 0x1106 <getCurrentValueOfSensor>
    1172:	d7 01       	movw	r26, r14
    1174:	8d 93       	st	X+, r24
    1176:	9d 93       	st	X+, r25
    1178:	7d 01       	movw	r14, r26
uint32_t getValueOfSensor3(Sensor sensor){
	uint8_t i;
	uint16_t s, sVals[7];
	
	//citesc 7 valori ale senzorului
	for(i=0;i<7;i++)
    117a:	ac 15       	cp	r26, r12
    117c:	bd 05       	cpc	r27, r13
    117e:	b1 f7       	brne	.-20     	; 0x116c <getValueOfSensor3+0x3a>
    1180:	21 e0       	ldi	r18, 0x01	; 1
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	80 e0       	ldi	r24, 0x00	; 0
		sVals[i] = getCurrentValueOfSensor(sensor);
		
	do{ // le sortez (bubble sort)
		s=1;
    1186:	01 e0       	ldi	r16, 0x01	; 1
    1188:	f1 2c       	mov	r15, r1
		for(i=0;i<6;i++)
    118a:	90 e0       	ldi	r25, 0x00	; 0
			if(sVals[i]>sVals[i+1]){
				s = sVals[i];
				sVals[i] = sVals[i+1];
				sVals[i+1] = s;
				s=0;
    118c:	d1 2c       	mov	r13, r1
    118e:	e1 2c       	mov	r14, r1
    1190:	2d c0       	rjmp	.+90     	; 0x11ec <getValueOfSensor3+0xba>
		sVals[i] = getCurrentValueOfSensor(sensor);
		
	do{ // le sortez (bubble sort)
		s=1;
		for(i=0;i<6;i++)
			if(sVals[i]>sVals[i+1]){
    1192:	48 2f       	mov	r20, r24
    1194:	50 e0       	ldi	r21, 0x00	; 0
    1196:	fa 01       	movw	r30, r20
    1198:	ee 0f       	add	r30, r30
    119a:	ff 1f       	adc	r31, r31
    119c:	aa 24       	eor	r10, r10
    119e:	a3 94       	inc	r10
    11a0:	b1 2c       	mov	r11, r1
    11a2:	ac 0e       	add	r10, r28
    11a4:	bd 1e       	adc	r11, r29
    11a6:	ea 0d       	add	r30, r10
    11a8:	fb 1d       	adc	r31, r11
    11aa:	60 81       	ld	r22, Z
    11ac:	71 81       	ldd	r23, Z+1	; 0x01
    11ae:	4a 01       	movw	r8, r20
    11b0:	af ef       	ldi	r26, 0xFF	; 255
    11b2:	8a 1a       	sub	r8, r26
    11b4:	9a 0a       	sbc	r9, r26
    11b6:	d4 01       	movw	r26, r8
    11b8:	aa 0f       	add	r26, r26
    11ba:	bb 1f       	adc	r27, r27
    11bc:	aa 0d       	add	r26, r10
    11be:	bb 1d       	adc	r27, r11
    11c0:	0d 90       	ld	r0, X+
    11c2:	bc 91       	ld	r27, X
    11c4:	a0 2d       	mov	r26, r0
    11c6:	a6 17       	cp	r26, r22
    11c8:	b7 07       	cpc	r27, r23
    11ca:	58 f4       	brcc	.+22     	; 0x11e2 <getValueOfSensor3+0xb0>
				s = sVals[i];
				sVals[i] = sVals[i+1];
    11cc:	b1 83       	std	Z+1, r27	; 0x01
    11ce:	a0 83       	st	Z, r26
				sVals[i+1] = s;
    11d0:	f4 01       	movw	r30, r8
    11d2:	ee 0f       	add	r30, r30
    11d4:	ff 1f       	adc	r31, r31
    11d6:	ea 0d       	add	r30, r10
    11d8:	fb 1d       	adc	r31, r11
    11da:	71 83       	std	Z+1, r23	; 0x01
    11dc:	60 83       	st	Z, r22
				s=0;
    11de:	2d 2d       	mov	r18, r13
    11e0:	3e 2d       	mov	r19, r14
	for(i=0;i<7;i++)
		sVals[i] = getCurrentValueOfSensor(sensor);
		
	do{ // le sortez (bubble sort)
		s=1;
		for(i=0;i<6;i++)
    11e2:	8f 5f       	subi	r24, 0xFF	; 255
    11e4:	03 c0       	rjmp	.+6      	; 0x11ec <getValueOfSensor3+0xba>
	//citesc 7 valori ale senzorului
	for(i=0;i<7;i++)
		sVals[i] = getCurrentValueOfSensor(sensor);
		
	do{ // le sortez (bubble sort)
		s=1;
    11e6:	20 2f       	mov	r18, r16
    11e8:	3f 2d       	mov	r19, r15
		for(i=0;i<6;i++)
    11ea:	89 2f       	mov	r24, r25
    11ec:	86 30       	cpi	r24, 0x06	; 6
    11ee:	88 f2       	brcs	.-94     	; 0x1192 <getValueOfSensor3+0x60>
				s = sVals[i];
				sVals[i] = sVals[i+1];
				sVals[i+1] = s;
				s=0;
			}
	}while(!s);
    11f0:	23 2b       	or	r18, r19
    11f2:	c9 f3       	breq	.-14     	; 0x11e6 <getValueOfSensor3+0xb4>
	
	s = sVals[2] + sVals[3] + sVals[4];
    11f4:	2f 81       	ldd	r18, Y+7	; 0x07
    11f6:	38 85       	ldd	r19, Y+8	; 0x08
    11f8:	8d 81       	ldd	r24, Y+5	; 0x05
    11fa:	9e 81       	ldd	r25, Y+6	; 0x06
    11fc:	28 0f       	add	r18, r24
    11fe:	39 1f       	adc	r19, r25
    1200:	89 85       	ldd	r24, Y+9	; 0x09
    1202:	9a 85       	ldd	r25, Y+10	; 0x0a
    1204:	28 0f       	add	r18, r24
    1206:	39 1f       	adc	r19, r25
	s/=3;//calculez media celor 3 din mijloc (eliminandu-le astfel pe cele mai mari si pe cele mai mici)
    1208:	ab ea       	ldi	r26, 0xAB	; 171
    120a:	ba ea       	ldi	r27, 0xAA	; 170
    120c:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__umulhisi3>
    1210:	96 95       	lsr	r25
    1212:	87 95       	ror	r24
	
	//valoarea noua este media ponderata a vechii valori (70%) si valorii curente(30%)
	if(!oldValue[sensor])
    1214:	41 2f       	mov	r20, r17
    1216:	50 e0       	ldi	r21, 0x00	; 0
    1218:	fa 01       	movw	r30, r20
    121a:	ee 0f       	add	r30, r30
    121c:	ff 1f       	adc	r31, r31
    121e:	ea 5e       	subi	r30, 0xEA	; 234
    1220:	fb 4f       	sbci	r31, 0xFB	; 251
    1222:	20 81       	ld	r18, Z
    1224:	31 81       	ldd	r19, Z+1	; 0x01
    1226:	23 2b       	or	r18, r19
    1228:	41 f4       	brne	.+16     	; 0x123a <getValueOfSensor3+0x108>
		oldValue[sensor] = s;
    122a:	fa 01       	movw	r30, r20
    122c:	ee 0f       	add	r30, r30
    122e:	ff 1f       	adc	r31, r31
    1230:	ea 5e       	subi	r30, 0xEA	; 234
    1232:	fb 4f       	sbci	r31, 0xFB	; 251
    1234:	91 83       	std	Z+1, r25	; 0x01
    1236:	80 83       	st	Z, r24
    1238:	25 c0       	rjmp	.+74     	; 0x1284 <getValueOfSensor3+0x152>
	else
		oldValue[sensor] = (7*oldValue[sensor] + 3*s) / 10;
    123a:	fa 01       	movw	r30, r20
    123c:	ee 0f       	add	r30, r30
    123e:	ff 1f       	adc	r31, r31
    1240:	ea 5e       	subi	r30, 0xEA	; 234
    1242:	fb 4f       	sbci	r31, 0xFB	; 251
    1244:	20 81       	ld	r18, Z
    1246:	31 81       	ldd	r19, Z+1	; 0x01
    1248:	b9 01       	movw	r22, r18
    124a:	66 0f       	add	r22, r22
    124c:	77 1f       	adc	r23, r23
    124e:	66 0f       	add	r22, r22
    1250:	77 1f       	adc	r23, r23
    1252:	66 0f       	add	r22, r22
    1254:	77 1f       	adc	r23, r23
    1256:	5b 01       	movw	r10, r22
    1258:	a2 1a       	sub	r10, r18
    125a:	b3 0a       	sbc	r11, r19
    125c:	95 01       	movw	r18, r10
    125e:	bc 01       	movw	r22, r24
    1260:	66 0f       	add	r22, r22
    1262:	77 1f       	adc	r23, r23
    1264:	86 0f       	add	r24, r22
    1266:	97 1f       	adc	r25, r23
    1268:	28 0f       	add	r18, r24
    126a:	39 1f       	adc	r19, r25
    126c:	ad ec       	ldi	r26, 0xCD	; 205
    126e:	bc ec       	ldi	r27, 0xCC	; 204
    1270:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__umulhisi3>
    1274:	96 95       	lsr	r25
    1276:	87 95       	ror	r24
    1278:	96 95       	lsr	r25
    127a:	87 95       	ror	r24
    127c:	96 95       	lsr	r25
    127e:	87 95       	ror	r24
    1280:	91 83       	std	Z+1, r25	; 0x01
    1282:	80 83       	st	Z, r24

	//f(x)=769533/((x<<4)+-520)// front
	//f(x)=24886/((x<<4)+-760) // side
	
	if(sensor<2)
    1284:	12 30       	cpi	r17, 0x02	; 2
    1286:	d0 f4       	brcc	.+52     	; 0x12bc <getValueOfSensor3+0x18a>
		return (322641UL/((oldValue[sensor]<<4)-315));// senzori laterali
    1288:	fa 01       	movw	r30, r20
    128a:	ee 0f       	add	r30, r30
    128c:	ff 1f       	adc	r31, r31
    128e:	ea 5e       	subi	r30, 0xEA	; 234
    1290:	fb 4f       	sbci	r31, 0xFB	; 251
    1292:	20 81       	ld	r18, Z
    1294:	31 81       	ldd	r19, Z+1	; 0x01
    1296:	22 95       	swap	r18
    1298:	32 95       	swap	r19
    129a:	30 7f       	andi	r19, 0xF0	; 240
    129c:	32 27       	eor	r19, r18
    129e:	20 7f       	andi	r18, 0xF0	; 240
    12a0:	32 27       	eor	r19, r18
    12a2:	2b 53       	subi	r18, 0x3B	; 59
    12a4:	31 40       	sbci	r19, 0x01	; 1
    12a6:	40 e0       	ldi	r20, 0x00	; 0
    12a8:	50 e0       	ldi	r21, 0x00	; 0
    12aa:	61 e5       	ldi	r22, 0x51	; 81
    12ac:	7c ee       	ldi	r23, 0xEC	; 236
    12ae:	84 e0       	ldi	r24, 0x04	; 4
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	0e 94 6f 16 	call	0x2cde	; 0x2cde <__udivmodsi4>
    12b6:	ca 01       	movw	r24, r20
    12b8:	b9 01       	movw	r22, r18
    12ba:	19 c0       	rjmp	.+50     	; 0x12ee <getValueOfSensor3+0x1bc>
	else
		return (769533UL/((oldValue[sensor]<<4)-520));	// senzori frontali
    12bc:	fa 01       	movw	r30, r20
    12be:	ee 0f       	add	r30, r30
    12c0:	ff 1f       	adc	r31, r31
    12c2:	ea 5e       	subi	r30, 0xEA	; 234
    12c4:	fb 4f       	sbci	r31, 0xFB	; 251
    12c6:	20 81       	ld	r18, Z
    12c8:	31 81       	ldd	r19, Z+1	; 0x01
    12ca:	22 95       	swap	r18
    12cc:	32 95       	swap	r19
    12ce:	30 7f       	andi	r19, 0xF0	; 240
    12d0:	32 27       	eor	r19, r18
    12d2:	20 7f       	andi	r18, 0xF0	; 240
    12d4:	32 27       	eor	r19, r18
    12d6:	28 50       	subi	r18, 0x08	; 8
    12d8:	32 40       	sbci	r19, 0x02	; 2
    12da:	40 e0       	ldi	r20, 0x00	; 0
    12dc:	50 e0       	ldi	r21, 0x00	; 0
    12de:	6d ef       	ldi	r22, 0xFD	; 253
    12e0:	7d eb       	ldi	r23, 0xBD	; 189
    12e2:	8b e0       	ldi	r24, 0x0B	; 11
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	0e 94 6f 16 	call	0x2cde	; 0x2cde <__udivmodsi4>
    12ea:	ca 01       	movw	r24, r20
    12ec:	b9 01       	movw	r22, r18
}
    12ee:	2e 96       	adiw	r28, 0x0e	; 14
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	cd bf       	out	0x3d, r28	; 61
    12fa:	df 91       	pop	r29
    12fc:	cf 91       	pop	r28
    12fe:	1f 91       	pop	r17
    1300:	0f 91       	pop	r16
    1302:	ff 90       	pop	r15
    1304:	ef 90       	pop	r14
    1306:	df 90       	pop	r13
    1308:	cf 90       	pop	r12
    130a:	bf 90       	pop	r11
    130c:	af 90       	pop	r10
    130e:	9f 90       	pop	r9
    1310:	8f 90       	pop	r8
    1312:	08 95       	ret

00001314 <readSensors>:
		removeEntryFromTimerQueue(&sendSensor);
	}
}

uint8_t readSensors(){
	if(sensorsToRead & 1)
    1314:	80 91 60 04 	lds	r24, 0x0460
    1318:	80 ff       	sbrs	r24, 0
    131a:	0b c0       	rjmp	.+22     	; 0x1332 <readSensors+0x1e>
		lastCMValue[0] = getValueOfSensor3(0);
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	0e 94 99 08 	call	0x1132	; 0x1132 <getValueOfSensor3>
    1322:	60 93 1e 04 	sts	0x041E, r22
    1326:	70 93 1f 04 	sts	0x041F, r23
    132a:	80 93 20 04 	sts	0x0420, r24
    132e:	90 93 21 04 	sts	0x0421, r25
	if(sensorsToRead & 2)
    1332:	80 91 60 04 	lds	r24, 0x0460
    1336:	81 ff       	sbrs	r24, 1
    1338:	0b c0       	rjmp	.+22     	; 0x1350 <readSensors+0x3c>
		lastCMValue[1] = getValueOfSensor3(1);
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	0e 94 99 08 	call	0x1132	; 0x1132 <getValueOfSensor3>
    1340:	60 93 22 04 	sts	0x0422, r22
    1344:	70 93 23 04 	sts	0x0423, r23
    1348:	80 93 24 04 	sts	0x0424, r24
    134c:	90 93 25 04 	sts	0x0425, r25
	if(sensorsToRead & 4)
    1350:	80 91 60 04 	lds	r24, 0x0460
    1354:	82 ff       	sbrs	r24, 2
    1356:	0b c0       	rjmp	.+22     	; 0x136e <readSensors+0x5a>
		lastCMValue[2] = getValueOfSensor3(2);
    1358:	82 e0       	ldi	r24, 0x02	; 2
    135a:	0e 94 99 08 	call	0x1132	; 0x1132 <getValueOfSensor3>
    135e:	60 93 26 04 	sts	0x0426, r22
    1362:	70 93 27 04 	sts	0x0427, r23
    1366:	80 93 28 04 	sts	0x0428, r24
    136a:	90 93 29 04 	sts	0x0429, r25
	if(sensorsToRead & 8)
    136e:	80 91 60 04 	lds	r24, 0x0460
    1372:	83 ff       	sbrs	r24, 3
    1374:	0b c0       	rjmp	.+22     	; 0x138c <readSensors+0x78>
		lastCMValue[3] = getValueOfSensor3(3);
    1376:	83 e0       	ldi	r24, 0x03	; 3
    1378:	0e 94 99 08 	call	0x1132	; 0x1132 <getValueOfSensor3>
    137c:	60 93 2a 04 	sts	0x042A, r22
    1380:	70 93 2b 04 	sts	0x042B, r23
    1384:	80 93 2c 04 	sts	0x042C, r24
    1388:	90 93 2d 04 	sts	0x042D, r25
	return NO;
}
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	08 95       	ret

00001390 <functieRotireStanga>:
	}	
	return NO;
}


uint8_t functieRotireStanga(void){
    1390:	af 92       	push	r10
    1392:	bf 92       	push	r11
    1394:	cf 92       	push	r12
    1396:	df 92       	push	r13
    1398:	ef 92       	push	r14
    139a:	ff 92       	push	r15
    139c:	0f 93       	push	r16
    139e:	1f 93       	push	r17
    13a0:	cf 93       	push	r28
    13a2:	df 93       	push	r29
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	c4 56       	subi	r28, 0x64	; 100
    13aa:	d1 09       	sbc	r29, r1
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	cd bf       	out	0x3d, r28	; 61
	uint16_t senzorSt = getValueOfSensor(SideLeftSensor);
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	0e 94 b4 07 	call	0xf68	; 0xf68 <getValueOfSensor>
    13bc:	b8 2e       	mov	r11, r24
    13be:	a9 2e       	mov	r10, r25
	uint16_t senzorDr = getValueOfSensor(SideRightSensor);
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	0e 94 b4 07 	call	0xf68	; 0xf68 <getValueOfSensor>
    13c6:	8c 01       	movw	r16, r24
	
	uint16_t senzorStFata = getValueOfSensor(FrontLeftSensor);
    13c8:	83 e0       	ldi	r24, 0x03	; 3
    13ca:	0e 94 b4 07 	call	0xf68	; 0xf68 <getValueOfSensor>
    13ce:	6c 01       	movw	r12, r24
	uint16_t senzorDrFata =getValueOfSensor(FrontRightSensor);
    13d0:	82 e0       	ldi	r24, 0x02	; 2
    13d2:	0e 94 b4 07 	call	0xf68	; 0xf68 <getValueOfSensor>
    13d6:	7c 01       	movw	r14, r24
	
	char str[100];
	sprintf(str, "SF=%d  DF=%d  S=%d  D=%d  stare=%d", senzorStFata,senzorDrFata, senzorSt,senzorDr, stare);
    13d8:	80 91 fb 03 	lds	r24, 0x03FB
    13dc:	1f 92       	push	r1
    13de:	8f 93       	push	r24
    13e0:	1f 93       	push	r17
    13e2:	0f 93       	push	r16
    13e4:	af 92       	push	r10
    13e6:	bf 92       	push	r11
    13e8:	ff 92       	push	r15
    13ea:	ef 92       	push	r14
    13ec:	df 92       	push	r13
    13ee:	cf 92       	push	r12
    13f0:	88 e8       	ldi	r24, 0x88	; 136
    13f2:	92 e0       	ldi	r25, 0x02	; 2
    13f4:	9f 93       	push	r25
    13f6:	8f 93       	push	r24
    13f8:	ce 01       	movw	r24, r28
    13fa:	01 96       	adiw	r24, 0x01	; 1
    13fc:	5c 01       	movw	r10, r24
    13fe:	bf 92       	push	r11
    1400:	8f 93       	push	r24
    1402:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <sprintf>
	BTTransmitStr(str);
    1406:	c5 01       	movw	r24, r10
    1408:	0e 94 b4 01 	call	0x368	; 0x368 <BTTransmitStr>
	
	switch(stare){
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	de bf       	out	0x3e, r29	; 62
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	cd bf       	out	0x3d, r28	; 61
    1416:	80 91 fb 03 	lds	r24, 0x03FB
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	89 30       	cpi	r24, 0x09	; 9
    141e:	91 05       	cpc	r25, r1
    1420:	08 f0       	brcs	.+2      	; 0x1424 <functieRotireStanga+0x94>
    1422:	99 c0       	rjmp	.+306    	; 0x1556 <functieRotireStanga+0x1c6>
    1424:	fc 01       	movw	r30, r24
    1426:	eb 5a       	subi	r30, 0xAB	; 171
    1428:	ff 4f       	sbci	r31, 0xFF	; 255
    142a:	0c 94 91 16 	jmp	0x2d22	; 0x2d22 <__tablejump2__>
		case Start:
			stare = intrareInParcare;
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	80 93 fb 03 	sts	0x03FB, r24
			BTTransmitStr("Sa incepem :D");
    1434:	8b ea       	ldi	r24, 0xAB	; 171
    1436:	92 e0       	ldi	r25, 0x02	; 2
    1438:	0e 94 b4 01 	call	0x368	; 0x368 <BTTransmitStr>
		break;
    143c:	8c c0       	rjmp	.+280    	; 0x1556 <functieRotireStanga+0x1c6>
		case intrareInParcare:/*
			if(senzorStFata>200 && senzorDrFata>200){
				rotirePeLoc(60, 75, RightEngines);
				stare=rotireLoc;
			}*/
			goFrontRight(60,125);
    143e:	6d e7       	ldi	r22, 0x7D	; 125
    1440:	8c e3       	ldi	r24, 0x3C	; 60
    1442:	0e 94 91 05 	call	0xb22	; 0xb22 <goFrontRight>
			stare = rotireMersDR;			
    1446:	83 e0       	ldi	r24, 0x03	; 3
    1448:	80 93 fb 03 	sts	0x03FB, r24
		break;
    144c:	84 c0       	rjmp	.+264    	; 0x1556 <functieRotireStanga+0x1c6>
		case mersFata: // merge in fata
			if(senzorStFata>150 && senzorDrFata>150){
    144e:	97 e9       	ldi	r25, 0x97	; 151
    1450:	c9 16       	cp	r12, r25
    1452:	d1 04       	cpc	r13, r1
    1454:	60 f0       	brcs	.+24     	; 0x146e <functieRotireStanga+0xde>
    1456:	87 e9       	ldi	r24, 0x97	; 151
    1458:	e8 16       	cp	r14, r24
    145a:	f1 04       	cpc	r15, r1
    145c:	40 f0       	brcs	.+16     	; 0x146e <functieRotireStanga+0xde>
				stare = rotireLoc;
    145e:	82 e0       	ldi	r24, 0x02	; 2
    1460:	80 93 fb 03 	sts	0x03FB, r24
				//goFrontLeft(60, 250);
				rotirePeLoc(60, 75, LeftEngines);
    1464:	41 e0       	ldi	r20, 0x01	; 1
    1466:	6b e4       	ldi	r22, 0x4B	; 75
    1468:	8c e3       	ldi	r24, 0x3C	; 60
    146a:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <rotirePeLoc>
			}
			if(senzorDr<100){
    146e:	04 36       	cpi	r16, 0x64	; 100
    1470:	11 05       	cpc	r17, r1
    1472:	a8 f4       	brcc	.+42     	; 0x149e <functieRotireStanga+0x10e>
				iesire--;
    1474:	80 91 fa 03 	lds	r24, 0x03FA
    1478:	81 50       	subi	r24, 0x01	; 1
    147a:	80 93 fa 03 	sts	0x03FA, r24
				if(iesire==0){
    147e:	80 91 fa 03 	lds	r24, 0x03FA
    1482:	81 11       	cpse	r24, r1
    1484:	09 c0       	rjmp	.+18     	; 0x1498 <functieRotireStanga+0x108>
					rotirePeLoc(60,75, RightEngines);
    1486:	40 e0       	ldi	r20, 0x00	; 0
    1488:	6b e4       	ldi	r22, 0x4B	; 75
    148a:	8c e3       	ldi	r24, 0x3C	; 60
    148c:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <rotirePeLoc>
					stare= poarta;}
    1490:	86 e0       	ldi	r24, 0x06	; 6
    1492:	80 93 fb 03 	sts	0x03FB, r24
    1496:	03 c0       	rjmp	.+6      	; 0x149e <functieRotireStanga+0x10e>
				else stare=nuPoarta;
    1498:	88 e0       	ldi	r24, 0x08	; 8
    149a:	80 93 fb 03 	sts	0x03FB, r24
				
			}
			if(senzorDr > 220){
    149e:	0d 3d       	cpi	r16, 0xDD	; 221
    14a0:	11 05       	cpc	r17, r1
    14a2:	38 f0       	brcs	.+14     	; 0x14b2 <functieRotireStanga+0x122>
				stare = rotireMersSt;
    14a4:	84 e0       	ldi	r24, 0x04	; 4
    14a6:	80 93 fb 03 	sts	0x03FB, r24
				goFrontLeft(60, 75);
    14aa:	6b e4       	ldi	r22, 0x4B	; 75
    14ac:	8c e3       	ldi	r24, 0x3C	; 60
    14ae:	0e 94 63 05 	call	0xac6	; 0xac6 <goFrontLeft>
			}		
			if(senzorDr<250 && senzorDr>170){
    14b2:	0b 5a       	subi	r16, 0xAB	; 171
    14b4:	11 09       	sbc	r17, r1
    14b6:	0f 34       	cpi	r16, 0x4F	; 79
    14b8:	11 05       	cpc	r17, r1
    14ba:	08 f0       	brcs	.+2      	; 0x14be <functieRotireStanga+0x12e>
    14bc:	4c c0       	rjmp	.+152    	; 0x1556 <functieRotireStanga+0x1c6>
				stare= rotireMersDR;
    14be:	83 e0       	ldi	r24, 0x03	; 3
    14c0:	80 93 fb 03 	sts	0x03FB, r24
				goFrontRight(60, 75);
    14c4:	6b e4       	ldi	r22, 0x4B	; 75
    14c6:	8c e3       	ldi	r24, 0x3C	; 60
    14c8:	0e 94 91 05 	call	0xb22	; 0xb22 <goFrontRight>
    14cc:	44 c0       	rjmp	.+136    	; 0x1556 <functieRotireStanga+0x1c6>
			}
				
		break;
		case poarta:
			if(senzorStFata <91 && senzorDrFata <180){
    14ce:	9b e5       	ldi	r25, 0x5B	; 91
    14d0:	c9 16       	cp	r12, r25
    14d2:	d1 04       	cpc	r13, r1
    14d4:	08 f0       	brcs	.+2      	; 0x14d8 <functieRotireStanga+0x148>
    14d6:	3f c0       	rjmp	.+126    	; 0x1556 <functieRotireStanga+0x1c6>
    14d8:	84 eb       	ldi	r24, 0xB4	; 180
    14da:	e8 16       	cp	r14, r24
    14dc:	f1 04       	cpc	r15, r1
    14de:	d8 f5       	brcc	.+118    	; 0x1556 <functieRotireStanga+0x1c6>
				goFront(6,75);
    14e0:	6b e4       	ldi	r22, 0x4B	; 75
    14e2:	86 e0       	ldi	r24, 0x06	; 6
    14e4:	0e 94 03 05 	call	0xa06	; 0xa06 <goFront>
				stare=bv;
    14e8:	87 e0       	ldi	r24, 0x07	; 7
    14ea:	80 93 fb 03 	sts	0x03FB, r24
    14ee:	33 c0       	rjmp	.+102    	; 0x1556 <functieRotireStanga+0x1c6>
			}
		break;	
		case bv:
			{
				stopEngines();
    14f0:	0e 94 85 04 	call	0x90a	; 0x90a <stopEngines>
				removeEntryFromTimerQueue(&functieRotireStanga);
    14f4:	88 ec       	ldi	r24, 0xC8	; 200
    14f6:	99 e0       	ldi	r25, 0x09	; 9
    14f8:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <removeEntryFromTimerQueue>
			}
		break;		
    14fc:	2c c0       	rjmp	.+88     	; 0x1556 <functieRotireStanga+0x1c6>
		case rotireMersSt:
			if(senzorDr < 300){
    14fe:	0c 32       	cpi	r16, 0x2C	; 44
    1500:	11 40       	sbci	r17, 0x01	; 1
    1502:	48 f5       	brcc	.+82     	; 0x1556 <functieRotireStanga+0x1c6>
				stare = mersFata;
    1504:	85 e0       	ldi	r24, 0x05	; 5
    1506:	80 93 fb 03 	sts	0x03FB, r24
				goFront(60, 75);
    150a:	6b e4       	ldi	r22, 0x4B	; 75
    150c:	8c e3       	ldi	r24, 0x3C	; 60
    150e:	0e 94 03 05 	call	0xa06	; 0xa06 <goFront>
    1512:	21 c0       	rjmp	.+66     	; 0x1556 <functieRotireStanga+0x1c6>
			}		
		break;
		case rotireMersDR:
			//if(range(senzorDr,senzorDrFata)==0)
			{
				stare=mersFata;
    1514:	85 e0       	ldi	r24, 0x05	; 5
    1516:	80 93 fb 03 	sts	0x03FB, r24
				goFront(60, 75);
    151a:	6b e4       	ldi	r22, 0x4B	; 75
    151c:	8c e3       	ldi	r24, 0x3C	; 60
    151e:	0e 94 03 05 	call	0xa06	; 0xa06 <goFront>
			}
		break;
    1522:	19 c0       	rjmp	.+50     	; 0x1556 <functieRotireStanga+0x1c6>
		case rotireLoc:
			if(senzorDrFata> 100 && senzorDrFata<140){
    1524:	85 e6       	ldi	r24, 0x65	; 101
    1526:	e8 1a       	sub	r14, r24
    1528:	f1 08       	sbc	r15, r1
    152a:	97 e2       	ldi	r25, 0x27	; 39
    152c:	e9 16       	cp	r14, r25
    152e:	f1 04       	cpc	r15, r1
    1530:	90 f4       	brcc	.+36     	; 0x1556 <functieRotireStanga+0x1c6>
				goFront(60, 75);
    1532:	6b e4       	ldi	r22, 0x4B	; 75
    1534:	8c e3       	ldi	r24, 0x3C	; 60
    1536:	0e 94 03 05 	call	0xa06	; 0xa06 <goFront>
				stare=mersFata;				
    153a:	85 e0       	ldi	r24, 0x05	; 5
    153c:	80 93 fb 03 	sts	0x03FB, r24
    1540:	0a c0       	rjmp	.+20     	; 0x1556 <functieRotireStanga+0x1c6>
			}
		break;
		case nuPoarta:
			if(senzorDr < 300){
    1542:	0c 32       	cpi	r16, 0x2C	; 44
    1544:	11 40       	sbci	r17, 0x01	; 1
    1546:	38 f4       	brcc	.+14     	; 0x1556 <functieRotireStanga+0x1c6>
				stare=mersFata;
    1548:	85 e0       	ldi	r24, 0x05	; 5
    154a:	80 93 fb 03 	sts	0x03FB, r24
				goFront(60,75);
    154e:	6b e4       	ldi	r22, 0x4B	; 75
    1550:	8c e3       	ldi	r24, 0x3C	; 60
    1552:	0e 94 03 05 	call	0xa06	; 0xa06 <goFront>
			}
		break;
	}
	
	return NO;
}
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	cc 59       	subi	r28, 0x9C	; 156
    155a:	df 4f       	sbci	r29, 0xFF	; 255
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	de bf       	out	0x3e, r29	; 62
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	cd bf       	out	0x3d, r28	; 61
    1566:	df 91       	pop	r29
    1568:	cf 91       	pop	r28
    156a:	1f 91       	pop	r17
    156c:	0f 91       	pop	r16
    156e:	ff 90       	pop	r15
    1570:	ef 90       	pop	r14
    1572:	df 90       	pop	r13
    1574:	cf 90       	pop	r12
    1576:	bf 90       	pop	r11
    1578:	af 90       	pop	r10
    157a:	08 95       	ret

0000157c <main>:
}


int main(void)
{
	initBTProtocol();
    157c:	0e 94 c7 02 	call	0x58e	; 0x58e <initBTProtocol>
	initTiming();
    1580:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <initTiming>
	initEngines();
    1584:	0e 94 ab 04 	call	0x956	; 0x956 <initEngines>
	initLights();
    1588:	0e 94 37 07 	call	0xe6e	; 0xe6e <initLights>
	initSensors();
    158c:	0e 94 5d 08 	call	0x10ba	; 0x10ba <initSensors>
	initEncoders();
    1590:	0e 94 a8 03 	call	0x750	; 0x750 <initEncoders>
	sei();
    1594:	78 94       	sei
	
	
	setDebugging(1);
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <setDebugging>
	setReadingSensors(1);
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <setReadingSensors>
	
	//addEntryIfNotExists(&blinkLeds, 500*1000UL, Periodic);
	//addEntryIfNotExists(&blinkA1, 500UL*1000UL, Periodic);
	BTTransmitStr("  >>>main start<<<  ");	
    15a2:	87 ed       	ldi	r24, 0xD7	; 215
    15a4:	92 e0       	ldi	r25, 0x02	; 2
    15a6:	0e 94 b4 01 	call	0x368	; 0x368 <BTTransmitStr>
	
    while(1)
    {
		
		checkTimeQueue();
    15aa:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <checkTimeQueue>
    15ae:	fd cf       	rjmp	.-6      	; 0x15aa <main+0x2e>

000015b0 <setDebugging>:


volatile uint8_t settings = 0;

void setDebugging(uint8_t val){
	setBit(settings, (val&1), 0);
    15b0:	20 91 fc 03 	lds	r18, 0x03FC
    15b4:	90 91 fc 03 	lds	r25, 0x03FC
    15b8:	82 27       	eor	r24, r18
    15ba:	28 2f       	mov	r18, r24
    15bc:	21 70       	andi	r18, 0x01	; 1
    15be:	92 27       	eor	r25, r18
    15c0:	90 93 fc 03 	sts	0x03FC, r25
    15c4:	08 95       	ret

000015c6 <setReadingSensors>:
}
void setReadingSensors(uint8_t val){
	setBit(settings, (val&1), 1);
    15c6:	30 91 fc 03 	lds	r19, 0x03FC
    15ca:	20 91 fc 03 	lds	r18, 0x03FC
    15ce:	98 2f       	mov	r25, r24
    15d0:	91 70       	andi	r25, 0x01	; 1
    15d2:	91 95       	neg	r25
    15d4:	93 27       	eor	r25, r19
    15d6:	92 70       	andi	r25, 0x02	; 2
    15d8:	92 27       	eor	r25, r18
    15da:	90 93 fc 03 	sts	0x03FC, r25
	setSensorsRead(val);
    15de:	0e 94 49 08 	call	0x1092	; 0x1092 <setSensorsRead>
    15e2:	08 95       	ret

000015e4 <setSendingInfos>:
}
void setSendingInfos(uint8_t val){
	setBit(settings, (val&1), 2);
    15e4:	30 91 fc 03 	lds	r19, 0x03FC
    15e8:	20 91 fc 03 	lds	r18, 0x03FC
    15ec:	98 2f       	mov	r25, r24
    15ee:	91 70       	andi	r25, 0x01	; 1
    15f0:	91 95       	neg	r25
    15f2:	93 27       	eor	r25, r19
    15f4:	94 70       	andi	r25, 0x04	; 4
    15f6:	92 27       	eor	r25, r18
    15f8:	90 93 fc 03 	sts	0x03FC, r25
	setSendingDistAndTime(val);
    15fc:	0e 94 61 04 	call	0x8c2	; 0x8c2 <setSendingDistAndTime>
    1600:	08 95       	ret

00001602 <toggleDebuggingOff>:
}

void toggleDebuggingOff(){
	if(DEBUGGING){
    1602:	80 91 fc 03 	lds	r24, 0x03FC
    1606:	80 ff       	sbrs	r24, 0
    1608:	09 c0       	rjmp	.+18     	; 0x161c <toggleDebuggingOff+0x1a>
		setDebugging(0);
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <setDebugging>
		settings |= 8;
    1610:	80 91 fc 03 	lds	r24, 0x03FC
    1614:	88 60       	ori	r24, 0x08	; 8
    1616:	80 93 fc 03 	sts	0x03FC, r24
    161a:	08 95       	ret
	}
	else
		if(LAST_DEBUGGING)
    161c:	80 91 fc 03 	lds	r24, 0x03FC
    1620:	83 ff       	sbrs	r24, 3
    1622:	03 c0       	rjmp	.+6      	; 0x162a <toggleDebuggingOff+0x28>
			setDebugging(1);
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <setDebugging>
    162a:	08 95       	ret

0000162c <getSettings>:
}

void getSettings(){
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	00 d0       	rcall	.+0      	; 0x1632 <getSettings+0x6>
    1632:	00 d0       	rcall	.+0      	; 0x1634 <getSettings+0x8>
    1634:	00 d0       	rcall	.+0      	; 0x1636 <getSettings+0xa>
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
	uint8_t msgtt[6];
	msgtt[0] = StartByte;
    163a:	8a ea       	ldi	r24, 0xAA	; 170
    163c:	89 83       	std	Y+1, r24	; 0x01
	msgtt[1] = SetSettings;
    163e:	8d e1       	ldi	r24, 0x1D	; 29
    1640:	8a 83       	std	Y+2, r24	; 0x02
	msgtt[2] = 1;
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	8b 83       	std	Y+3, r24	; 0x03
	msgtt[3] = settings;
    1646:	80 91 fc 03 	lds	r24, 0x03FC
    164a:	8c 83       	std	Y+4, r24	; 0x04
	msgtt[4] = EndByte;
    164c:	85 e5       	ldi	r24, 0x55	; 85
    164e:	8d 83       	std	Y+5, r24	; 0x05
	BTTransmitMsgU(msgtt, 5);
    1650:	65 e0       	ldi	r22, 0x05	; 5
    1652:	ce 01       	movw	r24, r28
    1654:	01 96       	adiw	r24, 0x01	; 1
    1656:	0e 94 ac 02 	call	0x558	; 0x558 <BTTransmitMsgU>
}
    165a:	26 96       	adiw	r28, 0x06	; 6
    165c:	0f b6       	in	r0, 0x3f	; 63
    165e:	f8 94       	cli
    1660:	de bf       	out	0x3e, r29	; 62
    1662:	0f be       	out	0x3f, r0	; 63
    1664:	cd bf       	out	0x3d, r28	; 61
    1666:	df 91       	pop	r29
    1668:	cf 91       	pop	r28
    166a:	08 95       	ret

0000166c <setSettings>:
void setSettings(uint8_t _setting){
    166c:	cf 93       	push	r28
    166e:	c8 2f       	mov	r28, r24
	setDebugging( _setting & 1 );
    1670:	81 70       	andi	r24, 0x01	; 1
    1672:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <setDebugging>
	setReadingSensors( (_setting>>1) & 1 );
    1676:	c1 fb       	bst	r28, 1
    1678:	88 27       	eor	r24, r24
    167a:	80 f9       	bld	r24, 0
    167c:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <setReadingSensors>
	setSendingInfos( (_setting>>2) & 1 );
    1680:	c2 fb       	bst	r28, 2
    1682:	88 27       	eor	r24, r24
    1684:	80 f9       	bld	r24, 0
    1686:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <setSendingInfos>
	getSettings();
    168a:	0e 94 16 0b 	call	0x162c	; 0x162c <getSettings>
}
    168e:	cf 91       	pop	r28
    1690:	08 95       	ret

00001692 <initTimeQueue>:
}
volatile queueEntry TimerQueue[TimingQueueSize+1];
volatile uint8_t TimingQueueTop;


void initTimeQueue(){
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	// initializez toti pointerii cu 0, adica pe fiecare pozitie din coada e o structura neocupata
	for(i=0;i<TimingQueueSize;i++)
		TimerQueue[i].pointerFct = NULL;
    1696:	fc 01       	movw	r30, r24
    1698:	ee 0f       	add	r30, r30
    169a:	ff 1f       	adc	r31, r31
    169c:	9c 01       	movw	r18, r24
    169e:	22 0f       	add	r18, r18
    16a0:	33 1f       	adc	r19, r19
    16a2:	22 0f       	add	r18, r18
    16a4:	33 1f       	adc	r19, r19
    16a6:	22 0f       	add	r18, r18
    16a8:	33 1f       	adc	r19, r19
    16aa:	e2 0f       	add	r30, r18
    16ac:	f3 1f       	adc	r31, r19
    16ae:	ee 59       	subi	r30, 0x9E	; 158
    16b0:	fb 4f       	sbci	r31, 0xFB	; 251
    16b2:	11 86       	std	Z+9, r1	; 0x09
    16b4:	10 86       	std	Z+8, r1	; 0x08
    16b6:	01 96       	adiw	r24, 0x01	; 1


void initTimeQueue(){
	uint8_t i;
	// initializez toti pointerii cu 0, adica pe fiecare pozitie din coada e o structura neocupata
	for(i=0;i<TimingQueueSize;i++)
    16b8:	84 31       	cpi	r24, 0x14	; 20
    16ba:	91 05       	cpc	r25, r1
    16bc:	61 f7       	brne	.-40     	; 0x1696 <initTimeQueue+0x4>
		TimerQueue[i].pointerFct = NULL;
	TimingQueueTop = 0;
    16be:	10 92 34 05 	sts	0x0534, r1
    16c2:	08 95       	ret

000016c4 <initTiming>:
	//blinkA1();
}

void initTiming()
{
	initTimeQueue();
    16c4:	0e 94 49 0b 	call	0x1692	; 0x1692 <initTimeQueue>
	TIMSK1|=(1<<TOIE1);
    16c8:	ef e6       	ldi	r30, 0x6F	; 111
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	81 60       	ori	r24, 0x01	; 1
    16d0:	80 83       	st	Z, r24
	TCNT1 = 0x00;
    16d2:	10 92 85 00 	sts	0x0085, r1
    16d6:	10 92 84 00 	sts	0x0084, r1
	TCCR1B = 0x01;
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	80 93 81 00 	sts	0x0081, r24
    16e0:	08 95       	ret

000016e2 <addEntryToTimerQueue>:
		TimerQueue[i].pointerFct = NULL;
	TimingQueueTop = 0;
}

// delay e in microsecunde (10^-6 secunde)
void addEntryToTimerQueue(uint8_t (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
    16e2:	0f 93       	push	r16
    16e4:	1f 93       	push	r17
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	ce 56       	subi	r28, 0x6E	; 110
    16f0:	d1 09       	sbc	r29, r1
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	f8 94       	cli
    16f6:	de bf       	out	0x3e, r29	; 62
    16f8:	0f be       	out	0x3f, r0	; 63
    16fa:	cd bf       	out	0x3d, r28	; 61
	cli(); // dezactivare intreruperi
    16fc:	f8 94       	cli
	
	
	//construire entry pentru functia curenta 
	queueEntry thisEntry;
	thisEntry.delay = _delay;
	thisEntry.repeatDelay = _repeat ? _delay : 0;
    16fe:	21 11       	cpse	r18, r1
    1700:	05 c0       	rjmp	.+10     	; 0x170c <addEntryToTimerQueue+0x2a>
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	a0 e0       	ldi	r26, 0x00	; 0
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	e0 e0       	ldi	r30, 0x00	; 0
    170a:	04 c0       	rjmp	.+8      	; 0x1714 <addEntryToTimerQueue+0x32>
    170c:	b4 2f       	mov	r27, r20
    170e:	a5 2f       	mov	r26, r21
    1710:	f6 2f       	mov	r31, r22
    1712:	e7 2f       	mov	r30, r23
	thisEntry.pointerFct = _theFct;	
	TimerQueue[TimingQueueTop] = thisEntry;
    1714:	20 91 34 05 	lds	r18, 0x0534
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	49 83       	std	Y+1, r20	; 0x01
    171c:	5a 83       	std	Y+2, r21	; 0x02
    171e:	6b 83       	std	Y+3, r22	; 0x03
    1720:	7c 83       	std	Y+4, r23	; 0x04
    1722:	bd 83       	std	Y+5, r27	; 0x05
    1724:	ae 83       	std	Y+6, r26	; 0x06
    1726:	ff 83       	std	Y+7, r31	; 0x07
    1728:	e8 87       	std	Y+8, r30	; 0x08
    172a:	9a 87       	std	Y+10, r25	; 0x0a
    172c:	89 87       	std	Y+9, r24	; 0x09
    172e:	d9 01       	movw	r26, r18
    1730:	aa 0f       	add	r26, r26
    1732:	bb 1f       	adc	r27, r27
    1734:	22 0f       	add	r18, r18
    1736:	33 1f       	adc	r19, r19
    1738:	22 0f       	add	r18, r18
    173a:	33 1f       	adc	r19, r19
    173c:	22 0f       	add	r18, r18
    173e:	33 1f       	adc	r19, r19
    1740:	a2 0f       	add	r26, r18
    1742:	b3 1f       	adc	r27, r19
    1744:	ae 59       	subi	r26, 0x9E	; 158
    1746:	bb 4f       	sbci	r27, 0xFB	; 251
    1748:	8a e0       	ldi	r24, 0x0A	; 10
    174a:	fe 01       	movw	r30, r28
    174c:	31 96       	adiw	r30, 0x01	; 1
    174e:	01 90       	ld	r0, Z+
    1750:	0d 92       	st	X+, r0
    1752:	8a 95       	dec	r24
    1754:	e1 f7       	brne	.-8      	; 0x174e <addEntryToTimerQueue+0x6c>
	
	TimingQueueTop++;
    1756:	80 91 34 05 	lds	r24, 0x0534
    175a:	8f 5f       	subi	r24, 0xFF	; 255
    175c:	80 93 34 05 	sts	0x0534, r24
	
	if(DEBUGGING){
    1760:	80 91 fc 03 	lds	r24, 0x03FC
    1764:	80 ff       	sbrs	r24, 0
    1766:	33 c0       	rjmp	.+102    	; 0x17ce <addEntryToTimerQueue+0xec>
		char msg[100];		
		sprintf(msg, "Entry adaugat in coada! la index %d si cu delay: %lu", TimingQueueTop-1, TimerQueue[TimingQueueTop-1].delay);
    1768:	80 91 34 05 	lds	r24, 0x0534
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	01 97       	sbiw	r24, 0x01	; 1
    1770:	fc 01       	movw	r30, r24
    1772:	ee 0f       	add	r30, r30
    1774:	ff 1f       	adc	r31, r31
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	88 0f       	add	r24, r24
    1780:	99 1f       	adc	r25, r25
    1782:	e8 0f       	add	r30, r24
    1784:	f9 1f       	adc	r31, r25
    1786:	ee 59       	subi	r30, 0x9E	; 158
    1788:	fb 4f       	sbci	r31, 0xFB	; 251
    178a:	80 81       	ld	r24, Z
    178c:	91 81       	ldd	r25, Z+1	; 0x01
    178e:	a2 81       	ldd	r26, Z+2	; 0x02
    1790:	b3 81       	ldd	r27, Z+3	; 0x03
    1792:	20 91 34 05 	lds	r18, 0x0534
    1796:	bf 93       	push	r27
    1798:	af 93       	push	r26
    179a:	9f 93       	push	r25
    179c:	8f 93       	push	r24
    179e:	82 2f       	mov	r24, r18
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	9f 93       	push	r25
    17a6:	8f 93       	push	r24
    17a8:	8c ee       	ldi	r24, 0xEC	; 236
    17aa:	92 e0       	ldi	r25, 0x02	; 2
    17ac:	9f 93       	push	r25
    17ae:	8f 93       	push	r24
    17b0:	8e 01       	movw	r16, r28
    17b2:	05 5f       	subi	r16, 0xF5	; 245
    17b4:	1f 4f       	sbci	r17, 0xFF	; 255
    17b6:	1f 93       	push	r17
    17b8:	0f 93       	push	r16
    17ba:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <sprintf>
		BTTransmitStr(msg);
    17be:	c8 01       	movw	r24, r16
    17c0:	0e 94 b4 01 	call	0x368	; 0x368 <BTTransmitStr>
    17c4:	0f b6       	in	r0, 0x3f	; 63
    17c6:	f8 94       	cli
    17c8:	de bf       	out	0x3e, r29	; 62
    17ca:	0f be       	out	0x3f, r0	; 63
    17cc:	cd bf       	out	0x3d, r28	; 61
	}
	sei();
    17ce:	78 94       	sei
}
    17d0:	c2 59       	subi	r28, 0x92	; 146
    17d2:	df 4f       	sbci	r29, 0xFF	; 255
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	f8 94       	cli
    17d8:	de bf       	out	0x3e, r29	; 62
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	cd bf       	out	0x3d, r28	; 61
    17de:	df 91       	pop	r29
    17e0:	cf 91       	pop	r28
    17e2:	1f 91       	pop	r17
    17e4:	0f 91       	pop	r16
    17e6:	08 95       	ret

000017e8 <existsEntryInTimerQueue>:
	}
}

uint8_t existsEntryInTimerQueue(uint8_t (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
    17e8:	20 91 34 05 	lds	r18, 0x0534
    17ec:	22 23       	and	r18, r18
    17ee:	21 f1       	breq	.+72     	; 0x1838 <existsEntryInTimerQueue+0x50>
		if(TimerQueue[i].pointerFct == _theFct){			
    17f0:	20 91 6a 04 	lds	r18, 0x046A
    17f4:	30 91 6b 04 	lds	r19, 0x046B
    17f8:	28 17       	cp	r18, r24
    17fa:	39 07       	cpc	r19, r25
    17fc:	f9 f0       	breq	.+62     	; 0x183c <existsEntryInTimerQueue+0x54>
	}
}

uint8_t existsEntryInTimerQueue(uint8_t (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
    17fe:	40 e0       	ldi	r20, 0x00	; 0
    1800:	14 c0       	rjmp	.+40     	; 0x182a <existsEntryInTimerQueue+0x42>
		if(TimerQueue[i].pointerFct == _theFct){			
    1802:	24 2f       	mov	r18, r20
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	f9 01       	movw	r30, r18
    1808:	ee 0f       	add	r30, r30
    180a:	ff 1f       	adc	r31, r31
    180c:	22 0f       	add	r18, r18
    180e:	33 1f       	adc	r19, r19
    1810:	22 0f       	add	r18, r18
    1812:	33 1f       	adc	r19, r19
    1814:	22 0f       	add	r18, r18
    1816:	33 1f       	adc	r19, r19
    1818:	e2 0f       	add	r30, r18
    181a:	f3 1f       	adc	r31, r19
    181c:	ee 59       	subi	r30, 0x9E	; 158
    181e:	fb 4f       	sbci	r31, 0xFB	; 251
    1820:	20 85       	ldd	r18, Z+8	; 0x08
    1822:	31 85       	ldd	r19, Z+9	; 0x09
    1824:	28 17       	cp	r18, r24
    1826:	39 07       	cpc	r19, r25
    1828:	59 f0       	breq	.+22     	; 0x1840 <existsEntryInTimerQueue+0x58>
	}
}

uint8_t existsEntryInTimerQueue(uint8_t (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
    182a:	4f 5f       	subi	r20, 0xFF	; 255
    182c:	20 91 34 05 	lds	r18, 0x0534
    1830:	42 17       	cp	r20, r18
    1832:	38 f3       	brcs	.-50     	; 0x1802 <existsEntryInTimerQueue+0x1a>
		if(TimerQueue[i].pointerFct == _theFct){			
			return YES;
		}
	}
	return NO;
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	08 95       	ret
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	08 95       	ret

uint8_t existsEntryInTimerQueue(uint8_t (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
		if(TimerQueue[i].pointerFct == _theFct){			
			return YES;
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	08 95       	ret
    1840:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return NO;
}
    1842:	08 95       	ret

00001844 <addEntryIfNotExists>:

void addEntryIfNotExists(uint8_t (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
    1844:	0f 93       	push	r16
    1846:	1f 93       	push	r17
    1848:	cf 93       	push	r28
    184a:	df 93       	push	r29
    184c:	c2 2f       	mov	r28, r18
	cli();
    184e:	f8 94       	cli
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
    1850:	20 91 34 05 	lds	r18, 0x0534
    1854:	22 23       	and	r18, r18
    1856:	09 f4       	brne	.+2      	; 0x185a <addEntryIfNotExists+0x16>
    1858:	59 c0       	rjmp	.+178    	; 0x190c <addEntryIfNotExists+0xc8>
		if(TimerQueue[i].pointerFct == _theFct){
    185a:	e0 91 6a 04 	lds	r30, 0x046A
    185e:	f0 91 6b 04 	lds	r31, 0x046B
    1862:	e8 17       	cp	r30, r24
    1864:	f9 07       	cpc	r31, r25
    1866:	09 f0       	breq	.+2      	; 0x186a <addEntryIfNotExists+0x26>
    1868:	49 c0       	rjmp	.+146    	; 0x18fc <addEntryIfNotExists+0xb8>
    186a:	18 c0       	rjmp	.+48     	; 0x189c <addEntryIfNotExists+0x58>
    186c:	ed 2f       	mov	r30, r29
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	8f 01       	movw	r16, r30
    1872:	00 0f       	add	r16, r16
    1874:	11 1f       	adc	r17, r17
    1876:	df 01       	movw	r26, r30
    1878:	aa 0f       	add	r26, r26
    187a:	bb 1f       	adc	r27, r27
    187c:	aa 0f       	add	r26, r26
    187e:	bb 1f       	adc	r27, r27
    1880:	aa 0f       	add	r26, r26
    1882:	bb 1f       	adc	r27, r27
    1884:	a0 0f       	add	r26, r16
    1886:	b1 1f       	adc	r27, r17
    1888:	ae 59       	subi	r26, 0x9E	; 158
    188a:	bb 4f       	sbci	r27, 0xFB	; 251
    188c:	18 96       	adiw	r26, 0x08	; 8
    188e:	0d 90       	ld	r0, X+
    1890:	bc 91       	ld	r27, X
    1892:	a0 2d       	mov	r26, r0
    1894:	a8 17       	cp	r26, r24
    1896:	b9 07       	cpc	r27, r25
    1898:	91 f5       	brne	.+100    	; 0x18fe <addEntryIfNotExists+0xba>
    189a:	03 c0       	rjmp	.+6      	; 0x18a2 <addEntryIfNotExists+0x5e>
    189c:	e0 e0       	ldi	r30, 0x00	; 0
    189e:	f0 e0       	ldi	r31, 0x00	; 0
}

void addEntryIfNotExists(uint8_t (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
	cli();
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
    18a0:	d0 e0       	ldi	r29, 0x00	; 0
		if(TimerQueue[i].pointerFct == _theFct){
			TimerQueue[i].delay = _delay;
    18a2:	9f 01       	movw	r18, r30
    18a4:	22 0f       	add	r18, r18
    18a6:	33 1f       	adc	r19, r19
    18a8:	22 0f       	add	r18, r18
    18aa:	33 1f       	adc	r19, r19
    18ac:	22 0f       	add	r18, r18
    18ae:	33 1f       	adc	r19, r19
    18b0:	df 01       	movw	r26, r30
    18b2:	aa 0f       	add	r26, r26
    18b4:	bb 1f       	adc	r27, r27
    18b6:	a2 0f       	add	r26, r18
    18b8:	b3 1f       	adc	r27, r19
    18ba:	ae 59       	subi	r26, 0x9E	; 158
    18bc:	bb 4f       	sbci	r27, 0xFB	; 251
    18be:	4d 93       	st	X+, r20
    18c0:	5d 93       	st	X+, r21
    18c2:	6d 93       	st	X+, r22
    18c4:	7c 93       	st	X, r23
    18c6:	13 97       	sbiw	r26, 0x03	; 3
			TimerQueue[i].repeatDelay = _repeat?_delay:0;
    18c8:	c1 11       	cpse	r28, r1
    18ca:	04 c0       	rjmp	.+8      	; 0x18d4 <addEntryIfNotExists+0x90>
    18cc:	00 e0       	ldi	r16, 0x00	; 0
    18ce:	10 e0       	ldi	r17, 0x00	; 0
    18d0:	98 01       	movw	r18, r16
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <addEntryIfNotExists+0x94>
    18d4:	8a 01       	movw	r16, r20
    18d6:	9b 01       	movw	r18, r22
    18d8:	df 01       	movw	r26, r30
    18da:	aa 0f       	add	r26, r26
    18dc:	bb 1f       	adc	r27, r27
    18de:	ee 0f       	add	r30, r30
    18e0:	ff 1f       	adc	r31, r31
    18e2:	ee 0f       	add	r30, r30
    18e4:	ff 1f       	adc	r31, r31
    18e6:	ee 0f       	add	r30, r30
    18e8:	ff 1f       	adc	r31, r31
    18ea:	ea 0f       	add	r30, r26
    18ec:	fb 1f       	adc	r31, r27
    18ee:	ee 59       	subi	r30, 0x9E	; 158
    18f0:	fb 4f       	sbci	r31, 0xFB	; 251
    18f2:	04 83       	std	Z+4, r16	; 0x04
    18f4:	15 83       	std	Z+5, r17	; 0x05
    18f6:	26 83       	std	Z+6, r18	; 0x06
    18f8:	37 83       	std	Z+7, r19	; 0x07
			break;
    18fa:	09 c0       	rjmp	.+18     	; 0x190e <addEntryIfNotExists+0xca>
}

void addEntryIfNotExists(uint8_t (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
	cli();
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
    18fc:	d0 e0       	ldi	r29, 0x00	; 0
    18fe:	df 5f       	subi	r29, 0xFF	; 255
    1900:	20 91 34 05 	lds	r18, 0x0534
    1904:	d2 17       	cp	r29, r18
    1906:	08 f4       	brcc	.+2      	; 0x190a <addEntryIfNotExists+0xc6>
    1908:	b1 cf       	rjmp	.-158    	; 0x186c <addEntryIfNotExists+0x28>
    190a:	01 c0       	rjmp	.+2      	; 0x190e <addEntryIfNotExists+0xca>
    190c:	d0 e0       	ldi	r29, 0x00	; 0
			TimerQueue[i].delay = _delay;
			TimerQueue[i].repeatDelay = _repeat?_delay:0;
			break;
		}
	}	
	if(i==TimingQueueTop)
    190e:	20 91 34 05 	lds	r18, 0x0534
    1912:	d2 13       	cpse	r29, r18
    1914:	03 c0       	rjmp	.+6      	; 0x191c <addEntryIfNotExists+0xd8>
		addEntryToTimerQueue(_theFct, _delay, _repeat);
    1916:	2c 2f       	mov	r18, r28
    1918:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <addEntryToTimerQueue>
	sei();
    191c:	78 94       	sei
}
    191e:	df 91       	pop	r29
    1920:	cf 91       	pop	r28
    1922:	1f 91       	pop	r17
    1924:	0f 91       	pop	r16
    1926:	08 95       	ret

00001928 <timePassed>:


//se apeleaza din intrerupere (cate microsecunde au trecut)
//pentru fiecare functie(valida) din queue se scade din delay numarul de microsecunde care a trecut

void timePassed(uint32_t passed_us){
    1928:	8f 92       	push	r8
    192a:	9f 92       	push	r9
    192c:	af 92       	push	r10
    192e:	bf 92       	push	r11
    1930:	ff 92       	push	r15
    1932:	0f 93       	push	r16
    1934:	1f 93       	push	r17
    1936:	cf 93       	push	r28
    1938:	df 93       	push	r29
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
    193a:	20 91 34 05 	lds	r18, 0x0534
    193e:	22 23       	and	r18, r18
    1940:	09 f4       	brne	.+2      	; 0x1944 <timePassed+0x1c>
    1942:	7a c0       	rjmp	.+244    	; 0x1a38 <timePassed+0x110>
    1944:	c0 e0       	ldi	r28, 0x00	; 0
		if(TimerQueue[i].pointerFct != NULL){
			if(TimerQueue[i].delay > 0)
				TimerQueue[i].delay = TimerQueue[i].delay > passed_us ? TimerQueue[i].delay - passed_us : 0;
    1946:	f1 2c       	mov	r15, r1
    1948:	00 e0       	ldi	r16, 0x00	; 0
    194a:	10 e0       	ldi	r17, 0x00	; 0
    194c:	d0 e0       	ldi	r29, 0x00	; 0
//pentru fiecare functie(valida) din queue se scade din delay numarul de microsecunde care a trecut

void timePassed(uint32_t passed_us){
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
		if(TimerQueue[i].pointerFct != NULL){
    194e:	2c 2f       	mov	r18, r28
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	f9 01       	movw	r30, r18
    1954:	ee 0f       	add	r30, r30
    1956:	ff 1f       	adc	r31, r31
    1958:	a9 01       	movw	r20, r18
    195a:	44 0f       	add	r20, r20
    195c:	55 1f       	adc	r21, r21
    195e:	44 0f       	add	r20, r20
    1960:	55 1f       	adc	r21, r21
    1962:	44 0f       	add	r20, r20
    1964:	55 1f       	adc	r21, r21
    1966:	e4 0f       	add	r30, r20
    1968:	f5 1f       	adc	r31, r21
    196a:	ee 59       	subi	r30, 0x9E	; 158
    196c:	fb 4f       	sbci	r31, 0xFB	; 251
    196e:	40 85       	ldd	r20, Z+8	; 0x08
    1970:	51 85       	ldd	r21, Z+9	; 0x09
    1972:	45 2b       	or	r20, r21
    1974:	09 f4       	brne	.+2      	; 0x1978 <timePassed+0x50>
    1976:	5a c0       	rjmp	.+180    	; 0x1a2c <timePassed+0x104>
			if(TimerQueue[i].delay > 0)
    1978:	a9 01       	movw	r20, r18
    197a:	44 0f       	add	r20, r20
    197c:	55 1f       	adc	r21, r21
    197e:	44 0f       	add	r20, r20
    1980:	55 1f       	adc	r21, r21
    1982:	44 0f       	add	r20, r20
    1984:	55 1f       	adc	r21, r21
    1986:	f9 01       	movw	r30, r18
    1988:	ee 0f       	add	r30, r30
    198a:	ff 1f       	adc	r31, r31
    198c:	e4 0f       	add	r30, r20
    198e:	f5 1f       	adc	r31, r21
    1990:	ee 59       	subi	r30, 0x9E	; 158
    1992:	fb 4f       	sbci	r31, 0xFB	; 251
    1994:	80 80       	ld	r8, Z
    1996:	91 80       	ldd	r9, Z+1	; 0x01
    1998:	a2 80       	ldd	r10, Z+2	; 0x02
    199a:	b3 80       	ldd	r11, Z+3	; 0x03
    199c:	89 28       	or	r8, r9
    199e:	8a 28       	or	r8, r10
    19a0:	8b 28       	or	r8, r11
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <timePassed+0x7e>
    19a4:	43 c0       	rjmp	.+134    	; 0x1a2c <timePassed+0x104>
				TimerQueue[i].delay = TimerQueue[i].delay > passed_us ? TimerQueue[i].delay - passed_us : 0;
    19a6:	a9 01       	movw	r20, r18
    19a8:	44 0f       	add	r20, r20
    19aa:	55 1f       	adc	r21, r21
    19ac:	44 0f       	add	r20, r20
    19ae:	55 1f       	adc	r21, r21
    19b0:	44 0f       	add	r20, r20
    19b2:	55 1f       	adc	r21, r21
    19b4:	f9 01       	movw	r30, r18
    19b6:	ee 0f       	add	r30, r30
    19b8:	ff 1f       	adc	r31, r31
    19ba:	e4 0f       	add	r30, r20
    19bc:	f5 1f       	adc	r31, r21
    19be:	ee 59       	subi	r30, 0x9E	; 158
    19c0:	fb 4f       	sbci	r31, 0xFB	; 251
    19c2:	80 80       	ld	r8, Z
    19c4:	91 80       	ldd	r9, Z+1	; 0x01
    19c6:	a2 80       	ldd	r10, Z+2	; 0x02
    19c8:	b3 80       	ldd	r11, Z+3	; 0x03
    19ca:	68 15       	cp	r22, r8
    19cc:	79 05       	cpc	r23, r9
    19ce:	8a 05       	cpc	r24, r10
    19d0:	9b 05       	cpc	r25, r11
    19d2:	b8 f4       	brcc	.+46     	; 0x1a02 <timePassed+0xda>
    19d4:	a9 01       	movw	r20, r18
    19d6:	44 0f       	add	r20, r20
    19d8:	55 1f       	adc	r21, r21
    19da:	44 0f       	add	r20, r20
    19dc:	55 1f       	adc	r21, r21
    19de:	44 0f       	add	r20, r20
    19e0:	55 1f       	adc	r21, r21
    19e2:	f9 01       	movw	r30, r18
    19e4:	ee 0f       	add	r30, r30
    19e6:	ff 1f       	adc	r31, r31
    19e8:	e4 0f       	add	r30, r20
    19ea:	f5 1f       	adc	r31, r21
    19ec:	ee 59       	subi	r30, 0x9E	; 158
    19ee:	fb 4f       	sbci	r31, 0xFB	; 251
    19f0:	80 80       	ld	r8, Z
    19f2:	91 80       	ldd	r9, Z+1	; 0x01
    19f4:	a2 80       	ldd	r10, Z+2	; 0x02
    19f6:	b3 80       	ldd	r11, Z+3	; 0x03
    19f8:	86 1a       	sub	r8, r22
    19fa:	97 0a       	sbc	r9, r23
    19fc:	a8 0a       	sbc	r10, r24
    19fe:	b9 0a       	sbc	r11, r25
    1a00:	04 c0       	rjmp	.+8      	; 0x1a0a <timePassed+0xe2>
    1a02:	8f 2c       	mov	r8, r15
    1a04:	90 2e       	mov	r9, r16
    1a06:	a1 2e       	mov	r10, r17
    1a08:	bd 2e       	mov	r11, r29
    1a0a:	f9 01       	movw	r30, r18
    1a0c:	ee 0f       	add	r30, r30
    1a0e:	ff 1f       	adc	r31, r31
    1a10:	22 0f       	add	r18, r18
    1a12:	33 1f       	adc	r19, r19
    1a14:	22 0f       	add	r18, r18
    1a16:	33 1f       	adc	r19, r19
    1a18:	22 0f       	add	r18, r18
    1a1a:	33 1f       	adc	r19, r19
    1a1c:	e2 0f       	add	r30, r18
    1a1e:	f3 1f       	adc	r31, r19
    1a20:	ee 59       	subi	r30, 0x9E	; 158
    1a22:	fb 4f       	sbci	r31, 0xFB	; 251
    1a24:	80 82       	st	Z, r8
    1a26:	91 82       	std	Z+1, r9	; 0x01
    1a28:	a2 82       	std	Z+2, r10	; 0x02
    1a2a:	b3 82       	std	Z+3, r11	; 0x03
//se apeleaza din intrerupere (cate microsecunde au trecut)
//pentru fiecare functie(valida) din queue se scade din delay numarul de microsecunde care a trecut

void timePassed(uint32_t passed_us){
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
    1a2c:	cf 5f       	subi	r28, 0xFF	; 255
    1a2e:	20 91 34 05 	lds	r18, 0x0534
    1a32:	c2 17       	cp	r28, r18
    1a34:	08 f4       	brcc	.+2      	; 0x1a38 <timePassed+0x110>
    1a36:	8b cf       	rjmp	.-234    	; 0x194e <timePassed+0x26>
		if(TimerQueue[i].pointerFct != NULL){
			if(TimerQueue[i].delay > 0)
				TimerQueue[i].delay = TimerQueue[i].delay > passed_us ? TimerQueue[i].delay - passed_us : 0;
		}
	}
}
    1a38:	df 91       	pop	r29
    1a3a:	cf 91       	pop	r28
    1a3c:	1f 91       	pop	r17
    1a3e:	0f 91       	pop	r16
    1a40:	ff 90       	pop	r15
    1a42:	bf 90       	pop	r11
    1a44:	af 90       	pop	r10
    1a46:	9f 90       	pop	r9
    1a48:	8f 90       	pop	r8
    1a4a:	08 95       	ret

00001a4c <__vector_15>:
void timePassed(uint32_t passed_us);
void shiftTimeQueue(uint8_t i, char *reason);
void initTimeQueue();

ISR(TIMER1_OVF_vect)// Din datasheet timerq(are 8 mh) => 8/8= 1 microsecunde
{
    1a4c:	1f 92       	push	r1
    1a4e:	0f 92       	push	r0
    1a50:	0f b6       	in	r0, 0x3f	; 63
    1a52:	0f 92       	push	r0
    1a54:	11 24       	eor	r1, r1
    1a56:	2f 93       	push	r18
    1a58:	3f 93       	push	r19
    1a5a:	4f 93       	push	r20
    1a5c:	5f 93       	push	r21
    1a5e:	6f 93       	push	r22
    1a60:	7f 93       	push	r23
    1a62:	8f 93       	push	r24
    1a64:	9f 93       	push	r25
    1a66:	af 93       	push	r26
    1a68:	bf 93       	push	r27
    1a6a:	ef 93       	push	r30
    1a6c:	ff 93       	push	r31
	timePassed(8210);
    1a6e:	62 e1       	ldi	r22, 0x12	; 18
    1a70:	70 e2       	ldi	r23, 0x20	; 32
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	0e 94 94 0c 	call	0x1928	; 0x1928 <timePassed>
	//blinkA1();
}
    1a7a:	ff 91       	pop	r31
    1a7c:	ef 91       	pop	r30
    1a7e:	bf 91       	pop	r27
    1a80:	af 91       	pop	r26
    1a82:	9f 91       	pop	r25
    1a84:	8f 91       	pop	r24
    1a86:	7f 91       	pop	r23
    1a88:	6f 91       	pop	r22
    1a8a:	5f 91       	pop	r21
    1a8c:	4f 91       	pop	r20
    1a8e:	3f 91       	pop	r19
    1a90:	2f 91       	pop	r18
    1a92:	0f 90       	pop	r0
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	0f 90       	pop	r0
    1a98:	1f 90       	pop	r1
    1a9a:	18 95       	reti

00001a9c <shiftTimeQueue>:
			}
		}
	}
	sei();
}
void shiftTimeQueue(uint8_t i, char *reason){
    1a9c:	ef 92       	push	r14
    1a9e:	ff 92       	push	r15
    1aa0:	1f 93       	push	r17
    1aa2:	cf 93       	push	r28
    1aa4:	df 93       	push	r29
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	e2 97       	sbiw	r28, 0x32	; 50
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	de bf       	out	0x3e, r29	; 62
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	cd bf       	out	0x3d, r28	; 61
    1ab6:	18 2f       	mov	r17, r24
	if(DEBUGGING){
    1ab8:	80 91 fc 03 	lds	r24, 0x03FC
    1abc:	80 ff       	sbrs	r24, 0
    1abe:	17 c0       	rjmp	.+46     	; 0x1aee <shiftTimeQueue+0x52>
		char str[50];
		sprintf(str, "shift i=%d (%s)", i, reason);
    1ac0:	7f 93       	push	r23
    1ac2:	6f 93       	push	r22
    1ac4:	1f 92       	push	r1
    1ac6:	1f 93       	push	r17
    1ac8:	81 e2       	ldi	r24, 0x21	; 33
    1aca:	93 e0       	ldi	r25, 0x03	; 3
    1acc:	9f 93       	push	r25
    1ace:	8f 93       	push	r24
    1ad0:	ce 01       	movw	r24, r28
    1ad2:	01 96       	adiw	r24, 0x01	; 1
    1ad4:	7c 01       	movw	r14, r24
    1ad6:	ff 92       	push	r15
    1ad8:	8f 93       	push	r24
    1ada:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <sprintf>
		BTTransmitStr(str);
    1ade:	c7 01       	movw	r24, r14
    1ae0:	0e 94 b4 01 	call	0x368	; 0x368 <BTTransmitStr>
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	de bf       	out	0x3e, r29	; 62
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	cd bf       	out	0x3d, r28	; 61
	}
	for(; i<TimingQueueTop; i++)
    1aee:	80 91 34 05 	lds	r24, 0x0534
    1af2:	18 17       	cp	r17, r24
    1af4:	50 f5       	brcc	.+84     	; 0x1b4a <shiftTimeQueue+0xae>
		TimerQueue[i]=TimerQueue[i+1];
    1af6:	9a e0       	ldi	r25, 0x0A	; 10
    1af8:	21 2f       	mov	r18, r17
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	a9 01       	movw	r20, r18
    1afe:	4f 5f       	subi	r20, 0xFF	; 255
    1b00:	5f 4f       	sbci	r21, 0xFF	; 255
    1b02:	d9 01       	movw	r26, r18
    1b04:	aa 0f       	add	r26, r26
    1b06:	bb 1f       	adc	r27, r27
    1b08:	22 0f       	add	r18, r18
    1b0a:	33 1f       	adc	r19, r19
    1b0c:	22 0f       	add	r18, r18
    1b0e:	33 1f       	adc	r19, r19
    1b10:	22 0f       	add	r18, r18
    1b12:	33 1f       	adc	r19, r19
    1b14:	a2 0f       	add	r26, r18
    1b16:	b3 1f       	adc	r27, r19
    1b18:	ae 59       	subi	r26, 0x9E	; 158
    1b1a:	bb 4f       	sbci	r27, 0xFB	; 251
    1b1c:	fa 01       	movw	r30, r20
    1b1e:	ee 0f       	add	r30, r30
    1b20:	ff 1f       	adc	r31, r31
    1b22:	44 0f       	add	r20, r20
    1b24:	55 1f       	adc	r21, r21
    1b26:	44 0f       	add	r20, r20
    1b28:	55 1f       	adc	r21, r21
    1b2a:	44 0f       	add	r20, r20
    1b2c:	55 1f       	adc	r21, r21
    1b2e:	e4 0f       	add	r30, r20
    1b30:	f5 1f       	adc	r31, r21
    1b32:	ee 59       	subi	r30, 0x9E	; 158
    1b34:	fb 4f       	sbci	r31, 0xFB	; 251
    1b36:	89 2f       	mov	r24, r25
    1b38:	01 90       	ld	r0, Z+
    1b3a:	0d 92       	st	X+, r0
    1b3c:	8a 95       	dec	r24
    1b3e:	e1 f7       	brne	.-8      	; 0x1b38 <shiftTimeQueue+0x9c>
	if(DEBUGGING){
		char str[50];
		sprintf(str, "shift i=%d (%s)", i, reason);
		BTTransmitStr(str);
	}
	for(; i<TimingQueueTop; i++)
    1b40:	1f 5f       	subi	r17, 0xFF	; 255
    1b42:	80 91 34 05 	lds	r24, 0x0534
    1b46:	18 17       	cp	r17, r24
    1b48:	b8 f2       	brcs	.-82     	; 0x1af8 <shiftTimeQueue+0x5c>
		TimerQueue[i]=TimerQueue[i+1];
	TimingQueueTop--;
    1b4a:	80 91 34 05 	lds	r24, 0x0534
    1b4e:	81 50       	subi	r24, 0x01	; 1
    1b50:	80 93 34 05 	sts	0x0534, r24
}
    1b54:	e2 96       	adiw	r28, 0x32	; 50
    1b56:	0f b6       	in	r0, 0x3f	; 63
    1b58:	f8 94       	cli
    1b5a:	de bf       	out	0x3e, r29	; 62
    1b5c:	0f be       	out	0x3f, r0	; 63
    1b5e:	cd bf       	out	0x3d, r28	; 61
    1b60:	df 91       	pop	r29
    1b62:	cf 91       	pop	r28
    1b64:	1f 91       	pop	r17
    1b66:	ff 90       	pop	r15
    1b68:	ef 90       	pop	r14
    1b6a:	08 95       	ret

00001b6c <removeEntryFromTimerQueue>:
		sprintf(msg, "Entry adaugat in coada! la index %d si cu delay: %lu", TimingQueueTop-1, TimerQueue[TimingQueueTop-1].delay);
		BTTransmitStr(msg);
	}
	sei();
}
void removeEntryFromTimerQueue(uint8_t (*_theFct) (void)){
    1b6c:	bf 92       	push	r11
    1b6e:	cf 92       	push	r12
    1b70:	df 92       	push	r13
    1b72:	ef 92       	push	r14
    1b74:	ff 92       	push	r15
    1b76:	0f 93       	push	r16
    1b78:	1f 93       	push	r17
    1b7a:	cf 93       	push	r28
    1b7c:	df 93       	push	r29
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
    1b82:	c4 56       	subi	r28, 0x64	; 100
    1b84:	d1 09       	sbc	r29, r1
    1b86:	0f b6       	in	r0, 0x3f	; 63
    1b88:	f8 94       	cli
    1b8a:	de bf       	out	0x3e, r29	; 62
    1b8c:	0f be       	out	0x3f, r0	; 63
    1b8e:	cd bf       	out	0x3d, r28	; 61
    1b90:	8c 01       	movw	r16, r24
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
    1b92:	80 91 34 05 	lds	r24, 0x0534
    1b96:	88 23       	and	r24, r24
    1b98:	09 f4       	brne	.+2      	; 0x1b9c <removeEntryFromTimerQueue+0x30>
    1b9a:	3f c0       	rjmp	.+126    	; 0x1c1a <removeEntryFromTimerQueue+0xae>
    1b9c:	b1 2c       	mov	r11, r1
		if(TimerQueue[i].pointerFct == _theFct){
			if(DEBUGGING){
				char msg[100];
				sprintf(msg, "Entry sters din coada. de pe pozitia %u", i);
    1b9e:	0f 2e       	mov	r0, r31
    1ba0:	f1 e3       	ldi	r31, 0x31	; 49
    1ba2:	cf 2e       	mov	r12, r31
    1ba4:	f3 e0       	ldi	r31, 0x03	; 3
    1ba6:	df 2e       	mov	r13, r31
    1ba8:	f0 2d       	mov	r31, r0
    1baa:	ce 01       	movw	r24, r28
    1bac:	01 96       	adiw	r24, 0x01	; 1
    1bae:	7c 01       	movw	r14, r24
	sei();
}
void removeEntryFromTimerQueue(uint8_t (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
		if(TimerQueue[i].pointerFct == _theFct){
    1bb0:	2b 2d       	mov	r18, r11
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	f9 01       	movw	r30, r18
    1bb6:	ee 0f       	add	r30, r30
    1bb8:	ff 1f       	adc	r31, r31
    1bba:	c9 01       	movw	r24, r18
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	88 0f       	add	r24, r24
    1bc2:	99 1f       	adc	r25, r25
    1bc4:	88 0f       	add	r24, r24
    1bc6:	99 1f       	adc	r25, r25
    1bc8:	e8 0f       	add	r30, r24
    1bca:	f9 1f       	adc	r31, r25
    1bcc:	ee 59       	subi	r30, 0x9E	; 158
    1bce:	fb 4f       	sbci	r31, 0xFB	; 251
    1bd0:	40 85       	ldd	r20, Z+8	; 0x08
    1bd2:	51 85       	ldd	r21, Z+9	; 0x09
    1bd4:	40 17       	cp	r20, r16
    1bd6:	51 07       	cpc	r21, r17
    1bd8:	d9 f4       	brne	.+54     	; 0x1c10 <removeEntryFromTimerQueue+0xa4>
			if(DEBUGGING){
    1bda:	80 91 fc 03 	lds	r24, 0x03FC
    1bde:	80 ff       	sbrs	r24, 0
    1be0:	11 c0       	rjmp	.+34     	; 0x1c04 <removeEntryFromTimerQueue+0x98>
				char msg[100];
				sprintf(msg, "Entry sters din coada. de pe pozitia %u", i);
    1be2:	3f 93       	push	r19
    1be4:	bf 92       	push	r11
    1be6:	df 92       	push	r13
    1be8:	cf 92       	push	r12
    1bea:	ff 92       	push	r15
    1bec:	ef 92       	push	r14
    1bee:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <sprintf>
				BTTransmitStr(msg);
    1bf2:	c7 01       	movw	r24, r14
    1bf4:	0e 94 b4 01 	call	0x368	; 0x368 <BTTransmitStr>
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
			}
			shiftTimeQueue(i, "remove function"); 
    1c04:	69 e5       	ldi	r22, 0x59	; 89
    1c06:	73 e0       	ldi	r23, 0x03	; 3
    1c08:	8b 2d       	mov	r24, r11
    1c0a:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <shiftTimeQueue>
			i--;
    1c0e:	ba 94       	dec	r11
	}
	sei();
}
void removeEntryFromTimerQueue(uint8_t (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
    1c10:	b3 94       	inc	r11
    1c12:	80 91 34 05 	lds	r24, 0x0534
    1c16:	b8 16       	cp	r11, r24
    1c18:	58 f2       	brcs	.-106    	; 0x1bb0 <removeEntryFromTimerQueue+0x44>
			}
			shiftTimeQueue(i, "remove function"); 
			i--;
		}
	}
}
    1c1a:	cc 59       	subi	r28, 0x9C	; 156
    1c1c:	df 4f       	sbci	r29, 0xFF	; 255
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	f8 94       	cli
    1c22:	de bf       	out	0x3e, r29	; 62
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	cd bf       	out	0x3d, r28	; 61
    1c28:	df 91       	pop	r29
    1c2a:	cf 91       	pop	r28
    1c2c:	1f 91       	pop	r17
    1c2e:	0f 91       	pop	r16
    1c30:	ff 90       	pop	r15
    1c32:	ef 90       	pop	r14
    1c34:	df 90       	pop	r13
    1c36:	cf 90       	pop	r12
    1c38:	bf 90       	pop	r11
    1c3a:	08 95       	ret

00001c3c <checkTimeQueue>:
	}
}

//se apeleaza din main loop
//verifica daca sunt functii care trebuie apelate (daca delay-ul lor a ajuns la 0)
void checkTimeQueue(void){
    1c3c:	1f 93       	push	r17
    1c3e:	cf 93       	push	r28
    1c40:	df 93       	push	r29
	cli();
    1c42:	f8 94       	cli
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
    1c44:	80 91 34 05 	lds	r24, 0x0534
    1c48:	88 23       	and	r24, r24
    1c4a:	09 f4       	brne	.+2      	; 0x1c4e <checkTimeQueue+0x12>
    1c4c:	91 c0       	rjmp	.+290    	; 0x1d70 <checkTimeQueue+0x134>
    1c4e:	10 e0       	ldi	r17, 0x00	; 0
		if(TimerQueue[i].pointerFct != NULL){
    1c50:	c1 2f       	mov	r28, r17
    1c52:	d0 e0       	ldi	r29, 0x00	; 0
    1c54:	fe 01       	movw	r30, r28
    1c56:	ee 0f       	add	r30, r30
    1c58:	ff 1f       	adc	r31, r31
    1c5a:	ce 01       	movw	r24, r28
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	88 0f       	add	r24, r24
    1c62:	99 1f       	adc	r25, r25
    1c64:	88 0f       	add	r24, r24
    1c66:	99 1f       	adc	r25, r25
    1c68:	e8 0f       	add	r30, r24
    1c6a:	f9 1f       	adc	r31, r25
    1c6c:	ee 59       	subi	r30, 0x9E	; 158
    1c6e:	fb 4f       	sbci	r31, 0xFB	; 251
    1c70:	20 85       	ldd	r18, Z+8	; 0x08
    1c72:	31 85       	ldd	r19, Z+9	; 0x09
    1c74:	23 2b       	or	r18, r19
    1c76:	09 f4       	brne	.+2      	; 0x1c7a <checkTimeQueue+0x3e>
    1c78:	75 c0       	rjmp	.+234    	; 0x1d64 <checkTimeQueue+0x128>
			if(TimerQueue[i].delay == 0){
    1c7a:	ce 01       	movw	r24, r28
    1c7c:	88 0f       	add	r24, r24
    1c7e:	99 1f       	adc	r25, r25
    1c80:	88 0f       	add	r24, r24
    1c82:	99 1f       	adc	r25, r25
    1c84:	88 0f       	add	r24, r24
    1c86:	99 1f       	adc	r25, r25
    1c88:	fe 01       	movw	r30, r28
    1c8a:	ee 0f       	add	r30, r30
    1c8c:	ff 1f       	adc	r31, r31
    1c8e:	e8 0f       	add	r30, r24
    1c90:	f9 1f       	adc	r31, r25
    1c92:	ee 59       	subi	r30, 0x9E	; 158
    1c94:	fb 4f       	sbci	r31, 0xFB	; 251
    1c96:	40 81       	ld	r20, Z
    1c98:	51 81       	ldd	r21, Z+1	; 0x01
    1c9a:	62 81       	ldd	r22, Z+2	; 0x02
    1c9c:	73 81       	ldd	r23, Z+3	; 0x03
    1c9e:	45 2b       	or	r20, r21
    1ca0:	46 2b       	or	r20, r22
    1ca2:	47 2b       	or	r20, r23
    1ca4:	09 f0       	breq	.+2      	; 0x1ca8 <checkTimeQueue+0x6c>
    1ca6:	5e c0       	rjmp	.+188    	; 0x1d64 <checkTimeQueue+0x128>
				if(TimerQueue[i].pointerFct()){
    1ca8:	ce 01       	movw	r24, r28
    1caa:	88 0f       	add	r24, r24
    1cac:	99 1f       	adc	r25, r25
    1cae:	88 0f       	add	r24, r24
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	ee 0f       	add	r30, r30
    1cba:	ff 1f       	adc	r31, r31
    1cbc:	e8 0f       	add	r30, r24
    1cbe:	f9 1f       	adc	r31, r25
    1cc0:	ee 59       	subi	r30, 0x9E	; 158
    1cc2:	fb 4f       	sbci	r31, 0xFB	; 251
    1cc4:	00 84       	ldd	r0, Z+8	; 0x08
    1cc6:	f1 85       	ldd	r31, Z+9	; 0x09
    1cc8:	e0 2d       	mov	r30, r0
    1cca:	09 95       	icall
    1ccc:	88 23       	and	r24, r24
    1cce:	b1 f0       	breq	.+44     	; 0x1cfc <checkTimeQueue+0xc0>
					TimerQueue[i].pointerFct = NULL;
    1cd0:	ce 01       	movw	r24, r28
    1cd2:	88 0f       	add	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	cc 0f       	add	r28, r28
    1cd8:	dd 1f       	adc	r29, r29
    1cda:	cc 0f       	add	r28, r28
    1cdc:	dd 1f       	adc	r29, r29
    1cde:	cc 0f       	add	r28, r28
    1ce0:	dd 1f       	adc	r29, r29
    1ce2:	c8 0f       	add	r28, r24
    1ce4:	d9 1f       	adc	r29, r25
    1ce6:	ce 59       	subi	r28, 0x9E	; 158
    1ce8:	db 4f       	sbci	r29, 0xFB	; 251
    1cea:	19 86       	std	Y+9, r1	; 0x09
    1cec:	18 86       	std	Y+8, r1	; 0x08
					shiftTimeQueue(i, "returned true");
    1cee:	69 e6       	ldi	r22, 0x69	; 105
    1cf0:	73 e0       	ldi	r23, 0x03	; 3
    1cf2:	81 2f       	mov	r24, r17
    1cf4:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <shiftTimeQueue>
					i--;
    1cf8:	11 50       	subi	r17, 0x01	; 1
    1cfa:	34 c0       	rjmp	.+104    	; 0x1d64 <checkTimeQueue+0x128>
				}
				else
					if(TimerQueue[i].repeatDelay)
    1cfc:	ce 01       	movw	r24, r28
    1cfe:	88 0f       	add	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	88 0f       	add	r24, r24
    1d04:	99 1f       	adc	r25, r25
    1d06:	88 0f       	add	r24, r24
    1d08:	99 1f       	adc	r25, r25
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	ee 0f       	add	r30, r30
    1d0e:	ff 1f       	adc	r31, r31
    1d10:	e8 0f       	add	r30, r24
    1d12:	f9 1f       	adc	r31, r25
    1d14:	ee 59       	subi	r30, 0x9E	; 158
    1d16:	fb 4f       	sbci	r31, 0xFB	; 251
    1d18:	44 81       	ldd	r20, Z+4	; 0x04
    1d1a:	55 81       	ldd	r21, Z+5	; 0x05
    1d1c:	66 81       	ldd	r22, Z+6	; 0x06
    1d1e:	77 81       	ldd	r23, Z+7	; 0x07
    1d20:	45 2b       	or	r20, r21
    1d22:	46 2b       	or	r20, r22
    1d24:	47 2b       	or	r20, r23
    1d26:	49 f0       	breq	.+18     	; 0x1d3a <checkTimeQueue+0xfe>
						TimerQueue[i].delay = TimerQueue[i].repeatDelay;
    1d28:	44 81       	ldd	r20, Z+4	; 0x04
    1d2a:	55 81       	ldd	r21, Z+5	; 0x05
    1d2c:	66 81       	ldd	r22, Z+6	; 0x06
    1d2e:	77 81       	ldd	r23, Z+7	; 0x07
    1d30:	40 83       	st	Z, r20
    1d32:	51 83       	std	Z+1, r21	; 0x01
    1d34:	62 83       	std	Z+2, r22	; 0x02
    1d36:	73 83       	std	Z+3, r23	; 0x03
    1d38:	15 c0       	rjmp	.+42     	; 0x1d64 <checkTimeQueue+0x128>
					else{
						TimerQueue[i].pointerFct = NULL;
    1d3a:	ce 01       	movw	r24, r28
    1d3c:	88 0f       	add	r24, r24
    1d3e:	99 1f       	adc	r25, r25
    1d40:	cc 0f       	add	r28, r28
    1d42:	dd 1f       	adc	r29, r29
    1d44:	cc 0f       	add	r28, r28
    1d46:	dd 1f       	adc	r29, r29
    1d48:	cc 0f       	add	r28, r28
    1d4a:	dd 1f       	adc	r29, r29
    1d4c:	c8 0f       	add	r28, r24
    1d4e:	d9 1f       	adc	r29, r25
    1d50:	ce 59       	subi	r28, 0x9E	; 158
    1d52:	db 4f       	sbci	r29, 0xFB	; 251
    1d54:	19 86       	std	Y+9, r1	; 0x09
    1d56:	18 86       	std	Y+8, r1	; 0x08
						shiftTimeQueue(i, "not periodic");
    1d58:	67 e7       	ldi	r22, 0x77	; 119
    1d5a:	73 e0       	ldi	r23, 0x03	; 3
    1d5c:	81 2f       	mov	r24, r17
    1d5e:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <shiftTimeQueue>
						i--;
    1d62:	11 50       	subi	r17, 0x01	; 1
//se apeleaza din main loop
//verifica daca sunt functii care trebuie apelate (daca delay-ul lor a ajuns la 0)
void checkTimeQueue(void){
	cli();
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
    1d64:	1f 5f       	subi	r17, 0xFF	; 255
    1d66:	80 91 34 05 	lds	r24, 0x0534
    1d6a:	18 17       	cp	r17, r24
    1d6c:	08 f4       	brcc	.+2      	; 0x1d70 <checkTimeQueue+0x134>
    1d6e:	70 cf       	rjmp	.-288    	; 0x1c50 <checkTimeQueue+0x14>
						i--;
					}
			}
		}
	}
	sei();
    1d70:	78 94       	sei
}
    1d72:	df 91       	pop	r29
    1d74:	cf 91       	pop	r28
    1d76:	1f 91       	pop	r17
    1d78:	08 95       	ret

00001d7a <resetTimerQueue>:
	for(; i<TimingQueueTop; i++)
		TimerQueue[i]=TimerQueue[i+1];
	TimingQueueTop--;
}

void resetTimerQueue(uint8_t keepReadSensors){
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	for(i=1;i<TimingQueueSize;i++)
		TimerQueue[i].pointerFct = NULL;
    1d7e:	fc 01       	movw	r30, r24
    1d80:	ee 0f       	add	r30, r30
    1d82:	ff 1f       	adc	r31, r31
    1d84:	9c 01       	movw	r18, r24
    1d86:	22 0f       	add	r18, r18
    1d88:	33 1f       	adc	r19, r19
    1d8a:	22 0f       	add	r18, r18
    1d8c:	33 1f       	adc	r19, r19
    1d8e:	22 0f       	add	r18, r18
    1d90:	33 1f       	adc	r19, r19
    1d92:	e2 0f       	add	r30, r18
    1d94:	f3 1f       	adc	r31, r19
    1d96:	ee 59       	subi	r30, 0x9E	; 158
    1d98:	fb 4f       	sbci	r31, 0xFB	; 251
    1d9a:	11 86       	std	Z+9, r1	; 0x09
    1d9c:	10 86       	std	Z+8, r1	; 0x08
    1d9e:	01 96       	adiw	r24, 0x01	; 1
	TimingQueueTop--;
}

void resetTimerQueue(uint8_t keepReadSensors){
	uint8_t i;
	for(i=1;i<TimingQueueSize;i++)
    1da0:	84 31       	cpi	r24, 0x14	; 20
    1da2:	91 05       	cpc	r25, r1
    1da4:	61 f7       	brne	.-40     	; 0x1d7e <resetTimerQueue+0x4>
		TimerQueue[i].pointerFct = NULL;
	TimingQueueTop = 1;
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	80 93 34 05 	sts	0x0534, r24
    1dac:	08 95       	ret

00001dae <stateMachineTest1>:
uint8_t stareSMT1 = 0;
void initAndStartStateMachineTest1(){
	stareSMT1 = 0;
	addEntryToTimerQueue(&stateMachineTest1, 100UL * 1000UL, Periodic);
}
uint8_t stateMachineTest1(){
    1dae:	8f 92       	push	r8
    1db0:	9f 92       	push	r9
    1db2:	af 92       	push	r10
    1db4:	bf 92       	push	r11
    1db6:	cf 92       	push	r12
    1db8:	df 92       	push	r13
    1dba:	ef 92       	push	r14
    1dbc:	ff 92       	push	r15
    1dbe:	0f 93       	push	r16
    1dc0:	1f 93       	push	r17
    1dc2:	cf 93       	push	r28
    1dc4:	df 93       	push	r29
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    1dca:	c4 56       	subi	r28, 0x64	; 100
    1dcc:	d1 09       	sbc	r29, r1
    1dce:	0f b6       	in	r0, 0x3f	; 63
    1dd0:	f8 94       	cli
    1dd2:	de bf       	out	0x3e, r29	; 62
    1dd4:	0f be       	out	0x3f, r0	; 63
    1dd6:	cd bf       	out	0x3d, r28	; 61
	uint32_t fl, fr;//, sl, sr;
	fl = getValueOfSensor(FrontLeftSensor);
    1dd8:	83 e0       	ldi	r24, 0x03	; 3
    1dda:	0e 94 b4 07 	call	0xf68	; 0xf68 <getValueOfSensor>
    1dde:	6c 01       	movw	r12, r24
    1de0:	e1 2c       	mov	r14, r1
    1de2:	f1 2c       	mov	r15, r1
	fr = getValueOfSensor(FrontRightSensor);
    1de4:	82 e0       	ldi	r24, 0x02	; 2
    1de6:	0e 94 b4 07 	call	0xf68	; 0xf68 <getValueOfSensor>
    1dea:	4c 01       	movw	r8, r24
    1dec:	a1 2c       	mov	r10, r1
    1dee:	b1 2c       	mov	r11, r1
	//sl = getValueOfSensor(SideLeftSensor);
	//sr = getValueOfSensor(SideRightSensor);
	if(DEBUGGING){
    1df0:	80 91 fc 03 	lds	r24, 0x03FC
    1df4:	80 ff       	sbrs	r24, 0
    1df6:	1b c0       	rjmp	.+54     	; 0x1e2e <stateMachineTest1+0x80>
		char bfr[100];
		sprintf(bfr, "fl:%lu  fr:%lu", fl, fr);
    1df8:	1f 92       	push	r1
    1dfa:	1f 92       	push	r1
    1dfc:	9f 92       	push	r9
    1dfe:	8f 92       	push	r8
    1e00:	1f 92       	push	r1
    1e02:	1f 92       	push	r1
    1e04:	df 92       	push	r13
    1e06:	cf 92       	push	r12
    1e08:	84 e8       	ldi	r24, 0x84	; 132
    1e0a:	93 e0       	ldi	r25, 0x03	; 3
    1e0c:	9f 93       	push	r25
    1e0e:	8f 93       	push	r24
    1e10:	8e 01       	movw	r16, r28
    1e12:	0f 5f       	subi	r16, 0xFF	; 255
    1e14:	1f 4f       	sbci	r17, 0xFF	; 255
    1e16:	1f 93       	push	r17
    1e18:	0f 93       	push	r16
    1e1a:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <sprintf>
		BTTransmitStr(bfr);
    1e1e:	c8 01       	movw	r24, r16
    1e20:	0e 94 b4 01 	call	0x368	; 0x368 <BTTransmitStr>
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	f8 94       	cli
    1e28:	de bf       	out	0x3e, r29	; 62
    1e2a:	0f be       	out	0x3f, r0	; 63
    1e2c:	cd bf       	out	0x3d, r28	; 61
	}
	
	switch(stareSMT1){
    1e2e:	80 91 fd 03 	lds	r24, 0x03FD
    1e32:	81 30       	cpi	r24, 0x01	; 1
    1e34:	69 f0       	breq	.+26     	; 0x1e50 <stateMachineTest1+0xa2>
    1e36:	18 f0       	brcs	.+6      	; 0x1e3e <stateMachineTest1+0x90>
    1e38:	82 30       	cpi	r24, 0x02	; 2
    1e3a:	f9 f0       	breq	.+62     	; 0x1e7a <stateMachineTest1+0xcc>
    1e3c:	22 c0       	rjmp	.+68     	; 0x1e82 <stateMachineTest1+0xd4>
		case 0:
			stareSMT1 = 1;
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	80 93 fd 03 	sts	0x03FD, r24
			goFront(30, 150);
    1e44:	66 e9       	ldi	r22, 0x96	; 150
    1e46:	8e e1       	ldi	r24, 0x1E	; 30
    1e48:	0e 94 03 05 	call	0xa06	; 0xa06 <goFront>
		case 2:
			stopEngines();
			return YES;		
		break;
	}
	return NO;	
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(stareSMT1){
		case 0:
			stareSMT1 = 1;
			goFront(30, 150);
		break;
    1e4e:	1e c0       	rjmp	.+60     	; 0x1e8c <stateMachineTest1+0xde>
		case 1:
			if(fl<130 && fr<130)
    1e50:	92 e8       	ldi	r25, 0x82	; 130
    1e52:	c9 16       	cp	r12, r25
    1e54:	d1 04       	cpc	r13, r1
    1e56:	e1 04       	cpc	r14, r1
    1e58:	f1 04       	cpc	r15, r1
    1e5a:	a8 f4       	brcc	.+42     	; 0x1e86 <stateMachineTest1+0xd8>
    1e5c:	82 e8       	ldi	r24, 0x82	; 130
    1e5e:	88 16       	cp	r8, r24
    1e60:	91 04       	cpc	r9, r1
    1e62:	a1 04       	cpc	r10, r1
    1e64:	b1 04       	cpc	r11, r1
    1e66:	88 f4       	brcc	.+34     	; 0x1e8a <stateMachineTest1+0xdc>
				stareSMT1 = 2,
    1e68:	82 e0       	ldi	r24, 0x02	; 2
    1e6a:	80 93 fd 03 	sts	0x03FD, r24
				goBack(1, 150);
    1e6e:	66 e9       	ldi	r22, 0x96	; 150
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	0e 94 33 05 	call	0xa66	; 0xa66 <goBack>
		case 2:
			stopEngines();
			return YES;		
		break;
	}
	return NO;	
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	09 c0       	rjmp	.+18     	; 0x1e8c <stateMachineTest1+0xde>
			if(fl<130 && fr<130)
				stareSMT1 = 2,
				goBack(1, 150);
		break;
		case 2:
			stopEngines();
    1e7a:	0e 94 85 04 	call	0x90a	; 0x90a <stopEngines>
			return YES;		
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	05 c0       	rjmp	.+10     	; 0x1e8c <stateMachineTest1+0xde>
		break;
	}
	return NO;	
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	03 c0       	rjmp	.+6      	; 0x1e8c <stateMachineTest1+0xde>
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	01 c0       	rjmp	.+2      	; 0x1e8c <stateMachineTest1+0xde>
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
}
    1e8c:	cc 59       	subi	r28, 0x9C	; 156
    1e8e:	df 4f       	sbci	r29, 0xFF	; 255
    1e90:	0f b6       	in	r0, 0x3f	; 63
    1e92:	f8 94       	cli
    1e94:	de bf       	out	0x3e, r29	; 62
    1e96:	0f be       	out	0x3f, r0	; 63
    1e98:	cd bf       	out	0x3d, r28	; 61
    1e9a:	df 91       	pop	r29
    1e9c:	cf 91       	pop	r28
    1e9e:	1f 91       	pop	r17
    1ea0:	0f 91       	pop	r16
    1ea2:	ff 90       	pop	r15
    1ea4:	ef 90       	pop	r14
    1ea6:	df 90       	pop	r13
    1ea8:	cf 90       	pop	r12
    1eaa:	bf 90       	pop	r11
    1eac:	af 90       	pop	r10
    1eae:	9f 90       	pop	r9
    1eb0:	8f 90       	pop	r8
    1eb2:	08 95       	ret

00001eb4 <SMFParcurgereDistanta>:
	vitezaCuCareParcurg = viteza;
	addEntryIfNotExists(&SMFParcurgereDistanta, 10*1000UL, Periodic);
}

extern volatile uint32_t deciSecondsPassed;
uint8_t SMFParcurgereDistanta(){
    1eb4:	0f 93       	push	r16
    1eb6:	1f 93       	push	r17
    1eb8:	cf 93       	push	r28
    1eba:	df 93       	push	r29
    1ebc:	cd b7       	in	r28, 0x3d	; 61
    1ebe:	de b7       	in	r29, 0x3e	; 62
    1ec0:	c4 56       	subi	r28, 0x64	; 100
    1ec2:	d1 09       	sbc	r29, r1
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	f8 94       	cli
    1ec8:	de bf       	out	0x3e, r29	; 62
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	cd bf       	out	0x3d, r28	; 61
	//char buffer[100];
	//sprintf(buffer, "dp: %lu  time:%lu", DISTANTA_PARCURSA, deciSecondsPassed);
	//BTTransmitStr(buffer);
	
	switch(starePD){
    1ece:	80 91 a0 05 	lds	r24, 0x05A0
    1ed2:	81 30       	cpi	r24, 0x01	; 1
    1ed4:	71 f0       	breq	.+28     	; 0x1ef2 <SMFParcurgereDistanta+0x3e>
    1ed6:	20 f0       	brcs	.+8      	; 0x1ee0 <SMFParcurgereDistanta+0x2c>
    1ed8:	82 30       	cpi	r24, 0x02	; 2
    1eda:	09 f4       	brne	.+2      	; 0x1ede <SMFParcurgereDistanta+0x2a>
    1edc:	58 c0       	rjmp	.+176    	; 0x1f8e <SMFParcurgereDistanta+0xda>
    1ede:	ba c0       	rjmp	.+372    	; 0x2054 <SMFParcurgereDistanta+0x1a0>
		case 0:
			goFront(100, vitezaCuCareParcurg);
    1ee0:	60 91 af 05 	lds	r22, 0x05AF
    1ee4:	84 e6       	ldi	r24, 0x64	; 100
    1ee6:	0e 94 03 05 	call	0xa06	; 0xa06 <goFront>
			starePD = 1;
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	80 93 a0 05 	sts	0x05A0, r24
		break;
    1ef0:	af c0       	rjmp	.+350    	; 0x2050 <SMFParcurgereDistanta+0x19c>
		case 1:
			if(DISTANTA_PARCURSA > distantaDeParcurs){
    1ef2:	80 91 0c 04 	lds	r24, 0x040C
    1ef6:	90 91 0d 04 	lds	r25, 0x040D
    1efa:	a0 91 0e 04 	lds	r26, 0x040E
    1efe:	b0 91 0f 04 	lds	r27, 0x040F
    1f02:	40 91 12 04 	lds	r20, 0x0412
    1f06:	50 91 13 04 	lds	r21, 0x0413
    1f0a:	60 91 14 04 	lds	r22, 0x0414
    1f0e:	70 91 15 04 	lds	r23, 0x0415
    1f12:	84 0f       	add	r24, r20
    1f14:	95 1f       	adc	r25, r21
    1f16:	a6 1f       	adc	r26, r22
    1f18:	b7 1f       	adc	r27, r23
    1f1a:	b6 95       	lsr	r27
    1f1c:	a7 95       	ror	r26
    1f1e:	97 95       	ror	r25
    1f20:	87 95       	ror	r24
    1f22:	b6 95       	lsr	r27
    1f24:	a7 95       	ror	r26
    1f26:	97 95       	ror	r25
    1f28:	87 95       	ror	r24
    1f2a:	ac 01       	movw	r20, r24
    1f2c:	bd 01       	movw	r22, r26
    1f2e:	44 0f       	add	r20, r20
    1f30:	55 1f       	adc	r21, r21
    1f32:	66 1f       	adc	r22, r22
    1f34:	77 1f       	adc	r23, r23
    1f36:	44 0f       	add	r20, r20
    1f38:	55 1f       	adc	r21, r21
    1f3a:	66 1f       	adc	r22, r22
    1f3c:	77 1f       	adc	r23, r23
    1f3e:	8a 01       	movw	r16, r20
    1f40:	9b 01       	movw	r18, r22
    1f42:	00 0f       	add	r16, r16
    1f44:	11 1f       	adc	r17, r17
    1f46:	22 1f       	adc	r18, r18
    1f48:	33 1f       	adc	r19, r19
    1f4a:	00 0f       	add	r16, r16
    1f4c:	11 1f       	adc	r17, r17
    1f4e:	22 1f       	adc	r18, r18
    1f50:	33 1f       	adc	r19, r19
    1f52:	40 0f       	add	r20, r16
    1f54:	51 1f       	adc	r21, r17
    1f56:	62 1f       	adc	r22, r18
    1f58:	73 1f       	adc	r23, r19
    1f5a:	84 0f       	add	r24, r20
    1f5c:	95 1f       	adc	r25, r21
    1f5e:	a6 1f       	adc	r26, r22
    1f60:	b7 1f       	adc	r27, r23
    1f62:	00 91 a2 05 	lds	r16, 0x05A2
    1f66:	10 91 a3 05 	lds	r17, 0x05A3
    1f6a:	20 91 a4 05 	lds	r18, 0x05A4
    1f6e:	30 91 a5 05 	lds	r19, 0x05A5
    1f72:	08 17       	cp	r16, r24
    1f74:	19 07       	cpc	r17, r25
    1f76:	2a 07       	cpc	r18, r26
    1f78:	3b 07       	cpc	r19, r27
    1f7a:	08 f0       	brcs	.+2      	; 0x1f7e <SMFParcurgereDistanta+0xca>
    1f7c:	69 c0       	rjmp	.+210    	; 0x2050 <SMFParcurgereDistanta+0x19c>
				goBack(1, 130);
    1f7e:	62 e8       	ldi	r22, 0x82	; 130
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	0e 94 33 05 	call	0xa66	; 0xa66 <goBack>
				starePD = 2;
    1f86:	82 e0       	ldi	r24, 0x02	; 2
    1f88:	80 93 a0 05 	sts	0x05A0, r24
    1f8c:	61 c0       	rjmp	.+194    	; 0x2050 <SMFParcurgereDistanta+0x19c>
			}
		break;
		case 2:
			stopEngines();
    1f8e:	0e 94 85 04 	call	0x90a	; 0x90a <stopEngines>
			char buffer[100];
			sprintf(buffer, "dp: %lu  time:%lu", DISTANTA_PARCURSA, deciSecondsPassed);
    1f92:	40 91 f6 03 	lds	r20, 0x03F6
    1f96:	50 91 f7 03 	lds	r21, 0x03F7
    1f9a:	60 91 f8 03 	lds	r22, 0x03F8
    1f9e:	70 91 f9 03 	lds	r23, 0x03F9
    1fa2:	80 91 0c 04 	lds	r24, 0x040C
    1fa6:	90 91 0d 04 	lds	r25, 0x040D
    1faa:	a0 91 0e 04 	lds	r26, 0x040E
    1fae:	b0 91 0f 04 	lds	r27, 0x040F
    1fb2:	00 91 12 04 	lds	r16, 0x0412
    1fb6:	10 91 13 04 	lds	r17, 0x0413
    1fba:	20 91 14 04 	lds	r18, 0x0414
    1fbe:	30 91 15 04 	lds	r19, 0x0415
    1fc2:	7f 93       	push	r23
    1fc4:	6f 93       	push	r22
    1fc6:	5f 93       	push	r21
    1fc8:	4f 93       	push	r20
    1fca:	b9 01       	movw	r22, r18
    1fcc:	a8 01       	movw	r20, r16
    1fce:	48 0f       	add	r20, r24
    1fd0:	59 1f       	adc	r21, r25
    1fd2:	6a 1f       	adc	r22, r26
    1fd4:	7b 1f       	adc	r23, r27
    1fd6:	76 95       	lsr	r23
    1fd8:	67 95       	ror	r22
    1fda:	57 95       	ror	r21
    1fdc:	47 95       	ror	r20
    1fde:	76 95       	lsr	r23
    1fe0:	67 95       	ror	r22
    1fe2:	57 95       	ror	r21
    1fe4:	47 95       	ror	r20
    1fe6:	db 01       	movw	r26, r22
    1fe8:	ca 01       	movw	r24, r20
    1fea:	88 0f       	add	r24, r24
    1fec:	99 1f       	adc	r25, r25
    1fee:	aa 1f       	adc	r26, r26
    1ff0:	bb 1f       	adc	r27, r27
    1ff2:	88 0f       	add	r24, r24
    1ff4:	99 1f       	adc	r25, r25
    1ff6:	aa 1f       	adc	r26, r26
    1ff8:	bb 1f       	adc	r27, r27
    1ffa:	8c 01       	movw	r16, r24
    1ffc:	9d 01       	movw	r18, r26
    1ffe:	00 0f       	add	r16, r16
    2000:	11 1f       	adc	r17, r17
    2002:	22 1f       	adc	r18, r18
    2004:	33 1f       	adc	r19, r19
    2006:	00 0f       	add	r16, r16
    2008:	11 1f       	adc	r17, r17
    200a:	22 1f       	adc	r18, r18
    200c:	33 1f       	adc	r19, r19
    200e:	80 0f       	add	r24, r16
    2010:	91 1f       	adc	r25, r17
    2012:	a2 1f       	adc	r26, r18
    2014:	b3 1f       	adc	r27, r19
    2016:	84 0f       	add	r24, r20
    2018:	95 1f       	adc	r25, r21
    201a:	a6 1f       	adc	r26, r22
    201c:	b7 1f       	adc	r27, r23
    201e:	bf 93       	push	r27
    2020:	af 93       	push	r26
    2022:	9f 93       	push	r25
    2024:	8f 93       	push	r24
    2026:	83 e9       	ldi	r24, 0x93	; 147
    2028:	93 e0       	ldi	r25, 0x03	; 3
    202a:	9f 93       	push	r25
    202c:	8f 93       	push	r24
    202e:	8e 01       	movw	r16, r28
    2030:	0f 5f       	subi	r16, 0xFF	; 255
    2032:	1f 4f       	sbci	r17, 0xFF	; 255
    2034:	1f 93       	push	r17
    2036:	0f 93       	push	r16
    2038:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <sprintf>
			BTTransmitStr(buffer);
    203c:	c8 01       	movw	r24, r16
    203e:	0e 94 b4 01 	call	0x368	; 0x368 <BTTransmitStr>
			return YES;
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	f8 94       	cli
    2046:	de bf       	out	0x3e, r29	; 62
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	cd bf       	out	0x3d, r28	; 61
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	03 c0       	rjmp	.+6      	; 0x2056 <SMFParcurgereDistanta+0x1a2>
		break;
	}	
	return NO;
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	01 c0       	rjmp	.+2      	; 0x2056 <SMFParcurgereDistanta+0x1a2>
    2054:	80 e0       	ldi	r24, 0x00	; 0
}
    2056:	cc 59       	subi	r28, 0x9C	; 156
    2058:	df 4f       	sbci	r29, 0xFF	; 255
    205a:	0f b6       	in	r0, 0x3f	; 63
    205c:	f8 94       	cli
    205e:	de bf       	out	0x3e, r29	; 62
    2060:	0f be       	out	0x3f, r0	; 63
    2062:	cd bf       	out	0x3d, r28	; 61
    2064:	df 91       	pop	r29
    2066:	cf 91       	pop	r28
    2068:	1f 91       	pop	r17
    206a:	0f 91       	pop	r16
    206c:	08 95       	ret

0000206e <ledAction>:
	//BTTransmitStr(msg);
	
	a1 = (a1!=0);
	a2 = (a2!=0);
	
	if(a1)
    206e:	88 23       	and	r24, r24
    2070:	11 f0       	breq	.+4      	; 0x2076 <ledAction+0x8>
		PORTA |= _BV(PINA5);
    2072:	15 9a       	sbi	0x02, 5	; 2
    2074:	01 c0       	rjmp	.+2      	; 0x2078 <ledAction+0xa>
	else
		PORTA &= ~_BV(PINA5);
    2076:	15 98       	cbi	0x02, 5	; 2
	if(a2)
    2078:	66 23       	and	r22, r22
    207a:	11 f0       	breq	.+4      	; 0x2080 <ledAction+0x12>
		PORTA |= _BV(PINA4);
    207c:	14 9a       	sbi	0x02, 4	; 2
    207e:	08 95       	ret
	else
		PORTA &= ~_BV(PINA4);
    2080:	14 98       	cbi	0x02, 4	; 2
    2082:	08 95       	ret

00002084 <initAndStartStateMachineTest1>:
extern uint32_t time;

uint8_t stateMachineTest1();
uint8_t stareSMT1 = 0;
void initAndStartStateMachineTest1(){
	stareSMT1 = 0;
    2084:	10 92 fd 03 	sts	0x03FD, r1
	addEntryToTimerQueue(&stateMachineTest1, 100UL * 1000UL, Periodic);
    2088:	21 e0       	ldi	r18, 0x01	; 1
    208a:	40 ea       	ldi	r20, 0xA0	; 160
    208c:	56 e8       	ldi	r21, 0x86	; 134
    208e:	61 e0       	ldi	r22, 0x01	; 1
    2090:	70 e0       	ldi	r23, 0x00	; 0
    2092:	87 ed       	ldi	r24, 0xD7	; 215
    2094:	9e e0       	ldi	r25, 0x0E	; 14
    2096:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <addEntryToTimerQueue>
    209a:	08 95       	ret

0000209c <initParcurgereDistanta>:

uint8_t SMFParcurgereDistanta();
uint8_t starePD;
uint32_t distantaDeParcurs;
uint8_t vitezaCuCareParcurg;
void initParcurgereDistanta(uint32_t distanta, uint8_t viteza){
    209c:	8f 92       	push	r8
    209e:	9f 92       	push	r9
    20a0:	af 92       	push	r10
    20a2:	bf 92       	push	r11
    20a4:	cf 92       	push	r12
    20a6:	df 92       	push	r13
    20a8:	ef 92       	push	r14
    20aa:	ff 92       	push	r15
    20ac:	0f 93       	push	r16
    20ae:	1f 93       	push	r17
	starePD = 0;
    20b0:	10 92 a0 05 	sts	0x05A0, r1
	distantaDeParcurs = distanta + DISTANTA_PARCURSA;
    20b4:	c0 90 0c 04 	lds	r12, 0x040C
    20b8:	d0 90 0d 04 	lds	r13, 0x040D
    20bc:	e0 90 0e 04 	lds	r14, 0x040E
    20c0:	f0 90 0f 04 	lds	r15, 0x040F
    20c4:	00 91 12 04 	lds	r16, 0x0412
    20c8:	10 91 13 04 	lds	r17, 0x0413
    20cc:	20 91 14 04 	lds	r18, 0x0414
    20d0:	30 91 15 04 	lds	r19, 0x0415
    20d4:	0c 0d       	add	r16, r12
    20d6:	1d 1d       	adc	r17, r13
    20d8:	2e 1d       	adc	r18, r14
    20da:	3f 1d       	adc	r19, r15
    20dc:	68 01       	movw	r12, r16
    20de:	79 01       	movw	r14, r18
    20e0:	f6 94       	lsr	r15
    20e2:	e7 94       	ror	r14
    20e4:	d7 94       	ror	r13
    20e6:	c7 94       	ror	r12
    20e8:	f6 94       	lsr	r15
    20ea:	e7 94       	ror	r14
    20ec:	d7 94       	ror	r13
    20ee:	c7 94       	ror	r12
    20f0:	97 01       	movw	r18, r14
    20f2:	86 01       	movw	r16, r12
    20f4:	00 0f       	add	r16, r16
    20f6:	11 1f       	adc	r17, r17
    20f8:	22 1f       	adc	r18, r18
    20fa:	33 1f       	adc	r19, r19
    20fc:	00 0f       	add	r16, r16
    20fe:	11 1f       	adc	r17, r17
    2100:	22 1f       	adc	r18, r18
    2102:	33 1f       	adc	r19, r19
    2104:	48 01       	movw	r8, r16
    2106:	59 01       	movw	r10, r18
    2108:	88 0c       	add	r8, r8
    210a:	99 1c       	adc	r9, r9
    210c:	aa 1c       	adc	r10, r10
    210e:	bb 1c       	adc	r11, r11
    2110:	88 0c       	add	r8, r8
    2112:	99 1c       	adc	r9, r9
    2114:	aa 1c       	adc	r10, r10
    2116:	bb 1c       	adc	r11, r11
    2118:	08 0d       	add	r16, r8
    211a:	19 1d       	adc	r17, r9
    211c:	2a 1d       	adc	r18, r10
    211e:	3b 1d       	adc	r19, r11
    2120:	0c 0d       	add	r16, r12
    2122:	1d 1d       	adc	r17, r13
    2124:	2e 1d       	adc	r18, r14
    2126:	3f 1d       	adc	r19, r15
    2128:	6b 01       	movw	r12, r22
    212a:	7c 01       	movw	r14, r24
    212c:	c0 0e       	add	r12, r16
    212e:	d1 1e       	adc	r13, r17
    2130:	e2 1e       	adc	r14, r18
    2132:	f3 1e       	adc	r15, r19
    2134:	c0 92 a2 05 	sts	0x05A2, r12
    2138:	d0 92 a3 05 	sts	0x05A3, r13
    213c:	e0 92 a4 05 	sts	0x05A4, r14
    2140:	f0 92 a5 05 	sts	0x05A5, r15
	vitezaCuCareParcurg = viteza;
    2144:	40 93 af 05 	sts	0x05AF, r20
	addEntryIfNotExists(&SMFParcurgereDistanta, 10*1000UL, Periodic);
    2148:	21 e0       	ldi	r18, 0x01	; 1
    214a:	40 e1       	ldi	r20, 0x10	; 16
    214c:	57 e2       	ldi	r21, 0x27	; 39
    214e:	60 e0       	ldi	r22, 0x00	; 0
    2150:	70 e0       	ldi	r23, 0x00	; 0
    2152:	8a e5       	ldi	r24, 0x5A	; 90
    2154:	9f e0       	ldi	r25, 0x0F	; 15
    2156:	0e 94 22 0c 	call	0x1844	; 0x1844 <addEntryIfNotExists>
}
    215a:	1f 91       	pop	r17
    215c:	0f 91       	pop	r16
    215e:	ff 90       	pop	r15
    2160:	ef 90       	pop	r14
    2162:	df 90       	pop	r13
    2164:	cf 90       	pop	r12
    2166:	bf 90       	pop	r11
    2168:	af 90       	pop	r10
    216a:	9f 90       	pop	r9
    216c:	8f 90       	pop	r8
    216e:	08 95       	ret

00002170 <isParalel>:
	Departat,
	PreaDepartat
}ParallelResult;

ParallelResult isParalel(uint32_t sideValue, uint32_t frontValue, uint32_t sensorOffset, uint32_t epsilon, uint32_t warningEpsilon)
{
    2170:	4f 92       	push	r4
    2172:	5f 92       	push	r5
    2174:	6f 92       	push	r6
    2176:	7f 92       	push	r7
    2178:	af 92       	push	r10
    217a:	bf 92       	push	r11
    217c:	cf 92       	push	r12
    217e:	df 92       	push	r13
    2180:	ef 92       	push	r14
    2182:	ff 92       	push	r15
    2184:	0f 93       	push	r16
    2186:	1f 93       	push	r17
    2188:	cf 93       	push	r28
    218a:	df 93       	push	r29
    218c:	00 d0       	rcall	.+0      	; 0x218e <isParalel+0x1e>
    218e:	00 d0       	rcall	.+0      	; 0x2190 <isParalel+0x20>
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	2b 01       	movw	r4, r22
    2196:	3c 01       	movw	r6, r24
    2198:	29 83       	std	Y+1, r18	; 0x01
    219a:	3a 83       	std	Y+2, r19	; 0x02
    219c:	4b 83       	std	Y+3, r20	; 0x03
    219e:	5c 83       	std	Y+4, r21	; 0x04
	uint32_t sideCalculated = (frontValue - (sensorOffset * (1<<9) / 362)) * 362 / (1<<9);
    21a0:	c8 01       	movw	r24, r16
    21a2:	b7 01       	movw	r22, r14
    21a4:	05 2e       	mov	r0, r21
    21a6:	59 e0       	ldi	r21, 0x09	; 9
    21a8:	66 0f       	add	r22, r22
    21aa:	77 1f       	adc	r23, r23
    21ac:	88 1f       	adc	r24, r24
    21ae:	99 1f       	adc	r25, r25
    21b0:	5a 95       	dec	r21
    21b2:	d1 f7       	brne	.-12     	; 0x21a8 <isParalel+0x38>
    21b4:	50 2d       	mov	r21, r0
    21b6:	2a e6       	ldi	r18, 0x6A	; 106
    21b8:	31 e0       	ldi	r19, 0x01	; 1
    21ba:	40 e0       	ldi	r20, 0x00	; 0
    21bc:	50 e0       	ldi	r21, 0x00	; 0
    21be:	0e 94 6f 16 	call	0x2cde	; 0x2cde <__udivmodsi4>
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
    21c4:	9a 81       	ldd	r25, Y+2	; 0x02
    21c6:	ab 81       	ldd	r26, Y+3	; 0x03
    21c8:	bc 81       	ldd	r27, Y+4	; 0x04
    21ca:	82 1b       	sub	r24, r18
    21cc:	93 0b       	sbc	r25, r19
    21ce:	a4 0b       	sbc	r26, r20
    21d0:	b5 0b       	sbc	r27, r21
    21d2:	9c 01       	movw	r18, r24
    21d4:	ad 01       	movw	r20, r26
    21d6:	aa e6       	ldi	r26, 0x6A	; 106
    21d8:	b1 e0       	ldi	r27, 0x01	; 1
    21da:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <__muluhisi3>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	07 2e       	mov	r0, r23
    21e4:	79 e0       	ldi	r23, 0x09	; 9
    21e6:	b6 95       	lsr	r27
    21e8:	a7 95       	ror	r26
    21ea:	97 95       	ror	r25
    21ec:	87 95       	ror	r24
    21ee:	7a 95       	dec	r23
    21f0:	d1 f7       	brne	.-12     	; 0x21e6 <isParalel+0x76>
    21f2:	70 2d       	mov	r23, r0
	
	if(sideCalculated > sideValue)
    21f4:	48 16       	cp	r4, r24
    21f6:	59 06       	cpc	r5, r25
    21f8:	6a 06       	cpc	r6, r26
    21fa:	7b 06       	cpc	r7, r27
    21fc:	a0 f4       	brcc	.+40     	; 0x2226 <isParalel+0xb6>
		if(sideCalculated - sideValue > warningEpsilon)
    21fe:	84 19       	sub	r24, r4
    2200:	95 09       	sbc	r25, r5
    2202:	a6 09       	sbc	r26, r6
    2204:	b7 09       	sbc	r27, r7
    2206:	2d 89       	ldd	r18, Y+21	; 0x15
    2208:	3e 89       	ldd	r19, Y+22	; 0x16
    220a:	4f 89       	ldd	r20, Y+23	; 0x17
    220c:	58 8d       	ldd	r21, Y+24	; 0x18
    220e:	28 17       	cp	r18, r24
    2210:	39 07       	cpc	r19, r25
    2212:	4a 07       	cpc	r20, r26
    2214:	5b 07       	cpc	r21, r27
    2216:	d8 f0       	brcs	.+54     	; 0x224e <isParalel+0xde>
			return PreaDepartat;
		else if(sideCalculated - sideValue > epsilon)
    2218:	a8 16       	cp	r10, r24
    221a:	b9 06       	cpc	r11, r25
    221c:	ca 06       	cpc	r12, r26
    221e:	db 06       	cpc	r13, r27
    2220:	c0 f4       	brcc	.+48     	; 0x2252 <isParalel+0xe2>
			return Departat;
    2222:	83 e0       	ldi	r24, 0x03	; 3
    2224:	1b c0       	rjmp	.+54     	; 0x225c <isParalel+0xec>
		else
			return Paralel;
	else
		if(sideValue - sideCalculated > warningEpsilon)
    2226:	48 1a       	sub	r4, r24
    2228:	59 0a       	sbc	r5, r25
    222a:	6a 0a       	sbc	r6, r26
    222c:	7b 0a       	sbc	r7, r27
    222e:	8d 89       	ldd	r24, Y+21	; 0x15
    2230:	9e 89       	ldd	r25, Y+22	; 0x16
    2232:	af 89       	ldd	r26, Y+23	; 0x17
    2234:	b8 8d       	ldd	r27, Y+24	; 0x18
    2236:	84 15       	cp	r24, r4
    2238:	95 05       	cpc	r25, r5
    223a:	a6 05       	cpc	r26, r6
    223c:	b7 05       	cpc	r27, r7
    223e:	58 f0       	brcs	.+22     	; 0x2256 <isParalel+0xe6>
			return PreaApropiat;
		else if(sideValue - sideCalculated > epsilon)
    2240:	a4 14       	cp	r10, r4
    2242:	b5 04       	cpc	r11, r5
    2244:	c6 04       	cpc	r12, r6
    2246:	d7 04       	cpc	r13, r7
    2248:	40 f4       	brcc	.+16     	; 0x225a <isParalel+0xea>
			return Apropiat;
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	07 c0       	rjmp	.+14     	; 0x225c <isParalel+0xec>
{
	uint32_t sideCalculated = (frontValue - (sensorOffset * (1<<9) / 362)) * 362 / (1<<9);
	
	if(sideCalculated > sideValue)
		if(sideCalculated - sideValue > warningEpsilon)
			return PreaDepartat;
    224e:	84 e0       	ldi	r24, 0x04	; 4
    2250:	05 c0       	rjmp	.+10     	; 0x225c <isParalel+0xec>
		else if(sideCalculated - sideValue > epsilon)
			return Departat;
		else
			return Paralel;
    2252:	82 e0       	ldi	r24, 0x02	; 2
    2254:	03 c0       	rjmp	.+6      	; 0x225c <isParalel+0xec>
	else
		if(sideValue - sideCalculated > warningEpsilon)
			return PreaApropiat;
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	01 c0       	rjmp	.+2      	; 0x225c <isParalel+0xec>
		else if(sideValue - sideCalculated > epsilon)
			return Apropiat;
		else 
			return Paralel;
    225a:	82 e0       	ldi	r24, 0x02	; 2
}
    225c:	0f 90       	pop	r0
    225e:	0f 90       	pop	r0
    2260:	0f 90       	pop	r0
    2262:	0f 90       	pop	r0
    2264:	df 91       	pop	r29
    2266:	cf 91       	pop	r28
    2268:	1f 91       	pop	r17
    226a:	0f 91       	pop	r16
    226c:	ff 90       	pop	r15
    226e:	ef 90       	pop	r14
    2270:	df 90       	pop	r13
    2272:	cf 90       	pop	r12
    2274:	bf 90       	pop	r11
    2276:	af 90       	pop	r10
    2278:	7f 90       	pop	r7
    227a:	6f 90       	pop	r6
    227c:	5f 90       	pop	r5
    227e:	4f 90       	pop	r4
    2280:	08 95       	ret

00002282 <SMPcheck>:
		addEntryIfNotExists(&SMPcheck, 250UL * 1000UL, Periodic),
		BTTransmitStr("added paralel check fct");
}

volatile ParallelResult lastParallelResult = Paralel;
uint8_t SMPcheck(){
    2282:	af 92       	push	r10
    2284:	bf 92       	push	r11
    2286:	cf 92       	push	r12
    2288:	df 92       	push	r13
    228a:	ef 92       	push	r14
    228c:	ff 92       	push	r15
    228e:	0f 93       	push	r16
    2290:	1f 93       	push	r17
    2292:	cf 93       	push	r28
    2294:	df 93       	push	r29
	//sensor offset 95 mm;	
	uint32_t fr, sr;
	fr = getValueOfSensor(FrontRightSensor);
    2296:	82 e0       	ldi	r24, 0x02	; 2
    2298:	0e 94 b4 07 	call	0xf68	; 0xf68 <getValueOfSensor>
    229c:	ec 01       	movw	r28, r24
	//fr = getValueOfSensor(FrontRightSensor);
	sr = getValueOfSensor(SideRightSensor);
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	0e 94 b4 07 	call	0xf68	; 0xf68 <getValueOfSensor>

volatile ParallelResult lastParallelResult = Paralel;
uint8_t SMPcheck(){
	//sensor offset 95 mm;	
	uint32_t fr, sr;
	fr = getValueOfSensor(FrontRightSensor);
    22a4:	9e 01       	movw	r18, r28
    22a6:	40 e0       	ldi	r20, 0x00	; 0
    22a8:	50 e0       	ldi	r21, 0x00	; 0
	//fr = getValueOfSensor(FrontRightSensor);
	sr = getValueOfSensor(SideRightSensor);
    22aa:	bc 01       	movw	r22, r24
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	90 e0       	ldi	r25, 0x00	; 0
	//sr = getValueOfSensor(SideRightSensor);
	
	ParallelResult rez = isParalel(sr, fr, 95, 22, 45);
    22b0:	1f 92       	push	r1
    22b2:	1f 92       	push	r1
    22b4:	1f 92       	push	r1
    22b6:	ed e2       	ldi	r30, 0x2D	; 45
    22b8:	ef 93       	push	r30
    22ba:	0f 2e       	mov	r0, r31
    22bc:	f6 e1       	ldi	r31, 0x16	; 22
    22be:	af 2e       	mov	r10, r31
    22c0:	b1 2c       	mov	r11, r1
    22c2:	c1 2c       	mov	r12, r1
    22c4:	d1 2c       	mov	r13, r1
    22c6:	f0 2d       	mov	r31, r0
    22c8:	1f e5       	ldi	r17, 0x5F	; 95
    22ca:	e1 2e       	mov	r14, r17
    22cc:	f1 2c       	mov	r15, r1
    22ce:	00 e0       	ldi	r16, 0x00	; 0
    22d0:	10 e0       	ldi	r17, 0x00	; 0
    22d2:	0e 94 b8 10 	call	0x2170	; 0x2170 <isParalel>
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	c8 2f       	mov	r28, r24
	
	//char msg[50];
	//sprintf(msg, "is paralel: %d sr:%lu  fr:%lu", rez, sr, fr);
	//BTTransmitStr(msg);
	if(rez == Paralel && lastParallelResult == Paralel)
    22e0:	82 30       	cpi	r24, 0x02	; 2
    22e2:	29 f4       	brne	.+10     	; 0x22ee <SMPcheck+0x6c>
    22e4:	80 91 00 01 	lds	r24, 0x0100
    22e8:	82 30       	cpi	r24, 0x02	; 2
    22ea:	a9 f5       	brne	.+106    	; 0x2356 <SMPcheck+0xd4>
    22ec:	30 c0       	rjmp	.+96     	; 0x234e <SMPcheck+0xcc>
		return YES;
	if(rez != lastParallelResult){
    22ee:	80 91 00 01 	lds	r24, 0x0100
    22f2:	c8 17       	cp	r28, r24
    22f4:	71 f1       	breq	.+92     	; 0x2352 <SMPcheck+0xd0>
		switch(rez){
    22f6:	c2 30       	cpi	r28, 0x02	; 2
    22f8:	b9 f0       	breq	.+46     	; 0x2328 <SMPcheck+0xa6>
    22fa:	28 f4       	brcc	.+10     	; 0x2306 <SMPcheck+0x84>
    22fc:	cc 23       	and	r28, r28
    22fe:	41 f0       	breq	.+16     	; 0x2310 <SMPcheck+0x8e>
    2300:	c1 30       	cpi	r28, 0x01	; 1
    2302:	61 f0       	breq	.+24     	; 0x231c <SMPcheck+0x9a>
    2304:	20 c0       	rjmp	.+64     	; 0x2346 <SMPcheck+0xc4>
    2306:	c3 30       	cpi	r28, 0x03	; 3
    2308:	99 f0       	breq	.+38     	; 0x2330 <SMPcheck+0xae>
    230a:	c4 30       	cpi	r28, 0x04	; 4
    230c:	b9 f0       	breq	.+46     	; 0x233c <SMPcheck+0xba>
    230e:	1b c0       	rjmp	.+54     	; 0x2346 <SMPcheck+0xc4>
			case PreaApropiat:
				rotirePeLoc(10, 75, RightEngines);
    2310:	40 e0       	ldi	r20, 0x00	; 0
    2312:	6b e4       	ldi	r22, 0x4B	; 75
    2314:	8a e0       	ldi	r24, 0x0A	; 10
    2316:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <rotirePeLoc>
			break;		
    231a:	15 c0       	rjmp	.+42     	; 0x2346 <SMPcheck+0xc4>
			case Apropiat:
				rotirePeLoc(10, 60, RightEngines);
    231c:	40 e0       	ldi	r20, 0x00	; 0
    231e:	6c e3       	ldi	r22, 0x3C	; 60
    2320:	8a e0       	ldi	r24, 0x0A	; 10
    2322:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <rotirePeLoc>
			break;		
    2326:	0f c0       	rjmp	.+30     	; 0x2346 <SMPcheck+0xc4>
			case Paralel:
				stopEngines();
    2328:	0e 94 85 04 	call	0x90a	; 0x90a <stopEngines>
				return YES;
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	18 c0       	rjmp	.+48     	; 0x2360 <SMPcheck+0xde>
			break;
			case Departat:
				rotirePeLoc(10, 60, LeftEngines);
    2330:	41 e0       	ldi	r20, 0x01	; 1
    2332:	6c e3       	ldi	r22, 0x3C	; 60
    2334:	8a e0       	ldi	r24, 0x0A	; 10
    2336:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <rotirePeLoc>
			break;
    233a:	05 c0       	rjmp	.+10     	; 0x2346 <SMPcheck+0xc4>
			case PreaDepartat:
				rotirePeLoc(10, 75, LeftEngines);
    233c:	41 e0       	ldi	r20, 0x01	; 1
    233e:	6b e4       	ldi	r22, 0x4B	; 75
    2340:	8a e0       	ldi	r24, 0x0A	; 10
    2342:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <rotirePeLoc>
			break;
		}
		lastParallelResult = rez;
    2346:	c0 93 00 01 	sts	0x0100, r28
	}	
	return NO;
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	09 c0       	rjmp	.+18     	; 0x2360 <SMPcheck+0xde>
	
	//char msg[50];
	//sprintf(msg, "is paralel: %d sr:%lu  fr:%lu", rez, sr, fr);
	//BTTransmitStr(msg);
	if(rez == Paralel && lastParallelResult == Paralel)
		return YES;
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	07 c0       	rjmp	.+14     	; 0x2360 <SMPcheck+0xde>
				rotirePeLoc(10, 75, LeftEngines);
			break;
		}
		lastParallelResult = rez;
	}	
	return NO;
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	05 c0       	rjmp	.+10     	; 0x2360 <SMPcheck+0xde>
	//char msg[50];
	//sprintf(msg, "is paralel: %d sr:%lu  fr:%lu", rez, sr, fr);
	//BTTransmitStr(msg);
	if(rez == Paralel && lastParallelResult == Paralel)
		return YES;
	if(rez != lastParallelResult){
    2356:	80 91 00 01 	lds	r24, 0x0100
    235a:	82 30       	cpi	r24, 0x02	; 2
    235c:	29 f7       	brne	.-54     	; 0x2328 <SMPcheck+0xa6>
				rotirePeLoc(10, 75, LeftEngines);
			break;
		}
		lastParallelResult = rez;
	}	
	return NO;
    235e:	80 e0       	ldi	r24, 0x00	; 0
}
    2360:	df 91       	pop	r29
    2362:	cf 91       	pop	r28
    2364:	1f 91       	pop	r17
    2366:	0f 91       	pop	r16
    2368:	ff 90       	pop	r15
    236a:	ef 90       	pop	r14
    236c:	df 90       	pop	r13
    236e:	cf 90       	pop	r12
    2370:	bf 90       	pop	r11
    2372:	af 90       	pop	r10
    2374:	08 95       	ret

00002376 <initParalelCheck>:
		else 
			return Paralel;
}
uint8_t SMPcheck();
void initParalelCheck(){
	if(existsEntryInTimerQueue(&SMPcheck))
    2376:	81 e4       	ldi	r24, 0x41	; 65
    2378:	91 e1       	ldi	r25, 0x11	; 17
    237a:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <existsEntryInTimerQueue>
    237e:	88 23       	and	r24, r24
    2380:	49 f0       	breq	.+18     	; 0x2394 <initParalelCheck+0x1e>
		removeEntryFromTimerQueue(&SMPcheck),
    2382:	81 e4       	ldi	r24, 0x41	; 65
    2384:	91 e1       	ldi	r25, 0x11	; 17
    2386:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <removeEntryFromTimerQueue>
		BTTransmitStr("removed paralel check fct");
    238a:	85 ea       	ldi	r24, 0xA5	; 165
    238c:	93 e0       	ldi	r25, 0x03	; 3
    238e:	0e 94 b4 01 	call	0x368	; 0x368 <BTTransmitStr>
    2392:	08 95       	ret
	else
		addEntryIfNotExists(&SMPcheck, 250UL * 1000UL, Periodic),
    2394:	21 e0       	ldi	r18, 0x01	; 1
    2396:	40 e9       	ldi	r20, 0x90	; 144
    2398:	50 ed       	ldi	r21, 0xD0	; 208
    239a:	63 e0       	ldi	r22, 0x03	; 3
    239c:	70 e0       	ldi	r23, 0x00	; 0
    239e:	81 e4       	ldi	r24, 0x41	; 65
    23a0:	91 e1       	ldi	r25, 0x11	; 17
    23a2:	0e 94 22 0c 	call	0x1844	; 0x1844 <addEntryIfNotExists>
		BTTransmitStr("added paralel check fct");
    23a6:	8f eb       	ldi	r24, 0xBF	; 191
    23a8:	93 e0       	ldi	r25, 0x03	; 3
    23aa:	0e 94 b4 01 	call	0x368	; 0x368 <BTTransmitStr>
    23ae:	08 95       	ret

000023b0 <initParalelParking>:

uint32_t srTmp;
uint8_t lastState;

void initParalelParking(){
	statePP = 33;
    23b0:	81 e2       	ldi	r24, 0x21	; 33
    23b2:	80 93 3a 05 	sts	0x053A, r24
	secsCounter = 0;
    23b6:	10 92 aa 05 	sts	0x05AA, r1
	//statePP = 7;
	lastState = 0;
    23ba:	10 92 a1 05 	sts	0x05A1, r1
	srTmp = 0;
    23be:	10 92 ab 05 	sts	0x05AB, r1
    23c2:	10 92 ac 05 	sts	0x05AC, r1
    23c6:	10 92 ad 05 	sts	0x05AD, r1
    23ca:	10 92 ae 05 	sts	0x05AE, r1
	addEntryIfNotExists(&paralelParkingSMF, 250*1000UL, Periodic);
    23ce:	21 e0       	ldi	r18, 0x01	; 1
    23d0:	40 e9       	ldi	r20, 0x90	; 144
    23d2:	50 ed       	ldi	r21, 0xD0	; 208
    23d4:	63 e0       	ldi	r22, 0x03	; 3
    23d6:	70 e0       	ldi	r23, 0x00	; 0
    23d8:	8f ec       	ldi	r24, 0xCF	; 207
    23da:	92 e1       	ldi	r25, 0x12	; 18
    23dc:	0e 94 22 0c 	call	0x1844	; 0x1844 <addEntryIfNotExists>
    23e0:	08 95       	ret

000023e2 <checkMinim>:
}
char msg[100];
uint8_t tmpCnt;
uint32_t minTest;
uint8_t checkMinim(void)
{
    23e2:	cf 92       	push	r12
    23e4:	df 92       	push	r13
    23e6:	ef 92       	push	r14
    23e8:	ff 92       	push	r15
	uint32_t sr;
	sr = getValueOfSensor(SideRightSensor);	
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	0e 94 b4 07 	call	0xf68	; 0xf68 <getValueOfSensor>
    23f0:	6c 01       	movw	r12, r24
    23f2:	e1 2c       	mov	r14, r1
    23f4:	f1 2c       	mov	r15, r1
	
	sprintf(msg, "cm st:%u ", lastState);
    23f6:	80 91 a1 05 	lds	r24, 0x05A1
    23fa:	1f 92       	push	r1
    23fc:	8f 93       	push	r24
    23fe:	87 ed       	ldi	r24, 0xD7	; 215
    2400:	93 e0       	ldi	r25, 0x03	; 3
    2402:	9f 93       	push	r25
    2404:	8f 93       	push	r24
    2406:	8c e3       	ldi	r24, 0x3C	; 60
    2408:	95 e0       	ldi	r25, 0x05	; 5
    240a:	9f 93       	push	r25
    240c:	8f 93       	push	r24
    240e:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <sprintf>
	BTTransmitStr(msg);
    2412:	8c e3       	ldi	r24, 0x3C	; 60
    2414:	95 e0       	ldi	r25, 0x05	; 5
    2416:	0e 94 b4 01 	call	0x368	; 0x368 <BTTransmitStr>
	
	switch(lastState){
    241a:	0f 90       	pop	r0
    241c:	0f 90       	pop	r0
    241e:	0f 90       	pop	r0
    2420:	0f 90       	pop	r0
    2422:	0f 90       	pop	r0
    2424:	0f 90       	pop	r0
    2426:	80 91 a1 05 	lds	r24, 0x05A1
    242a:	82 30       	cpi	r24, 0x02	; 2
    242c:	09 f4       	brne	.+2      	; 0x2430 <checkMinim+0x4e>
    242e:	4c c0       	rjmp	.+152    	; 0x24c8 <checkMinim+0xe6>
    2430:	28 f4       	brcc	.+10     	; 0x243c <checkMinim+0x5a>
    2432:	88 23       	and	r24, r24
    2434:	51 f0       	breq	.+20     	; 0x244a <checkMinim+0x68>
    2436:	81 30       	cpi	r24, 0x01	; 1
    2438:	d1 f0       	breq	.+52     	; 0x246e <checkMinim+0x8c>
    243a:	a5 c0       	rjmp	.+330    	; 0x2586 <checkMinim+0x1a4>
    243c:	83 30       	cpi	r24, 0x03	; 3
    243e:	09 f4       	brne	.+2      	; 0x2442 <checkMinim+0x60>
    2440:	60 c0       	rjmp	.+192    	; 0x2502 <checkMinim+0x120>
    2442:	84 30       	cpi	r24, 0x04	; 4
    2444:	09 f4       	brne	.+2      	; 0x2448 <checkMinim+0x66>
    2446:	94 c0       	rjmp	.+296    	; 0x2570 <checkMinim+0x18e>
    2448:	9e c0       	rjmp	.+316    	; 0x2586 <checkMinim+0x1a4>
		case 0:
			lastState = 1;
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	80 93 a1 05 	sts	0x05A1, r24
			srTmp = sr;
    2450:	c0 92 ab 05 	sts	0x05AB, r12
    2454:	d0 92 ac 05 	sts	0x05AC, r13
    2458:	e0 92 ad 05 	sts	0x05AD, r14
    245c:	f0 92 ae 05 	sts	0x05AE, r15
			rotirePeLoc(15, 90, RightEngines);
    2460:	40 e0       	ldi	r20, 0x00	; 0
    2462:	6a e5       	ldi	r22, 0x5A	; 90
    2464:	8f e0       	ldi	r24, 0x0F	; 15
    2466:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <rotirePeLoc>
		break;
		
		
	}
	
	return NO;
    246a:	80 e0       	ldi	r24, 0x00	; 0
	switch(lastState){
		case 0:
			lastState = 1;
			srTmp = sr;
			rotirePeLoc(15, 90, RightEngines);
		break;
    246c:	93 c0       	rjmp	.+294    	; 0x2594 <checkMinim+0x1b2>
		case 1:
			if( sr > srTmp + 5){
    246e:	80 91 ab 05 	lds	r24, 0x05AB
    2472:	90 91 ac 05 	lds	r25, 0x05AC
    2476:	a0 91 ad 05 	lds	r26, 0x05AD
    247a:	b0 91 ae 05 	lds	r27, 0x05AE
    247e:	ac 01       	movw	r20, r24
    2480:	bd 01       	movw	r22, r26
    2482:	4b 5f       	subi	r20, 0xFB	; 251
    2484:	5f 4f       	sbci	r21, 0xFF	; 255
    2486:	6f 4f       	sbci	r22, 0xFF	; 255
    2488:	7f 4f       	sbci	r23, 0xFF	; 255
    248a:	4c 15       	cp	r20, r12
    248c:	5d 05       	cpc	r21, r13
    248e:	6e 05       	cpc	r22, r14
    2490:	7f 05       	cpc	r23, r15
    2492:	50 f4       	brcc	.+20     	; 0x24a8 <checkMinim+0xc6>
				srTmp = sr;
    2494:	c0 92 ab 05 	sts	0x05AB, r12
    2498:	d0 92 ac 05 	sts	0x05AC, r13
    249c:	e0 92 ad 05 	sts	0x05AD, r14
    24a0:	f0 92 ae 05 	sts	0x05AE, r15
		break;
		
		
	}
	
	return NO;
    24a4:	80 e0       	ldi	r24, 0x00	; 0
    24a6:	76 c0       	rjmp	.+236    	; 0x2594 <checkMinim+0x1b2>
		break;
		case 1:
			if( sr > srTmp + 5){
				srTmp = sr;
			}
			else if(sr < srTmp - 5){
    24a8:	05 97       	sbiw	r24, 0x05	; 5
    24aa:	a1 09       	sbc	r26, r1
    24ac:	b1 09       	sbc	r27, r1
    24ae:	c8 16       	cp	r12, r24
    24b0:	d9 06       	cpc	r13, r25
    24b2:	ea 06       	cpc	r14, r26
    24b4:	fb 06       	cpc	r15, r27
    24b6:	08 f0       	brcs	.+2      	; 0x24ba <checkMinim+0xd8>
    24b8:	68 c0       	rjmp	.+208    	; 0x258a <checkMinim+0x1a8>
				lastState = 2;
    24ba:	82 e0       	ldi	r24, 0x02	; 2
    24bc:	80 93 a1 05 	sts	0x05A1, r24
				tmpCnt=0;
    24c0:	10 92 3b 05 	sts	0x053B, r1
		break;
		
		
	}
	
	return NO;
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	66 c0       	rjmp	.+204    	; 0x2594 <checkMinim+0x1b2>
				lastState = 2;
				tmpCnt=0;
			}
		break;
		case 2:
			tmpCnt++;
    24c8:	80 91 3b 05 	lds	r24, 0x053B
    24cc:	8f 5f       	subi	r24, 0xFF	; 255
    24ce:	80 93 3b 05 	sts	0x053B, r24
			srTmp = sr;
    24d2:	c0 92 ab 05 	sts	0x05AB, r12
    24d6:	d0 92 ac 05 	sts	0x05AC, r13
    24da:	e0 92 ad 05 	sts	0x05AD, r14
    24de:	f0 92 ae 05 	sts	0x05AE, r15
			if(tmpCnt>3){
    24e2:	84 30       	cpi	r24, 0x04	; 4
    24e4:	08 f4       	brcc	.+2      	; 0x24e8 <checkMinim+0x106>
    24e6:	53 c0       	rjmp	.+166    	; 0x258e <checkMinim+0x1ac>
				lastState = 3;
    24e8:	83 e0       	ldi	r24, 0x03	; 3
    24ea:	80 93 a1 05 	sts	0x05A1, r24
				minTest = sr;	
    24ee:	c0 92 35 05 	sts	0x0535, r12
    24f2:	d0 92 36 05 	sts	0x0536, r13
    24f6:	e0 92 37 05 	sts	0x0537, r14
    24fa:	f0 92 38 05 	sts	0x0538, r15
		break;
		
		
	}
	
	return NO;
    24fe:	80 e0       	ldi	r24, 0x00	; 0
    2500:	49 c0       	rjmp	.+146    	; 0x2594 <checkMinim+0x1b2>
				lastState = 3;
				minTest = sr;	
			}
		break;
		case 3:
			if( sr > srTmp )
    2502:	80 91 ab 05 	lds	r24, 0x05AB
    2506:	90 91 ac 05 	lds	r25, 0x05AC
    250a:	a0 91 ad 05 	lds	r26, 0x05AD
    250e:	b0 91 ae 05 	lds	r27, 0x05AE
    2512:	8c 15       	cp	r24, r12
    2514:	9d 05       	cpc	r25, r13
    2516:	ae 05       	cpc	r26, r14
    2518:	bf 05       	cpc	r27, r15
    251a:	48 f4       	brcc	.+18     	; 0x252e <checkMinim+0x14c>
			{
				lastState = 4;
    251c:	84 e0       	ldi	r24, 0x04	; 4
    251e:	80 93 a1 05 	sts	0x05A1, r24
				tmpCnt = 0;
    2522:	10 92 3b 05 	sts	0x053B, r1
				rotirePeLoc(4, 65, LeftEngines);
    2526:	41 e0       	ldi	r20, 0x01	; 1
    2528:	61 e4       	ldi	r22, 0x41	; 65
    252a:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <rotirePeLoc>
			}
			srTmp = sr;
    252e:	c0 92 ab 05 	sts	0x05AB, r12
    2532:	d0 92 ac 05 	sts	0x05AC, r13
    2536:	e0 92 ad 05 	sts	0x05AD, r14
    253a:	f0 92 ae 05 	sts	0x05AE, r15
			minTest = minTest>sr?sr:minTest;
    253e:	80 91 35 05 	lds	r24, 0x0535
    2542:	90 91 36 05 	lds	r25, 0x0536
    2546:	a0 91 37 05 	lds	r26, 0x0537
    254a:	b0 91 38 05 	lds	r27, 0x0538
    254e:	8c 15       	cp	r24, r12
    2550:	9d 05       	cpc	r25, r13
    2552:	ae 05       	cpc	r26, r14
    2554:	bf 05       	cpc	r27, r15
    2556:	10 f4       	brcc	.+4      	; 0x255c <checkMinim+0x17a>
    2558:	6c 01       	movw	r12, r24
    255a:	7d 01       	movw	r14, r26
    255c:	c0 92 35 05 	sts	0x0535, r12
    2560:	d0 92 36 05 	sts	0x0536, r13
    2564:	e0 92 37 05 	sts	0x0537, r14
    2568:	f0 92 38 05 	sts	0x0538, r15
		break;
		
		
	}
	
	return NO;
    256c:	80 e0       	ldi	r24, 0x00	; 0
				tmpCnt = 0;
				rotirePeLoc(4, 65, LeftEngines);
			}
			srTmp = sr;
			minTest = minTest>sr?sr:minTest;
		break;
    256e:	12 c0       	rjmp	.+36     	; 0x2594 <checkMinim+0x1b2>
		case 4:
			tmpCnt++;
    2570:	80 91 3b 05 	lds	r24, 0x053B
    2574:	8f 5f       	subi	r24, 0xFF	; 255
    2576:	80 93 3b 05 	sts	0x053B, r24
			if(tmpCnt>4){
    257a:	85 30       	cpi	r24, 0x05	; 5
    257c:	50 f0       	brcs	.+20     	; 0x2592 <checkMinim+0x1b0>
				stopEngines();
    257e:	0e 94 85 04 	call	0x90a	; 0x90a <stopEngines>
				return YES;
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	07 c0       	rjmp	.+14     	; 0x2594 <checkMinim+0x1b2>
		break;
		
		
	}
	
	return NO;
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	05 c0       	rjmp	.+10     	; 0x2594 <checkMinim+0x1b2>
    258a:	80 e0       	ldi	r24, 0x00	; 0
    258c:	03 c0       	rjmp	.+6      	; 0x2594 <checkMinim+0x1b2>
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	01 c0       	rjmp	.+2      	; 0x2594 <checkMinim+0x1b2>
    2592:	80 e0       	ldi	r24, 0x00	; 0
	
    2594:	ff 90       	pop	r15
    2596:	ef 90       	pop	r14
    2598:	df 90       	pop	r13
    259a:	cf 90       	pop	r12
    259c:	08 95       	ret

0000259e <paralelParkingSMF>:
uint32_t distDeParcurs;

uint8_t checkMinim(void);
uint32_t xx;
uint8_t cnt2;
uint8_t paralelParkingSMF(){
    259e:	8f 92       	push	r8
    25a0:	9f 92       	push	r9
    25a2:	af 92       	push	r10
    25a4:	bf 92       	push	r11
    25a6:	cf 92       	push	r12
    25a8:	df 92       	push	r13
    25aa:	ef 92       	push	r14
    25ac:	ff 92       	push	r15
    25ae:	0f 93       	push	r16
	uint32_t fr, sr;
	fr = getValueOfSensor(FrontRightSensor);
    25b0:	82 e0       	ldi	r24, 0x02	; 2
    25b2:	0e 94 b4 07 	call	0xf68	; 0xf68 <getValueOfSensor>
    25b6:	4c 01       	movw	r8, r24
    25b8:	a1 2c       	mov	r10, r1
    25ba:	b1 2c       	mov	r11, r1
	//fr = getValueOfSensor(FrontRightSensor);
	sr = getValueOfSensor(SideRightSensor);
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	0e 94 b4 07 	call	0xf68	; 0xf68 <getValueOfSensor>
    25c2:	6c 01       	movw	r12, r24
    25c4:	e1 2c       	mov	r14, r1
    25c6:	f1 2c       	mov	r15, r1
	switch(statePP){
    25c8:	40 91 3a 05 	lds	r20, 0x053A
    25cc:	50 e0       	ldi	r21, 0x00	; 0
    25ce:	45 36       	cpi	r20, 0x65	; 101
    25d0:	51 05       	cpc	r21, r1
    25d2:	08 f0       	brcs	.+2      	; 0x25d6 <paralelParkingSMF+0x38>
    25d4:	5d c3       	rjmp	.+1722   	; 0x2c90 <paralelParkingSMF+0x6f2>
    25d6:	fa 01       	movw	r30, r20
    25d8:	e2 5a       	subi	r30, 0xA2	; 162
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	0c 94 91 16 	jmp	0x2d22	; 0x2d22 <__tablejump2__>
		case 33:
			goFront(30, 160);
    25e0:	60 ea       	ldi	r22, 0xA0	; 160
    25e2:	8e e1       	ldi	r24, 0x1E	; 30
    25e4:	0e 94 03 05 	call	0xa06	; 0xa06 <goFront>
			distDeParcurs = DISTANTA_PARCURSA + 200;
    25e8:	80 91 0c 04 	lds	r24, 0x040C
    25ec:	90 91 0d 04 	lds	r25, 0x040D
    25f0:	a0 91 0e 04 	lds	r26, 0x040E
    25f4:	b0 91 0f 04 	lds	r27, 0x040F
    25f8:	40 91 12 04 	lds	r20, 0x0412
    25fc:	50 91 13 04 	lds	r21, 0x0413
    2600:	60 91 14 04 	lds	r22, 0x0414
    2604:	70 91 15 04 	lds	r23, 0x0415
    2608:	84 0f       	add	r24, r20
    260a:	95 1f       	adc	r25, r21
    260c:	a6 1f       	adc	r26, r22
    260e:	b7 1f       	adc	r27, r23
    2610:	b6 95       	lsr	r27
    2612:	a7 95       	ror	r26
    2614:	97 95       	ror	r25
    2616:	87 95       	ror	r24
    2618:	b6 95       	lsr	r27
    261a:	a7 95       	ror	r26
    261c:	97 95       	ror	r25
    261e:	87 95       	ror	r24
    2620:	ac 01       	movw	r20, r24
    2622:	bd 01       	movw	r22, r26
    2624:	44 0f       	add	r20, r20
    2626:	55 1f       	adc	r21, r21
    2628:	66 1f       	adc	r22, r22
    262a:	77 1f       	adc	r23, r23
    262c:	44 0f       	add	r20, r20
    262e:	55 1f       	adc	r21, r21
    2630:	66 1f       	adc	r22, r22
    2632:	77 1f       	adc	r23, r23
    2634:	6a 01       	movw	r12, r20
    2636:	7b 01       	movw	r14, r22
    2638:	cc 0c       	add	r12, r12
    263a:	dd 1c       	adc	r13, r13
    263c:	ee 1c       	adc	r14, r14
    263e:	ff 1c       	adc	r15, r15
    2640:	cc 0c       	add	r12, r12
    2642:	dd 1c       	adc	r13, r13
    2644:	ee 1c       	adc	r14, r14
    2646:	ff 1c       	adc	r15, r15
    2648:	4c 0d       	add	r20, r12
    264a:	5d 1d       	adc	r21, r13
    264c:	6e 1d       	adc	r22, r14
    264e:	7f 1d       	adc	r23, r15
    2650:	84 0f       	add	r24, r20
    2652:	95 1f       	adc	r25, r21
    2654:	a6 1f       	adc	r26, r22
    2656:	b7 1f       	adc	r27, r23
    2658:	88 53       	subi	r24, 0x38	; 56
    265a:	9f 4f       	sbci	r25, 0xFF	; 255
    265c:	af 4f       	sbci	r26, 0xFF	; 255
    265e:	bf 4f       	sbci	r27, 0xFF	; 255
    2660:	80 93 b0 05 	sts	0x05B0, r24
    2664:	90 93 b1 05 	sts	0x05B1, r25
    2668:	a0 93 b2 05 	sts	0x05B2, r26
    266c:	b0 93 b3 05 	sts	0x05B3, r27
			statePP = 34;
    2670:	82 e2       	ldi	r24, 0x22	; 34
    2672:	80 93 3a 05 	sts	0x053A, r24
				}
			//}
		
		break;
	}
	return NO;	
    2676:	80 e0       	ldi	r24, 0x00	; 0
	switch(statePP){
		case 33:
			goFront(30, 160);
			distDeParcurs = DISTANTA_PARCURSA + 200;
			statePP = 34;
		break;
    2678:	28 c3       	rjmp	.+1616   	; 0x2cca <paralelParkingSMF+0x72c>
		case 34:
			if(DISTANTA_PARCURSA > distDeParcurs){
    267a:	80 91 0c 04 	lds	r24, 0x040C
    267e:	90 91 0d 04 	lds	r25, 0x040D
    2682:	a0 91 0e 04 	lds	r26, 0x040E
    2686:	b0 91 0f 04 	lds	r27, 0x040F
    268a:	40 91 12 04 	lds	r20, 0x0412
    268e:	50 91 13 04 	lds	r21, 0x0413
    2692:	60 91 14 04 	lds	r22, 0x0414
    2696:	70 91 15 04 	lds	r23, 0x0415
    269a:	84 0f       	add	r24, r20
    269c:	95 1f       	adc	r25, r21
    269e:	a6 1f       	adc	r26, r22
    26a0:	b7 1f       	adc	r27, r23
    26a2:	b6 95       	lsr	r27
    26a4:	a7 95       	ror	r26
    26a6:	97 95       	ror	r25
    26a8:	87 95       	ror	r24
    26aa:	b6 95       	lsr	r27
    26ac:	a7 95       	ror	r26
    26ae:	97 95       	ror	r25
    26b0:	87 95       	ror	r24
    26b2:	ac 01       	movw	r20, r24
    26b4:	bd 01       	movw	r22, r26
    26b6:	44 0f       	add	r20, r20
    26b8:	55 1f       	adc	r21, r21
    26ba:	66 1f       	adc	r22, r22
    26bc:	77 1f       	adc	r23, r23
    26be:	44 0f       	add	r20, r20
    26c0:	55 1f       	adc	r21, r21
    26c2:	66 1f       	adc	r22, r22
    26c4:	77 1f       	adc	r23, r23
    26c6:	6a 01       	movw	r12, r20
    26c8:	7b 01       	movw	r14, r22
    26ca:	cc 0c       	add	r12, r12
    26cc:	dd 1c       	adc	r13, r13
    26ce:	ee 1c       	adc	r14, r14
    26d0:	ff 1c       	adc	r15, r15
    26d2:	cc 0c       	add	r12, r12
    26d4:	dd 1c       	adc	r13, r13
    26d6:	ee 1c       	adc	r14, r14
    26d8:	ff 1c       	adc	r15, r15
    26da:	4c 0d       	add	r20, r12
    26dc:	5d 1d       	adc	r21, r13
    26de:	6e 1d       	adc	r22, r14
    26e0:	7f 1d       	adc	r23, r15
    26e2:	84 0f       	add	r24, r20
    26e4:	95 1f       	adc	r25, r21
    26e6:	a6 1f       	adc	r26, r22
    26e8:	b7 1f       	adc	r27, r23
    26ea:	c0 90 b0 05 	lds	r12, 0x05B0
    26ee:	d0 90 b1 05 	lds	r13, 0x05B1
    26f2:	e0 90 b2 05 	lds	r14, 0x05B2
    26f6:	f0 90 b3 05 	lds	r15, 0x05B3
    26fa:	c8 16       	cp	r12, r24
    26fc:	d9 06       	cpc	r13, r25
    26fe:	ea 06       	cpc	r14, r26
    2700:	fb 06       	cpc	r15, r27
    2702:	08 f0       	brcs	.+2      	; 0x2706 <paralelParkingSMF+0x168>
    2704:	c7 c2       	rjmp	.+1422   	; 0x2c94 <paralelParkingSMF+0x6f6>
				statePP = 0;
    2706:	10 92 3a 05 	sts	0x053A, r1
				stopEngines();
    270a:	0e 94 85 04 	call	0x90a	; 0x90a <stopEngines>
				}
			//}
		
		break;
	}
	return NO;	
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	dc c2       	rjmp	.+1464   	; 0x2cca <paralelParkingSMF+0x72c>
				statePP = 0;
				stopEngines();
			}		
		break;
		case 0:
			if(SMPcheck() == 1){
    2712:	0e 94 41 11 	call	0x2282	; 0x2282 <SMPcheck>
    2716:	81 30       	cpi	r24, 0x01	; 1
    2718:	09 f0       	breq	.+2      	; 0x271c <paralelParkingSMF+0x17e>
    271a:	be c2       	rjmp	.+1404   	; 0x2c98 <paralelParkingSMF+0x6fa>
				statePP = 1;
    271c:	80 93 3a 05 	sts	0x053A, r24
				goFront(30, 60);
    2720:	6c e3       	ldi	r22, 0x3C	; 60
    2722:	8e e1       	ldi	r24, 0x1E	; 30
    2724:	0e 94 03 05 	call	0xa06	; 0xa06 <goFront>
				}
			//}
		
		break;
	}
	return NO;	
    2728:	80 e0       	ldi	r24, 0x00	; 0
    272a:	cf c2       	rjmp	.+1438   	; 0x2cca <paralelParkingSMF+0x72c>
				statePP = 1;
				goFront(30, 60);
			}
		break;
		case 1:
			if(sr<130 && sr>40){
    272c:	29 e2       	ldi	r18, 0x29	; 41
    272e:	c2 1a       	sub	r12, r18
    2730:	d1 08       	sbc	r13, r1
    2732:	e1 08       	sbc	r14, r1
    2734:	f1 08       	sbc	r15, r1
    2736:	39 e5       	ldi	r19, 0x59	; 89
    2738:	c3 16       	cp	r12, r19
    273a:	d1 04       	cpc	r13, r1
    273c:	e1 04       	cpc	r14, r1
    273e:	f1 04       	cpc	r15, r1
    2740:	08 f0       	brcs	.+2      	; 0x2744 <paralelParkingSMF+0x1a6>
    2742:	ac c2       	rjmp	.+1368   	; 0x2c9c <paralelParkingSMF+0x6fe>
				statePP = 2;
    2744:	82 e0       	ldi	r24, 0x02	; 2
    2746:	80 93 3a 05 	sts	0x053A, r24
				}
			//}
		
		break;
	}
	return NO;	
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	be c2       	rjmp	.+1404   	; 0x2cca <paralelParkingSMF+0x72c>
			if(sr<130 && sr>40){
				statePP = 2;
			}
		break;
		case 2:
			if(sr > 300){
    274e:	4d e2       	ldi	r20, 0x2D	; 45
    2750:	c4 16       	cp	r12, r20
    2752:	41 e0       	ldi	r20, 0x01	; 1
    2754:	d4 06       	cpc	r13, r20
    2756:	e1 04       	cpc	r14, r1
    2758:	f1 04       	cpc	r15, r1
    275a:	08 f4       	brcc	.+2      	; 0x275e <paralelParkingSMF+0x1c0>
    275c:	a1 c2       	rjmp	.+1346   	; 0x2ca0 <paralelParkingSMF+0x702>
				statePP = 100;
    275e:	84 e6       	ldi	r24, 0x64	; 100
    2760:	80 93 3a 05 	sts	0x053A, r24
				goBack(10, 30);				
    2764:	6e e1       	ldi	r22, 0x1E	; 30
    2766:	8a e0       	ldi	r24, 0x0A	; 10
    2768:	0e 94 33 05 	call	0xa66	; 0xa66 <goBack>
				}
			//}
		
		break;
	}
	return NO;	
    276c:	80 e0       	ldi	r24, 0x00	; 0
		break;
		case 2:
			if(sr > 300){
				statePP = 100;
				goBack(10, 30);				
				break;
    276e:	ad c2       	rjmp	.+1370   	; 0x2cca <paralelParkingSMF+0x72c>
				//stopEngines();
			}
			
		break;
		case 100:
			if(sr<130 && sr>40){
    2770:	59 e2       	ldi	r21, 0x29	; 41
    2772:	c5 1a       	sub	r12, r21
    2774:	d1 08       	sbc	r13, r1
    2776:	e1 08       	sbc	r14, r1
    2778:	f1 08       	sbc	r15, r1
    277a:	89 e5       	ldi	r24, 0x59	; 89
    277c:	c8 16       	cp	r12, r24
    277e:	d1 04       	cpc	r13, r1
    2780:	e1 04       	cpc	r14, r1
    2782:	f1 04       	cpc	r15, r1
    2784:	08 f0       	brcs	.+2      	; 0x2788 <paralelParkingSMF+0x1ea>
    2786:	8e c2       	rjmp	.+1308   	; 0x2ca4 <paralelParkingSMF+0x706>
				//stopEngines();
				goFront(20, 50);
    2788:	62 e3       	ldi	r22, 0x32	; 50
    278a:	84 e1       	ldi	r24, 0x14	; 20
    278c:	0e 94 03 05 	call	0xa06	; 0xa06 <goFront>
				distDeParcurs = DISTANTA_PARCURSA + 110;
    2790:	80 91 0c 04 	lds	r24, 0x040C
    2794:	90 91 0d 04 	lds	r25, 0x040D
    2798:	a0 91 0e 04 	lds	r26, 0x040E
    279c:	b0 91 0f 04 	lds	r27, 0x040F
    27a0:	40 91 12 04 	lds	r20, 0x0412
    27a4:	50 91 13 04 	lds	r21, 0x0413
    27a8:	60 91 14 04 	lds	r22, 0x0414
    27ac:	70 91 15 04 	lds	r23, 0x0415
    27b0:	84 0f       	add	r24, r20
    27b2:	95 1f       	adc	r25, r21
    27b4:	a6 1f       	adc	r26, r22
    27b6:	b7 1f       	adc	r27, r23
    27b8:	b6 95       	lsr	r27
    27ba:	a7 95       	ror	r26
    27bc:	97 95       	ror	r25
    27be:	87 95       	ror	r24
    27c0:	b6 95       	lsr	r27
    27c2:	a7 95       	ror	r26
    27c4:	97 95       	ror	r25
    27c6:	87 95       	ror	r24
    27c8:	ac 01       	movw	r20, r24
    27ca:	bd 01       	movw	r22, r26
    27cc:	44 0f       	add	r20, r20
    27ce:	55 1f       	adc	r21, r21
    27d0:	66 1f       	adc	r22, r22
    27d2:	77 1f       	adc	r23, r23
    27d4:	44 0f       	add	r20, r20
    27d6:	55 1f       	adc	r21, r21
    27d8:	66 1f       	adc	r22, r22
    27da:	77 1f       	adc	r23, r23
    27dc:	6a 01       	movw	r12, r20
    27de:	7b 01       	movw	r14, r22
    27e0:	cc 0c       	add	r12, r12
    27e2:	dd 1c       	adc	r13, r13
    27e4:	ee 1c       	adc	r14, r14
    27e6:	ff 1c       	adc	r15, r15
    27e8:	cc 0c       	add	r12, r12
    27ea:	dd 1c       	adc	r13, r13
    27ec:	ee 1c       	adc	r14, r14
    27ee:	ff 1c       	adc	r15, r15
    27f0:	4c 0d       	add	r20, r12
    27f2:	5d 1d       	adc	r21, r13
    27f4:	6e 1d       	adc	r22, r14
    27f6:	7f 1d       	adc	r23, r15
    27f8:	84 0f       	add	r24, r20
    27fa:	95 1f       	adc	r25, r21
    27fc:	a6 1f       	adc	r26, r22
    27fe:	b7 1f       	adc	r27, r23
    2800:	82 59       	subi	r24, 0x92	; 146
    2802:	9f 4f       	sbci	r25, 0xFF	; 255
    2804:	af 4f       	sbci	r26, 0xFF	; 255
    2806:	bf 4f       	sbci	r27, 0xFF	; 255
    2808:	80 93 b0 05 	sts	0x05B0, r24
    280c:	90 93 b1 05 	sts	0x05B1, r25
    2810:	a0 93 b2 05 	sts	0x05B2, r26
    2814:	b0 93 b3 05 	sts	0x05B3, r27
				statePP = 3;
    2818:	83 e0       	ldi	r24, 0x03	; 3
    281a:	80 93 3a 05 	sts	0x053A, r24
				}
			//}
		
		break;
	}
	return NO;	
    281e:	80 e0       	ldi	r24, 0x00	; 0
			if(sr<130 && sr>40){
				//stopEngines();
				goFront(20, 50);
				distDeParcurs = DISTANTA_PARCURSA + 110;
				statePP = 3;
				break;
    2820:	54 c2       	rjmp	.+1192   	; 0x2cca <paralelParkingSMF+0x72c>
				stopEngines();				
				//return YES;
			}
		break;*/
		case 3:
			if(DISTANTA_PARCURSA > distDeParcurs){
    2822:	80 91 0c 04 	lds	r24, 0x040C
    2826:	90 91 0d 04 	lds	r25, 0x040D
    282a:	a0 91 0e 04 	lds	r26, 0x040E
    282e:	b0 91 0f 04 	lds	r27, 0x040F
    2832:	40 91 12 04 	lds	r20, 0x0412
    2836:	50 91 13 04 	lds	r21, 0x0413
    283a:	60 91 14 04 	lds	r22, 0x0414
    283e:	70 91 15 04 	lds	r23, 0x0415
    2842:	84 0f       	add	r24, r20
    2844:	95 1f       	adc	r25, r21
    2846:	a6 1f       	adc	r26, r22
    2848:	b7 1f       	adc	r27, r23
    284a:	b6 95       	lsr	r27
    284c:	a7 95       	ror	r26
    284e:	97 95       	ror	r25
    2850:	87 95       	ror	r24
    2852:	b6 95       	lsr	r27
    2854:	a7 95       	ror	r26
    2856:	97 95       	ror	r25
    2858:	87 95       	ror	r24
    285a:	ac 01       	movw	r20, r24
    285c:	bd 01       	movw	r22, r26
    285e:	44 0f       	add	r20, r20
    2860:	55 1f       	adc	r21, r21
    2862:	66 1f       	adc	r22, r22
    2864:	77 1f       	adc	r23, r23
    2866:	44 0f       	add	r20, r20
    2868:	55 1f       	adc	r21, r21
    286a:	66 1f       	adc	r22, r22
    286c:	77 1f       	adc	r23, r23
    286e:	6a 01       	movw	r12, r20
    2870:	7b 01       	movw	r14, r22
    2872:	cc 0c       	add	r12, r12
    2874:	dd 1c       	adc	r13, r13
    2876:	ee 1c       	adc	r14, r14
    2878:	ff 1c       	adc	r15, r15
    287a:	cc 0c       	add	r12, r12
    287c:	dd 1c       	adc	r13, r13
    287e:	ee 1c       	adc	r14, r14
    2880:	ff 1c       	adc	r15, r15
    2882:	4c 0d       	add	r20, r12
    2884:	5d 1d       	adc	r21, r13
    2886:	6e 1d       	adc	r22, r14
    2888:	7f 1d       	adc	r23, r15
    288a:	84 0f       	add	r24, r20
    288c:	95 1f       	adc	r25, r21
    288e:	a6 1f       	adc	r26, r22
    2890:	b7 1f       	adc	r27, r23
    2892:	c0 90 b0 05 	lds	r12, 0x05B0
    2896:	d0 90 b1 05 	lds	r13, 0x05B1
    289a:	e0 90 b2 05 	lds	r14, 0x05B2
    289e:	f0 90 b3 05 	lds	r15, 0x05B3
    28a2:	c8 16       	cp	r12, r24
    28a4:	d9 06       	cpc	r13, r25
    28a6:	ea 06       	cpc	r14, r26
    28a8:	fb 06       	cpc	r15, r27
    28aa:	08 f0       	brcs	.+2      	; 0x28ae <paralelParkingSMF+0x310>
    28ac:	fd c1       	rjmp	.+1018   	; 0x2ca8 <paralelParkingSMF+0x70a>
				stopEngines();
    28ae:	0e 94 85 04 	call	0x90a	; 0x90a <stopEngines>
				statePP = 4;
    28b2:	84 e0       	ldi	r24, 0x04	; 4
    28b4:	80 93 3a 05 	sts	0x053A, r24
				rotireSmechera(5, 0, 170, 1, 50);
    28b8:	02 e3       	ldi	r16, 0x32	; 50
    28ba:	21 e0       	ldi	r18, 0x01	; 1
    28bc:	4a ea       	ldi	r20, 0xAA	; 170
    28be:	60 e0       	ldi	r22, 0x00	; 0
    28c0:	85 e0       	ldi	r24, 0x05	; 5
    28c2:	0e 94 21 06 	call	0xc42	; 0xc42 <rotireSmechera>
				}
			//}
		
		break;
	}
	return NO;	
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	00 c2       	rjmp	.+1024   	; 0x2cca <paralelParkingSMF+0x72c>
				statePP = 4;
				rotireSmechera(5, 0, 170, 1, 50);
			}
		break;
		case 4:
			if(sr<200){
    28ca:	28 ec       	ldi	r18, 0xC8	; 200
    28cc:	c2 16       	cp	r12, r18
    28ce:	d1 04       	cpc	r13, r1
    28d0:	e1 04       	cpc	r14, r1
    28d2:	f1 04       	cpc	r15, r1
    28d4:	08 f0       	brcs	.+2      	; 0x28d8 <paralelParkingSMF+0x33a>
    28d6:	ea c1       	rjmp	.+980    	; 0x2cac <paralelParkingSMF+0x70e>
				statePP = 5;
    28d8:	85 e0       	ldi	r24, 0x05	; 5
    28da:	80 93 3a 05 	sts	0x053A, r24
				rotirePeLoc(10, 80, LeftEngines);
    28de:	41 e0       	ldi	r20, 0x01	; 1
    28e0:	60 e5       	ldi	r22, 0x50	; 80
    28e2:	8a e0       	ldi	r24, 0x0A	; 10
    28e4:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <rotirePeLoc>
				}
			//}
		
		break;
	}
	return NO;	
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	ef c1       	rjmp	.+990    	; 0x2cca <paralelParkingSMF+0x72c>
				statePP = 5;
				rotirePeLoc(10, 80, LeftEngines);
			}
		break;
		case 5:
			if(sr>220)
    28ec:	3d ed       	ldi	r19, 0xDD	; 221
    28ee:	c3 16       	cp	r12, r19
    28f0:	d1 04       	cpc	r13, r1
    28f2:	e1 04       	cpc	r14, r1
    28f4:	f1 04       	cpc	r15, r1
    28f6:	08 f4       	brcc	.+2      	; 0x28fa <paralelParkingSMF+0x35c>
    28f8:	db c1       	rjmp	.+950    	; 0x2cb0 <paralelParkingSMF+0x712>
			{
				goFront(15, 50);
    28fa:	62 e3       	ldi	r22, 0x32	; 50
    28fc:	8f e0       	ldi	r24, 0x0F	; 15
    28fe:	0e 94 03 05 	call	0xa06	; 0xa06 <goFront>
				statePP = 6;
    2902:	86 e0       	ldi	r24, 0x06	; 6
    2904:	80 93 3a 05 	sts	0x053A, r24
				}
			//}
		
		break;
	}
	return NO;	
    2908:	80 e0       	ldi	r24, 0x00	; 0
    290a:	df c1       	rjmp	.+958    	; 0x2cca <paralelParkingSMF+0x72c>
				goFront(15, 50);
				statePP = 6;
			}
		break;
		case 6:
			if(fr < 170){
    290c:	4a ea       	ldi	r20, 0xAA	; 170
    290e:	84 16       	cp	r8, r20
    2910:	91 04       	cpc	r9, r1
    2912:	a1 04       	cpc	r10, r1
    2914:	b1 04       	cpc	r11, r1
    2916:	08 f0       	brcs	.+2      	; 0x291a <paralelParkingSMF+0x37c>
    2918:	cd c1       	rjmp	.+922    	; 0x2cb4 <paralelParkingSMF+0x716>
				statePP = 7;
    291a:	87 e0       	ldi	r24, 0x07	; 7
    291c:	80 93 3a 05 	sts	0x053A, r24
				lastState = 0;
    2920:	10 92 a1 05 	sts	0x05A1, r1
				srTmp = 0;
    2924:	10 92 ab 05 	sts	0x05AB, r1
    2928:	10 92 ac 05 	sts	0x05AC, r1
    292c:	10 92 ad 05 	sts	0x05AD, r1
    2930:	10 92 ae 05 	sts	0x05AE, r1
				}
			//}
		
		break;
	}
	return NO;	
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	c9 c1       	rjmp	.+914    	; 0x2cca <paralelParkingSMF+0x72c>
				lastState = 0;
				srTmp = 0;
			}
		break;
		case 7:
			if(checkMinim()){
    2938:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <checkMinim>
    293c:	88 23       	and	r24, r24
    293e:	09 f4       	brne	.+2      	; 0x2942 <paralelParkingSMF+0x3a4>
    2940:	bb c1       	rjmp	.+886    	; 0x2cb8 <paralelParkingSMF+0x71a>
				//stopEngines();
				statePP = 8;
    2942:	88 e0       	ldi	r24, 0x08	; 8
    2944:	80 93 3a 05 	sts	0x053A, r24
				goFront(15, 40);
    2948:	68 e2       	ldi	r22, 0x28	; 40
    294a:	8f e0       	ldi	r24, 0x0F	; 15
    294c:	0e 94 03 05 	call	0xa06	; 0xa06 <goFront>
				}
			//}
		
		break;
	}
	return NO;	
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	bb c1       	rjmp	.+886    	; 0x2cca <paralelParkingSMF+0x72c>
				statePP = 8;
				goFront(15, 40);
			}		
		break;
		case 8:
			if(fr<100){
    2954:	54 e6       	ldi	r21, 0x64	; 100
    2956:	85 16       	cp	r8, r21
    2958:	91 04       	cpc	r9, r1
    295a:	a1 04       	cpc	r10, r1
    295c:	b1 04       	cpc	r11, r1
    295e:	08 f0       	brcs	.+2      	; 0x2962 <paralelParkingSMF+0x3c4>
    2960:	ad c1       	rjmp	.+858    	; 0x2cbc <paralelParkingSMF+0x71e>
				//stopEngines();
				//return YES;
				distDeParcurs = DISTANTA_PARCURSA + 100;
    2962:	80 91 0c 04 	lds	r24, 0x040C
    2966:	90 91 0d 04 	lds	r25, 0x040D
    296a:	a0 91 0e 04 	lds	r26, 0x040E
    296e:	b0 91 0f 04 	lds	r27, 0x040F
    2972:	40 91 12 04 	lds	r20, 0x0412
    2976:	50 91 13 04 	lds	r21, 0x0413
    297a:	60 91 14 04 	lds	r22, 0x0414
    297e:	70 91 15 04 	lds	r23, 0x0415
    2982:	84 0f       	add	r24, r20
    2984:	95 1f       	adc	r25, r21
    2986:	a6 1f       	adc	r26, r22
    2988:	b7 1f       	adc	r27, r23
    298a:	b6 95       	lsr	r27
    298c:	a7 95       	ror	r26
    298e:	97 95       	ror	r25
    2990:	87 95       	ror	r24
    2992:	b6 95       	lsr	r27
    2994:	a7 95       	ror	r26
    2996:	97 95       	ror	r25
    2998:	87 95       	ror	r24
    299a:	ac 01       	movw	r20, r24
    299c:	bd 01       	movw	r22, r26
    299e:	44 0f       	add	r20, r20
    29a0:	55 1f       	adc	r21, r21
    29a2:	66 1f       	adc	r22, r22
    29a4:	77 1f       	adc	r23, r23
    29a6:	44 0f       	add	r20, r20
    29a8:	55 1f       	adc	r21, r21
    29aa:	66 1f       	adc	r22, r22
    29ac:	77 1f       	adc	r23, r23
    29ae:	6a 01       	movw	r12, r20
    29b0:	7b 01       	movw	r14, r22
    29b2:	cc 0c       	add	r12, r12
    29b4:	dd 1c       	adc	r13, r13
    29b6:	ee 1c       	adc	r14, r14
    29b8:	ff 1c       	adc	r15, r15
    29ba:	cc 0c       	add	r12, r12
    29bc:	dd 1c       	adc	r13, r13
    29be:	ee 1c       	adc	r14, r14
    29c0:	ff 1c       	adc	r15, r15
    29c2:	4c 0d       	add	r20, r12
    29c4:	5d 1d       	adc	r21, r13
    29c6:	6e 1d       	adc	r22, r14
    29c8:	7f 1d       	adc	r23, r15
    29ca:	84 0f       	add	r24, r20
    29cc:	95 1f       	adc	r25, r21
    29ce:	a6 1f       	adc	r26, r22
    29d0:	b7 1f       	adc	r27, r23
    29d2:	8c 59       	subi	r24, 0x9C	; 156
    29d4:	9f 4f       	sbci	r25, 0xFF	; 255
    29d6:	af 4f       	sbci	r26, 0xFF	; 255
    29d8:	bf 4f       	sbci	r27, 0xFF	; 255
    29da:	80 93 b0 05 	sts	0x05B0, r24
    29de:	90 93 b1 05 	sts	0x05B1, r25
    29e2:	a0 93 b2 05 	sts	0x05B2, r26
    29e6:	b0 93 b3 05 	sts	0x05B3, r27
				statePP = 9;
    29ea:	89 e0       	ldi	r24, 0x09	; 9
    29ec:	80 93 3a 05 	sts	0x053A, r24
				goBack(10, 50);				
    29f0:	62 e3       	ldi	r22, 0x32	; 50
    29f2:	8a e0       	ldi	r24, 0x0A	; 10
    29f4:	0e 94 33 05 	call	0xa66	; 0xa66 <goBack>
				}
			//}
		
		break;
	}
	return NO;	
    29f8:	80 e0       	ldi	r24, 0x00	; 0
    29fa:	67 c1       	rjmp	.+718    	; 0x2cca <paralelParkingSMF+0x72c>
				statePP = 9;
				goBack(10, 50);				
			}
		break;
		case 9:
			if(DISTANTA_PARCURSA > distDeParcurs){
    29fc:	80 91 0c 04 	lds	r24, 0x040C
    2a00:	90 91 0d 04 	lds	r25, 0x040D
    2a04:	a0 91 0e 04 	lds	r26, 0x040E
    2a08:	b0 91 0f 04 	lds	r27, 0x040F
    2a0c:	40 91 12 04 	lds	r20, 0x0412
    2a10:	50 91 13 04 	lds	r21, 0x0413
    2a14:	60 91 14 04 	lds	r22, 0x0414
    2a18:	70 91 15 04 	lds	r23, 0x0415
    2a1c:	84 0f       	add	r24, r20
    2a1e:	95 1f       	adc	r25, r21
    2a20:	a6 1f       	adc	r26, r22
    2a22:	b7 1f       	adc	r27, r23
    2a24:	b6 95       	lsr	r27
    2a26:	a7 95       	ror	r26
    2a28:	97 95       	ror	r25
    2a2a:	87 95       	ror	r24
    2a2c:	b6 95       	lsr	r27
    2a2e:	a7 95       	ror	r26
    2a30:	97 95       	ror	r25
    2a32:	87 95       	ror	r24
    2a34:	ac 01       	movw	r20, r24
    2a36:	bd 01       	movw	r22, r26
    2a38:	44 0f       	add	r20, r20
    2a3a:	55 1f       	adc	r21, r21
    2a3c:	66 1f       	adc	r22, r22
    2a3e:	77 1f       	adc	r23, r23
    2a40:	44 0f       	add	r20, r20
    2a42:	55 1f       	adc	r21, r21
    2a44:	66 1f       	adc	r22, r22
    2a46:	77 1f       	adc	r23, r23
    2a48:	6a 01       	movw	r12, r20
    2a4a:	7b 01       	movw	r14, r22
    2a4c:	cc 0c       	add	r12, r12
    2a4e:	dd 1c       	adc	r13, r13
    2a50:	ee 1c       	adc	r14, r14
    2a52:	ff 1c       	adc	r15, r15
    2a54:	cc 0c       	add	r12, r12
    2a56:	dd 1c       	adc	r13, r13
    2a58:	ee 1c       	adc	r14, r14
    2a5a:	ff 1c       	adc	r15, r15
    2a5c:	4c 0d       	add	r20, r12
    2a5e:	5d 1d       	adc	r21, r13
    2a60:	6e 1d       	adc	r22, r14
    2a62:	7f 1d       	adc	r23, r15
    2a64:	84 0f       	add	r24, r20
    2a66:	95 1f       	adc	r25, r21
    2a68:	a6 1f       	adc	r26, r22
    2a6a:	b7 1f       	adc	r27, r23
    2a6c:	c0 90 b0 05 	lds	r12, 0x05B0
    2a70:	d0 90 b1 05 	lds	r13, 0x05B1
    2a74:	e0 90 b2 05 	lds	r14, 0x05B2
    2a78:	f0 90 b3 05 	lds	r15, 0x05B3
    2a7c:	c8 16       	cp	r12, r24
    2a7e:	d9 06       	cpc	r13, r25
    2a80:	ea 06       	cpc	r14, r26
    2a82:	fb 06       	cpc	r15, r27
    2a84:	08 f0       	brcs	.+2      	; 0x2a88 <paralelParkingSMF+0x4ea>
    2a86:	1c c1       	rjmp	.+568    	; 0x2cc0 <paralelParkingSMF+0x722>
				stopEngines();
    2a88:	0e 94 85 04 	call	0x90a	; 0x90a <stopEngines>
				//return YES;
				statePP = 10;
    2a8c:	8a e0       	ldi	r24, 0x0A	; 10
    2a8e:	80 93 3a 05 	sts	0x053A, r24
				}
			//}
		
		break;
	}
	return NO;	
    2a92:	80 e0       	ldi	r24, 0x00	; 0
    2a94:	1a c1       	rjmp	.+564    	; 0x2cca <paralelParkingSMF+0x72c>
			}
		
		break;
		case 10:
			if( 1 || SMPcheck()){
				stopEngines();
    2a96:	0e 94 85 04 	call	0x90a	; 0x90a <stopEngines>
				distDeParcurs = DISTANTA_PARCURSA + 30;
    2a9a:	80 91 0c 04 	lds	r24, 0x040C
    2a9e:	90 91 0d 04 	lds	r25, 0x040D
    2aa2:	a0 91 0e 04 	lds	r26, 0x040E
    2aa6:	b0 91 0f 04 	lds	r27, 0x040F
    2aaa:	40 91 12 04 	lds	r20, 0x0412
    2aae:	50 91 13 04 	lds	r21, 0x0413
    2ab2:	60 91 14 04 	lds	r22, 0x0414
    2ab6:	70 91 15 04 	lds	r23, 0x0415
    2aba:	84 0f       	add	r24, r20
    2abc:	95 1f       	adc	r25, r21
    2abe:	a6 1f       	adc	r26, r22
    2ac0:	b7 1f       	adc	r27, r23
    2ac2:	b6 95       	lsr	r27
    2ac4:	a7 95       	ror	r26
    2ac6:	97 95       	ror	r25
    2ac8:	87 95       	ror	r24
    2aca:	b6 95       	lsr	r27
    2acc:	a7 95       	ror	r26
    2ace:	97 95       	ror	r25
    2ad0:	87 95       	ror	r24
    2ad2:	ac 01       	movw	r20, r24
    2ad4:	bd 01       	movw	r22, r26
    2ad6:	44 0f       	add	r20, r20
    2ad8:	55 1f       	adc	r21, r21
    2ada:	66 1f       	adc	r22, r22
    2adc:	77 1f       	adc	r23, r23
    2ade:	44 0f       	add	r20, r20
    2ae0:	55 1f       	adc	r21, r21
    2ae2:	66 1f       	adc	r22, r22
    2ae4:	77 1f       	adc	r23, r23
    2ae6:	4a 01       	movw	r8, r20
    2ae8:	5b 01       	movw	r10, r22
    2aea:	88 0c       	add	r8, r8
    2aec:	99 1c       	adc	r9, r9
    2aee:	aa 1c       	adc	r10, r10
    2af0:	bb 1c       	adc	r11, r11
    2af2:	88 0c       	add	r8, r8
    2af4:	99 1c       	adc	r9, r9
    2af6:	aa 1c       	adc	r10, r10
    2af8:	bb 1c       	adc	r11, r11
    2afa:	48 0d       	add	r20, r8
    2afc:	59 1d       	adc	r21, r9
    2afe:	6a 1d       	adc	r22, r10
    2b00:	7b 1d       	adc	r23, r11
    2b02:	84 0f       	add	r24, r20
    2b04:	95 1f       	adc	r25, r21
    2b06:	a6 1f       	adc	r26, r22
    2b08:	b7 1f       	adc	r27, r23
    2b0a:	4e 96       	adiw	r24, 0x1e	; 30
    2b0c:	a1 1d       	adc	r26, r1
    2b0e:	b1 1d       	adc	r27, r1
    2b10:	80 93 b0 05 	sts	0x05B0, r24
    2b14:	90 93 b1 05 	sts	0x05B1, r25
    2b18:	a0 93 b2 05 	sts	0x05B2, r26
    2b1c:	b0 93 b3 05 	sts	0x05B3, r27
				statePP = 11;
    2b20:	8b e0       	ldi	r24, 0x0B	; 11
    2b22:	80 93 3a 05 	sts	0x053A, r24
				goFront(10, 50);
    2b26:	62 e3       	ldi	r22, 0x32	; 50
    2b28:	8a e0       	ldi	r24, 0x0A	; 10
    2b2a:	0e 94 03 05 	call	0xa06	; 0xa06 <goFront>
				xx = sr;
    2b2e:	c0 92 a6 05 	sts	0x05A6, r12
    2b32:	d0 92 a7 05 	sts	0x05A7, r13
    2b36:	e0 92 a8 05 	sts	0x05A8, r14
    2b3a:	f0 92 a9 05 	sts	0x05A9, r15
				}
			//}
		
		break;
	}
	return NO;	
    2b3e:	80 e0       	ldi	r24, 0x00	; 0
				goFront(10, 50);
				xx = sr;
				//return YES;
			}
		
		break;
    2b40:	c4 c0       	rjmp	.+392    	; 0x2cca <paralelParkingSMF+0x72c>
		case 11:
			if(DISTANTA_PARCURSA > distDeParcurs){
    2b42:	80 91 0c 04 	lds	r24, 0x040C
    2b46:	90 91 0d 04 	lds	r25, 0x040D
    2b4a:	a0 91 0e 04 	lds	r26, 0x040E
    2b4e:	b0 91 0f 04 	lds	r27, 0x040F
    2b52:	40 91 12 04 	lds	r20, 0x0412
    2b56:	50 91 13 04 	lds	r21, 0x0413
    2b5a:	60 91 14 04 	lds	r22, 0x0414
    2b5e:	70 91 15 04 	lds	r23, 0x0415
    2b62:	84 0f       	add	r24, r20
    2b64:	95 1f       	adc	r25, r21
    2b66:	a6 1f       	adc	r26, r22
    2b68:	b7 1f       	adc	r27, r23
    2b6a:	b6 95       	lsr	r27
    2b6c:	a7 95       	ror	r26
    2b6e:	97 95       	ror	r25
    2b70:	87 95       	ror	r24
    2b72:	b6 95       	lsr	r27
    2b74:	a7 95       	ror	r26
    2b76:	97 95       	ror	r25
    2b78:	87 95       	ror	r24
    2b7a:	ac 01       	movw	r20, r24
    2b7c:	bd 01       	movw	r22, r26
    2b7e:	44 0f       	add	r20, r20
    2b80:	55 1f       	adc	r21, r21
    2b82:	66 1f       	adc	r22, r22
    2b84:	77 1f       	adc	r23, r23
    2b86:	44 0f       	add	r20, r20
    2b88:	55 1f       	adc	r21, r21
    2b8a:	66 1f       	adc	r22, r22
    2b8c:	77 1f       	adc	r23, r23
    2b8e:	4a 01       	movw	r8, r20
    2b90:	5b 01       	movw	r10, r22
    2b92:	88 0c       	add	r8, r8
    2b94:	99 1c       	adc	r9, r9
    2b96:	aa 1c       	adc	r10, r10
    2b98:	bb 1c       	adc	r11, r11
    2b9a:	88 0c       	add	r8, r8
    2b9c:	99 1c       	adc	r9, r9
    2b9e:	aa 1c       	adc	r10, r10
    2ba0:	bb 1c       	adc	r11, r11
    2ba2:	48 0d       	add	r20, r8
    2ba4:	59 1d       	adc	r21, r9
    2ba6:	6a 1d       	adc	r22, r10
    2ba8:	7b 1d       	adc	r23, r11
    2baa:	84 0f       	add	r24, r20
    2bac:	95 1f       	adc	r25, r21
    2bae:	a6 1f       	adc	r26, r22
    2bb0:	b7 1f       	adc	r27, r23
    2bb2:	80 90 b0 05 	lds	r8, 0x05B0
    2bb6:	90 90 b1 05 	lds	r9, 0x05B1
    2bba:	a0 90 b2 05 	lds	r10, 0x05B2
    2bbe:	b0 90 b3 05 	lds	r11, 0x05B3
    2bc2:	88 16       	cp	r8, r24
    2bc4:	99 06       	cpc	r9, r25
    2bc6:	aa 06       	cpc	r10, r26
    2bc8:	bb 06       	cpc	r11, r27
    2bca:	08 f0       	brcs	.+2      	; 0x2bce <paralelParkingSMF+0x630>
    2bcc:	7b c0       	rjmp	.+246    	; 0x2cc4 <paralelParkingSMF+0x726>
				if(xx > sr +5){
    2bce:	80 91 a6 05 	lds	r24, 0x05A6
    2bd2:	90 91 a7 05 	lds	r25, 0x05A7
    2bd6:	a0 91 a8 05 	lds	r26, 0x05A8
    2bda:	b0 91 a9 05 	lds	r27, 0x05A9
    2bde:	46 01       	movw	r8, r12
    2be0:	57 01       	movw	r10, r14
    2be2:	25 e0       	ldi	r18, 0x05	; 5
    2be4:	82 0e       	add	r8, r18
    2be6:	91 1c       	adc	r9, r1
    2be8:	a1 1c       	adc	r10, r1
    2bea:	b1 1c       	adc	r11, r1
    2bec:	88 16       	cp	r8, r24
    2bee:	99 06       	cpc	r9, r25
    2bf0:	aa 06       	cpc	r10, r26
    2bf2:	bb 06       	cpc	r11, r27
    2bf4:	a0 f4       	brcc	.+40     	; 0x2c1e <paralelParkingSMF+0x680>
					cnt2 = (xx-sr)%10;
    2bf6:	bc 01       	movw	r22, r24
    2bf8:	cd 01       	movw	r24, r26
    2bfa:	6c 19       	sub	r22, r12
    2bfc:	7d 09       	sbc	r23, r13
    2bfe:	8e 09       	sbc	r24, r14
    2c00:	9f 09       	sbc	r25, r15
    2c02:	2a e0       	ldi	r18, 0x0A	; 10
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	40 e0       	ldi	r20, 0x00	; 0
    2c08:	50 e0       	ldi	r21, 0x00	; 0
    2c0a:	0e 94 6f 16 	call	0x2cde	; 0x2cde <__udivmodsi4>
    2c0e:	60 93 39 05 	sts	0x0539, r22
					rotirePeLoc(2, 75, RightEngines);
    2c12:	40 e0       	ldi	r20, 0x00	; 0
    2c14:	6b e4       	ldi	r22, 0x4B	; 75
    2c16:	82 e0       	ldi	r24, 0x02	; 2
    2c18:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <rotirePeLoc>
    2c1c:	27 c0       	rjmp	.+78     	; 0x2c6c <paralelParkingSMF+0x6ce>
				}
				else if(sr > xx + 5){
    2c1e:	4c 01       	movw	r8, r24
    2c20:	5d 01       	movw	r10, r26
    2c22:	35 e0       	ldi	r19, 0x05	; 5
    2c24:	83 0e       	add	r8, r19
    2c26:	91 1c       	adc	r9, r1
    2c28:	a1 1c       	adc	r10, r1
    2c2a:	b1 1c       	adc	r11, r1
    2c2c:	8c 14       	cp	r8, r12
    2c2e:	9d 04       	cpc	r9, r13
    2c30:	ae 04       	cpc	r10, r14
    2c32:	bf 04       	cpc	r11, r15
    2c34:	b0 f4       	brcc	.+44     	; 0x2c62 <paralelParkingSMF+0x6c4>
					cnt2 = (sr-xx)%10;
    2c36:	a7 01       	movw	r20, r14
    2c38:	96 01       	movw	r18, r12
    2c3a:	28 1b       	sub	r18, r24
    2c3c:	39 0b       	sbc	r19, r25
    2c3e:	4a 0b       	sbc	r20, r26
    2c40:	5b 0b       	sbc	r21, r27
    2c42:	ca 01       	movw	r24, r20
    2c44:	b9 01       	movw	r22, r18
    2c46:	2a e0       	ldi	r18, 0x0A	; 10
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	40 e0       	ldi	r20, 0x00	; 0
    2c4c:	50 e0       	ldi	r21, 0x00	; 0
    2c4e:	0e 94 6f 16 	call	0x2cde	; 0x2cde <__udivmodsi4>
    2c52:	60 93 39 05 	sts	0x0539, r22
					rotirePeLoc(2, 75, LeftEngines);
    2c56:	41 e0       	ldi	r20, 0x01	; 1
    2c58:	6b e4       	ldi	r22, 0x4B	; 75
    2c5a:	82 e0       	ldi	r24, 0x02	; 2
    2c5c:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <rotirePeLoc>
    2c60:	05 c0       	rjmp	.+10     	; 0x2c6c <paralelParkingSMF+0x6ce>
				}else{
					cnt2 = 1;
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	80 93 39 05 	sts	0x0539, r24
					stopEngines();
    2c68:	0e 94 85 04 	call	0x90a	; 0x90a <stopEngines>
				}
				statePP = 12;
    2c6c:	8c e0       	ldi	r24, 0x0C	; 12
    2c6e:	80 93 3a 05 	sts	0x053A, r24
				}
			//}
		
		break;
	}
	return NO;	
    2c72:	80 e0       	ldi	r24, 0x00	; 0
    2c74:	2a c0       	rjmp	.+84     	; 0x2cca <paralelParkingSMF+0x72c>
				statePP = 12;
			}
		break;
		case 12:
			//if(DISTANTA_PARCURSA > distDeParcurs){
				cnt2 --;
    2c76:	80 91 39 05 	lds	r24, 0x0539
    2c7a:	81 50       	subi	r24, 0x01	; 1
    2c7c:	80 93 39 05 	sts	0x0539, r24
				if(cnt2 == 0){
    2c80:	81 11       	cpse	r24, r1
    2c82:	22 c0       	rjmp	.+68     	; 0x2cc8 <paralelParkingSMF+0x72a>
					BTTransmitStr("xAm parcat paralel!");
    2c84:	81 ee       	ldi	r24, 0xE1	; 225
    2c86:	93 e0       	ldi	r25, 0x03	; 3
    2c88:	0e 94 b4 01 	call	0x368	; 0x368 <BTTransmitStr>
					//stopEngines();
					return YES;
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	1d c0       	rjmp	.+58     	; 0x2cca <paralelParkingSMF+0x72c>
				}
			//}
		
		break;
	}
	return NO;	
    2c90:	80 e0       	ldi	r24, 0x00	; 0
    2c92:	1b c0       	rjmp	.+54     	; 0x2cca <paralelParkingSMF+0x72c>
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	19 c0       	rjmp	.+50     	; 0x2cca <paralelParkingSMF+0x72c>
    2c98:	80 e0       	ldi	r24, 0x00	; 0
    2c9a:	17 c0       	rjmp	.+46     	; 0x2cca <paralelParkingSMF+0x72c>
    2c9c:	80 e0       	ldi	r24, 0x00	; 0
    2c9e:	15 c0       	rjmp	.+42     	; 0x2cca <paralelParkingSMF+0x72c>
    2ca0:	80 e0       	ldi	r24, 0x00	; 0
    2ca2:	13 c0       	rjmp	.+38     	; 0x2cca <paralelParkingSMF+0x72c>
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
    2ca6:	11 c0       	rjmp	.+34     	; 0x2cca <paralelParkingSMF+0x72c>
    2ca8:	80 e0       	ldi	r24, 0x00	; 0
    2caa:	0f c0       	rjmp	.+30     	; 0x2cca <paralelParkingSMF+0x72c>
    2cac:	80 e0       	ldi	r24, 0x00	; 0
    2cae:	0d c0       	rjmp	.+26     	; 0x2cca <paralelParkingSMF+0x72c>
    2cb0:	80 e0       	ldi	r24, 0x00	; 0
    2cb2:	0b c0       	rjmp	.+22     	; 0x2cca <paralelParkingSMF+0x72c>
    2cb4:	80 e0       	ldi	r24, 0x00	; 0
    2cb6:	09 c0       	rjmp	.+18     	; 0x2cca <paralelParkingSMF+0x72c>
    2cb8:	80 e0       	ldi	r24, 0x00	; 0
    2cba:	07 c0       	rjmp	.+14     	; 0x2cca <paralelParkingSMF+0x72c>
    2cbc:	80 e0       	ldi	r24, 0x00	; 0
    2cbe:	05 c0       	rjmp	.+10     	; 0x2cca <paralelParkingSMF+0x72c>
    2cc0:	80 e0       	ldi	r24, 0x00	; 0
    2cc2:	03 c0       	rjmp	.+6      	; 0x2cca <paralelParkingSMF+0x72c>
    2cc4:	80 e0       	ldi	r24, 0x00	; 0
    2cc6:	01 c0       	rjmp	.+2      	; 0x2cca <paralelParkingSMF+0x72c>
    2cc8:	80 e0       	ldi	r24, 0x00	; 0
}
    2cca:	0f 91       	pop	r16
    2ccc:	ff 90       	pop	r15
    2cce:	ef 90       	pop	r14
    2cd0:	df 90       	pop	r13
    2cd2:	cf 90       	pop	r12
    2cd4:	bf 90       	pop	r11
    2cd6:	af 90       	pop	r10
    2cd8:	9f 90       	pop	r9
    2cda:	8f 90       	pop	r8
    2cdc:	08 95       	ret

00002cde <__udivmodsi4>:
    2cde:	a1 e2       	ldi	r26, 0x21	; 33
    2ce0:	1a 2e       	mov	r1, r26
    2ce2:	aa 1b       	sub	r26, r26
    2ce4:	bb 1b       	sub	r27, r27
    2ce6:	fd 01       	movw	r30, r26
    2ce8:	0d c0       	rjmp	.+26     	; 0x2d04 <__udivmodsi4_ep>

00002cea <__udivmodsi4_loop>:
    2cea:	aa 1f       	adc	r26, r26
    2cec:	bb 1f       	adc	r27, r27
    2cee:	ee 1f       	adc	r30, r30
    2cf0:	ff 1f       	adc	r31, r31
    2cf2:	a2 17       	cp	r26, r18
    2cf4:	b3 07       	cpc	r27, r19
    2cf6:	e4 07       	cpc	r30, r20
    2cf8:	f5 07       	cpc	r31, r21
    2cfa:	20 f0       	brcs	.+8      	; 0x2d04 <__udivmodsi4_ep>
    2cfc:	a2 1b       	sub	r26, r18
    2cfe:	b3 0b       	sbc	r27, r19
    2d00:	e4 0b       	sbc	r30, r20
    2d02:	f5 0b       	sbc	r31, r21

00002d04 <__udivmodsi4_ep>:
    2d04:	66 1f       	adc	r22, r22
    2d06:	77 1f       	adc	r23, r23
    2d08:	88 1f       	adc	r24, r24
    2d0a:	99 1f       	adc	r25, r25
    2d0c:	1a 94       	dec	r1
    2d0e:	69 f7       	brne	.-38     	; 0x2cea <__udivmodsi4_loop>
    2d10:	60 95       	com	r22
    2d12:	70 95       	com	r23
    2d14:	80 95       	com	r24
    2d16:	90 95       	com	r25
    2d18:	9b 01       	movw	r18, r22
    2d1a:	ac 01       	movw	r20, r24
    2d1c:	bd 01       	movw	r22, r26
    2d1e:	cf 01       	movw	r24, r30
    2d20:	08 95       	ret

00002d22 <__tablejump2__>:
    2d22:	ee 0f       	add	r30, r30
    2d24:	ff 1f       	adc	r31, r31

00002d26 <__tablejump__>:
    2d26:	05 90       	lpm	r0, Z+
    2d28:	f4 91       	lpm	r31, Z
    2d2a:	e0 2d       	mov	r30, r0
    2d2c:	09 94       	ijmp

00002d2e <__umulhisi3>:
    2d2e:	a2 9f       	mul	r26, r18
    2d30:	b0 01       	movw	r22, r0
    2d32:	b3 9f       	mul	r27, r19
    2d34:	c0 01       	movw	r24, r0
    2d36:	a3 9f       	mul	r26, r19
    2d38:	70 0d       	add	r23, r0
    2d3a:	81 1d       	adc	r24, r1
    2d3c:	11 24       	eor	r1, r1
    2d3e:	91 1d       	adc	r25, r1
    2d40:	b2 9f       	mul	r27, r18
    2d42:	70 0d       	add	r23, r0
    2d44:	81 1d       	adc	r24, r1
    2d46:	11 24       	eor	r1, r1
    2d48:	91 1d       	adc	r25, r1
    2d4a:	08 95       	ret

00002d4c <__muluhisi3>:
    2d4c:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__umulhisi3>
    2d50:	a5 9f       	mul	r26, r21
    2d52:	90 0d       	add	r25, r0
    2d54:	b4 9f       	mul	r27, r20
    2d56:	90 0d       	add	r25, r0
    2d58:	a4 9f       	mul	r26, r20
    2d5a:	80 0d       	add	r24, r0
    2d5c:	91 1d       	adc	r25, r1
    2d5e:	11 24       	eor	r1, r1
    2d60:	08 95       	ret

00002d62 <printf>:
    2d62:	a0 e0       	ldi	r26, 0x00	; 0
    2d64:	b0 e0       	ldi	r27, 0x00	; 0
    2d66:	e7 eb       	ldi	r30, 0xB7	; 183
    2d68:	f6 e1       	ldi	r31, 0x16	; 22
    2d6a:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__prologue_saves__+0x20>
    2d6e:	fe 01       	movw	r30, r28
    2d70:	35 96       	adiw	r30, 0x05	; 5
    2d72:	61 91       	ld	r22, Z+
    2d74:	71 91       	ld	r23, Z+
    2d76:	af 01       	movw	r20, r30
    2d78:	80 91 b6 05 	lds	r24, 0x05B6
    2d7c:	90 91 b7 05 	lds	r25, 0x05B7
    2d80:	0e 94 e7 16 	call	0x2dce	; 0x2dce <vfprintf>
    2d84:	e2 e0       	ldi	r30, 0x02	; 2
    2d86:	0c 94 8b 19 	jmp	0x3316	; 0x3316 <__epilogue_restores__+0x20>

00002d8a <sprintf>:
    2d8a:	ae e0       	ldi	r26, 0x0E	; 14
    2d8c:	b0 e0       	ldi	r27, 0x00	; 0
    2d8e:	eb ec       	ldi	r30, 0xCB	; 203
    2d90:	f6 e1       	ldi	r31, 0x16	; 22
    2d92:	0c 94 6d 19 	jmp	0x32da	; 0x32da <__prologue_saves__+0x1c>
    2d96:	0d 89       	ldd	r16, Y+21	; 0x15
    2d98:	1e 89       	ldd	r17, Y+22	; 0x16
    2d9a:	86 e0       	ldi	r24, 0x06	; 6
    2d9c:	8c 83       	std	Y+4, r24	; 0x04
    2d9e:	1a 83       	std	Y+2, r17	; 0x02
    2da0:	09 83       	std	Y+1, r16	; 0x01
    2da2:	8f ef       	ldi	r24, 0xFF	; 255
    2da4:	9f e7       	ldi	r25, 0x7F	; 127
    2da6:	9e 83       	std	Y+6, r25	; 0x06
    2da8:	8d 83       	std	Y+5, r24	; 0x05
    2daa:	ae 01       	movw	r20, r28
    2dac:	47 5e       	subi	r20, 0xE7	; 231
    2dae:	5f 4f       	sbci	r21, 0xFF	; 255
    2db0:	6f 89       	ldd	r22, Y+23	; 0x17
    2db2:	78 8d       	ldd	r23, Y+24	; 0x18
    2db4:	ce 01       	movw	r24, r28
    2db6:	01 96       	adiw	r24, 0x01	; 1
    2db8:	0e 94 e7 16 	call	0x2dce	; 0x2dce <vfprintf>
    2dbc:	ef 81       	ldd	r30, Y+7	; 0x07
    2dbe:	f8 85       	ldd	r31, Y+8	; 0x08
    2dc0:	e0 0f       	add	r30, r16
    2dc2:	f1 1f       	adc	r31, r17
    2dc4:	10 82       	st	Z, r1
    2dc6:	2e 96       	adiw	r28, 0x0e	; 14
    2dc8:	e4 e0       	ldi	r30, 0x04	; 4
    2dca:	0c 94 89 19 	jmp	0x3312	; 0x3312 <__epilogue_restores__+0x1c>

00002dce <vfprintf>:
    2dce:	ac e0       	ldi	r26, 0x0C	; 12
    2dd0:	b0 e0       	ldi	r27, 0x00	; 0
    2dd2:	ed ee       	ldi	r30, 0xED	; 237
    2dd4:	f6 e1       	ldi	r31, 0x16	; 22
    2dd6:	0c 94 5f 19 	jmp	0x32be	; 0x32be <__prologue_saves__>
    2dda:	7c 01       	movw	r14, r24
    2ddc:	6b 01       	movw	r12, r22
    2dde:	8a 01       	movw	r16, r20
    2de0:	fc 01       	movw	r30, r24
    2de2:	17 82       	std	Z+7, r1	; 0x07
    2de4:	16 82       	std	Z+6, r1	; 0x06
    2de6:	83 81       	ldd	r24, Z+3	; 0x03
    2de8:	81 ff       	sbrs	r24, 1
    2dea:	bd c1       	rjmp	.+890    	; 0x3166 <vfprintf+0x398>
    2dec:	ce 01       	movw	r24, r28
    2dee:	01 96       	adiw	r24, 0x01	; 1
    2df0:	4c 01       	movw	r8, r24
    2df2:	f7 01       	movw	r30, r14
    2df4:	93 81       	ldd	r25, Z+3	; 0x03
    2df6:	f6 01       	movw	r30, r12
    2df8:	93 fd       	sbrc	r25, 3
    2dfa:	85 91       	lpm	r24, Z+
    2dfc:	93 ff       	sbrs	r25, 3
    2dfe:	81 91       	ld	r24, Z+
    2e00:	6f 01       	movw	r12, r30
    2e02:	88 23       	and	r24, r24
    2e04:	09 f4       	brne	.+2      	; 0x2e08 <vfprintf+0x3a>
    2e06:	ab c1       	rjmp	.+854    	; 0x315e <vfprintf+0x390>
    2e08:	85 32       	cpi	r24, 0x25	; 37
    2e0a:	39 f4       	brne	.+14     	; 0x2e1a <vfprintf+0x4c>
    2e0c:	93 fd       	sbrc	r25, 3
    2e0e:	85 91       	lpm	r24, Z+
    2e10:	93 ff       	sbrs	r25, 3
    2e12:	81 91       	ld	r24, Z+
    2e14:	6f 01       	movw	r12, r30
    2e16:	85 32       	cpi	r24, 0x25	; 37
    2e18:	29 f4       	brne	.+10     	; 0x2e24 <vfprintf+0x56>
    2e1a:	b7 01       	movw	r22, r14
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	0e 94 cf 18 	call	0x319e	; 0x319e <fputc>
    2e22:	e7 cf       	rjmp	.-50     	; 0x2df2 <vfprintf+0x24>
    2e24:	51 2c       	mov	r5, r1
    2e26:	31 2c       	mov	r3, r1
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	20 32       	cpi	r18, 0x20	; 32
    2e2c:	a0 f4       	brcc	.+40     	; 0x2e56 <vfprintf+0x88>
    2e2e:	8b 32       	cpi	r24, 0x2B	; 43
    2e30:	69 f0       	breq	.+26     	; 0x2e4c <vfprintf+0x7e>
    2e32:	30 f4       	brcc	.+12     	; 0x2e40 <vfprintf+0x72>
    2e34:	80 32       	cpi	r24, 0x20	; 32
    2e36:	59 f0       	breq	.+22     	; 0x2e4e <vfprintf+0x80>
    2e38:	83 32       	cpi	r24, 0x23	; 35
    2e3a:	69 f4       	brne	.+26     	; 0x2e56 <vfprintf+0x88>
    2e3c:	20 61       	ori	r18, 0x10	; 16
    2e3e:	2c c0       	rjmp	.+88     	; 0x2e98 <vfprintf+0xca>
    2e40:	8d 32       	cpi	r24, 0x2D	; 45
    2e42:	39 f0       	breq	.+14     	; 0x2e52 <vfprintf+0x84>
    2e44:	80 33       	cpi	r24, 0x30	; 48
    2e46:	39 f4       	brne	.+14     	; 0x2e56 <vfprintf+0x88>
    2e48:	21 60       	ori	r18, 0x01	; 1
    2e4a:	26 c0       	rjmp	.+76     	; 0x2e98 <vfprintf+0xca>
    2e4c:	22 60       	ori	r18, 0x02	; 2
    2e4e:	24 60       	ori	r18, 0x04	; 4
    2e50:	23 c0       	rjmp	.+70     	; 0x2e98 <vfprintf+0xca>
    2e52:	28 60       	ori	r18, 0x08	; 8
    2e54:	21 c0       	rjmp	.+66     	; 0x2e98 <vfprintf+0xca>
    2e56:	27 fd       	sbrc	r18, 7
    2e58:	27 c0       	rjmp	.+78     	; 0x2ea8 <vfprintf+0xda>
    2e5a:	30 ed       	ldi	r19, 0xD0	; 208
    2e5c:	38 0f       	add	r19, r24
    2e5e:	3a 30       	cpi	r19, 0x0A	; 10
    2e60:	78 f4       	brcc	.+30     	; 0x2e80 <vfprintf+0xb2>
    2e62:	26 ff       	sbrs	r18, 6
    2e64:	06 c0       	rjmp	.+12     	; 0x2e72 <vfprintf+0xa4>
    2e66:	fa e0       	ldi	r31, 0x0A	; 10
    2e68:	5f 9e       	mul	r5, r31
    2e6a:	30 0d       	add	r19, r0
    2e6c:	11 24       	eor	r1, r1
    2e6e:	53 2e       	mov	r5, r19
    2e70:	13 c0       	rjmp	.+38     	; 0x2e98 <vfprintf+0xca>
    2e72:	8a e0       	ldi	r24, 0x0A	; 10
    2e74:	38 9e       	mul	r3, r24
    2e76:	30 0d       	add	r19, r0
    2e78:	11 24       	eor	r1, r1
    2e7a:	33 2e       	mov	r3, r19
    2e7c:	20 62       	ori	r18, 0x20	; 32
    2e7e:	0c c0       	rjmp	.+24     	; 0x2e98 <vfprintf+0xca>
    2e80:	8e 32       	cpi	r24, 0x2E	; 46
    2e82:	21 f4       	brne	.+8      	; 0x2e8c <vfprintf+0xbe>
    2e84:	26 fd       	sbrc	r18, 6
    2e86:	6b c1       	rjmp	.+726    	; 0x315e <vfprintf+0x390>
    2e88:	20 64       	ori	r18, 0x40	; 64
    2e8a:	06 c0       	rjmp	.+12     	; 0x2e98 <vfprintf+0xca>
    2e8c:	8c 36       	cpi	r24, 0x6C	; 108
    2e8e:	11 f4       	brne	.+4      	; 0x2e94 <vfprintf+0xc6>
    2e90:	20 68       	ori	r18, 0x80	; 128
    2e92:	02 c0       	rjmp	.+4      	; 0x2e98 <vfprintf+0xca>
    2e94:	88 36       	cpi	r24, 0x68	; 104
    2e96:	41 f4       	brne	.+16     	; 0x2ea8 <vfprintf+0xda>
    2e98:	f6 01       	movw	r30, r12
    2e9a:	93 fd       	sbrc	r25, 3
    2e9c:	85 91       	lpm	r24, Z+
    2e9e:	93 ff       	sbrs	r25, 3
    2ea0:	81 91       	ld	r24, Z+
    2ea2:	6f 01       	movw	r12, r30
    2ea4:	81 11       	cpse	r24, r1
    2ea6:	c1 cf       	rjmp	.-126    	; 0x2e2a <vfprintf+0x5c>
    2ea8:	98 2f       	mov	r25, r24
    2eaa:	9f 7d       	andi	r25, 0xDF	; 223
    2eac:	95 54       	subi	r25, 0x45	; 69
    2eae:	93 30       	cpi	r25, 0x03	; 3
    2eb0:	28 f4       	brcc	.+10     	; 0x2ebc <vfprintf+0xee>
    2eb2:	0c 5f       	subi	r16, 0xFC	; 252
    2eb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb6:	ff e3       	ldi	r31, 0x3F	; 63
    2eb8:	f9 83       	std	Y+1, r31	; 0x01
    2eba:	0d c0       	rjmp	.+26     	; 0x2ed6 <vfprintf+0x108>
    2ebc:	83 36       	cpi	r24, 0x63	; 99
    2ebe:	31 f0       	breq	.+12     	; 0x2ecc <vfprintf+0xfe>
    2ec0:	83 37       	cpi	r24, 0x73	; 115
    2ec2:	71 f0       	breq	.+28     	; 0x2ee0 <vfprintf+0x112>
    2ec4:	83 35       	cpi	r24, 0x53	; 83
    2ec6:	09 f0       	breq	.+2      	; 0x2eca <vfprintf+0xfc>
    2ec8:	5b c0       	rjmp	.+182    	; 0x2f80 <vfprintf+0x1b2>
    2eca:	22 c0       	rjmp	.+68     	; 0x2f10 <vfprintf+0x142>
    2ecc:	f8 01       	movw	r30, r16
    2ece:	80 81       	ld	r24, Z
    2ed0:	89 83       	std	Y+1, r24	; 0x01
    2ed2:	0e 5f       	subi	r16, 0xFE	; 254
    2ed4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ed6:	44 24       	eor	r4, r4
    2ed8:	43 94       	inc	r4
    2eda:	51 2c       	mov	r5, r1
    2edc:	54 01       	movw	r10, r8
    2ede:	15 c0       	rjmp	.+42     	; 0x2f0a <vfprintf+0x13c>
    2ee0:	38 01       	movw	r6, r16
    2ee2:	f2 e0       	ldi	r31, 0x02	; 2
    2ee4:	6f 0e       	add	r6, r31
    2ee6:	71 1c       	adc	r7, r1
    2ee8:	f8 01       	movw	r30, r16
    2eea:	a0 80       	ld	r10, Z
    2eec:	b1 80       	ldd	r11, Z+1	; 0x01
    2eee:	26 ff       	sbrs	r18, 6
    2ef0:	03 c0       	rjmp	.+6      	; 0x2ef8 <vfprintf+0x12a>
    2ef2:	65 2d       	mov	r22, r5
    2ef4:	70 e0       	ldi	r23, 0x00	; 0
    2ef6:	02 c0       	rjmp	.+4      	; 0x2efc <vfprintf+0x12e>
    2ef8:	6f ef       	ldi	r22, 0xFF	; 255
    2efa:	7f ef       	ldi	r23, 0xFF	; 255
    2efc:	c5 01       	movw	r24, r10
    2efe:	2c 87       	std	Y+12, r18	; 0x0c
    2f00:	0e 94 c4 18 	call	0x3188	; 0x3188 <strnlen>
    2f04:	2c 01       	movw	r4, r24
    2f06:	83 01       	movw	r16, r6
    2f08:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f0a:	2f 77       	andi	r18, 0x7F	; 127
    2f0c:	22 2e       	mov	r2, r18
    2f0e:	17 c0       	rjmp	.+46     	; 0x2f3e <vfprintf+0x170>
    2f10:	38 01       	movw	r6, r16
    2f12:	f2 e0       	ldi	r31, 0x02	; 2
    2f14:	6f 0e       	add	r6, r31
    2f16:	71 1c       	adc	r7, r1
    2f18:	f8 01       	movw	r30, r16
    2f1a:	a0 80       	ld	r10, Z
    2f1c:	b1 80       	ldd	r11, Z+1	; 0x01
    2f1e:	26 ff       	sbrs	r18, 6
    2f20:	03 c0       	rjmp	.+6      	; 0x2f28 <vfprintf+0x15a>
    2f22:	65 2d       	mov	r22, r5
    2f24:	70 e0       	ldi	r23, 0x00	; 0
    2f26:	02 c0       	rjmp	.+4      	; 0x2f2c <vfprintf+0x15e>
    2f28:	6f ef       	ldi	r22, 0xFF	; 255
    2f2a:	7f ef       	ldi	r23, 0xFF	; 255
    2f2c:	c5 01       	movw	r24, r10
    2f2e:	2c 87       	std	Y+12, r18	; 0x0c
    2f30:	0e 94 b9 18 	call	0x3172	; 0x3172 <strnlen_P>
    2f34:	2c 01       	movw	r4, r24
    2f36:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f38:	20 68       	ori	r18, 0x80	; 128
    2f3a:	22 2e       	mov	r2, r18
    2f3c:	83 01       	movw	r16, r6
    2f3e:	23 fc       	sbrc	r2, 3
    2f40:	1b c0       	rjmp	.+54     	; 0x2f78 <vfprintf+0x1aa>
    2f42:	83 2d       	mov	r24, r3
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	48 16       	cp	r4, r24
    2f48:	59 06       	cpc	r5, r25
    2f4a:	b0 f4       	brcc	.+44     	; 0x2f78 <vfprintf+0x1aa>
    2f4c:	b7 01       	movw	r22, r14
    2f4e:	80 e2       	ldi	r24, 0x20	; 32
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	0e 94 cf 18 	call	0x319e	; 0x319e <fputc>
    2f56:	3a 94       	dec	r3
    2f58:	f4 cf       	rjmp	.-24     	; 0x2f42 <vfprintf+0x174>
    2f5a:	f5 01       	movw	r30, r10
    2f5c:	27 fc       	sbrc	r2, 7
    2f5e:	85 91       	lpm	r24, Z+
    2f60:	27 fe       	sbrs	r2, 7
    2f62:	81 91       	ld	r24, Z+
    2f64:	5f 01       	movw	r10, r30
    2f66:	b7 01       	movw	r22, r14
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	0e 94 cf 18 	call	0x319e	; 0x319e <fputc>
    2f6e:	31 10       	cpse	r3, r1
    2f70:	3a 94       	dec	r3
    2f72:	f1 e0       	ldi	r31, 0x01	; 1
    2f74:	4f 1a       	sub	r4, r31
    2f76:	51 08       	sbc	r5, r1
    2f78:	41 14       	cp	r4, r1
    2f7a:	51 04       	cpc	r5, r1
    2f7c:	71 f7       	brne	.-36     	; 0x2f5a <vfprintf+0x18c>
    2f7e:	e5 c0       	rjmp	.+458    	; 0x314a <vfprintf+0x37c>
    2f80:	84 36       	cpi	r24, 0x64	; 100
    2f82:	11 f0       	breq	.+4      	; 0x2f88 <vfprintf+0x1ba>
    2f84:	89 36       	cpi	r24, 0x69	; 105
    2f86:	39 f5       	brne	.+78     	; 0x2fd6 <vfprintf+0x208>
    2f88:	f8 01       	movw	r30, r16
    2f8a:	27 ff       	sbrs	r18, 7
    2f8c:	07 c0       	rjmp	.+14     	; 0x2f9c <vfprintf+0x1ce>
    2f8e:	60 81       	ld	r22, Z
    2f90:	71 81       	ldd	r23, Z+1	; 0x01
    2f92:	82 81       	ldd	r24, Z+2	; 0x02
    2f94:	93 81       	ldd	r25, Z+3	; 0x03
    2f96:	0c 5f       	subi	r16, 0xFC	; 252
    2f98:	1f 4f       	sbci	r17, 0xFF	; 255
    2f9a:	08 c0       	rjmp	.+16     	; 0x2fac <vfprintf+0x1de>
    2f9c:	60 81       	ld	r22, Z
    2f9e:	71 81       	ldd	r23, Z+1	; 0x01
    2fa0:	88 27       	eor	r24, r24
    2fa2:	77 fd       	sbrc	r23, 7
    2fa4:	80 95       	com	r24
    2fa6:	98 2f       	mov	r25, r24
    2fa8:	0e 5f       	subi	r16, 0xFE	; 254
    2faa:	1f 4f       	sbci	r17, 0xFF	; 255
    2fac:	2f 76       	andi	r18, 0x6F	; 111
    2fae:	b2 2e       	mov	r11, r18
    2fb0:	97 ff       	sbrs	r25, 7
    2fb2:	09 c0       	rjmp	.+18     	; 0x2fc6 <vfprintf+0x1f8>
    2fb4:	90 95       	com	r25
    2fb6:	80 95       	com	r24
    2fb8:	70 95       	com	r23
    2fba:	61 95       	neg	r22
    2fbc:	7f 4f       	sbci	r23, 0xFF	; 255
    2fbe:	8f 4f       	sbci	r24, 0xFF	; 255
    2fc0:	9f 4f       	sbci	r25, 0xFF	; 255
    2fc2:	20 68       	ori	r18, 0x80	; 128
    2fc4:	b2 2e       	mov	r11, r18
    2fc6:	2a e0       	ldi	r18, 0x0A	; 10
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	a4 01       	movw	r20, r8
    2fcc:	0e 94 01 19 	call	0x3202	; 0x3202 <__ultoa_invert>
    2fd0:	a8 2e       	mov	r10, r24
    2fd2:	a8 18       	sub	r10, r8
    2fd4:	44 c0       	rjmp	.+136    	; 0x305e <vfprintf+0x290>
    2fd6:	85 37       	cpi	r24, 0x75	; 117
    2fd8:	29 f4       	brne	.+10     	; 0x2fe4 <vfprintf+0x216>
    2fda:	2f 7e       	andi	r18, 0xEF	; 239
    2fdc:	b2 2e       	mov	r11, r18
    2fde:	2a e0       	ldi	r18, 0x0A	; 10
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	25 c0       	rjmp	.+74     	; 0x302e <vfprintf+0x260>
    2fe4:	f2 2f       	mov	r31, r18
    2fe6:	f9 7f       	andi	r31, 0xF9	; 249
    2fe8:	bf 2e       	mov	r11, r31
    2fea:	8f 36       	cpi	r24, 0x6F	; 111
    2fec:	c1 f0       	breq	.+48     	; 0x301e <vfprintf+0x250>
    2fee:	18 f4       	brcc	.+6      	; 0x2ff6 <vfprintf+0x228>
    2ff0:	88 35       	cpi	r24, 0x58	; 88
    2ff2:	79 f0       	breq	.+30     	; 0x3012 <vfprintf+0x244>
    2ff4:	b4 c0       	rjmp	.+360    	; 0x315e <vfprintf+0x390>
    2ff6:	80 37       	cpi	r24, 0x70	; 112
    2ff8:	19 f0       	breq	.+6      	; 0x3000 <vfprintf+0x232>
    2ffa:	88 37       	cpi	r24, 0x78	; 120
    2ffc:	21 f0       	breq	.+8      	; 0x3006 <vfprintf+0x238>
    2ffe:	af c0       	rjmp	.+350    	; 0x315e <vfprintf+0x390>
    3000:	2f 2f       	mov	r18, r31
    3002:	20 61       	ori	r18, 0x10	; 16
    3004:	b2 2e       	mov	r11, r18
    3006:	b4 fe       	sbrs	r11, 4
    3008:	0d c0       	rjmp	.+26     	; 0x3024 <vfprintf+0x256>
    300a:	8b 2d       	mov	r24, r11
    300c:	84 60       	ori	r24, 0x04	; 4
    300e:	b8 2e       	mov	r11, r24
    3010:	09 c0       	rjmp	.+18     	; 0x3024 <vfprintf+0x256>
    3012:	24 ff       	sbrs	r18, 4
    3014:	0a c0       	rjmp	.+20     	; 0x302a <vfprintf+0x25c>
    3016:	9f 2f       	mov	r25, r31
    3018:	96 60       	ori	r25, 0x06	; 6
    301a:	b9 2e       	mov	r11, r25
    301c:	06 c0       	rjmp	.+12     	; 0x302a <vfprintf+0x25c>
    301e:	28 e0       	ldi	r18, 0x08	; 8
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	05 c0       	rjmp	.+10     	; 0x302e <vfprintf+0x260>
    3024:	20 e1       	ldi	r18, 0x10	; 16
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	02 c0       	rjmp	.+4      	; 0x302e <vfprintf+0x260>
    302a:	20 e1       	ldi	r18, 0x10	; 16
    302c:	32 e0       	ldi	r19, 0x02	; 2
    302e:	f8 01       	movw	r30, r16
    3030:	b7 fe       	sbrs	r11, 7
    3032:	07 c0       	rjmp	.+14     	; 0x3042 <vfprintf+0x274>
    3034:	60 81       	ld	r22, Z
    3036:	71 81       	ldd	r23, Z+1	; 0x01
    3038:	82 81       	ldd	r24, Z+2	; 0x02
    303a:	93 81       	ldd	r25, Z+3	; 0x03
    303c:	0c 5f       	subi	r16, 0xFC	; 252
    303e:	1f 4f       	sbci	r17, 0xFF	; 255
    3040:	06 c0       	rjmp	.+12     	; 0x304e <vfprintf+0x280>
    3042:	60 81       	ld	r22, Z
    3044:	71 81       	ldd	r23, Z+1	; 0x01
    3046:	80 e0       	ldi	r24, 0x00	; 0
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	0e 5f       	subi	r16, 0xFE	; 254
    304c:	1f 4f       	sbci	r17, 0xFF	; 255
    304e:	a4 01       	movw	r20, r8
    3050:	0e 94 01 19 	call	0x3202	; 0x3202 <__ultoa_invert>
    3054:	a8 2e       	mov	r10, r24
    3056:	a8 18       	sub	r10, r8
    3058:	fb 2d       	mov	r31, r11
    305a:	ff 77       	andi	r31, 0x7F	; 127
    305c:	bf 2e       	mov	r11, r31
    305e:	b6 fe       	sbrs	r11, 6
    3060:	0b c0       	rjmp	.+22     	; 0x3078 <vfprintf+0x2aa>
    3062:	2b 2d       	mov	r18, r11
    3064:	2e 7f       	andi	r18, 0xFE	; 254
    3066:	a5 14       	cp	r10, r5
    3068:	50 f4       	brcc	.+20     	; 0x307e <vfprintf+0x2b0>
    306a:	b4 fe       	sbrs	r11, 4
    306c:	0a c0       	rjmp	.+20     	; 0x3082 <vfprintf+0x2b4>
    306e:	b2 fc       	sbrc	r11, 2
    3070:	08 c0       	rjmp	.+16     	; 0x3082 <vfprintf+0x2b4>
    3072:	2b 2d       	mov	r18, r11
    3074:	2e 7e       	andi	r18, 0xEE	; 238
    3076:	05 c0       	rjmp	.+10     	; 0x3082 <vfprintf+0x2b4>
    3078:	7a 2c       	mov	r7, r10
    307a:	2b 2d       	mov	r18, r11
    307c:	03 c0       	rjmp	.+6      	; 0x3084 <vfprintf+0x2b6>
    307e:	7a 2c       	mov	r7, r10
    3080:	01 c0       	rjmp	.+2      	; 0x3084 <vfprintf+0x2b6>
    3082:	75 2c       	mov	r7, r5
    3084:	24 ff       	sbrs	r18, 4
    3086:	0d c0       	rjmp	.+26     	; 0x30a2 <vfprintf+0x2d4>
    3088:	fe 01       	movw	r30, r28
    308a:	ea 0d       	add	r30, r10
    308c:	f1 1d       	adc	r31, r1
    308e:	80 81       	ld	r24, Z
    3090:	80 33       	cpi	r24, 0x30	; 48
    3092:	11 f4       	brne	.+4      	; 0x3098 <vfprintf+0x2ca>
    3094:	29 7e       	andi	r18, 0xE9	; 233
    3096:	09 c0       	rjmp	.+18     	; 0x30aa <vfprintf+0x2dc>
    3098:	22 ff       	sbrs	r18, 2
    309a:	06 c0       	rjmp	.+12     	; 0x30a8 <vfprintf+0x2da>
    309c:	73 94       	inc	r7
    309e:	73 94       	inc	r7
    30a0:	04 c0       	rjmp	.+8      	; 0x30aa <vfprintf+0x2dc>
    30a2:	82 2f       	mov	r24, r18
    30a4:	86 78       	andi	r24, 0x86	; 134
    30a6:	09 f0       	breq	.+2      	; 0x30aa <vfprintf+0x2dc>
    30a8:	73 94       	inc	r7
    30aa:	23 fd       	sbrc	r18, 3
    30ac:	13 c0       	rjmp	.+38     	; 0x30d4 <vfprintf+0x306>
    30ae:	20 ff       	sbrs	r18, 0
    30b0:	06 c0       	rjmp	.+12     	; 0x30be <vfprintf+0x2f0>
    30b2:	5a 2c       	mov	r5, r10
    30b4:	73 14       	cp	r7, r3
    30b6:	18 f4       	brcc	.+6      	; 0x30be <vfprintf+0x2f0>
    30b8:	53 0c       	add	r5, r3
    30ba:	57 18       	sub	r5, r7
    30bc:	73 2c       	mov	r7, r3
    30be:	73 14       	cp	r7, r3
    30c0:	68 f4       	brcc	.+26     	; 0x30dc <vfprintf+0x30e>
    30c2:	b7 01       	movw	r22, r14
    30c4:	80 e2       	ldi	r24, 0x20	; 32
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	2c 87       	std	Y+12, r18	; 0x0c
    30ca:	0e 94 cf 18 	call	0x319e	; 0x319e <fputc>
    30ce:	73 94       	inc	r7
    30d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    30d2:	f5 cf       	rjmp	.-22     	; 0x30be <vfprintf+0x2f0>
    30d4:	73 14       	cp	r7, r3
    30d6:	10 f4       	brcc	.+4      	; 0x30dc <vfprintf+0x30e>
    30d8:	37 18       	sub	r3, r7
    30da:	01 c0       	rjmp	.+2      	; 0x30de <vfprintf+0x310>
    30dc:	31 2c       	mov	r3, r1
    30de:	24 ff       	sbrs	r18, 4
    30e0:	12 c0       	rjmp	.+36     	; 0x3106 <vfprintf+0x338>
    30e2:	b7 01       	movw	r22, r14
    30e4:	80 e3       	ldi	r24, 0x30	; 48
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	2c 87       	std	Y+12, r18	; 0x0c
    30ea:	0e 94 cf 18 	call	0x319e	; 0x319e <fputc>
    30ee:	2c 85       	ldd	r18, Y+12	; 0x0c
    30f0:	22 ff       	sbrs	r18, 2
    30f2:	17 c0       	rjmp	.+46     	; 0x3122 <vfprintf+0x354>
    30f4:	21 ff       	sbrs	r18, 1
    30f6:	03 c0       	rjmp	.+6      	; 0x30fe <vfprintf+0x330>
    30f8:	88 e5       	ldi	r24, 0x58	; 88
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	02 c0       	rjmp	.+4      	; 0x3102 <vfprintf+0x334>
    30fe:	88 e7       	ldi	r24, 0x78	; 120
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	b7 01       	movw	r22, r14
    3104:	0c c0       	rjmp	.+24     	; 0x311e <vfprintf+0x350>
    3106:	82 2f       	mov	r24, r18
    3108:	86 78       	andi	r24, 0x86	; 134
    310a:	59 f0       	breq	.+22     	; 0x3122 <vfprintf+0x354>
    310c:	21 fd       	sbrc	r18, 1
    310e:	02 c0       	rjmp	.+4      	; 0x3114 <vfprintf+0x346>
    3110:	80 e2       	ldi	r24, 0x20	; 32
    3112:	01 c0       	rjmp	.+2      	; 0x3116 <vfprintf+0x348>
    3114:	8b e2       	ldi	r24, 0x2B	; 43
    3116:	27 fd       	sbrc	r18, 7
    3118:	8d e2       	ldi	r24, 0x2D	; 45
    311a:	b7 01       	movw	r22, r14
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	0e 94 cf 18 	call	0x319e	; 0x319e <fputc>
    3122:	a5 14       	cp	r10, r5
    3124:	38 f4       	brcc	.+14     	; 0x3134 <vfprintf+0x366>
    3126:	b7 01       	movw	r22, r14
    3128:	80 e3       	ldi	r24, 0x30	; 48
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	0e 94 cf 18 	call	0x319e	; 0x319e <fputc>
    3130:	5a 94       	dec	r5
    3132:	f7 cf       	rjmp	.-18     	; 0x3122 <vfprintf+0x354>
    3134:	aa 94       	dec	r10
    3136:	f4 01       	movw	r30, r8
    3138:	ea 0d       	add	r30, r10
    313a:	f1 1d       	adc	r31, r1
    313c:	80 81       	ld	r24, Z
    313e:	b7 01       	movw	r22, r14
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	0e 94 cf 18 	call	0x319e	; 0x319e <fputc>
    3146:	a1 10       	cpse	r10, r1
    3148:	f5 cf       	rjmp	.-22     	; 0x3134 <vfprintf+0x366>
    314a:	33 20       	and	r3, r3
    314c:	09 f4       	brne	.+2      	; 0x3150 <vfprintf+0x382>
    314e:	51 ce       	rjmp	.-862    	; 0x2df2 <vfprintf+0x24>
    3150:	b7 01       	movw	r22, r14
    3152:	80 e2       	ldi	r24, 0x20	; 32
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	0e 94 cf 18 	call	0x319e	; 0x319e <fputc>
    315a:	3a 94       	dec	r3
    315c:	f6 cf       	rjmp	.-20     	; 0x314a <vfprintf+0x37c>
    315e:	f7 01       	movw	r30, r14
    3160:	86 81       	ldd	r24, Z+6	; 0x06
    3162:	97 81       	ldd	r25, Z+7	; 0x07
    3164:	02 c0       	rjmp	.+4      	; 0x316a <vfprintf+0x39c>
    3166:	8f ef       	ldi	r24, 0xFF	; 255
    3168:	9f ef       	ldi	r25, 0xFF	; 255
    316a:	2c 96       	adiw	r28, 0x0c	; 12
    316c:	e2 e1       	ldi	r30, 0x12	; 18
    316e:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__epilogue_restores__>

00003172 <strnlen_P>:
    3172:	fc 01       	movw	r30, r24
    3174:	05 90       	lpm	r0, Z+
    3176:	61 50       	subi	r22, 0x01	; 1
    3178:	70 40       	sbci	r23, 0x00	; 0
    317a:	01 10       	cpse	r0, r1
    317c:	d8 f7       	brcc	.-10     	; 0x3174 <strnlen_P+0x2>
    317e:	80 95       	com	r24
    3180:	90 95       	com	r25
    3182:	8e 0f       	add	r24, r30
    3184:	9f 1f       	adc	r25, r31
    3186:	08 95       	ret

00003188 <strnlen>:
    3188:	fc 01       	movw	r30, r24
    318a:	61 50       	subi	r22, 0x01	; 1
    318c:	70 40       	sbci	r23, 0x00	; 0
    318e:	01 90       	ld	r0, Z+
    3190:	01 10       	cpse	r0, r1
    3192:	d8 f7       	brcc	.-10     	; 0x318a <strnlen+0x2>
    3194:	80 95       	com	r24
    3196:	90 95       	com	r25
    3198:	8e 0f       	add	r24, r30
    319a:	9f 1f       	adc	r25, r31
    319c:	08 95       	ret

0000319e <fputc>:
    319e:	0f 93       	push	r16
    31a0:	1f 93       	push	r17
    31a2:	cf 93       	push	r28
    31a4:	df 93       	push	r29
    31a6:	18 2f       	mov	r17, r24
    31a8:	09 2f       	mov	r16, r25
    31aa:	eb 01       	movw	r28, r22
    31ac:	8b 81       	ldd	r24, Y+3	; 0x03
    31ae:	81 fd       	sbrc	r24, 1
    31b0:	03 c0       	rjmp	.+6      	; 0x31b8 <fputc+0x1a>
    31b2:	8f ef       	ldi	r24, 0xFF	; 255
    31b4:	9f ef       	ldi	r25, 0xFF	; 255
    31b6:	20 c0       	rjmp	.+64     	; 0x31f8 <fputc+0x5a>
    31b8:	82 ff       	sbrs	r24, 2
    31ba:	10 c0       	rjmp	.+32     	; 0x31dc <fputc+0x3e>
    31bc:	4e 81       	ldd	r20, Y+6	; 0x06
    31be:	5f 81       	ldd	r21, Y+7	; 0x07
    31c0:	2c 81       	ldd	r18, Y+4	; 0x04
    31c2:	3d 81       	ldd	r19, Y+5	; 0x05
    31c4:	42 17       	cp	r20, r18
    31c6:	53 07       	cpc	r21, r19
    31c8:	7c f4       	brge	.+30     	; 0x31e8 <fputc+0x4a>
    31ca:	e8 81       	ld	r30, Y
    31cc:	f9 81       	ldd	r31, Y+1	; 0x01
    31ce:	9f 01       	movw	r18, r30
    31d0:	2f 5f       	subi	r18, 0xFF	; 255
    31d2:	3f 4f       	sbci	r19, 0xFF	; 255
    31d4:	39 83       	std	Y+1, r19	; 0x01
    31d6:	28 83       	st	Y, r18
    31d8:	10 83       	st	Z, r17
    31da:	06 c0       	rjmp	.+12     	; 0x31e8 <fputc+0x4a>
    31dc:	e8 85       	ldd	r30, Y+8	; 0x08
    31de:	f9 85       	ldd	r31, Y+9	; 0x09
    31e0:	81 2f       	mov	r24, r17
    31e2:	09 95       	icall
    31e4:	89 2b       	or	r24, r25
    31e6:	29 f7       	brne	.-54     	; 0x31b2 <fputc+0x14>
    31e8:	2e 81       	ldd	r18, Y+6	; 0x06
    31ea:	3f 81       	ldd	r19, Y+7	; 0x07
    31ec:	2f 5f       	subi	r18, 0xFF	; 255
    31ee:	3f 4f       	sbci	r19, 0xFF	; 255
    31f0:	3f 83       	std	Y+7, r19	; 0x07
    31f2:	2e 83       	std	Y+6, r18	; 0x06
    31f4:	81 2f       	mov	r24, r17
    31f6:	90 2f       	mov	r25, r16
    31f8:	df 91       	pop	r29
    31fa:	cf 91       	pop	r28
    31fc:	1f 91       	pop	r17
    31fe:	0f 91       	pop	r16
    3200:	08 95       	ret

00003202 <__ultoa_invert>:
    3202:	fa 01       	movw	r30, r20
    3204:	aa 27       	eor	r26, r26
    3206:	28 30       	cpi	r18, 0x08	; 8
    3208:	51 f1       	breq	.+84     	; 0x325e <__ultoa_invert+0x5c>
    320a:	20 31       	cpi	r18, 0x10	; 16
    320c:	81 f1       	breq	.+96     	; 0x326e <__ultoa_invert+0x6c>
    320e:	e8 94       	clt
    3210:	6f 93       	push	r22
    3212:	6e 7f       	andi	r22, 0xFE	; 254
    3214:	6e 5f       	subi	r22, 0xFE	; 254
    3216:	7f 4f       	sbci	r23, 0xFF	; 255
    3218:	8f 4f       	sbci	r24, 0xFF	; 255
    321a:	9f 4f       	sbci	r25, 0xFF	; 255
    321c:	af 4f       	sbci	r26, 0xFF	; 255
    321e:	b1 e0       	ldi	r27, 0x01	; 1
    3220:	3e d0       	rcall	.+124    	; 0x329e <__ultoa_invert+0x9c>
    3222:	b4 e0       	ldi	r27, 0x04	; 4
    3224:	3c d0       	rcall	.+120    	; 0x329e <__ultoa_invert+0x9c>
    3226:	67 0f       	add	r22, r23
    3228:	78 1f       	adc	r23, r24
    322a:	89 1f       	adc	r24, r25
    322c:	9a 1f       	adc	r25, r26
    322e:	a1 1d       	adc	r26, r1
    3230:	68 0f       	add	r22, r24
    3232:	79 1f       	adc	r23, r25
    3234:	8a 1f       	adc	r24, r26
    3236:	91 1d       	adc	r25, r1
    3238:	a1 1d       	adc	r26, r1
    323a:	6a 0f       	add	r22, r26
    323c:	71 1d       	adc	r23, r1
    323e:	81 1d       	adc	r24, r1
    3240:	91 1d       	adc	r25, r1
    3242:	a1 1d       	adc	r26, r1
    3244:	20 d0       	rcall	.+64     	; 0x3286 <__ultoa_invert+0x84>
    3246:	09 f4       	brne	.+2      	; 0x324a <__ultoa_invert+0x48>
    3248:	68 94       	set
    324a:	3f 91       	pop	r19
    324c:	2a e0       	ldi	r18, 0x0A	; 10
    324e:	26 9f       	mul	r18, r22
    3250:	11 24       	eor	r1, r1
    3252:	30 19       	sub	r19, r0
    3254:	30 5d       	subi	r19, 0xD0	; 208
    3256:	31 93       	st	Z+, r19
    3258:	de f6       	brtc	.-74     	; 0x3210 <__ultoa_invert+0xe>
    325a:	cf 01       	movw	r24, r30
    325c:	08 95       	ret
    325e:	46 2f       	mov	r20, r22
    3260:	47 70       	andi	r20, 0x07	; 7
    3262:	40 5d       	subi	r20, 0xD0	; 208
    3264:	41 93       	st	Z+, r20
    3266:	b3 e0       	ldi	r27, 0x03	; 3
    3268:	0f d0       	rcall	.+30     	; 0x3288 <__ultoa_invert+0x86>
    326a:	c9 f7       	brne	.-14     	; 0x325e <__ultoa_invert+0x5c>
    326c:	f6 cf       	rjmp	.-20     	; 0x325a <__ultoa_invert+0x58>
    326e:	46 2f       	mov	r20, r22
    3270:	4f 70       	andi	r20, 0x0F	; 15
    3272:	40 5d       	subi	r20, 0xD0	; 208
    3274:	4a 33       	cpi	r20, 0x3A	; 58
    3276:	18 f0       	brcs	.+6      	; 0x327e <__ultoa_invert+0x7c>
    3278:	49 5d       	subi	r20, 0xD9	; 217
    327a:	31 fd       	sbrc	r19, 1
    327c:	40 52       	subi	r20, 0x20	; 32
    327e:	41 93       	st	Z+, r20
    3280:	02 d0       	rcall	.+4      	; 0x3286 <__ultoa_invert+0x84>
    3282:	a9 f7       	brne	.-22     	; 0x326e <__ultoa_invert+0x6c>
    3284:	ea cf       	rjmp	.-44     	; 0x325a <__ultoa_invert+0x58>
    3286:	b4 e0       	ldi	r27, 0x04	; 4
    3288:	a6 95       	lsr	r26
    328a:	97 95       	ror	r25
    328c:	87 95       	ror	r24
    328e:	77 95       	ror	r23
    3290:	67 95       	ror	r22
    3292:	ba 95       	dec	r27
    3294:	c9 f7       	brne	.-14     	; 0x3288 <__ultoa_invert+0x86>
    3296:	00 97       	sbiw	r24, 0x00	; 0
    3298:	61 05       	cpc	r22, r1
    329a:	71 05       	cpc	r23, r1
    329c:	08 95       	ret
    329e:	9b 01       	movw	r18, r22
    32a0:	ac 01       	movw	r20, r24
    32a2:	0a 2e       	mov	r0, r26
    32a4:	06 94       	lsr	r0
    32a6:	57 95       	ror	r21
    32a8:	47 95       	ror	r20
    32aa:	37 95       	ror	r19
    32ac:	27 95       	ror	r18
    32ae:	ba 95       	dec	r27
    32b0:	c9 f7       	brne	.-14     	; 0x32a4 <__ultoa_invert+0xa2>
    32b2:	62 0f       	add	r22, r18
    32b4:	73 1f       	adc	r23, r19
    32b6:	84 1f       	adc	r24, r20
    32b8:	95 1f       	adc	r25, r21
    32ba:	a0 1d       	adc	r26, r0
    32bc:	08 95       	ret

000032be <__prologue_saves__>:
    32be:	2f 92       	push	r2
    32c0:	3f 92       	push	r3
    32c2:	4f 92       	push	r4
    32c4:	5f 92       	push	r5
    32c6:	6f 92       	push	r6
    32c8:	7f 92       	push	r7
    32ca:	8f 92       	push	r8
    32cc:	9f 92       	push	r9
    32ce:	af 92       	push	r10
    32d0:	bf 92       	push	r11
    32d2:	cf 92       	push	r12
    32d4:	df 92       	push	r13
    32d6:	ef 92       	push	r14
    32d8:	ff 92       	push	r15
    32da:	0f 93       	push	r16
    32dc:	1f 93       	push	r17
    32de:	cf 93       	push	r28
    32e0:	df 93       	push	r29
    32e2:	cd b7       	in	r28, 0x3d	; 61
    32e4:	de b7       	in	r29, 0x3e	; 62
    32e6:	ca 1b       	sub	r28, r26
    32e8:	db 0b       	sbc	r29, r27
    32ea:	0f b6       	in	r0, 0x3f	; 63
    32ec:	f8 94       	cli
    32ee:	de bf       	out	0x3e, r29	; 62
    32f0:	0f be       	out	0x3f, r0	; 63
    32f2:	cd bf       	out	0x3d, r28	; 61
    32f4:	09 94       	ijmp

000032f6 <__epilogue_restores__>:
    32f6:	2a 88       	ldd	r2, Y+18	; 0x12
    32f8:	39 88       	ldd	r3, Y+17	; 0x11
    32fa:	48 88       	ldd	r4, Y+16	; 0x10
    32fc:	5f 84       	ldd	r5, Y+15	; 0x0f
    32fe:	6e 84       	ldd	r6, Y+14	; 0x0e
    3300:	7d 84       	ldd	r7, Y+13	; 0x0d
    3302:	8c 84       	ldd	r8, Y+12	; 0x0c
    3304:	9b 84       	ldd	r9, Y+11	; 0x0b
    3306:	aa 84       	ldd	r10, Y+10	; 0x0a
    3308:	b9 84       	ldd	r11, Y+9	; 0x09
    330a:	c8 84       	ldd	r12, Y+8	; 0x08
    330c:	df 80       	ldd	r13, Y+7	; 0x07
    330e:	ee 80       	ldd	r14, Y+6	; 0x06
    3310:	fd 80       	ldd	r15, Y+5	; 0x05
    3312:	0c 81       	ldd	r16, Y+4	; 0x04
    3314:	1b 81       	ldd	r17, Y+3	; 0x03
    3316:	aa 81       	ldd	r26, Y+2	; 0x02
    3318:	b9 81       	ldd	r27, Y+1	; 0x01
    331a:	ce 0f       	add	r28, r30
    331c:	d1 1d       	adc	r29, r1
    331e:	0f b6       	in	r0, 0x3f	; 63
    3320:	f8 94       	cli
    3322:	de bf       	out	0x3e, r29	; 62
    3324:	0f be       	out	0x3f, r0	; 63
    3326:	cd bf       	out	0x3d, r28	; 61
    3328:	ed 01       	movw	r28, r26
    332a:	08 95       	ret

0000332c <_exit>:
    332c:	f8 94       	cli

0000332e <__stop_program>:
    332e:	ff cf       	rjmp	.-2      	; 0x332e <__stop_program>
