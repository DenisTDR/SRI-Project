
SRI Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000033e  00800100  00003e94  00003f28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003e94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001e9  0080043e  0080043e  00004266  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004266  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000418  00000000  00000000  000042c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004f99  00000000  00000000  000046da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001550  00000000  00000000  00009673  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001884  00000000  00000000  0000abc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000e54  00000000  00000000  0000c448  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000edf  00000000  00000000  0000d29c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000347b  00000000  00000000  0000e17b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003f8  00000000  00000000  000115f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 f2 03 	jmp	0x7e4	; 0x7e4 <__vector_5>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      3c:	0c 94 31 13 	jmp	0x2662	; 0x2662 <__vector_15>
      40:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      44:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      48:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      4c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      50:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__vector_20>
      54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      7c:	52 01       	movw	r10, r4
      7e:	4a 01       	movw	r8, r20
      80:	87 01       	movw	r16, r14
      82:	a5 01       	movw	r20, r10
      84:	35 01       	movw	r6, r10
      86:	38 01       	movw	r6, r16
      88:	a5 01       	movw	r20, r10
      8a:	84 01       	movw	r16, r8
      8c:	a5 01       	movw	r20, r10
      8e:	a5 01       	movw	r20, r10
      90:	a5 01       	movw	r20, r10
      92:	a5 01       	movw	r20, r10
      94:	a3 01       	movw	r20, r6
      96:	a5 01       	movw	r20, r10
      98:	a5 01       	movw	r20, r10
      9a:	a5 01       	movw	r20, r10
      9c:	5a 01       	movw	r10, r20
      9e:	3b 01       	movw	r6, r22
      a0:	42 01       	movw	r8, r4
      a2:	47 01       	movw	r8, r14
      a4:	64 01       	movw	r12, r8
      a6:	69 01       	movw	r12, r18
      a8:	5d 01       	movw	r10, r26
      aa:	a0 01       	movw	r20, r0
      ac:	97 01       	movw	r18, r14
      ae:	4f 19       	sub	r20, r15
      b0:	5c 19       	sub	r21, r12
      b2:	6d 19       	sub	r22, r13
      b4:	d7 19       	sub	r29, r7
      b6:	2b 1a       	sub	r2, r27
      b8:	3c 1a       	sub	r3, r28
      ba:	4c 1a       	sub	r4, r28
      bc:	62 1a       	sub	r6, r18
      be:	70 1a       	sub	r7, r16
      c0:	c4 1a       	sub	r12, r20
      c2:	11 1b       	sub	r17, r17
      c4:	67 1b       	sub	r22, r23
      c6:	01 1c       	adc	r0, r1
      c8:	0e 1c       	adc	r0, r14
      ca:	0e 1c       	adc	r0, r14
      cc:	0e 1c       	adc	r0, r14
      ce:	0e 1c       	adc	r0, r14
      d0:	0e 1c       	adc	r0, r14
      d2:	0e 1c       	adc	r0, r14
      d4:	0e 1c       	adc	r0, r14
      d6:	0e 1c       	adc	r0, r14
      d8:	0e 1c       	adc	r0, r14
      da:	0e 1c       	adc	r0, r14
      dc:	0e 1c       	adc	r0, r14
      de:	0e 1c       	adc	r0, r14
      e0:	0e 1c       	adc	r0, r14
      e2:	0e 1c       	adc	r0, r14
      e4:	0e 1c       	adc	r0, r14
      e6:	0e 1c       	adc	r0, r14
      e8:	0e 1c       	adc	r0, r14
      ea:	0e 1c       	adc	r0, r14
      ec:	0e 1c       	adc	r0, r14
      ee:	0e 1c       	adc	r0, r14
      f0:	b6 18       	sub	r11, r6
      f2:	03 19       	sub	r16, r3
      f4:	0e 1c       	adc	r0, r14
      f6:	0e 1c       	adc	r0, r14
      f8:	0e 1c       	adc	r0, r14
      fa:	0e 1c       	adc	r0, r14
      fc:	0e 1c       	adc	r0, r14
      fe:	0e 1c       	adc	r0, r14
     100:	0e 1c       	adc	r0, r14
     102:	0e 1c       	adc	r0, r14
     104:	0e 1c       	adc	r0, r14
     106:	0e 1c       	adc	r0, r14
     108:	0e 1c       	adc	r0, r14
     10a:	0e 1c       	adc	r0, r14
     10c:	0e 1c       	adc	r0, r14
     10e:	0e 1c       	adc	r0, r14
     110:	0e 1c       	adc	r0, r14
     112:	0e 1c       	adc	r0, r14
     114:	0e 1c       	adc	r0, r14
     116:	0e 1c       	adc	r0, r14
     118:	0e 1c       	adc	r0, r14
     11a:	0e 1c       	adc	r0, r14
     11c:	0e 1c       	adc	r0, r14
     11e:	0e 1c       	adc	r0, r14
     120:	0e 1c       	adc	r0, r14
     122:	0e 1c       	adc	r0, r14
     124:	0e 1c       	adc	r0, r14
     126:	0e 1c       	adc	r0, r14
     128:	0e 1c       	adc	r0, r14
     12a:	0e 1c       	adc	r0, r14
     12c:	0e 1c       	adc	r0, r14
     12e:	0e 1c       	adc	r0, r14
     130:	0e 1c       	adc	r0, r14
     132:	0e 1c       	adc	r0, r14
     134:	0e 1c       	adc	r0, r14
     136:	0e 1c       	adc	r0, r14
     138:	0e 1c       	adc	r0, r14
     13a:	0e 1c       	adc	r0, r14
     13c:	0e 1c       	adc	r0, r14
     13e:	0e 1c       	adc	r0, r14
     140:	0e 1c       	adc	r0, r14
     142:	0e 1c       	adc	r0, r14
     144:	0e 1c       	adc	r0, r14
     146:	0e 1c       	adc	r0, r14
     148:	0e 1c       	adc	r0, r14
     14a:	0e 1c       	adc	r0, r14
     14c:	0e 1c       	adc	r0, r14
     14e:	0e 1c       	adc	r0, r14
     150:	0e 1c       	adc	r0, r14
     152:	0e 1c       	adc	r0, r14
     154:	0e 1c       	adc	r0, r14
     156:	0e 1c       	adc	r0, r14
     158:	0e 1c       	adc	r0, r14
     15a:	0e 1c       	adc	r0, r14
     15c:	0e 1c       	adc	r0, r14
     15e:	0e 1c       	adc	r0, r14
     160:	0e 1c       	adc	r0, r14
     162:	0e 1c       	adc	r0, r14
     164:	0e 1c       	adc	r0, r14
     166:	0e 1c       	adc	r0, r14
     168:	0e 1c       	adc	r0, r14
     16a:	0e 1c       	adc	r0, r14
     16c:	0e 1c       	adc	r0, r14
     16e:	0e 1c       	adc	r0, r14
     170:	0e 1c       	adc	r0, r14
     172:	0e 1c       	adc	r0, r14
     174:	0e 1c       	adc	r0, r14
     176:	7e 19       	sub	r23, r14

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d0 e1       	ldi	r29, 0x10	; 16
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_copy_data>:
     184:	14 e0       	ldi	r17, 0x04	; 4
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	e4 e9       	ldi	r30, 0x94	; 148
     18c:	fe e3       	ldi	r31, 0x3E	; 62
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
     190:	05 90       	lpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	ae 33       	cpi	r26, 0x3E	; 62
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
     19a:	26 e0       	ldi	r18, 0x06	; 6
     19c:	ae e3       	ldi	r26, 0x3E	; 62
     19e:	b4 e0       	ldi	r27, 0x04	; 4
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	a7 32       	cpi	r26, 0x27	; 39
     1a6:	b2 07       	cpc	r27, r18
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
     1aa:	0e 94 82 10 	call	0x2104	; 0x2104 <main>
     1ae:	0c 94 48 1f 	jmp	0x3e90	; 0x3e90 <_exit>

000001b2 <__bad_interrupt>:
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <resetBTProtocol>:
uint8_t dateCrtIndex;
uint8_t commandId;
uint8_t crcSumByte;

uint8_t resetBTProtocol(){
	state = WaitingStartByte;
     1b6:	10 92 48 04 	sts	0x0448, r1
	return NO;
}
     1ba:	80 e0       	ldi	r24, 0x00	; 0
     1bc:	08 95       	ret

000001be <prelucreazaDatele>:
	}
	//printf("\nstare noua %d: ", state);
}
extern volatile uint8_t ms2p1_enabled;

void prelucreazaDatele(void){
     1be:	0f 93       	push	r16
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
	
	//BTTransmitStr("Procesez ceva!");
	//cli();
	if(actiune >= GoFront && actiune <= GoRightB){
     1c4:	80 91 53 04 	lds	r24, 0x0453
     1c8:	9f ef       	ldi	r25, 0xFF	; 255
     1ca:	98 0f       	add	r25, r24
     1cc:	96 30       	cpi	r25, 0x06	; 6
     1ce:	08 f0       	brcs	.+2      	; 0x1d2 <prelucreazaDatele+0x14>
     1d0:	41 c0       	rjmp	.+130    	; 0x254 <prelucreazaDatele+0x96>
		unsigned char timp = date[0];
     1d2:	c0 91 55 04 	lds	r28, 0x0455
		unsigned char viteza = date[1];
     1d6:	d0 91 56 04 	lds	r29, 0x0456
		if(len == 3)
     1da:	90 91 5f 04 	lds	r25, 0x045F
     1de:	93 30       	cpi	r25, 0x03	; 3
     1e0:	19 f4       	brne	.+6      	; 0x1e8 <prelucreazaDatele+0x2a>
			toggleDebuggingOff(OFF);
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <toggleDebuggingOff>
		switch(actiune){
     1e8:	90 91 53 04 	lds	r25, 0x0453
     1ec:	93 30       	cpi	r25, 0x03	; 3
     1ee:	b1 f0       	breq	.+44     	; 0x21c <prelucreazaDatele+0x5e>
     1f0:	28 f4       	brcc	.+10     	; 0x1fc <prelucreazaDatele+0x3e>
     1f2:	91 30       	cpi	r25, 0x01	; 1
     1f4:	49 f0       	breq	.+18     	; 0x208 <prelucreazaDatele+0x4a>
     1f6:	92 30       	cpi	r25, 0x02	; 2
     1f8:	61 f0       	breq	.+24     	; 0x212 <prelucreazaDatele+0x54>
     1fa:	23 c0       	rjmp	.+70     	; 0x242 <prelucreazaDatele+0x84>
     1fc:	95 30       	cpi	r25, 0x05	; 5
     1fe:	99 f0       	breq	.+38     	; 0x226 <prelucreazaDatele+0x68>
     200:	b8 f0       	brcs	.+46     	; 0x230 <prelucreazaDatele+0x72>
     202:	96 30       	cpi	r25, 0x06	; 6
     204:	d1 f0       	breq	.+52     	; 0x23a <prelucreazaDatele+0x7c>
     206:	1d c0       	rjmp	.+58     	; 0x242 <prelucreazaDatele+0x84>
			case GoFront:
				goFront(timp, viteza);
     208:	6d 2f       	mov	r22, r29
     20a:	8c 2f       	mov	r24, r28
     20c:	0e 94 bf 05 	call	0xb7e	; 0xb7e <goFront>
			break;
     210:	18 c0       	rjmp	.+48     	; 0x242 <prelucreazaDatele+0x84>
			case GoBack:
				goBack(timp, viteza);
     212:	6d 2f       	mov	r22, r29
     214:	8c 2f       	mov	r24, r28
     216:	0e 94 ef 05 	call	0xbde	; 0xbde <goBack>
			break;
     21a:	13 c0       	rjmp	.+38     	; 0x242 <prelucreazaDatele+0x84>
			case GoLeftF:
				goFrontLeft(timp, viteza);
     21c:	6d 2f       	mov	r22, r29
     21e:	8c 2f       	mov	r24, r28
     220:	0e 94 20 06 	call	0xc40	; 0xc40 <goFrontLeft>
			break;
     224:	0e c0       	rjmp	.+28     	; 0x242 <prelucreazaDatele+0x84>
			case GoLeftB:
				goBackLeft(timp, viteza);
     226:	6d 2f       	mov	r22, r29
     228:	8c 2f       	mov	r24, r28
     22a:	0e 94 76 06 	call	0xcec	; 0xcec <goBackLeft>
			break;
     22e:	09 c0       	rjmp	.+18     	; 0x242 <prelucreazaDatele+0x84>
			case GoRightF:
				goFrontRight(timp, viteza);
     230:	6d 2f       	mov	r22, r29
     232:	8c 2f       	mov	r24, r28
     234:	0e 94 4e 06 	call	0xc9c	; 0xc9c <goFrontRight>
			break;
     238:	04 c0       	rjmp	.+8      	; 0x242 <prelucreazaDatele+0x84>
			case GoRightB:
				goBackRight(timp, viteza);
     23a:	6d 2f       	mov	r22, r29
     23c:	8c 2f       	mov	r24, r28
     23e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <goBackRight>
			break;
			default:
				break;
		}
		if(len == 3)
     242:	80 91 5f 04 	lds	r24, 0x045F
     246:	83 30       	cpi	r24, 0x03	; 3
     248:	09 f0       	breq	.+2      	; 0x24c <prelucreazaDatele+0x8e>
     24a:	7f c0       	rjmp	.+254    	; 0x34a <prelucreazaDatele+0x18c>
			toggleDebuggingOff(ON);
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <toggleDebuggingOff>
     252:	7b c0       	rjmp	.+246    	; 0x34a <prelucreazaDatele+0x18c>
			
		return;
	}
	
	switch(actiune){
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	fc 01       	movw	r30, r24
     258:	37 97       	sbiw	r30, 0x07	; 7
     25a:	e9 31       	cpi	r30, 0x19	; 25
     25c:	f1 05       	cpc	r31, r1
     25e:	08 f0       	brcs	.+2      	; 0x262 <prelucreazaDatele+0xa4>
     260:	74 c0       	rjmp	.+232    	; 0x34a <prelucreazaDatele+0x18c>
     262:	e2 5c       	subi	r30, 0xC2	; 194
     264:	ff 4f       	sbci	r31, 0xFF	; 255
     266:	0c 94 57 1c 	jmp	0x38ae	; 0x38ae <__tablejump2__>
			//initDoLeftDistance();
			//initFindPlaces1();
			//initParalelCheck();
			//initLocLiber();
			//initIntrareParcare();
			initFindPlaces1();
     26a:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <initFindPlaces1>
		break;
     26e:	6d c0       	rjmp	.+218    	; 0x34a <prelucreazaDatele+0x18c>
		case GoM2P3:
			checkFreeParallelParkingPlace();
     270:	0e 94 6a 05 	call	0xad4	; 0xad4 <checkFreeParallelParkingPlace>
		break;
     274:	6a c0       	rjmp	.+212    	; 0x34a <prelucreazaDatele+0x18c>
		case Led:
			ledAction(date[0], date[1]);
     276:	60 91 56 04 	lds	r22, 0x0456
     27a:	80 91 55 04 	lds	r24, 0x0455
     27e:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <ledAction>
		break;
     282:	63 c0       	rjmp	.+198    	; 0x34a <prelucreazaDatele+0x18c>
		case ReadSensorValue:
			toggleSensorSend(date[0]);		
     284:	80 91 55 04 	lds	r24, 0x0455
     288:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <toggleSensorSend>
		break;
     28c:	5e c0       	rjmp	.+188    	; 0x34a <prelucreazaDatele+0x18c>
		case StopEngines:
			stopEngines();
     28e:	0e 94 48 05 	call	0xa90	; 0xa90 <stopEngines>
		break;
     292:	5b c0       	rjmp	.+182    	; 0x34a <prelucreazaDatele+0x18c>
		case RotirePeLocDreapta:
			rotirePeLoc(date[0], date[1], LeftEngines);
     294:	41 e0       	ldi	r20, 0x01	; 1
     296:	60 91 56 04 	lds	r22, 0x0456
     29a:	80 91 55 04 	lds	r24, 0x0455
     29e:	0e 94 92 07 	call	0xf24	; 0xf24 <rotirePeLoc>
		break;		
     2a2:	53 c0       	rjmp	.+166    	; 0x34a <prelucreazaDatele+0x18c>
		case RotirePeLocStanga:
			rotirePeLoc(date[0], date[1], RightEngines);
     2a4:	40 e0       	ldi	r20, 0x00	; 0
     2a6:	60 91 56 04 	lds	r22, 0x0456
     2aa:	80 91 55 04 	lds	r24, 0x0455
     2ae:	0e 94 92 07 	call	0xf24	; 0xf24 <rotirePeLoc>
		break;
     2b2:	4b c0       	rjmp	.+150    	; 0x34a <prelucreazaDatele+0x18c>
		case DisplayMessage:
			//addEntryToTimerQueue(&fctSmechera, 10UL * 1000UL, Periodic);
			//addEntryToTimerQueue(&testFct1, 500UL * 1000UL, Periodic);
			initAndStartStateMachineTest1();
     2b4:	0e 94 22 16 	call	0x2c44	; 0x2c44 <initAndStartStateMachineTest1>
		break;
     2b8:	48 c0       	rjmp	.+144    	; 0x34a <prelucreazaDatele+0x18c>
		case GoM2P1:
			//addEntryToTimerQueue(&functieRotireStanga, 1000UL * 500UL, Periodic);
		break;
		case ResetThings:
			stopEngines();
     2ba:	0e 94 48 05 	call	0xa90	; 0xa90 <stopEngines>
			resetTimerQueue();
     2be:	0e 94 a8 14 	call	0x2950	; 0x2950 <resetTimerQueue>
			reSetSettings();
     2c2:	0e 94 4b 11 	call	0x2296	; 0x2296 <reSetSettings>
		break;
     2c6:	41 c0       	rjmp	.+130    	; 0x34a <prelucreazaDatele+0x18c>
		case GetAverageSpeed:
			getAverageSpeed(date[0]);
     2c8:	80 91 55 04 	lds	r24, 0x0455
     2cc:	0e 94 67 04 	call	0x8ce	; 0x8ce <getAverageSpeed>
		break;
     2d0:	3c c0       	rjmp	.+120    	; 0x34a <prelucreazaDatele+0x18c>
		case ParcurgereDistanta:
			if(len<3)
     2d2:	80 91 5f 04 	lds	r24, 0x045F
     2d6:	83 30       	cpi	r24, 0x03	; 3
     2d8:	c0 f1       	brcs	.+112    	; 0x34a <prelucreazaDatele+0x18c>
				break;
			uint32_t distDP=0;
			distDP = date[0]*256UL + date[1];
     2da:	60 91 55 04 	lds	r22, 0x0455
     2de:	86 2f       	mov	r24, r22
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	a0 e0       	ldi	r26, 0x00	; 0
     2e4:	b0 e0       	ldi	r27, 0x00	; 0
     2e6:	ba 2f       	mov	r27, r26
     2e8:	a9 2f       	mov	r26, r25
     2ea:	98 2f       	mov	r25, r24
     2ec:	88 27       	eor	r24, r24
     2ee:	20 91 56 04 	lds	r18, 0x0456
     2f2:	bc 01       	movw	r22, r24
     2f4:	cd 01       	movw	r24, r26
     2f6:	62 0f       	add	r22, r18
     2f8:	71 1d       	adc	r23, r1
     2fa:	81 1d       	adc	r24, r1
     2fc:	91 1d       	adc	r25, r1
			initParcurgereDistanta(distDP, date[2]);
     2fe:	40 91 57 04 	lds	r20, 0x0457
     302:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <initParcurgereDistanta>
		break;
     306:	21 c0       	rjmp	.+66     	; 0x34a <prelucreazaDatele+0x18c>
		case ParallelPark:
			initParalelParking();
     308:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <initParalelParking>
			
		break;
     30c:	1e c0       	rjmp	.+60     	; 0x34a <prelucreazaDatele+0x18c>
		case RotireSmechera:
			if(len<4)
     30e:	80 91 5f 04 	lds	r24, 0x045F
     312:	84 30       	cpi	r24, 0x04	; 4
     314:	d0 f0       	brcs	.+52     	; 0x34a <prelucreazaDatele+0x18c>
				break;
			rotireSmechera(2, date[0], date[1], date[2], date[3]);
     316:	00 91 58 04 	lds	r16, 0x0458
     31a:	20 91 57 04 	lds	r18, 0x0457
     31e:	40 91 56 04 	lds	r20, 0x0456
     322:	60 91 55 04 	lds	r22, 0x0455
     326:	82 e0       	ldi	r24, 0x02	; 2
     328:	0e 94 d7 06 	call	0xdae	; 0xdae <rotireSmechera>
		break;
     32c:	0e c0       	rjmp	.+28     	; 0x34a <prelucreazaDatele+0x18c>
		case SetSettings:
			if(len==1)
     32e:	80 91 5f 04 	lds	r24, 0x045F
     332:	81 30       	cpi	r24, 0x01	; 1
     334:	51 f4       	brne	.+20     	; 0x34a <prelucreazaDatele+0x18c>
				setSettings(date[0]);
     336:	80 91 55 04 	lds	r24, 0x0455
     33a:	0e 94 2d 11 	call	0x225a	; 0x225a <setSettings>
     33e:	05 c0       	rjmp	.+10     	; 0x34a <prelucreazaDatele+0x18c>
		break;
		case GetSettings:
			getSettings();
     340:	0e 94 0d 11 	call	0x221a	; 0x221a <getSettings>
		break;
     344:	02 c0       	rjmp	.+4      	; 0x34a <prelucreazaDatele+0x18c>
		case ISensorsValues:
			sendSensors();
     346:	0e 94 85 09 	call	0x130a	; 0x130a <sendSensors>
		break;
	}
	
	
	//sei();
}
     34a:	df 91       	pop	r29
     34c:	cf 91       	pop	r28
     34e:	0f 91       	pop	r16
     350:	08 95       	ret

00000352 <BTTransmitStr>:

void BTTransmitStr(char *theString){
	uint8_t len, i;
	
	len = strlen(theString);
     352:	fc 01       	movw	r30, r24
     354:	01 90       	ld	r0, Z+
     356:	00 20       	and	r0, r0
     358:	e9 f7       	brne	.-6      	; 0x354 <BTTransmitStr+0x2>
     35a:	31 97       	sbiw	r30, 0x01	; 1
     35c:	e8 1b       	sub	r30, r24
     35e:	f9 0b       	sbc	r31, r25
     360:	2e 2f       	mov	r18, r30
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     362:	3a ea       	ldi	r19, 0xAA	; 170
     364:	30 93 c6 00 	sts	0x00C6, r19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     368:	ab ed       	ldi	r26, 0xDB	; 219
     36a:	b5 e0       	ldi	r27, 0x05	; 5
     36c:	11 97       	sbiw	r26, 0x01	; 1
     36e:	f1 f7       	brne	.-4      	; 0x36c <BTTransmitStr+0x1a>
     370:	00 c0       	rjmp	.+0      	; 0x372 <BTTransmitStr+0x20>
     372:	00 00       	nop
     374:	37 e1       	ldi	r19, 0x17	; 23
     376:	30 93 c6 00 	sts	0x00C6, r19
     37a:	ab ed       	ldi	r26, 0xDB	; 219
     37c:	b5 e0       	ldi	r27, 0x05	; 5
     37e:	11 97       	sbiw	r26, 0x01	; 1
     380:	f1 f7       	brne	.-4      	; 0x37e <BTTransmitStr+0x2c>
     382:	00 c0       	rjmp	.+0      	; 0x384 <BTTransmitStr+0x32>
     384:	00 00       	nop
     386:	e0 93 c6 00 	sts	0x00C6, r30
     38a:	eb ed       	ldi	r30, 0xDB	; 219
     38c:	f5 e0       	ldi	r31, 0x05	; 5
     38e:	31 97       	sbiw	r30, 0x01	; 1
     390:	f1 f7       	brne	.-4      	; 0x38e <BTTransmitStr+0x3c>
     392:	00 c0       	rjmp	.+0      	; 0x394 <BTTransmitStr+0x42>
     394:	00 00       	nop
	
	BTTransmitChar(0xAA);
	BTTransmitChar(DisplayMessage);
	BTTransmitChar(len);
	
	for(i=0;i<len;i++)
     396:	22 23       	and	r18, r18
     398:	89 f0       	breq	.+34     	; 0x3bc <BTTransmitStr+0x6a>
     39a:	38 2f       	mov	r19, r24
     39c:	e8 2f       	mov	r30, r24
     39e:	f9 2f       	mov	r31, r25
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     3a0:	a6 ec       	ldi	r26, 0xC6	; 198
     3a2:	b0 e0       	ldi	r27, 0x00	; 0
	BTTransmitChar(DisplayMessage);
	BTTransmitChar(len);
	
	for(i=0;i<len;i++)
	{
		BTTransmitChar(theString[i]);
     3a4:	81 91       	ld	r24, Z+
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     3a6:	8c 93       	st	X, r24
     3a8:	8b ed       	ldi	r24, 0xDB	; 219
     3aa:	95 e0       	ldi	r25, 0x05	; 5
     3ac:	01 97       	sbiw	r24, 0x01	; 1
     3ae:	f1 f7       	brne	.-4      	; 0x3ac <BTTransmitStr+0x5a>
     3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <BTTransmitStr+0x60>
     3b2:	00 00       	nop
     3b4:	8e 2f       	mov	r24, r30
     3b6:	83 1b       	sub	r24, r19
	
	BTTransmitChar(0xAA);
	BTTransmitChar(DisplayMessage);
	BTTransmitChar(len);
	
	for(i=0;i<len;i++)
     3b8:	82 17       	cp	r24, r18
     3ba:	a0 f3       	brcs	.-24     	; 0x3a4 <BTTransmitStr+0x52>
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     3bc:	85 e5       	ldi	r24, 0x55	; 85
     3be:	80 93 c6 00 	sts	0x00C6, r24
     3c2:	ab ed       	ldi	r26, 0xDB	; 219
     3c4:	b5 e0       	ldi	r27, 0x05	; 5
     3c6:	11 97       	sbiw	r26, 0x01	; 1
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <BTTransmitStr+0x74>
     3ca:	00 c0       	rjmp	.+0      	; 0x3cc <BTTransmitStr+0x7a>
     3cc:	00 00       	nop
     3ce:	08 95       	ret

000003d0 <BTTransmitMsg>:
	}
	BTTransmitChar(0x55);
	
}

void BTTransmitMsg(char *theString, uint8_t len){
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
	uint16_t i;
	for(i=0;i<len;i++)
     3d4:	70 e0       	ldi	r23, 0x00	; 0
     3d6:	61 15       	cp	r22, r1
     3d8:	71 05       	cpc	r23, r1
     3da:	91 f0       	breq	.+36     	; 0x400 <BTTransmitMsg+0x30>
     3dc:	e8 2f       	mov	r30, r24
     3de:	f9 2f       	mov	r31, r25
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	90 e0       	ldi	r25, 0x00	; 0
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     3e4:	a6 ec       	ldi	r26, 0xC6	; 198
     3e6:	b0 e0       	ldi	r27, 0x00	; 0

void BTTransmitMsg(char *theString, uint8_t len){
	uint16_t i;
	for(i=0;i<len;i++)
	{
		BTTransmitChar(theString[i]);
     3e8:	21 91       	ld	r18, Z+
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     3ea:	2c 93       	st	X, r18
     3ec:	cb ed       	ldi	r28, 0xDB	; 219
     3ee:	d5 e0       	ldi	r29, 0x05	; 5
     3f0:	21 97       	sbiw	r28, 0x01	; 1
     3f2:	f1 f7       	brne	.-4      	; 0x3f0 <BTTransmitMsg+0x20>
     3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <BTTransmitMsg+0x26>
     3f6:	00 00       	nop
	
}

void BTTransmitMsg(char *theString, uint8_t len){
	uint16_t i;
	for(i=0;i<len;i++)
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	86 17       	cp	r24, r22
     3fc:	97 07       	cpc	r25, r23
     3fe:	a0 f3       	brcs	.-24     	; 0x3e8 <BTTransmitMsg+0x18>
	{
		BTTransmitChar(theString[i]);
	}
}
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	08 95       	ret

00000406 <reTransmitC>:
{
	BTProtocolReadByte(UDR0);
}


void reTransmitC(uint8_t commandId){
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	00 d0       	rcall	.+0      	; 0x40c <reTransmitC+0x6>
     40c:	00 d0       	rcall	.+0      	; 0x40e <reTransmitC+0x8>
     40e:	1f 92       	push	r1
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
	//trimite un semnal telefonului pentru a retransmite ultimul mesaj
	char msg[] = { StartByte, CRCSumFailed, 1, commandId,EndByte };
     414:	9a ea       	ldi	r25, 0xAA	; 170
     416:	99 83       	std	Y+1, r25	; 0x01
     418:	91 e2       	ldi	r25, 0x21	; 33
     41a:	9a 83       	std	Y+2, r25	; 0x02
     41c:	91 e0       	ldi	r25, 0x01	; 1
     41e:	9b 83       	std	Y+3, r25	; 0x03
     420:	8c 83       	std	Y+4, r24	; 0x04
     422:	85 e5       	ldi	r24, 0x55	; 85
     424:	8d 83       	std	Y+5, r24	; 0x05
	BTTransmitMsg(msg, 5);
     426:	65 e0       	ldi	r22, 0x05	; 5
     428:	ce 01       	movw	r24, r28
     42a:	01 96       	adiw	r24, 0x01	; 1
     42c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <BTTransmitMsg>
}
     430:	0f 90       	pop	r0
     432:	0f 90       	pop	r0
     434:	0f 90       	pop	r0
     436:	0f 90       	pop	r0
     438:	0f 90       	pop	r0
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	08 95       	ret

00000440 <reTransmit>:
void reTransmit(){
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
     444:	00 d0       	rcall	.+0      	; 0x446 <reTransmit+0x6>
     446:	00 d0       	rcall	.+0      	; 0x448 <reTransmit+0x8>
     448:	cd b7       	in	r28, 0x3d	; 61
     44a:	de b7       	in	r29, 0x3e	; 62
	char msg[] = { StartByte, CRCSumFailed, 0, EndByte };
     44c:	8a ea       	ldi	r24, 0xAA	; 170
     44e:	89 83       	std	Y+1, r24	; 0x01
     450:	81 e2       	ldi	r24, 0x21	; 33
     452:	8a 83       	std	Y+2, r24	; 0x02
     454:	1b 82       	std	Y+3, r1	; 0x03
     456:	85 e5       	ldi	r24, 0x55	; 85
     458:	8c 83       	std	Y+4, r24	; 0x04
	BTTransmitMsg(msg, 4);
     45a:	64 e0       	ldi	r22, 0x04	; 4
     45c:	ce 01       	movw	r24, r28
     45e:	01 96       	adiw	r24, 0x01	; 1
     460:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <BTTransmitMsg>
}
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	08 95       	ret

00000472 <BTProtocolReadByte>:
}

extern volatile uint32_t timerClocks;
volatile uint32_t startTmrclk, endTmrclk;
volatile uint16_t crtRecByteIndex = 0;
void BTProtocolReadByte(unsigned char theByte){
     472:	0f 93       	push	r16
     474:	1f 93       	push	r17
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	cd b7       	in	r28, 0x3d	; 61
     47c:	de b7       	in	r29, 0x3e	; 62
     47e:	e2 97       	sbiw	r28, 0x32	; 50
     480:	0f b6       	in	r0, 0x3f	; 63
     482:	f8 94       	cli
     484:	de bf       	out	0x3e, r29	; 62
     486:	0f be       	out	0x3f, r0	; 63
     488:	cd bf       	out	0x3d, r28	; 61

	crtRecByteIndex++;
     48a:	20 91 3e 04 	lds	r18, 0x043E
     48e:	30 91 3f 04 	lds	r19, 0x043F
     492:	2f 5f       	subi	r18, 0xFF	; 255
     494:	3f 4f       	sbci	r19, 0xFF	; 255
     496:	30 93 3f 04 	sts	0x043F, r19
     49a:	20 93 3e 04 	sts	0x043E, r18
	if(crtRecByteIndex%25==0 && 0){
     49e:	20 91 3e 04 	lds	r18, 0x043E
     4a2:	30 91 3f 04 	lds	r19, 0x043F
		char msg[50];
		sprintf(msg, "crbi:%hu  crtState:%u", crtRecByteIndex, state);
		BTTransmitStr(msg);
	}
	switch (state){
     4a6:	90 91 48 04 	lds	r25, 0x0448
     4aa:	92 30       	cpi	r25, 0x02	; 2
     4ac:	11 f1       	breq	.+68     	; 0x4f2 <BTProtocolReadByte+0x80>
     4ae:	28 f4       	brcc	.+10     	; 0x4ba <BTProtocolReadByte+0x48>
     4b0:	99 23       	and	r25, r25
     4b2:	59 f0       	breq	.+22     	; 0x4ca <BTProtocolReadByte+0x58>
     4b4:	91 30       	cpi	r25, 0x01	; 1
     4b6:	81 f0       	breq	.+32     	; 0x4d8 <BTProtocolReadByte+0x66>
     4b8:	7e c0       	rjmp	.+252    	; 0x5b6 <BTProtocolReadByte+0x144>
     4ba:	94 30       	cpi	r25, 0x04	; 4
     4bc:	09 f4       	brne	.+2      	; 0x4c0 <BTProtocolReadByte+0x4e>
     4be:	43 c0       	rjmp	.+134    	; 0x546 <BTProtocolReadByte+0xd4>
     4c0:	58 f1       	brcs	.+86     	; 0x518 <BTProtocolReadByte+0xa6>
     4c2:	95 30       	cpi	r25, 0x05	; 5
     4c4:	09 f4       	brne	.+2      	; 0x4c8 <BTProtocolReadByte+0x56>
     4c6:	45 c0       	rjmp	.+138    	; 0x552 <BTProtocolReadByte+0xe0>
     4c8:	76 c0       	rjmp	.+236    	; 0x5b6 <BTProtocolReadByte+0x144>
		case WaitingStartByte:
			if(theByte == StartByte){
     4ca:	8a 3a       	cpi	r24, 0xAA	; 170
     4cc:	09 f0       	breq	.+2      	; 0x4d0 <BTProtocolReadByte+0x5e>
     4ce:	73 c0       	rjmp	.+230    	; 0x5b6 <BTProtocolReadByte+0x144>
				state = WaitingCarAction;
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	80 93 48 04 	sts	0x0448, r24
     4d6:	6f c0       	rjmp	.+222    	; 0x5b6 <BTProtocolReadByte+0x144>
				//toggleDebuggingOff(1);
			}
			break;

		case WaitingCarAction:
			if(theByte >= NoAction && theByte < EndAction){
     4d8:	82 32       	cpi	r24, 0x22	; 34
     4da:	30 f4       	brcc	.+12     	; 0x4e8 <BTProtocolReadByte+0x76>
				state = WaitingDataLength;
     4dc:	92 e0       	ldi	r25, 0x02	; 2
     4de:	90 93 48 04 	sts	0x0448, r25
				actiune = theByte;
     4e2:	80 93 53 04 	sts	0x0453, r24
     4e6:	67 c0       	rjmp	.+206    	; 0x5b6 <BTProtocolReadByte+0x144>
			}
			else{
				state = WaitingStartByte;
     4e8:	10 92 48 04 	sts	0x0448, r1
				reTransmit(); // error ocurred, send retransmit signal
     4ec:	0e 94 20 02 	call	0x440	; 0x440 <reTransmit>
     4f0:	62 c0       	rjmp	.+196    	; 0x5b6 <BTProtocolReadByte+0x144>
			}
			break;
		case WaitingDataLength:
			crcSumByte = theByte + actiune;
     4f2:	90 91 53 04 	lds	r25, 0x0453
     4f6:	98 0f       	add	r25, r24
     4f8:	90 93 54 04 	sts	0x0454, r25
			if(theByte==0){
     4fc:	81 11       	cpse	r24, r1
     4fe:	04 c0       	rjmp	.+8      	; 0x508 <BTProtocolReadByte+0x96>
				state = WaitingCommandId;
     500:	84 e0       	ldi	r24, 0x04	; 4
     502:	80 93 48 04 	sts	0x0448, r24
				break;
     506:	57 c0       	rjmp	.+174    	; 0x5b6 <BTProtocolReadByte+0x144>
			}
			state = ReadingData;
     508:	93 e0       	ldi	r25, 0x03	; 3
     50a:	90 93 48 04 	sts	0x0448, r25
			len = theByte;
     50e:	80 93 5f 04 	sts	0x045F, r24
			dateCrtIndex = 0;
     512:	10 92 4e 04 	sts	0x044E, r1
			break;
     516:	4f c0       	rjmp	.+158    	; 0x5b6 <BTProtocolReadByte+0x144>

		case ReadingData:
			date[dateCrtIndex++] = theByte;
     518:	e0 91 4e 04 	lds	r30, 0x044E
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	9e 0f       	add	r25, r30
     520:	90 93 4e 04 	sts	0x044E, r25
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	eb 5a       	subi	r30, 0xAB	; 171
     528:	fb 4f       	sbci	r31, 0xFB	; 251
     52a:	80 83       	st	Z, r24
			crcSumByte += theByte;
     52c:	20 91 54 04 	lds	r18, 0x0454
     530:	82 0f       	add	r24, r18
     532:	80 93 54 04 	sts	0x0454, r24
			if(dateCrtIndex >= len)
     536:	80 91 5f 04 	lds	r24, 0x045F
     53a:	98 17       	cp	r25, r24
     53c:	e0 f1       	brcs	.+120    	; 0x5b6 <BTProtocolReadByte+0x144>
				state = WaitingCommandId;
     53e:	84 e0       	ldi	r24, 0x04	; 4
     540:	80 93 48 04 	sts	0x0448, r24
     544:	38 c0       	rjmp	.+112    	; 0x5b6 <BTProtocolReadByte+0x144>
			break;
		case WaitingCommandId:
			commandId = theByte;
     546:	80 93 49 04 	sts	0x0449, r24
			state = WaitingCRCByte;
     54a:	85 e0       	ldi	r24, 0x05	; 5
     54c:	80 93 48 04 	sts	0x0448, r24
		break;
     550:	32 c0       	rjmp	.+100    	; 0x5b6 <BTProtocolReadByte+0x144>
		case WaitingCRCByte:
			if(crcSumByte - theByte){
     552:	20 91 54 04 	lds	r18, 0x0454
     556:	28 17       	cp	r18, r24
     558:	31 f1       	breq	.+76     	; 0x5a6 <BTProtocolReadByte+0x134>
				char msg[50];
				sprintf(msg, "%u", crcSumByte > theByte ? crcSumByte-theByte:theByte-crcSumByte);
     55a:	82 17       	cp	r24, r18
     55c:	30 f4       	brcc	.+12     	; 0x56a <BTProtocolReadByte+0xf8>
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	a9 01       	movw	r20, r18
     562:	48 1b       	sub	r20, r24
     564:	51 09       	sbc	r21, r1
     566:	ca 01       	movw	r24, r20
     568:	03 c0       	rjmp	.+6      	; 0x570 <BTProtocolReadByte+0xfe>
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	82 1b       	sub	r24, r18
     56e:	91 09       	sbc	r25, r1
     570:	9f 93       	push	r25
     572:	8f 93       	push	r24
     574:	8c e8       	ldi	r24, 0x8C	; 140
     576:	93 e0       	ldi	r25, 0x03	; 3
     578:	9f 93       	push	r25
     57a:	8f 93       	push	r24
     57c:	8e 01       	movw	r16, r28
     57e:	0f 5f       	subi	r16, 0xFF	; 255
     580:	1f 4f       	sbci	r17, 0xFF	; 255
     582:	1f 93       	push	r17
     584:	0f 93       	push	r16
     586:	0e 94 77 1c 	call	0x38ee	; 0x38ee <sprintf>
				BTTransmitStr(msg);
     58a:	c8 01       	movw	r24, r16
     58c:	0e 94 a9 01 	call	0x352	; 0x352 <BTTransmitStr>
				reTransmitC(commandId);
     590:	80 91 49 04 	lds	r24, 0x0449
     594:	0e 94 03 02 	call	0x406	; 0x406 <reTransmitC>
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	02 c0       	rjmp	.+4      	; 0x5aa <BTProtocolReadByte+0x138>
			}
			else
				prelucreazaDatele();
     5a6:	0e 94 df 00 	call	0x1be	; 0x1be <prelucreazaDatele>
			removeEntryFromTimerQueue(&resetBTProtocol);
     5aa:	8b ed       	ldi	r24, 0xDB	; 219
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	0e 94 a2 13 	call	0x2744	; 0x2744 <removeEntryFromTimerQueue>
			state = WaitingStartByte;
     5b2:	10 92 48 04 	sts	0x0448, r1
			
		break;
	}
	//printf("\nstare noua %d: ", state);
}
     5b6:	e2 96       	adiw	r28, 0x32	; 50
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	f8 94       	cli
     5bc:	de bf       	out	0x3e, r29	; 62
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	cd bf       	out	0x3d, r28	; 61
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	08 95       	ret

000005cc <__vector_20>:

void prelucreazaDatele(void);
void BTProtocolReadByte(unsigned char theByte);

ISR(USART0_RX_vect)
{
     5cc:	1f 92       	push	r1
     5ce:	0f 92       	push	r0
     5d0:	0f b6       	in	r0, 0x3f	; 63
     5d2:	0f 92       	push	r0
     5d4:	11 24       	eor	r1, r1
     5d6:	2f 93       	push	r18
     5d8:	3f 93       	push	r19
     5da:	4f 93       	push	r20
     5dc:	5f 93       	push	r21
     5de:	6f 93       	push	r22
     5e0:	7f 93       	push	r23
     5e2:	8f 93       	push	r24
     5e4:	9f 93       	push	r25
     5e6:	af 93       	push	r26
     5e8:	bf 93       	push	r27
     5ea:	ef 93       	push	r30
     5ec:	ff 93       	push	r31
	BTProtocolReadByte(UDR0);
     5ee:	80 91 c6 00 	lds	r24, 0x00C6
     5f2:	0e 94 39 02 	call	0x472	; 0x472 <BTProtocolReadByte>
}
     5f6:	ff 91       	pop	r31
     5f8:	ef 91       	pop	r30
     5fa:	bf 91       	pop	r27
     5fc:	af 91       	pop	r26
     5fe:	9f 91       	pop	r25
     600:	8f 91       	pop	r24
     602:	7f 91       	pop	r23
     604:	6f 91       	pop	r22
     606:	5f 91       	pop	r21
     608:	4f 91       	pop	r20
     60a:	3f 91       	pop	r19
     60c:	2f 91       	pop	r18
     60e:	0f 90       	pop	r0
     610:	0f be       	out	0x3f, r0	; 63
     612:	0f 90       	pop	r0
     614:	1f 90       	pop	r1
     616:	18 95       	reti

00000618 <BTTransmitMsgU>:
	for(i=0;i<len;i++)
	{
		BTTransmitChar(theString[i]);
	}
}
void BTTransmitMsgU(unsigned char *theString, uint8_t len){
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
	uint16_t i;
	for(i=0;i<len;i++)
     61c:	70 e0       	ldi	r23, 0x00	; 0
     61e:	61 15       	cp	r22, r1
     620:	71 05       	cpc	r23, r1
     622:	91 f0       	breq	.+36     	; 0x648 <BTTransmitMsgU+0x30>
     624:	e8 2f       	mov	r30, r24
     626:	f9 2f       	mov	r31, r25
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	90 e0       	ldi	r25, 0x00	; 0
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     62c:	a6 ec       	ldi	r26, 0xC6	; 198
     62e:	b0 e0       	ldi	r27, 0x00	; 0
}
void BTTransmitMsgU(unsigned char *theString, uint8_t len){
	uint16_t i;
	for(i=0;i<len;i++)
	{
		BTTransmitChar(theString[i]);
     630:	21 91       	ld	r18, Z+
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     632:	2c 93       	st	X, r18
     634:	cb ed       	ldi	r28, 0xDB	; 219
     636:	d5 e0       	ldi	r29, 0x05	; 5
     638:	21 97       	sbiw	r28, 0x01	; 1
     63a:	f1 f7       	brne	.-4      	; 0x638 <BTTransmitMsgU+0x20>
     63c:	00 c0       	rjmp	.+0      	; 0x63e <BTTransmitMsgU+0x26>
     63e:	00 00       	nop
		BTTransmitChar(theString[i]);
	}
}
void BTTransmitMsgU(unsigned char *theString, uint8_t len){
	uint16_t i;
	for(i=0;i<len;i++)
     640:	01 96       	adiw	r24, 0x01	; 1
     642:	86 17       	cp	r24, r22
     644:	97 07       	cpc	r25, r23
     646:	a0 f3       	brcs	.-24     	; 0x630 <BTTransmitMsgU+0x18>
	{
		BTTransmitChar(theString[i]);
	}
}
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	08 95       	ret

0000064e <sendCarStartedSignal>:
void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
	_delay_us(750);
}
void sendCarStartedSignal(){
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
     652:	00 d0       	rcall	.+0      	; 0x654 <sendCarStartedSignal+0x6>
     654:	00 d0       	rcall	.+0      	; 0x656 <sendCarStartedSignal+0x8>
     656:	cd b7       	in	r28, 0x3d	; 61
     658:	de b7       	in	r29, 0x3e	; 62
	uint8_t bfr[4];
	bfr[0] = StartByte;
     65a:	8a ea       	ldi	r24, 0xAA	; 170
     65c:	89 83       	std	Y+1, r24	; 0x01
	bfr[1] = CarStarted;
     65e:	80 e2       	ldi	r24, 0x20	; 32
     660:	8a 83       	std	Y+2, r24	; 0x02
	bfr[2] = 0;
     662:	1b 82       	std	Y+3, r1	; 0x03
	bfr[3] = EndByte;
     664:	85 e5       	ldi	r24, 0x55	; 85
     666:	8c 83       	std	Y+4, r24	; 0x04
	BTTransmitMsgU(bfr, 4);
     668:	64 e0       	ldi	r22, 0x04	; 4
     66a:	ce 01       	movw	r24, r28
     66c:	01 96       	adiw	r24, 0x01	; 1
     66e:	0e 94 0c 03 	call	0x618	; 0x618 <BTTransmitMsgU>
}
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	df 91       	pop	r29
     67c:	cf 91       	pop	r28
     67e:	08 95       	ret

00000680 <initBTProtocol>:
void initBTProtocol()
{
	/*Pentru Receive*/
	UBRR0L = 25; //baud rate 9600 bps
     680:	89 e1       	ldi	r24, 0x19	; 25
     682:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B |= _BV(RXCIE0);
     686:	e1 ec       	ldi	r30, 0xC1	; 193
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	80 81       	ld	r24, Z
     68c:	80 68       	ori	r24, 0x80	; 128
     68e:	80 83       	st	Z, r24
	UCSR0B |= _BV(RXEN0);
     690:	80 81       	ld	r24, Z
     692:	80 61       	ori	r24, 0x10	; 16
     694:	80 83       	st	Z, r24
	UCSR0B |= _BV(TXEN0);
     696:	80 81       	ld	r24, Z
     698:	88 60       	ori	r24, 0x08	; 8
     69a:	80 83       	st	Z, r24
		
	state = WaitingStartByte;
     69c:	10 92 48 04 	sts	0x0448, r1
     6a0:	08 95       	ret

000006a2 <countTimeForEncoders>:
		encoder2CNT = encoder1CNT = 0;
		deciSecondsPassed = 0;
	}
}
uint8_t countTimeForEncoders(){
	if(encSetting & 1){
     6a2:	80 91 00 01 	lds	r24, 0x0100
     6a6:	80 ff       	sbrs	r24, 0
     6a8:	22 c0       	rjmp	.+68     	; 0x6ee <countTimeForEncoders+0x4c>
		deciSecondsPassed += 2;
     6aa:	80 91 41 04 	lds	r24, 0x0441
     6ae:	90 91 42 04 	lds	r25, 0x0442
     6b2:	a0 91 43 04 	lds	r26, 0x0443
     6b6:	b0 91 44 04 	lds	r27, 0x0444
     6ba:	02 96       	adiw	r24, 0x02	; 2
     6bc:	a1 1d       	adc	r26, r1
     6be:	b1 1d       	adc	r27, r1
     6c0:	80 93 41 04 	sts	0x0441, r24
     6c4:	90 93 42 04 	sts	0x0442, r25
     6c8:	a0 93 43 04 	sts	0x0443, r26
     6cc:	b0 93 44 04 	sts	0x0444, r27
		
		cnt4Encoders++;
     6d0:	80 91 40 04 	lds	r24, 0x0440
     6d4:	8f 5f       	subi	r24, 0xFF	; 255
     6d6:	80 93 40 04 	sts	0x0440, r24
		if(cnt4Encoders & 3){
     6da:	80 91 40 04 	lds	r24, 0x0440
     6de:	83 70       	andi	r24, 0x03	; 3
     6e0:	31 f0       	breq	.+12     	; 0x6ee <countTimeForEncoders+0x4c>
			encSetting ^= 1;
     6e2:	90 91 00 01 	lds	r25, 0x0100
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	89 27       	eor	r24, r25
     6ea:	80 93 00 01 	sts	0x0100, r24
		}
	}
	return 0;
}
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	08 95       	ret

000006f2 <sendDistAndTimePeriodically>:
		addEntryIfNotExists(&sendDistAndTimePeriodically, 500 * 1000UL, Periodic);
	else
		removeEntryFromTimerQueue(&sendDistAndTimePeriodically);
}

uint8_t sendDistAndTimePeriodically(void){
     6f2:	0f 93       	push	r16
     6f4:	1f 93       	push	r17
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	cd b7       	in	r28, 0x3d	; 61
     6fc:	de b7       	in	r29, 0x3e	; 62
     6fe:	64 97       	sbiw	r28, 0x14	; 20
     700:	0f b6       	in	r0, 0x3f	; 63
     702:	f8 94       	cli
     704:	de bf       	out	0x3e, r29	; 62
     706:	0f be       	out	0x3f, r0	; 63
     708:	cd bf       	out	0x3d, r28	; 61
	if((encSetting & 2) == 0)
     70a:	80 91 00 01 	lds	r24, 0x0100
     70e:	81 ff       	sbrs	r24, 1
     710:	5d c0       	rjmp	.+186    	; 0x7cc <sendDistAndTimePeriodically+0xda>
		return NO;
	encSetting ^= 2;
     712:	90 91 00 01 	lds	r25, 0x0100
     716:	82 e0       	ldi	r24, 0x02	; 2
     718:	89 27       	eor	r24, r25
     71a:	80 93 00 01 	sts	0x0100, r24
	
	uint32_t dist = DISTANTA_PARCURSA;
     71e:	80 91 60 04 	lds	r24, 0x0460
     722:	90 91 61 04 	lds	r25, 0x0461
     726:	a0 91 62 04 	lds	r26, 0x0462
     72a:	b0 91 63 04 	lds	r27, 0x0463
     72e:	40 91 66 04 	lds	r20, 0x0466
     732:	50 91 67 04 	lds	r21, 0x0467
     736:	60 91 68 04 	lds	r22, 0x0468
     73a:	70 91 69 04 	lds	r23, 0x0469
     73e:	84 0f       	add	r24, r20
     740:	95 1f       	adc	r25, r21
     742:	a6 1f       	adc	r26, r22
     744:	b7 1f       	adc	r27, r23
     746:	ac 01       	movw	r20, r24
     748:	bd 01       	movw	r22, r26
     74a:	44 0f       	add	r20, r20
     74c:	55 1f       	adc	r21, r21
     74e:	66 1f       	adc	r22, r22
     750:	77 1f       	adc	r23, r23
     752:	44 0f       	add	r20, r20
     754:	55 1f       	adc	r21, r21
     756:	66 1f       	adc	r22, r22
     758:	77 1f       	adc	r23, r23
     75a:	8a 01       	movw	r16, r20
     75c:	9b 01       	movw	r18, r22
     75e:	00 0f       	add	r16, r16
     760:	11 1f       	adc	r17, r17
     762:	22 1f       	adc	r18, r18
     764:	33 1f       	adc	r19, r19
     766:	00 0f       	add	r16, r16
     768:	11 1f       	adc	r17, r17
     76a:	22 1f       	adc	r18, r18
     76c:	33 1f       	adc	r19, r19
     76e:	40 0f       	add	r20, r16
     770:	51 1f       	adc	r21, r17
     772:	62 1f       	adc	r22, r18
     774:	73 1f       	adc	r23, r19
     776:	84 0f       	add	r24, r20
     778:	95 1f       	adc	r25, r21
     77a:	a6 1f       	adc	r26, r22
     77c:	b7 1f       	adc	r27, r23
     77e:	ac 01       	movw	r20, r24
     780:	bd 01       	movw	r22, r26
     782:	76 95       	lsr	r23
     784:	67 95       	ror	r22
     786:	57 95       	ror	r21
     788:	47 95       	ror	r20
     78a:	76 95       	lsr	r23
     78c:	67 95       	ror	r22
     78e:	57 95       	ror	r21
     790:	47 95       	ror	r20
	uint32_t time = deciSecondsPassed;
     792:	80 91 41 04 	lds	r24, 0x0441
     796:	90 91 42 04 	lds	r25, 0x0442
     79a:	a0 91 43 04 	lds	r26, 0x0443
     79e:	b0 91 44 04 	lds	r27, 0x0444
	uint8_t buffer[20];
	buffer[0] = StartByte;
     7a2:	2a ea       	ldi	r18, 0xAA	; 170
     7a4:	29 83       	std	Y+1, r18	; 0x01
	buffer[1] = InfoCarStats;
     7a6:	22 e1       	ldi	r18, 0x12	; 18
     7a8:	2a 83       	std	Y+2, r18	; 0x02
	buffer[2] = 8;
     7aa:	28 e0       	ldi	r18, 0x08	; 8
     7ac:	2b 83       	std	Y+3, r18	; 0x03
	
	buffer[3] = dist >> 24;
     7ae:	7c 83       	std	Y+4, r23	; 0x04
	buffer[4] = (uint8_t)(dist >> 16);
     7b0:	6d 83       	std	Y+5, r22	; 0x05
	buffer[5] = (uint8_t)(dist >> 8);
     7b2:	5e 83       	std	Y+6, r21	; 0x06
	buffer[6] = (uint8_t)(dist);
     7b4:	4f 83       	std	Y+7, r20	; 0x07
	
	buffer[7] = time >> 24;
     7b6:	b8 87       	std	Y+8, r27	; 0x08
	buffer[8] = (uint8_t)(time >> 16);
     7b8:	a9 87       	std	Y+9, r26	; 0x09
	buffer[9] = (uint8_t)(time >> 8);
     7ba:	9a 87       	std	Y+10, r25	; 0x0a
	buffer[10] = (uint8_t)(time);
     7bc:	8b 87       	std	Y+11, r24	; 0x0b
	
	buffer[11] = EndByte;
     7be:	85 e5       	ldi	r24, 0x55	; 85
     7c0:	8c 87       	std	Y+12, r24	; 0x0c
	BTTransmitMsgU(buffer, (uint8_t)12);
     7c2:	6c e0       	ldi	r22, 0x0C	; 12
     7c4:	ce 01       	movw	r24, r28
     7c6:	01 96       	adiw	r24, 0x01	; 1
     7c8:	0e 94 0c 03 	call	0x618	; 0x618 <BTTransmitMsgU>
	return NO;
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	64 96       	adiw	r28, 0x14	; 20
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	f8 94       	cli
     7d4:	de bf       	out	0x3e, r29	; 62
     7d6:	0f be       	out	0x3f, r0	; 63
     7d8:	cd bf       	out	0x3d, r28	; 61
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	1f 91       	pop	r17
     7e0:	0f 91       	pop	r16
     7e2:	08 95       	ret

000007e4 <__vector_5>:
void resetEncoders();
uint8_t countTimeForEncoders();
void toggleCountingTimeForEncoders(uint8_t on);

ISR(PCINT1_vect)
{
     7e4:	1f 92       	push	r1
     7e6:	0f 92       	push	r0
     7e8:	0f b6       	in	r0, 0x3f	; 63
     7ea:	0f 92       	push	r0
     7ec:	11 24       	eor	r1, r1
     7ee:	2f 93       	push	r18
     7f0:	3f 93       	push	r19
     7f2:	4f 93       	push	r20
     7f4:	5f 93       	push	r21
     7f6:	6f 93       	push	r22
     7f8:	7f 93       	push	r23
     7fa:	8f 93       	push	r24
     7fc:	9f 93       	push	r25
     7fe:	af 93       	push	r26
     800:	bf 93       	push	r27
     802:	ef 93       	push	r30
     804:	ff 93       	push	r31
	if( (PINB & _BV(PB0)) ^ lastPB0){
     806:	83 b1       	in	r24, 0x03	; 3
     808:	90 91 65 04 	lds	r25, 0x0465
     80c:	81 70       	andi	r24, 0x01	; 1
     80e:	98 17       	cp	r25, r24
     810:	b9 f0       	breq	.+46     	; 0x840 <__vector_5+0x5c>
		lastPB0 = (PINB & _BV(PB0));
     812:	83 b1       	in	r24, 0x03	; 3
     814:	81 70       	andi	r24, 0x01	; 1
     816:	80 93 65 04 	sts	0x0465, r24
		encoder1CNT++;
     81a:	80 91 60 04 	lds	r24, 0x0460
     81e:	90 91 61 04 	lds	r25, 0x0461
     822:	a0 91 62 04 	lds	r26, 0x0462
     826:	b0 91 63 04 	lds	r27, 0x0463
     82a:	01 96       	adiw	r24, 0x01	; 1
     82c:	a1 1d       	adc	r26, r1
     82e:	b1 1d       	adc	r27, r1
     830:	80 93 60 04 	sts	0x0460, r24
     834:	90 93 61 04 	sts	0x0461, r25
     838:	a0 93 62 04 	sts	0x0462, r26
     83c:	b0 93 63 04 	sts	0x0463, r27
	}
	if( (PINB & _BV(PB7)) ^ lastPB7){
     840:	93 b1       	in	r25, 0x03	; 3
     842:	80 91 64 04 	lds	r24, 0x0464
     846:	90 78       	andi	r25, 0x80	; 128
     848:	98 17       	cp	r25, r24
     84a:	b9 f0       	breq	.+46     	; 0x87a <__vector_5+0x96>
		lastPB7 = (PINB & _BV(PB7));
     84c:	83 b1       	in	r24, 0x03	; 3
     84e:	80 78       	andi	r24, 0x80	; 128
     850:	80 93 64 04 	sts	0x0464, r24
		encoder2CNT++;
     854:	80 91 66 04 	lds	r24, 0x0466
     858:	90 91 67 04 	lds	r25, 0x0467
     85c:	a0 91 68 04 	lds	r26, 0x0468
     860:	b0 91 69 04 	lds	r27, 0x0469
     864:	01 96       	adiw	r24, 0x01	; 1
     866:	a1 1d       	adc	r26, r1
     868:	b1 1d       	adc	r27, r1
     86a:	80 93 66 04 	sts	0x0466, r24
     86e:	90 93 67 04 	sts	0x0467, r25
     872:	a0 93 68 04 	sts	0x0468, r26
     876:	b0 93 69 04 	sts	0x0469, r27
	}
	if((encSetting & 3) == 0){
     87a:	80 91 00 01 	lds	r24, 0x0100
     87e:	83 70       	andi	r24, 0x03	; 3
     880:	71 f4       	brne	.+28     	; 0x89e <__vector_5+0xba>
		encSetting = 5;
     882:	85 e0       	ldi	r24, 0x05	; 5
     884:	80 93 00 01 	sts	0x0100, r24
		cnt4Encoders = 0;
     888:	10 92 40 04 	sts	0x0440, r1
		addEntryIfNotExists(&countTimeForEncoders, 200 * 1000UL, Periodic);
     88c:	21 e0       	ldi	r18, 0x01	; 1
     88e:	40 e4       	ldi	r20, 0x40	; 64
     890:	5d e0       	ldi	r21, 0x0D	; 13
     892:	63 e0       	ldi	r22, 0x03	; 3
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	81 e5       	ldi	r24, 0x51	; 81
     898:	93 e0       	ldi	r25, 0x03	; 3
     89a:	0e 94 2f 12 	call	0x245e	; 0x245e <addEntryIfNotExists>
	}	
	encSetting |= 3;
     89e:	80 91 00 01 	lds	r24, 0x0100
     8a2:	83 60       	ori	r24, 0x03	; 3
     8a4:	80 93 00 01 	sts	0x0100, r24
	cnt4Encoders = 0;
     8a8:	10 92 40 04 	sts	0x0440, r1
} 
     8ac:	ff 91       	pop	r31
     8ae:	ef 91       	pop	r30
     8b0:	bf 91       	pop	r27
     8b2:	af 91       	pop	r26
     8b4:	9f 91       	pop	r25
     8b6:	8f 91       	pop	r24
     8b8:	7f 91       	pop	r23
     8ba:	6f 91       	pop	r22
     8bc:	5f 91       	pop	r21
     8be:	4f 91       	pop	r20
     8c0:	3f 91       	pop	r19
     8c2:	2f 91       	pop	r18
     8c4:	0f 90       	pop	r0
     8c6:	0f be       	out	0x3f, r0	; 63
     8c8:	0f 90       	pop	r0
     8ca:	1f 90       	pop	r1
     8cc:	18 95       	reti

000008ce <getAverageSpeed>:
	PCICR |= _BV(PCIE1);
	resetEncoders();
}
uint8_t sendDistAndTimePeriodically(void);

void getAverageSpeed(uint8_t reset){
     8ce:	ff 92       	push	r15
     8d0:	0f 93       	push	r16
     8d2:	1f 93       	push	r17
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	cd b7       	in	r28, 0x3d	; 61
     8da:	de b7       	in	r29, 0x3e	; 62
     8dc:	c4 56       	subi	r28, 0x64	; 100
     8de:	d1 09       	sbc	r29, r1
     8e0:	0f b6       	in	r0, 0x3f	; 63
     8e2:	f8 94       	cli
     8e4:	de bf       	out	0x3e, r29	; 62
     8e6:	0f be       	out	0x3f, r0	; 63
     8e8:	cd bf       	out	0x3d, r28	; 61
     8ea:	f8 2e       	mov	r15, r24
	char strBuffer[100];
	sprintf(strBuffer, "\n   dist: %lu \n   timp: %lu",  DISTANTA_PARCURSA, deciSecondsPassed);
     8ec:	00 91 41 04 	lds	r16, 0x0441
     8f0:	10 91 42 04 	lds	r17, 0x0442
     8f4:	20 91 43 04 	lds	r18, 0x0443
     8f8:	30 91 44 04 	lds	r19, 0x0444
     8fc:	80 91 60 04 	lds	r24, 0x0460
     900:	90 91 61 04 	lds	r25, 0x0461
     904:	a0 91 62 04 	lds	r26, 0x0462
     908:	b0 91 63 04 	lds	r27, 0x0463
     90c:	40 91 66 04 	lds	r20, 0x0466
     910:	50 91 67 04 	lds	r21, 0x0467
     914:	60 91 68 04 	lds	r22, 0x0468
     918:	70 91 69 04 	lds	r23, 0x0469
     91c:	3f 93       	push	r19
     91e:	2f 93       	push	r18
     920:	1f 93       	push	r17
     922:	0f 93       	push	r16
     924:	8a 01       	movw	r16, r20
     926:	9b 01       	movw	r18, r22
     928:	08 0f       	add	r16, r24
     92a:	19 1f       	adc	r17, r25
     92c:	2a 1f       	adc	r18, r26
     92e:	3b 1f       	adc	r19, r27
     930:	d9 01       	movw	r26, r18
     932:	c8 01       	movw	r24, r16
     934:	88 0f       	add	r24, r24
     936:	99 1f       	adc	r25, r25
     938:	aa 1f       	adc	r26, r26
     93a:	bb 1f       	adc	r27, r27
     93c:	88 0f       	add	r24, r24
     93e:	99 1f       	adc	r25, r25
     940:	aa 1f       	adc	r26, r26
     942:	bb 1f       	adc	r27, r27
     944:	ac 01       	movw	r20, r24
     946:	bd 01       	movw	r22, r26
     948:	44 0f       	add	r20, r20
     94a:	55 1f       	adc	r21, r21
     94c:	66 1f       	adc	r22, r22
     94e:	77 1f       	adc	r23, r23
     950:	44 0f       	add	r20, r20
     952:	55 1f       	adc	r21, r21
     954:	66 1f       	adc	r22, r22
     956:	77 1f       	adc	r23, r23
     958:	84 0f       	add	r24, r20
     95a:	95 1f       	adc	r25, r21
     95c:	a6 1f       	adc	r26, r22
     95e:	b7 1f       	adc	r27, r23
     960:	08 0f       	add	r16, r24
     962:	19 1f       	adc	r17, r25
     964:	2a 1f       	adc	r18, r26
     966:	3b 1f       	adc	r19, r27
     968:	b9 01       	movw	r22, r18
     96a:	a8 01       	movw	r20, r16
     96c:	76 95       	lsr	r23
     96e:	67 95       	ror	r22
     970:	57 95       	ror	r21
     972:	47 95       	ror	r20
     974:	76 95       	lsr	r23
     976:	67 95       	ror	r22
     978:	57 95       	ror	r21
     97a:	47 95       	ror	r20
     97c:	7f 93       	push	r23
     97e:	6f 93       	push	r22
     980:	5f 93       	push	r21
     982:	4f 93       	push	r20
     984:	82 e0       	ldi	r24, 0x02	; 2
     986:	91 e0       	ldi	r25, 0x01	; 1
     988:	9f 93       	push	r25
     98a:	8f 93       	push	r24
     98c:	8e 01       	movw	r16, r28
     98e:	0f 5f       	subi	r16, 0xFF	; 255
     990:	1f 4f       	sbci	r17, 0xFF	; 255
     992:	1f 93       	push	r17
     994:	0f 93       	push	r16
     996:	0e 94 77 1c 	call	0x38ee	; 0x38ee <sprintf>
	BTTransmitStr(strBuffer);
     99a:	c8 01       	movw	r24, r16
     99c:	0e 94 a9 01 	call	0x352	; 0x352 <BTTransmitStr>
	
	if(!existsEntryInTimerQueue(&sendDistAndTimePeriodically))
     9a0:	89 e7       	ldi	r24, 0x79	; 121
     9a2:	93 e0       	ldi	r25, 0x03	; 3
     9a4:	0e 94 01 12 	call	0x2402	; 0x2402 <existsEntryInTimerQueue>
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	f8 94       	cli
     9ac:	de bf       	out	0x3e, r29	; 62
     9ae:	0f be       	out	0x3f, r0	; 63
     9b0:	cd bf       	out	0x3d, r28	; 61
     9b2:	81 11       	cpse	r24, r1
     9b4:	0a c0       	rjmp	.+20     	; 0x9ca <getAverageSpeed+0xfc>
		addEntryToTimerQueue(&sendDistAndTimePeriodically, 1001 * 1000UL, Periodic);
     9b6:	21 e0       	ldi	r18, 0x01	; 1
     9b8:	48 e2       	ldi	r20, 0x28	; 40
     9ba:	56 e4       	ldi	r21, 0x46	; 70
     9bc:	6f e0       	ldi	r22, 0x0F	; 15
     9be:	70 e0       	ldi	r23, 0x00	; 0
     9c0:	89 e7       	ldi	r24, 0x79	; 121
     9c2:	93 e0       	ldi	r25, 0x03	; 3
     9c4:	0e 94 80 11 	call	0x2300	; 0x2300 <addEntryToTimerQueue>
     9c8:	04 c0       	rjmp	.+8      	; 0x9d2 <getAverageSpeed+0x104>
	else
		removeEntryFromTimerQueue(&sendDistAndTimePeriodically);
     9ca:	89 e7       	ldi	r24, 0x79	; 121
     9cc:	93 e0       	ldi	r25, 0x03	; 3
     9ce:	0e 94 a2 13 	call	0x2744	; 0x2744 <removeEntryFromTimerQueue>
	if(reset){
     9d2:	ff 20       	and	r15, r15
     9d4:	c1 f0       	breq	.+48     	; 0xa06 <getAverageSpeed+0x138>
		encoder2CNT = encoder1CNT = 0;
     9d6:	10 92 60 04 	sts	0x0460, r1
     9da:	10 92 61 04 	sts	0x0461, r1
     9de:	10 92 62 04 	sts	0x0462, r1
     9e2:	10 92 63 04 	sts	0x0463, r1
     9e6:	10 92 66 04 	sts	0x0466, r1
     9ea:	10 92 67 04 	sts	0x0467, r1
     9ee:	10 92 68 04 	sts	0x0468, r1
     9f2:	10 92 69 04 	sts	0x0469, r1
		deciSecondsPassed = 0;
     9f6:	10 92 41 04 	sts	0x0441, r1
     9fa:	10 92 42 04 	sts	0x0442, r1
     9fe:	10 92 43 04 	sts	0x0443, r1
     a02:	10 92 44 04 	sts	0x0444, r1
	}
}
     a06:	cc 59       	subi	r28, 0x9C	; 156
     a08:	df 4f       	sbci	r29, 0xFF	; 255
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	f8 94       	cli
     a0e:	de bf       	out	0x3e, r29	; 62
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	cd bf       	out	0x3d, r28	; 61
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	08 95       	ret

00000a20 <resetEncoders>:
		}
	}
	return 0;
}
void resetEncoders(){
	encoder2CNT = encoder1CNT = 0;
     a20:	10 92 60 04 	sts	0x0460, r1
     a24:	10 92 61 04 	sts	0x0461, r1
     a28:	10 92 62 04 	sts	0x0462, r1
     a2c:	10 92 63 04 	sts	0x0463, r1
     a30:	10 92 66 04 	sts	0x0466, r1
     a34:	10 92 67 04 	sts	0x0467, r1
     a38:	10 92 68 04 	sts	0x0468, r1
     a3c:	10 92 69 04 	sts	0x0469, r1
	lastPB7 = lastPB0 = 0;
     a40:	10 92 65 04 	sts	0x0465, r1
     a44:	10 92 64 04 	sts	0x0464, r1
     a48:	08 95       	ret

00000a4a <initEncoders>:
	encSetting |= 3;
	cnt4Encoders = 0;
} 

void initEncoders(){		
	PCMSK1 |= _BV(PCINT8);
     a4a:	ec e6       	ldi	r30, 0x6C	; 108
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	80 81       	ld	r24, Z
     a50:	81 60       	ori	r24, 0x01	; 1
     a52:	80 83       	st	Z, r24
	DDRB &= ~_BV(PINB0);	
     a54:	20 98       	cbi	0x04, 0	; 4
	PCMSK1 |= _BV(PCINT15);
     a56:	80 81       	ld	r24, Z
     a58:	80 68       	ori	r24, 0x80	; 128
     a5a:	80 83       	st	Z, r24
	DDRB &= ~_BV(PINB7);	
     a5c:	27 98       	cbi	0x04, 7	; 4
	PCICR |= _BV(PCIE1);
     a5e:	e8 e6       	ldi	r30, 0x68	; 104
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	80 81       	ld	r24, Z
     a64:	82 60       	ori	r24, 0x02	; 2
     a66:	80 83       	st	Z, r24
	resetEncoders();
     a68:	0e 94 10 05 	call	0xa20	; 0xa20 <resetEncoders>
     a6c:	08 95       	ret

00000a6e <setSendingDistAndTime>:
void resetEncoders(){
	encoder2CNT = encoder1CNT = 0;
	lastPB7 = lastPB0 = 0;
}
void setSendingDistAndTime(uint8_t on){
	if(on)
     a6e:	88 23       	and	r24, r24
     a70:	51 f0       	breq	.+20     	; 0xa86 <setSendingDistAndTime+0x18>
		addEntryIfNotExists(&sendDistAndTimePeriodically, 500 * 1000UL, Periodic);
     a72:	21 e0       	ldi	r18, 0x01	; 1
     a74:	40 e2       	ldi	r20, 0x20	; 32
     a76:	51 ea       	ldi	r21, 0xA1	; 161
     a78:	67 e0       	ldi	r22, 0x07	; 7
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	89 e7       	ldi	r24, 0x79	; 121
     a7e:	93 e0       	ldi	r25, 0x03	; 3
     a80:	0e 94 2f 12 	call	0x245e	; 0x245e <addEntryIfNotExists>
     a84:	08 95       	ret
	else
		removeEntryFromTimerQueue(&sendDistAndTimePeriodically);
     a86:	89 e7       	ldi	r24, 0x79	; 121
     a88:	93 e0       	ldi	r25, 0x03	; 3
     a8a:	0e 94 a2 13 	call	0x2744	; 0x2744 <removeEntryFromTimerQueue>
     a8e:	08 95       	ret

00000a90 <stopEngines>:
	addEntryIfNotExists(&stopEngines, 1000UL*1000UL*timp, Once);
}


uint8_t stopEngines(){
	OCR0A = 0;
     a90:	17 bc       	out	0x27, r1	; 39
	OCR2A = 0;
     a92:	10 92 b3 00 	sts	0x00B3, r1
	PORTA &= ~ 1<<PINA6;
     a96:	82 b1       	in	r24, 0x02	; 2
     a98:	80 78       	andi	r24, 0x80	; 128
     a9a:	82 b9       	out	0x02, r24	; 2
	PORTD &= ~ 1<<PIND2;
     a9c:	8b b1       	in	r24, 0x0b	; 11
     a9e:	88 7f       	andi	r24, 0xF8	; 248
     aa0:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~ 1<<PIND4;
     aa2:	8b b1       	in	r24, 0x0b	; 11
     aa4:	80 7e       	andi	r24, 0xE0	; 224
     aa6:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~ 1<<PIND3;
     aa8:	8b b1       	in	r24, 0x0b	; 11
     aaa:	80 7f       	andi	r24, 0xF0	; 240
     aac:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~ 1<<PIND5;
     aae:	8b b1       	in	r24, 0x0b	; 11
     ab0:	80 7c       	andi	r24, 0xC0	; 192
     ab2:	8b b9       	out	0x0b, r24	; 11
	
	//toggleCountingTimeForEncoders(OFF);	
	turnBlinkingOff();
     ab4:	0e 94 71 08 	call	0x10e2	; 0x10e2 <turnBlinkingOff>
	
	if(DEBUGGING)
     ab8:	80 91 46 04 	lds	r24, 0x0446
     abc:	80 ff       	sbrs	r24, 0
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <stopEngines+0x38>
		BTTransmitStr("M-am oprit!");
     ac0:	8e e1       	ldi	r24, 0x1E	; 30
     ac2:	91 e0       	ldi	r25, 0x01	; 1
     ac4:	0e 94 a9 01 	call	0x352	; 0x352 <BTTransmitStr>
	removeEntryFromTimerQueue(&stopEngines);
     ac8:	88 e4       	ldi	r24, 0x48	; 72
     aca:	95 e0       	ldi	r25, 0x05	; 5
     acc:	0e 94 a2 13 	call	0x2744	; 0x2744 <removeEntryFromTimerQueue>
	return NO;
}
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	08 95       	ret

00000ad4 <checkFreeParallelParkingPlace>:
void checkFreeParallelParkingPlace(){
    if(DEBUGGING)
     ad4:	80 91 46 04 	lds	r24, 0x0446
     ad8:	80 ff       	sbrs	r24, 0
     ada:	04 c0       	rjmp	.+8      	; 0xae4 <checkFreeParallelParkingPlace+0x10>
		BTTransmitStr("Start Free P P P!");
     adc:	8a e2       	ldi	r24, 0x2A	; 42
     ade:	91 e0       	ldi	r25, 0x01	; 1
     ae0:	0e 94 a9 01 	call	0x352	; 0x352 <BTTransmitStr>
     ae4:	08 95       	ret

00000ae6 <initEngines>:


void initEngines()
{
	
	OCR0A = 0;
     ae6:	17 bc       	out	0x27, r1	; 39
	OCR2A = 0;
     ae8:	10 92 b3 00 	sts	0x00B3, r1
	
	//PINB|=(1<<PB3);
	
	
	DDRB |=1<<PINB3;
     aec:	23 9a       	sbi	0x04, 3	; 4
	TCCR0A |=3;
     aee:	84 b5       	in	r24, 0x24	; 36
     af0:	83 60       	ori	r24, 0x03	; 3
     af2:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0A0);
     af4:	84 b5       	in	r24, 0x24	; 36
     af6:	80 64       	ori	r24, 0x40	; 64
     af8:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0A1);
     afa:	84 b5       	in	r24, 0x24	; 36
     afc:	80 68       	ori	r24, 0x80	; 128
     afe:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS00);
     b00:	85 b5       	in	r24, 0x25	; 37
     b02:	81 60       	ori	r24, 0x01	; 1
     b04:	85 bd       	out	0x25, r24	; 37
	// motor 2
	
	DDRD |= (1 << PD7);
     b06:	57 9a       	sbi	0x0a, 7	; 10
	TCCR2A|=3;
     b08:	e0 eb       	ldi	r30, 0xB0	; 176
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	80 81       	ld	r24, Z
     b0e:	83 60       	ori	r24, 0x03	; 3
     b10:	80 83       	st	Z, r24
	TCCR2A |= (1 << COM2A0);
     b12:	80 81       	ld	r24, Z
     b14:	80 64       	ori	r24, 0x40	; 64
     b16:	80 83       	st	Z, r24
	TCCR2A |= (1 << COM2A1);
     b18:	80 81       	ld	r24, Z
     b1a:	80 68       	ori	r24, 0x80	; 128
     b1c:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS20);
     b1e:	e1 eb       	ldi	r30, 0xB1	; 177
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	80 81       	ld	r24, Z
     b24:	81 60       	ori	r24, 0x01	; 1
     b26:	80 83       	st	Z, r24
	
		/*	PORTC |= 1<<PINC1;	
			PORTC |= 1<<PINC0;	*/
		
	//enable standby
	DDRB |= 1<<PINB5;
     b28:	25 9a       	sbi	0x04, 5	; 4
	PORTB |= 1<<PINB5;	
     b2a:	2d 9a       	sbi	0x05, 5	; 5
	DDRB |= 1<<PINB4;
     b2c:	24 9a       	sbi	0x04, 4	; 4
	PORTB |= 1<<PINB4;
     b2e:	2c 9a       	sbi	0x05, 4	; 5
	
	
	//in1 & in2 4 left engines
	DDRD |= 1<<PIND3;
     b30:	53 9a       	sbi	0x0a, 3	; 10
	DDRD |= 1<<PIND5;
     b32:	55 9a       	sbi	0x0a, 5	; 10
	PORTD &= ~ 1<<PIND3;
     b34:	8b b1       	in	r24, 0x0b	; 11
     b36:	80 7f       	andi	r24, 0xF0	; 240
     b38:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~ 1<<PIND5;
     b3a:	8b b1       	in	r24, 0x0b	; 11
     b3c:	80 7c       	andi	r24, 0xC0	; 192
     b3e:	8b b9       	out	0x0b, r24	; 11
	
	//in1 & in2 4 left engines
	DDRD |= 1<<PIND2;
     b40:	52 9a       	sbi	0x0a, 2	; 10
	DDRD |= 1<<PIND4;
     b42:	54 9a       	sbi	0x0a, 4	; 10
	PORTD &= ~ 1<<PIND2;
     b44:	8b b1       	in	r24, 0x0b	; 11
     b46:	88 7f       	andi	r24, 0xF8	; 248
     b48:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~ 1<<PIND4;
     b4a:	8b b1       	in	r24, 0x0b	; 11
     b4c:	80 7e       	andi	r24, 0xE0	; 224
     b4e:	8b b9       	out	0x0b, r24	; 11
     b50:	08 95       	ret

00000b52 <setEnginesSpeed>:
uint8_t lastVitLeft=0, lastVitRight=0;

void setEnginesSpeed(Engines engine, Sens sens, uint8_t viteza)
{
	//toggleCountingTimeForEncoders(ON);
	viteza = 255 - viteza;
     b52:	40 95       	com	r20
		
	if(engine==RightEngines){
     b54:	81 11       	cpse	r24, r1
     b56:	0a c0       	rjmp	.+20     	; 0xb6c <setEnginesSpeed+0x1a>
		if(sens != SensFata){
     b58:	66 23       	and	r22, r22
     b5a:	19 f0       	breq	.+6      	; 0xb62 <setEnginesSpeed+0x10>
			PORTD |=  1<<PIND3;
     b5c:	5b 9a       	sbi	0x0b, 3	; 11
			PORTD &= ~ (1<<PIND5);
     b5e:	5d 98       	cbi	0x0b, 5	; 11
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <setEnginesSpeed+0x14>
		}			
		else{
			PORTD &= ~ (1<<PIND3);
     b62:	5b 98       	cbi	0x0b, 3	; 11
			PORTD |=  1<<PIND5;
     b64:	5d 9a       	sbi	0x0b, 5	; 11
		}
		OCR2A = viteza;	
     b66:	40 93 b3 00 	sts	0x00B3, r20
     b6a:	08 95       	ret
	}
	else
	{
		if(sens != SensFata){
     b6c:	66 23       	and	r22, r22
     b6e:	19 f0       	breq	.+6      	; 0xb76 <setEnginesSpeed+0x24>
			PORTD &= ~ (1<<PIND2);
     b70:	5a 98       	cbi	0x0b, 2	; 11
			PORTD |=  1<<PIND4;	
     b72:	5c 9a       	sbi	0x0b, 4	; 11
     b74:	02 c0       	rjmp	.+4      	; 0xb7a <setEnginesSpeed+0x28>
		}			
		else{			
			PORTD |=  1<<PIND2;
     b76:	5a 9a       	sbi	0x0b, 2	; 11
			PORTD &= ~( 1<<PIND4);	
     b78:	5c 98       	cbi	0x0b, 4	; 11
		}
		OCR0A = viteza;
     b7a:	47 bd       	out	0x27, r20	; 39
     b7c:	08 95       	ret

00000b7e <goFront>:
#include "Lights.h"
#include "../utile.h"

void setEnginesSpeed(Engines, Sens, uint8_t);

void goFront(uint8_t timp, uint8_t viteza){	
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	d8 2f       	mov	r29, r24
     b84:	c6 2f       	mov	r28, r22
	setEnginesSpeed(RightEngines, SensFata, viteza);
     b86:	46 2f       	mov	r20, r22
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	0e 94 a9 05 	call	0xb52	; 0xb52 <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensFata, viteza);
     b90:	4c 2f       	mov	r20, r28
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	0e 94 a9 05 	call	0xb52	; 0xb52 <setEnginesSpeed>
	addEntryIfNotExists(&stopEngines, 1000UL*1000UL*timp, Once);	
     b9a:	ad 2f       	mov	r26, r29
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	20 e4       	ldi	r18, 0x40	; 64
     ba0:	32 e4       	ldi	r19, 0x42	; 66
     ba2:	4f e0       	ldi	r20, 0x0F	; 15
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__muluhisi3>
     baa:	ab 01       	movw	r20, r22
     bac:	bc 01       	movw	r22, r24
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	88 e4       	ldi	r24, 0x48	; 72
     bb2:	95 e0       	ldi	r25, 0x05	; 5
     bb4:	0e 94 2f 12 	call	0x245e	; 0x245e <addEntryIfNotExists>
	doBlinkLeds(0, 0);
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	a9 01       	movw	r20, r18
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	cb 01       	movw	r24, r22
     bc4:	0e 94 42 08 	call	0x1084	; 0x1084 <doBlinkLeds>
	if(DEBUGGING)
     bc8:	80 91 46 04 	lds	r24, 0x0446
     bcc:	80 ff       	sbrs	r24, 0
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <goFront+0x5a>
		BTTransmitStr("Ma duc inainte!");
     bd0:	8d e5       	ldi	r24, 0x5D	; 93
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	0e 94 a9 01 	call	0x352	; 0x352 <BTTransmitStr>
}
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	08 95       	ret

00000bde <goBack>:
void goBack(uint8_t timp, uint8_t viteza){
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	d8 2f       	mov	r29, r24
     be4:	c6 2f       	mov	r28, r22
	setEnginesSpeed(RightEngines, SensSpate, viteza);
     be6:	46 2f       	mov	r20, r22
     be8:	61 e0       	ldi	r22, 0x01	; 1
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	0e 94 a9 05 	call	0xb52	; 0xb52 <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensSpate, viteza);
     bf0:	4c 2f       	mov	r20, r28
     bf2:	61 e0       	ldi	r22, 0x01	; 1
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	0e 94 a9 05 	call	0xb52	; 0xb52 <setEnginesSpeed>
	addEntryIfNotExists(&stopEngines, 1000UL*1000UL*timp, Once);
     bfa:	ad 2f       	mov	r26, r29
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	20 e4       	ldi	r18, 0x40	; 64
     c00:	32 e4       	ldi	r19, 0x42	; 66
     c02:	4f e0       	ldi	r20, 0x0F	; 15
     c04:	50 e0       	ldi	r21, 0x00	; 0
     c06:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__muluhisi3>
     c0a:	ab 01       	movw	r20, r22
     c0c:	bc 01       	movw	r22, r24
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	88 e4       	ldi	r24, 0x48	; 72
     c12:	95 e0       	ldi	r25, 0x05	; 5
     c14:	0e 94 2f 12 	call	0x245e	; 0x245e <addEntryIfNotExists>
	doBlinkLeds(0, 0);
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	a9 01       	movw	r20, r18
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	cb 01       	movw	r24, r22
     c24:	0e 94 42 08 	call	0x1084	; 0x1084 <doBlinkLeds>
	PORTA |= _BV(PINA6);
     c28:	16 9a       	sbi	0x02, 6	; 2
    if(DEBUGGING){
     c2a:	80 91 46 04 	lds	r24, 0x0446
     c2e:	80 ff       	sbrs	r24, 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <goBack+0x5c>
		
		BTTransmitStr("Ma duc inapoi!");
     c32:	8d e6       	ldi	r24, 0x6D	; 109
     c34:	91 e0       	ldi	r25, 0x01	; 1
     c36:	0e 94 a9 01 	call	0x352	; 0x352 <BTTransmitStr>
	}
}
     c3a:	df 91       	pop	r29
     c3c:	cf 91       	pop	r28
     c3e:	08 95       	ret

00000c40 <goFrontLeft>:

void goFrontLeft(uint8_t timp, uint8_t viteza){
     c40:	cf 93       	push	r28
     c42:	c8 2f       	mov	r28, r24
     c44:	46 2f       	mov	r20, r22
	
	setEnginesSpeed(RightEngines, SensFata, viteza);
     c46:	60 e0       	ldi	r22, 0x00	; 0
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	0e 94 a9 05 	call	0xb52	; 0xb52 <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensFata, 10);
     c4e:	4a e0       	ldi	r20, 0x0A	; 10
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	0e 94 a9 05 	call	0xb52	; 0xb52 <setEnginesSpeed>
	addEntryIfNotExists(&stopEngines, 1000UL*1000UL*timp, Once);
     c58:	ac 2f       	mov	r26, r28
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	20 e4       	ldi	r18, 0x40	; 64
     c5e:	32 e4       	ldi	r19, 0x42	; 66
     c60:	4f e0       	ldi	r20, 0x0F	; 15
     c62:	50 e0       	ldi	r21, 0x00	; 0
     c64:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__muluhisi3>
     c68:	ab 01       	movw	r20, r22
     c6a:	bc 01       	movw	r22, r24
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	88 e4       	ldi	r24, 0x48	; 72
     c70:	95 e0       	ldi	r25, 0x05	; 5
     c72:	0e 94 2f 12 	call	0x245e	; 0x245e <addEntryIfNotExists>
	doBlinkLeds(500*1000UL, 0);
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	a9 01       	movw	r20, r18
     c7c:	60 e2       	ldi	r22, 0x20	; 32
     c7e:	71 ea       	ldi	r23, 0xA1	; 161
     c80:	87 e0       	ldi	r24, 0x07	; 7
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	0e 94 42 08 	call	0x1084	; 0x1084 <doBlinkLeds>
    if(DEBUGGING)
     c88:	80 91 46 04 	lds	r24, 0x0446
     c8c:	80 ff       	sbrs	r24, 0
     c8e:	04 c0       	rjmp	.+8      	; 0xc98 <goFrontLeft+0x58>
		BTTransmitStr("Ma duc inainte stanga!");
     c90:	8c e7       	ldi	r24, 0x7C	; 124
     c92:	91 e0       	ldi	r25, 0x01	; 1
     c94:	0e 94 a9 01 	call	0x352	; 0x352 <BTTransmitStr>
}
     c98:	cf 91       	pop	r28
     c9a:	08 95       	ret

00000c9c <goFrontRight>:
void goFrontRight(uint8_t timp, uint8_t viteza){
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	c8 2f       	mov	r28, r24
     ca2:	d6 2f       	mov	r29, r22
	
	setEnginesSpeed(RightEngines, SensFata, 10);
     ca4:	4a e0       	ldi	r20, 0x0A	; 10
     ca6:	60 e0       	ldi	r22, 0x00	; 0
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	0e 94 a9 05 	call	0xb52	; 0xb52 <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensFata, viteza);
     cae:	4d 2f       	mov	r20, r29
     cb0:	60 e0       	ldi	r22, 0x00	; 0
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	0e 94 a9 05 	call	0xb52	; 0xb52 <setEnginesSpeed>
	addEntryIfNotExists(&stopEngines, 1000UL*1000UL*timp, Once);
     cb8:	ac 2f       	mov	r26, r28
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	20 e4       	ldi	r18, 0x40	; 64
     cbe:	32 e4       	ldi	r19, 0x42	; 66
     cc0:	4f e0       	ldi	r20, 0x0F	; 15
     cc2:	50 e0       	ldi	r21, 0x00	; 0
     cc4:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__muluhisi3>
     cc8:	ab 01       	movw	r20, r22
     cca:	bc 01       	movw	r22, r24
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	88 e4       	ldi	r24, 0x48	; 72
     cd0:	95 e0       	ldi	r25, 0x05	; 5
     cd2:	0e 94 2f 12 	call	0x245e	; 0x245e <addEntryIfNotExists>
    if(DEBUGGING)
     cd6:	80 91 46 04 	lds	r24, 0x0446
     cda:	80 ff       	sbrs	r24, 0
     cdc:	04 c0       	rjmp	.+8      	; 0xce6 <goFrontRight+0x4a>
		BTTransmitStr("Ma duc inainte dreapta!");
     cde:	83 e9       	ldi	r24, 0x93	; 147
     ce0:	91 e0       	ldi	r25, 0x01	; 1
     ce2:	0e 94 a9 01 	call	0x352	; 0x352 <BTTransmitStr>
}
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	08 95       	ret

00000cec <goBackLeft>:
			doBlinkLeds(0, 500*1000UL);
	}
}


void goBackLeft(uint8_t timp, uint8_t viteza){
     cec:	cf 93       	push	r28
     cee:	c8 2f       	mov	r28, r24
     cf0:	46 2f       	mov	r20, r22
	
	setEnginesSpeed(RightEngines, SensSpate, viteza);
     cf2:	61 e0       	ldi	r22, 0x01	; 1
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	0e 94 a9 05 	call	0xb52	; 0xb52 <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensSpate, 10);
     cfa:	4a e0       	ldi	r20, 0x0A	; 10
     cfc:	61 e0       	ldi	r22, 0x01	; 1
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	0e 94 a9 05 	call	0xb52	; 0xb52 <setEnginesSpeed>
	addEntryIfNotExists(&stopEngines, 1000UL*1000UL*timp, Once);
     d04:	ac 2f       	mov	r26, r28
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	20 e4       	ldi	r18, 0x40	; 64
     d0a:	32 e4       	ldi	r19, 0x42	; 66
     d0c:	4f e0       	ldi	r20, 0x0F	; 15
     d0e:	50 e0       	ldi	r21, 0x00	; 0
     d10:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__muluhisi3>
     d14:	ab 01       	movw	r20, r22
     d16:	bc 01       	movw	r22, r24
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	88 e4       	ldi	r24, 0x48	; 72
     d1c:	95 e0       	ldi	r25, 0x05	; 5
     d1e:	0e 94 2f 12 	call	0x245e	; 0x245e <addEntryIfNotExists>
	doBlinkLeds(500*1000UL, 0);
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	a9 01       	movw	r20, r18
     d28:	60 e2       	ldi	r22, 0x20	; 32
     d2a:	71 ea       	ldi	r23, 0xA1	; 161
     d2c:	87 e0       	ldi	r24, 0x07	; 7
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	0e 94 42 08 	call	0x1084	; 0x1084 <doBlinkLeds>
	PORTA |= _BV(PINA6);
     d34:	16 9a       	sbi	0x02, 6	; 2
    if(DEBUGGING)
     d36:	80 91 46 04 	lds	r24, 0x0446
     d3a:	80 ff       	sbrs	r24, 0
     d3c:	04 c0       	rjmp	.+8      	; 0xd46 <goBackLeft+0x5a>
		BTTransmitStr("Ma duc inapoi stanga!");
     d3e:	8b ea       	ldi	r24, 0xAB	; 171
     d40:	91 e0       	ldi	r25, 0x01	; 1
     d42:	0e 94 a9 01 	call	0x352	; 0x352 <BTTransmitStr>
}
     d46:	cf 91       	pop	r28
     d48:	08 95       	ret

00000d4a <goBackRight>:
void goBackRight(uint8_t timp, uint8_t viteza){
     d4a:	cf 93       	push	r28
     d4c:	df 93       	push	r29
     d4e:	c8 2f       	mov	r28, r24
     d50:	d6 2f       	mov	r29, r22
		
	setEnginesSpeed(RightEngines, SensSpate, 10);
     d52:	4a e0       	ldi	r20, 0x0A	; 10
     d54:	61 e0       	ldi	r22, 0x01	; 1
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	0e 94 a9 05 	call	0xb52	; 0xb52 <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensSpate, viteza);
     d5c:	4d 2f       	mov	r20, r29
     d5e:	61 e0       	ldi	r22, 0x01	; 1
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	0e 94 a9 05 	call	0xb52	; 0xb52 <setEnginesSpeed>
	addEntryIfNotExists(&stopEngines, 1000UL*1000UL*timp, Once);
     d66:	ac 2f       	mov	r26, r28
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	20 e4       	ldi	r18, 0x40	; 64
     d6c:	32 e4       	ldi	r19, 0x42	; 66
     d6e:	4f e0       	ldi	r20, 0x0F	; 15
     d70:	50 e0       	ldi	r21, 0x00	; 0
     d72:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__muluhisi3>
     d76:	ab 01       	movw	r20, r22
     d78:	bc 01       	movw	r22, r24
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	88 e4       	ldi	r24, 0x48	; 72
     d7e:	95 e0       	ldi	r25, 0x05	; 5
     d80:	0e 94 2f 12 	call	0x245e	; 0x245e <addEntryIfNotExists>
	doBlinkLeds(0, 500*1000UL);
     d84:	20 e2       	ldi	r18, 0x20	; 32
     d86:	31 ea       	ldi	r19, 0xA1	; 161
     d88:	47 e0       	ldi	r20, 0x07	; 7
     d8a:	50 e0       	ldi	r21, 0x00	; 0
     d8c:	60 e0       	ldi	r22, 0x00	; 0
     d8e:	70 e0       	ldi	r23, 0x00	; 0
     d90:	cb 01       	movw	r24, r22
     d92:	0e 94 42 08 	call	0x1084	; 0x1084 <doBlinkLeds>
	PORTA |= _BV(PINA6);
     d96:	16 9a       	sbi	0x02, 6	; 2
    if(DEBUGGING)
     d98:	80 91 46 04 	lds	r24, 0x0446
     d9c:	80 ff       	sbrs	r24, 0
     d9e:	04 c0       	rjmp	.+8      	; 0xda8 <goBackRight+0x5e>
		BTTransmitStr("Ma duc inapoi dreapta!");
     da0:	81 ec       	ldi	r24, 0xC1	; 193
     da2:	91 e0       	ldi	r25, 0x01	; 1
     da4:	0e 94 a9 01 	call	0x352	; 0x352 <BTTransmitStr>
}
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	08 95       	ret

00000dae <rotireSmechera>:
void rotireSmechera(uint8_t timp, Sens sensStanga, uint8_t vitezaStanga, Sens sensDreapta, uint8_t vitezaDreapta){
     dae:	df 92       	push	r13
     db0:	ef 92       	push	r14
     db2:	ff 92       	push	r15
     db4:	0f 93       	push	r16
     db6:	1f 93       	push	r17
     db8:	cf 93       	push	r28
     dba:	df 93       	push	r29
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
     dc0:	c4 56       	subi	r28, 0x64	; 100
     dc2:	d1 09       	sbc	r29, r1
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	f8 94       	cli
     dc8:	de bf       	out	0x3e, r29	; 62
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	cd bf       	out	0x3d, r28	; 61
     dce:	d8 2e       	mov	r13, r24
     dd0:	e6 2e       	mov	r14, r22
     dd2:	f4 2e       	mov	r15, r20
     dd4:	12 2f       	mov	r17, r18
	setEnginesSpeed(RightEngines, sensDreapta, vitezaDreapta);
     dd6:	40 2f       	mov	r20, r16
     dd8:	62 2f       	mov	r22, r18
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	0e 94 a9 05 	call	0xb52	; 0xb52 <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, sensStanga, vitezaStanga);
     de0:	4f 2d       	mov	r20, r15
     de2:	6e 2d       	mov	r22, r14
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	0e 94 a9 05 	call	0xb52	; 0xb52 <setEnginesSpeed>
	addEntryIfNotExists(&stopEngines, 1000UL*1000 * timp, Once);
     dea:	ad 2d       	mov	r26, r13
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	20 e4       	ldi	r18, 0x40	; 64
     df0:	32 e4       	ldi	r19, 0x42	; 66
     df2:	4f e0       	ldi	r20, 0x0F	; 15
     df4:	50 e0       	ldi	r21, 0x00	; 0
     df6:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__muluhisi3>
     dfa:	ab 01       	movw	r20, r22
     dfc:	bc 01       	movw	r22, r24
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	88 e4       	ldi	r24, 0x48	; 72
     e02:	95 e0       	ldi	r25, 0x05	; 5
     e04:	0e 94 2f 12 	call	0x245e	; 0x245e <addEntryIfNotExists>
	
	if(sensDreapta == SensFata && sensStanga == SensSpate){
     e08:	11 11       	cpse	r17, r1
     e0a:	0d c0       	rjmp	.+26     	; 0xe26 <rotireSmechera+0x78>
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	e8 12       	cpse	r14, r24
     e10:	18 c0       	rjmp	.+48     	; 0xe42 <rotireSmechera+0x94>
		doBlinkLeds(500*1000UL, 0);
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	a9 01       	movw	r20, r18
     e18:	60 e2       	ldi	r22, 0x20	; 32
     e1a:	71 ea       	ldi	r23, 0xA1	; 161
     e1c:	87 e0       	ldi	r24, 0x07	; 7
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 42 08 	call	0x1084	; 0x1084 <doBlinkLeds>
     e24:	51 c0       	rjmp	.+162    	; 0xec8 <rotireSmechera+0x11a>
	}
	else if(sensDreapta == SensSpate && sensStanga == SensFata){
     e26:	11 30       	cpi	r17, 0x01	; 1
     e28:	79 f5       	brne	.+94     	; 0xe88 <rotireSmechera+0xda>
     e2a:	e1 10       	cpse	r14, r1
     e2c:	2d c0       	rjmp	.+90     	; 0xe88 <rotireSmechera+0xda>
		doBlinkLeds(0, 500*1000UL);
     e2e:	20 e2       	ldi	r18, 0x20	; 32
     e30:	31 ea       	ldi	r19, 0xA1	; 161
     e32:	47 e0       	ldi	r20, 0x07	; 7
     e34:	50 e0       	ldi	r21, 0x00	; 0
     e36:	60 e0       	ldi	r22, 0x00	; 0
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	cb 01       	movw	r24, r22
     e3c:	0e 94 42 08 	call	0x1084	; 0x1084 <doBlinkLeds>
     e40:	43 c0       	rjmp	.+134    	; 0xec8 <rotireSmechera+0x11a>
	}
	else if(sensDreapta == SensFata && sensStanga == SensFata){
     e42:	e1 10       	cpse	r14, r1
     e44:	21 c0       	rjmp	.+66     	; 0xe88 <rotireSmechera+0xda>
		if(vitezaStanga > vitezaDreapta)			
     e46:	0f 15       	cp	r16, r15
     e48:	50 f4       	brcc	.+20     	; 0xe5e <rotireSmechera+0xb0>
			doBlinkLeds(0, 500*1000UL);	
     e4a:	20 e2       	ldi	r18, 0x20	; 32
     e4c:	31 ea       	ldi	r19, 0xA1	; 161
     e4e:	47 e0       	ldi	r20, 0x07	; 7
     e50:	50 e0       	ldi	r21, 0x00	; 0
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	cb 01       	movw	r24, r22
     e58:	0e 94 42 08 	call	0x1084	; 0x1084 <doBlinkLeds>
     e5c:	35 c0       	rjmp	.+106    	; 0xec8 <rotireSmechera+0x11a>
		else if(vitezaStanga < vitezaDreapta)
     e5e:	f0 16       	cp	r15, r16
     e60:	50 f4       	brcc	.+20     	; 0xe76 <rotireSmechera+0xc8>
			doBlinkLeds(500*1000UL, 0);
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	a9 01       	movw	r20, r18
     e68:	60 e2       	ldi	r22, 0x20	; 32
     e6a:	71 ea       	ldi	r23, 0xA1	; 161
     e6c:	87 e0       	ldi	r24, 0x07	; 7
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	0e 94 42 08 	call	0x1084	; 0x1084 <doBlinkLeds>
     e74:	29 c0       	rjmp	.+82     	; 0xec8 <rotireSmechera+0x11a>
		else
			doBlinkLeds(0, 0);
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	a9 01       	movw	r20, r18
     e7c:	60 e0       	ldi	r22, 0x00	; 0
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	cb 01       	movw	r24, r22
     e82:	0e 94 42 08 	call	0x1084	; 0x1084 <doBlinkLeds>
     e86:	20 c0       	rjmp	.+64     	; 0xec8 <rotireSmechera+0x11a>
	}
	else {
		if(vitezaStanga < vitezaDreapta)
     e88:	f0 16       	cp	r15, r16
     e8a:	50 f4       	brcc	.+20     	; 0xea0 <rotireSmechera+0xf2>
			doBlinkLeds(500*1000UL, 0);
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	a9 01       	movw	r20, r18
     e92:	60 e2       	ldi	r22, 0x20	; 32
     e94:	71 ea       	ldi	r23, 0xA1	; 161
     e96:	87 e0       	ldi	r24, 0x07	; 7
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	0e 94 42 08 	call	0x1084	; 0x1084 <doBlinkLeds>
     e9e:	14 c0       	rjmp	.+40     	; 0xec8 <rotireSmechera+0x11a>
		else if(vitezaStanga > vitezaDreapta)
     ea0:	0f 15       	cp	r16, r15
     ea2:	50 f4       	brcc	.+20     	; 0xeb8 <rotireSmechera+0x10a>
			doBlinkLeds(0, 500*1000UL);
     ea4:	20 e2       	ldi	r18, 0x20	; 32
     ea6:	31 ea       	ldi	r19, 0xA1	; 161
     ea8:	47 e0       	ldi	r20, 0x07	; 7
     eaa:	50 e0       	ldi	r21, 0x00	; 0
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	cb 01       	movw	r24, r22
     eb2:	0e 94 42 08 	call	0x1084	; 0x1084 <doBlinkLeds>
     eb6:	08 c0       	rjmp	.+16     	; 0xec8 <rotireSmechera+0x11a>
		else
			doBlinkLeds(0, 0);
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	a9 01       	movw	r20, r18
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	cb 01       	movw	r24, r22
     ec4:	0e 94 42 08 	call	0x1084	; 0x1084 <doBlinkLeds>
	}
	
	if(DEBUGGING){
     ec8:	80 91 46 04 	lds	r24, 0x0446
     ecc:	80 ff       	sbrs	r24, 0
     ece:	1b c0       	rjmp	.+54     	; 0xf06 <rotireSmechera+0x158>
		char bfr[100];
		sprintf(bfr, "rotire smechera : %u %u %u %u", sensStanga, vitezaStanga, sensDreapta, vitezaDreapta);
     ed0:	1f 92       	push	r1
     ed2:	0f 93       	push	r16
     ed4:	1f 92       	push	r1
     ed6:	1f 93       	push	r17
     ed8:	1f 92       	push	r1
     eda:	ff 92       	push	r15
     edc:	1f 92       	push	r1
     ede:	ef 92       	push	r14
     ee0:	88 ed       	ldi	r24, 0xD8	; 216
     ee2:	91 e0       	ldi	r25, 0x01	; 1
     ee4:	9f 93       	push	r25
     ee6:	8f 93       	push	r24
     ee8:	8e 01       	movw	r16, r28
     eea:	0f 5f       	subi	r16, 0xFF	; 255
     eec:	1f 4f       	sbci	r17, 0xFF	; 255
     eee:	1f 93       	push	r17
     ef0:	0f 93       	push	r16
     ef2:	0e 94 77 1c 	call	0x38ee	; 0x38ee <sprintf>
		BTTransmitStr(bfr);		
     ef6:	c8 01       	movw	r24, r16
     ef8:	0e 94 a9 01 	call	0x352	; 0x352 <BTTransmitStr>
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	f8 94       	cli
     f00:	de bf       	out	0x3e, r29	; 62
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	cd bf       	out	0x3d, r28	; 61
	}
		
}
     f06:	cc 59       	subi	r28, 0x9C	; 156
     f08:	df 4f       	sbci	r29, 0xFF	; 255
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	f8 94       	cli
     f0e:	de bf       	out	0x3e, r29	; 62
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	cd bf       	out	0x3d, r28	; 61
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	1f 91       	pop	r17
     f1a:	0f 91       	pop	r16
     f1c:	ff 90       	pop	r15
     f1e:	ef 90       	pop	r14
     f20:	df 90       	pop	r13
     f22:	08 95       	ret

00000f24 <rotirePeLoc>:
void rotirePeLoc(uint8_t timp, uint8_t viteza,  uint8_t engines){
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	d8 2f       	mov	r29, r24
     f2a:	c6 2f       	mov	r28, r22
	
	if(engines == RightEngines){
     f2c:	41 11       	cpse	r20, r1
     f2e:	1c c0       	rjmp	.+56     	; 0xf68 <rotirePeLoc+0x44>
		setEnginesSpeed(LeftEngines, SensSpate,  viteza);
     f30:	46 2f       	mov	r20, r22
     f32:	61 e0       	ldi	r22, 0x01	; 1
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	0e 94 a9 05 	call	0xb52	; 0xb52 <setEnginesSpeed>
		setEnginesSpeed(RightEngines, SensFata, viteza);
     f3a:	4c 2f       	mov	r20, r28
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	0e 94 a9 05 	call	0xb52	; 0xb52 <setEnginesSpeed>
		if(DEBUGGING)
     f44:	80 91 46 04 	lds	r24, 0x0446
     f48:	80 ff       	sbrs	r24, 0
     f4a:	04 c0       	rjmp	.+8      	; 0xf54 <rotirePeLoc+0x30>
			BTTransmitStr("ma rotesc spre dreapta");
     f4c:	86 ef       	ldi	r24, 0xF6	; 246
     f4e:	91 e0       	ldi	r25, 0x01	; 1
     f50:	0e 94 a9 01 	call	0x352	; 0x352 <BTTransmitStr>
		doBlinkLeds(500*1000UL, 0);
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	a9 01       	movw	r20, r18
     f5a:	60 e2       	ldi	r22, 0x20	; 32
     f5c:	71 ea       	ldi	r23, 0xA1	; 161
     f5e:	87 e0       	ldi	r24, 0x07	; 7
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	0e 94 42 08 	call	0x1084	; 0x1084 <doBlinkLeds>
     f66:	1b c0       	rjmp	.+54     	; 0xf9e <rotirePeLoc+0x7a>
	}
	else {
		setEnginesSpeed(LeftEngines, SensFata, viteza);
     f68:	46 2f       	mov	r20, r22
     f6a:	60 e0       	ldi	r22, 0x00	; 0
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	0e 94 a9 05 	call	0xb52	; 0xb52 <setEnginesSpeed>
		setEnginesSpeed(RightEngines, SensSpate, viteza);
     f72:	4c 2f       	mov	r20, r28
     f74:	61 e0       	ldi	r22, 0x01	; 1
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	0e 94 a9 05 	call	0xb52	; 0xb52 <setEnginesSpeed>
		if(DEBUGGING)
     f7c:	80 91 46 04 	lds	r24, 0x0446
     f80:	80 ff       	sbrs	r24, 0
     f82:	04 c0       	rjmp	.+8      	; 0xf8c <rotirePeLoc+0x68>
			BTTransmitStr("ma rotesc spre stanga");
     f84:	8d e0       	ldi	r24, 0x0D	; 13
     f86:	92 e0       	ldi	r25, 0x02	; 2
     f88:	0e 94 a9 01 	call	0x352	; 0x352 <BTTransmitStr>
		doBlinkLeds(0, 500*1000UL);
     f8c:	20 e2       	ldi	r18, 0x20	; 32
     f8e:	31 ea       	ldi	r19, 0xA1	; 161
     f90:	47 e0       	ldi	r20, 0x07	; 7
     f92:	50 e0       	ldi	r21, 0x00	; 0
     f94:	60 e0       	ldi	r22, 0x00	; 0
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	cb 01       	movw	r24, r22
     f9a:	0e 94 42 08 	call	0x1084	; 0x1084 <doBlinkLeds>
	}
	addEntryIfNotExists(&stopEngines, 1000UL*1000UL*timp, Once);
     f9e:	ad 2f       	mov	r26, r29
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	20 e4       	ldi	r18, 0x40	; 64
     fa4:	32 e4       	ldi	r19, 0x42	; 66
     fa6:	4f e0       	ldi	r20, 0x0F	; 15
     fa8:	50 e0       	ldi	r21, 0x00	; 0
     faa:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__muluhisi3>
     fae:	ab 01       	movw	r20, r22
     fb0:	bc 01       	movw	r22, r24
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	88 e4       	ldi	r24, 0x48	; 72
     fb6:	95 e0       	ldi	r25, 0x05	; 5
     fb8:	0e 94 2f 12 	call	0x245e	; 0x245e <addEntryIfNotExists>
}
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	08 95       	ret

00000fc2 <blinkLeftLeds>:
	DDRA |= _BV(PINA7);
	
}

uint8_t blinkLeftLeds(){
	PORTA ^= _BV(PINA5);
     fc2:	92 b1       	in	r25, 0x02	; 2
     fc4:	80 e2       	ldi	r24, 0x20	; 32
     fc6:	89 27       	eor	r24, r25
     fc8:	82 b9       	out	0x02, r24	; 2
	return NO;
}
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	08 95       	ret

00000fce <blinkRightLeds>:

uint8_t blinkRightLeds(){
	PORTA ^= _BV(PINA4);
     fce:	92 b1       	in	r25, 0x02	; 2
     fd0:	80 e1       	ldi	r24, 0x10	; 16
     fd2:	89 27       	eor	r24, r25
     fd4:	82 b9       	out	0x02, r24	; 2
	return NO;
}
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	08 95       	ret

00000fda <blinkNeonsSMF>:

uint8_t blinkNeonsState = 0;

uint8_t blinkNeonsSMF(){
	switch(NEONS_SETTING){
     fda:	80 91 46 04 	lds	r24, 0x0446
     fde:	82 95       	swap	r24
     fe0:	8f 70       	andi	r24, 0x0F	; 15
     fe2:	87 70       	andi	r24, 0x07	; 7
     fe4:	81 30       	cpi	r24, 0x01	; 1
     fe6:	19 f0       	breq	.+6      	; 0xfee <blinkNeonsSMF+0x14>
     fe8:	82 30       	cpi	r24, 0x02	; 2
     fea:	99 f0       	breq	.+38     	; 0x1012 <blinkNeonsSMF+0x38>
     fec:	2b c0       	rjmp	.+86     	; 0x1044 <blinkNeonsSMF+0x6a>
		case 1:
			if(blinkNeonsState == 0)
     fee:	80 91 45 04 	lds	r24, 0x0445
     ff2:	81 11       	cpse	r24, r1
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <blinkNeonsSMF+0x20>
				PORTA &= ~_BV(PINA7);
     ff6:	17 98       	cbi	0x02, 7	; 2
     ff8:	25 c0       	rjmp	.+74     	; 0x1044 <blinkNeonsSMF+0x6a>
			else if(blinkNeonsState > 6){
     ffa:	87 30       	cpi	r24, 0x07	; 7
     ffc:	18 f1       	brcs	.+70     	; 0x1044 <blinkNeonsSMF+0x6a>
				PORTA ^= _BV(PINA7);
     ffe:	82 b1       	in	r24, 0x02	; 2
    1000:	80 58       	subi	r24, 0x80	; 128
    1002:	82 b9       	out	0x02, r24	; 2
				if(blinkNeonsState == 12)
    1004:	80 91 45 04 	lds	r24, 0x0445
    1008:	8c 30       	cpi	r24, 0x0C	; 12
    100a:	e1 f4       	brne	.+56     	; 0x1044 <blinkNeonsSMF+0x6a>
				blinkNeonsState = 0;
    100c:	10 92 45 04 	sts	0x0445, r1
    1010:	19 c0       	rjmp	.+50     	; 0x1044 <blinkNeonsSMF+0x6a>
			}
		break;
		case 2:
			if(blinkNeonsState % 7 == 0 || blinkNeonsState % 7 == 2){
    1012:	80 91 45 04 	lds	r24, 0x0445
    1016:	25 e2       	ldi	r18, 0x25	; 37
    1018:	82 9f       	mul	r24, r18
    101a:	21 2d       	mov	r18, r1
    101c:	11 24       	eor	r1, r1
    101e:	98 2f       	mov	r25, r24
    1020:	92 1b       	sub	r25, r18
    1022:	96 95       	lsr	r25
    1024:	92 0f       	add	r25, r18
    1026:	96 95       	lsr	r25
    1028:	96 95       	lsr	r25
    102a:	29 2f       	mov	r18, r25
    102c:	22 0f       	add	r18, r18
    102e:	22 0f       	add	r18, r18
    1030:	22 0f       	add	r18, r18
    1032:	29 1b       	sub	r18, r25
    1034:	82 1b       	sub	r24, r18
    1036:	8d 7f       	andi	r24, 0xFD	; 253
    1038:	11 f4       	brne	.+4      	; 0x103e <blinkNeonsSMF+0x64>
				PORTA &= ~_BV(PINA7);
    103a:	17 98       	cbi	0x02, 7	; 2
    103c:	03 c0       	rjmp	.+6      	; 0x1044 <blinkNeonsSMF+0x6a>
			}
			else if(blinkNeonsState % 7 == 1 || blinkNeonsState % 7 == 3){
    103e:	81 30       	cpi	r24, 0x01	; 1
    1040:	09 f4       	brne	.+2      	; 0x1044 <blinkNeonsSMF+0x6a>
				PORTA |= _BV(PINA7);
    1042:	17 9a       	sbi	0x02, 7	; 2
		
		break;
		default:
		break;
	}
	blinkNeonsState ++;
    1044:	80 91 45 04 	lds	r24, 0x0445
    1048:	8f 5f       	subi	r24, 0xFF	; 255
    104a:	80 93 45 04 	sts	0x0445, r24
	return NO;
}
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	08 95       	ret

00001052 <initLights>:
#include "../Settings.h"

uint8_t blinkNeons();

void initLights(){	
	DDRA |= _BV(PINA4);
    1052:	0c 9a       	sbi	0x01, 4	; 1
	DDRA |= _BV(PINA5);
    1054:	0d 9a       	sbi	0x01, 5	; 1
	//PORTA |= _BV(PINA4);
	//PORTA |= _BV(PINA5);
	
	
	DDRA |= _BV(PINA6);
    1056:	0e 9a       	sbi	0x01, 6	; 1
	DDRA |= _BV(PINA7);
    1058:	0f 9a       	sbi	0x01, 7	; 1
    105a:	08 95       	ret

0000105c <setTheNeonSetting>:
	}
	blinkNeonsState ++;
	return NO;
}
void setTheNeonSetting(uint8_t val){
	blinkNeonsState=0;
    105c:	10 92 45 04 	sts	0x0445, r1
	PORTA &= ~_BV(PINA7);
    1060:	17 98       	cbi	0x02, 7	; 2
	if(val)
    1062:	88 23       	and	r24, r24
    1064:	51 f0       	breq	.+20     	; 0x107a <setTheNeonSetting+0x1e>
		addEntryIfNotExists(&blinkNeonsSMF, 250 * 1000UL, Periodic);
    1066:	21 e0       	ldi	r18, 0x01	; 1
    1068:	40 e9       	ldi	r20, 0x90	; 144
    106a:	50 ed       	ldi	r21, 0xD0	; 208
    106c:	63 e0       	ldi	r22, 0x03	; 3
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	8d ee       	ldi	r24, 0xED	; 237
    1072:	97 e0       	ldi	r25, 0x07	; 7
    1074:	0e 94 2f 12 	call	0x245e	; 0x245e <addEntryIfNotExists>
    1078:	08 95       	ret
	else
		removeEntryFromTimerQueue(&blinkNeonsSMF);
    107a:	8d ee       	ldi	r24, 0xED	; 237
    107c:	97 e0       	ldi	r25, 0x07	; 7
    107e:	0e 94 a2 13 	call	0x2744	; 0x2744 <removeEntryFromTimerQueue>
    1082:	08 95       	ret

00001084 <doBlinkLeds>:
}
void doBlinkLeds(uint32_t perioadaStanga, uint32_t perioadaDreapta){
    1084:	cf 92       	push	r12
    1086:	df 92       	push	r13
    1088:	ef 92       	push	r14
    108a:	ff 92       	push	r15
    108c:	69 01       	movw	r12, r18
    108e:	7a 01       	movw	r14, r20
	if(perioadaStanga == 0){
    1090:	61 15       	cp	r22, r1
    1092:	71 05       	cpc	r23, r1
    1094:	81 05       	cpc	r24, r1
    1096:	91 05       	cpc	r25, r1
    1098:	31 f4       	brne	.+12     	; 0x10a6 <doBlinkLeds+0x22>
		removeEntryFromTimerQueue(&blinkLeftLeds);
    109a:	81 ee       	ldi	r24, 0xE1	; 225
    109c:	97 e0       	ldi	r25, 0x07	; 7
    109e:	0e 94 a2 13 	call	0x2744	; 0x2744 <removeEntryFromTimerQueue>
		PORTA &=~ _BV(PINA4);
    10a2:	14 98       	cbi	0x02, 4	; 2
    10a4:	07 c0       	rjmp	.+14     	; 0x10b4 <doBlinkLeds+0x30>
	}
	else{
		addEntryIfNotExists(&blinkLeftLeds, perioadaStanga, Periodic);
    10a6:	21 e0       	ldi	r18, 0x01	; 1
    10a8:	ab 01       	movw	r20, r22
    10aa:	bc 01       	movw	r22, r24
    10ac:	81 ee       	ldi	r24, 0xE1	; 225
    10ae:	97 e0       	ldi	r25, 0x07	; 7
    10b0:	0e 94 2f 12 	call	0x245e	; 0x245e <addEntryIfNotExists>
	}
	if(perioadaDreapta == 0){
    10b4:	c1 14       	cp	r12, r1
    10b6:	d1 04       	cpc	r13, r1
    10b8:	e1 04       	cpc	r14, r1
    10ba:	f1 04       	cpc	r15, r1
    10bc:	31 f4       	brne	.+12     	; 0x10ca <doBlinkLeds+0x46>
		removeEntryFromTimerQueue(&blinkRightLeds);
    10be:	87 ee       	ldi	r24, 0xE7	; 231
    10c0:	97 e0       	ldi	r25, 0x07	; 7
    10c2:	0e 94 a2 13 	call	0x2744	; 0x2744 <removeEntryFromTimerQueue>
		PORTA &=~ _BV(PINA5);
    10c6:	15 98       	cbi	0x02, 5	; 2
    10c8:	07 c0       	rjmp	.+14     	; 0x10d8 <doBlinkLeds+0x54>
	}
	else{
		addEntryIfNotExists(&blinkRightLeds, perioadaDreapta, Periodic);
    10ca:	21 e0       	ldi	r18, 0x01	; 1
    10cc:	b7 01       	movw	r22, r14
    10ce:	a6 01       	movw	r20, r12
    10d0:	87 ee       	ldi	r24, 0xE7	; 231
    10d2:	97 e0       	ldi	r25, 0x07	; 7
    10d4:	0e 94 2f 12 	call	0x245e	; 0x245e <addEntryIfNotExists>
	}
}
    10d8:	ff 90       	pop	r15
    10da:	ef 90       	pop	r14
    10dc:	df 90       	pop	r13
    10de:	cf 90       	pop	r12
    10e0:	08 95       	ret

000010e2 <turnBlinkingOff>:

void turnBlinkingOff(){
	removeEntryFromTimerQueue(&blinkLeftLeds);
    10e2:	81 ee       	ldi	r24, 0xE1	; 225
    10e4:	97 e0       	ldi	r25, 0x07	; 7
    10e6:	0e 94 a2 13 	call	0x2744	; 0x2744 <removeEntryFromTimerQueue>
	removeEntryFromTimerQueue(&blinkRightLeds);
    10ea:	87 ee       	ldi	r24, 0xE7	; 231
    10ec:	97 e0       	ldi	r25, 0x07	; 7
    10ee:	0e 94 a2 13 	call	0x2744	; 0x2744 <removeEntryFromTimerQueue>
	PORTA &=~ _BV(PINA5);
    10f2:	15 98       	cbi	0x02, 5	; 2
	PORTA &=~ _BV(PINA4);
    10f4:	14 98       	cbi	0x02, 4	; 2
    10f6:	08 95       	ret

000010f8 <sendSensor>:

uint16_t getValueOfSensor(Sensor sensor){
	return lastCMValue[sensor];
}

uint8_t sendSensor(){
    10f8:	ef 92       	push	r14
    10fa:	ff 92       	push	r15
    10fc:	0f 93       	push	r16
    10fe:	1f 93       	push	r17
    1100:	cf 93       	push	r28
    1102:	df 93       	push	r29
    1104:	c0 e0       	ldi	r28, 0x00	; 0
    1106:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	
	for(i=0;i<4;i++){		
		if(sensorsToSend & (1<<i)){			
			sprintf(msgBuffer, "sensor #%d = %lu", i, lastCMValue[i]);			
    1108:	0f 2e       	mov	r0, r31
    110a:	f3 e2       	ldi	r31, 0x23	; 35
    110c:	ef 2e       	mov	r14, r31
    110e:	f2 e0       	ldi	r31, 0x02	; 2
    1110:	ff 2e       	mov	r15, r31
    1112:	f0 2d       	mov	r31, r0
    1114:	02 e8       	ldi	r16, 0x82	; 130
    1116:	14 e0       	ldi	r17, 0x04	; 4

uint8_t sendSensor(){
	uint8_t i;
	
	for(i=0;i<4;i++){		
		if(sensorsToSend & (1<<i)){			
    1118:	80 91 b5 04 	lds	r24, 0x04B5
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	0c 2e       	mov	r0, r28
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <__stack+0x27>
    1122:	95 95       	asr	r25
    1124:	87 95       	ror	r24
    1126:	0a 94       	dec	r0
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <__stack+0x23>
    112a:	80 ff       	sbrs	r24, 0
    112c:	22 c0       	rjmp	.+68     	; 0x1172 <__stack+0x73>
			sprintf(msgBuffer, "sensor #%d = %lu", i, lastCMValue[i]);			
    112e:	fe 01       	movw	r30, r28
    1130:	ee 0f       	add	r30, r30
    1132:	ff 1f       	adc	r31, r31
    1134:	ee 0f       	add	r30, r30
    1136:	ff 1f       	adc	r31, r31
    1138:	ee 58       	subi	r30, 0x8E	; 142
    113a:	fb 4f       	sbci	r31, 0xFB	; 251
    113c:	40 81       	ld	r20, Z
    113e:	51 81       	ldd	r21, Z+1	; 0x01
    1140:	62 81       	ldd	r22, Z+2	; 0x02
    1142:	73 81       	ldd	r23, Z+3	; 0x03
    1144:	7f 93       	push	r23
    1146:	6f 93       	push	r22
    1148:	5f 93       	push	r21
    114a:	4f 93       	push	r20
    114c:	df 93       	push	r29
    114e:	cf 93       	push	r28
    1150:	ff 92       	push	r15
    1152:	ef 92       	push	r14
    1154:	1f 93       	push	r17
    1156:	0f 93       	push	r16
    1158:	0e 94 77 1c 	call	0x38ee	; 0x38ee <sprintf>
			BTTransmitStr(msgBuffer);			
    115c:	c8 01       	movw	r24, r16
    115e:	0e 94 a9 01 	call	0x352	; 0x352 <BTTransmitStr>
    1162:	8d b7       	in	r24, 0x3d	; 61
    1164:	9e b7       	in	r25, 0x3e	; 62
    1166:	0a 96       	adiw	r24, 0x0a	; 10
    1168:	0f b6       	in	r0, 0x3f	; 63
    116a:	f8 94       	cli
    116c:	9e bf       	out	0x3e, r25	; 62
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	8d bf       	out	0x3d, r24	; 61
    1172:	21 96       	adiw	r28, 0x01	; 1
}

uint8_t sendSensor(){
	uint8_t i;
	
	for(i=0;i<4;i++){		
    1174:	c4 30       	cpi	r28, 0x04	; 4
    1176:	d1 05       	cpc	r29, r1
    1178:	79 f6       	brne	.-98     	; 0x1118 <__stack+0x19>
			sprintf(msgBuffer, "sensor #%d = %lu", i, lastCMValue[i]);			
			BTTransmitStr(msgBuffer);			
		}
	}
	return NO;
}
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	1f 91       	pop	r17
    1182:	0f 91       	pop	r16
    1184:	ff 90       	pop	r15
    1186:	ef 90       	pop	r14
    1188:	08 95       	ret

0000118a <getValueOfSensor>:
char msgBuffer[50];
volatile uint16_t oldValue[4];
volatile uint32_t lastCMValue[4];

uint16_t getValueOfSensor(Sensor sensor){
	return lastCMValue[sensor];
    118a:	24 e0       	ldi	r18, 0x04	; 4
    118c:	82 9f       	mul	r24, r18
    118e:	c0 01       	movw	r24, r0
    1190:	11 24       	eor	r1, r1
    1192:	fc 01       	movw	r30, r24
    1194:	ee 58       	subi	r30, 0x8E	; 142
    1196:	fb 4f       	sbci	r31, 0xFB	; 251
    1198:	80 81       	ld	r24, Z
    119a:	91 81       	ldd	r25, Z+1	; 0x01
    119c:	a2 81       	ldd	r26, Z+2	; 0x02
    119e:	b3 81       	ldd	r27, Z+3	; 0x03
}
    11a0:	08 95       	ret

000011a2 <toggleSensorSend>:
		}
	}
	return NO;
}
uint8_t readSensors();
void toggleSensorSend(Sensor sensor){
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
	sensorsToSend ^= 1<<sensor;
    11a6:	40 91 b5 04 	lds	r20, 0x04B5
    11aa:	21 e0       	ldi	r18, 0x01	; 1
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	b9 01       	movw	r22, r18
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <toggleSensorSend+0x14>
    11b2:	66 0f       	add	r22, r22
    11b4:	77 1f       	adc	r23, r23
    11b6:	8a 95       	dec	r24
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <toggleSensorSend+0x10>
    11ba:	cb 01       	movw	r24, r22
    11bc:	84 27       	eor	r24, r20
    11be:	80 93 b5 04 	sts	0x04B5, r24
	
	sprintf(msgBuffer, "sensorsToSend %d %d %d %d ", sensorsToSend&1, (sensorsToSend&2)>>1, (sensorsToSend&4)>>2, (sensorsToSend&8)>>3);
    11c2:	30 91 b5 04 	lds	r19, 0x04B5
    11c6:	20 91 b5 04 	lds	r18, 0x04B5
    11ca:	90 91 b5 04 	lds	r25, 0x04B5
    11ce:	80 91 b5 04 	lds	r24, 0x04B5
    11d2:	33 fb       	bst	r19, 3
    11d4:	33 27       	eor	r19, r19
    11d6:	30 f9       	bld	r19, 0
    11d8:	1f 92       	push	r1
    11da:	3f 93       	push	r19
    11dc:	22 fb       	bst	r18, 2
    11de:	22 27       	eor	r18, r18
    11e0:	20 f9       	bld	r18, 0
    11e2:	1f 92       	push	r1
    11e4:	2f 93       	push	r18
    11e6:	96 95       	lsr	r25
    11e8:	91 70       	andi	r25, 0x01	; 1
    11ea:	1f 92       	push	r1
    11ec:	9f 93       	push	r25
    11ee:	81 70       	andi	r24, 0x01	; 1
    11f0:	1f 92       	push	r1
    11f2:	8f 93       	push	r24
    11f4:	84 e3       	ldi	r24, 0x34	; 52
    11f6:	92 e0       	ldi	r25, 0x02	; 2
    11f8:	9f 93       	push	r25
    11fa:	8f 93       	push	r24
    11fc:	c2 e8       	ldi	r28, 0x82	; 130
    11fe:	d4 e0       	ldi	r29, 0x04	; 4
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	0e 94 77 1c 	call	0x38ee	; 0x38ee <sprintf>
	BTTransmitStr(msgBuffer);
    1208:	ce 01       	movw	r24, r28
    120a:	0e 94 a9 01 	call	0x352	; 0x352 <BTTransmitStr>
	sprintf(msgBuffer, "sensorsToRead %d %d %d %d <<--", sensorsToRead&1, (sensorsToRead&2)>>1, (sensorsToRead&4)>>2, (sensorsToRead&8)>>3);
    120e:	30 91 b4 04 	lds	r19, 0x04B4
    1212:	20 91 b4 04 	lds	r18, 0x04B4
    1216:	90 91 b4 04 	lds	r25, 0x04B4
    121a:	80 91 b4 04 	lds	r24, 0x04B4
    121e:	33 fb       	bst	r19, 3
    1220:	33 27       	eor	r19, r19
    1222:	30 f9       	bld	r19, 0
    1224:	1f 92       	push	r1
    1226:	3f 93       	push	r19
    1228:	22 fb       	bst	r18, 2
    122a:	22 27       	eor	r18, r18
    122c:	20 f9       	bld	r18, 0
    122e:	1f 92       	push	r1
    1230:	2f 93       	push	r18
    1232:	96 95       	lsr	r25
    1234:	91 70       	andi	r25, 0x01	; 1
    1236:	1f 92       	push	r1
    1238:	9f 93       	push	r25
    123a:	81 70       	andi	r24, 0x01	; 1
    123c:	1f 92       	push	r1
    123e:	8f 93       	push	r24
    1240:	8f e4       	ldi	r24, 0x4F	; 79
    1242:	92 e0       	ldi	r25, 0x02	; 2
    1244:	9f 93       	push	r25
    1246:	8f 93       	push	r24
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	0e 94 77 1c 	call	0x38ee	; 0x38ee <sprintf>
	BTTransmitStr(msgBuffer);
    1250:	ce 01       	movw	r24, r28
    1252:	0e 94 a9 01 	call	0x352	; 0x352 <BTTransmitStr>
	
	uint8_t existsInTimerQueue = existsEntryInTimerQueue(&sendSensor);
    1256:	8c e7       	ldi	r24, 0x7C	; 124
    1258:	98 e0       	ldi	r25, 0x08	; 8
    125a:	0e 94 01 12 	call	0x2402	; 0x2402 <existsEntryInTimerQueue>
	//toggleSensorRead(sensor);
	if(sensorsToSend && !existsInTimerQueue){
    125e:	90 91 b5 04 	lds	r25, 0x04B5
    1262:	6d b7       	in	r22, 0x3d	; 61
    1264:	7e b7       	in	r23, 0x3e	; 62
    1266:	68 5e       	subi	r22, 0xE8	; 232
    1268:	7f 4f       	sbci	r23, 0xFF	; 255
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
    126e:	7e bf       	out	0x3e, r23	; 62
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	6d bf       	out	0x3d, r22	; 61
    1274:	99 23       	and	r25, r25
    1276:	61 f0       	breq	.+24     	; 0x1290 <toggleSensorSend+0xee>
    1278:	81 11       	cpse	r24, r1
    127a:	15 c0       	rjmp	.+42     	; 0x12a6 <toggleSensorSend+0x104>
		addEntryToTimerQueue(&sendSensor, 1000UL * 1000UL, Periodic);
    127c:	21 e0       	ldi	r18, 0x01	; 1
    127e:	40 e4       	ldi	r20, 0x40	; 64
    1280:	52 e4       	ldi	r21, 0x42	; 66
    1282:	6f e0       	ldi	r22, 0x0F	; 15
    1284:	70 e0       	ldi	r23, 0x00	; 0
    1286:	8c e7       	ldi	r24, 0x7C	; 124
    1288:	98 e0       	ldi	r25, 0x08	; 8
    128a:	0e 94 80 11 	call	0x2300	; 0x2300 <addEntryToTimerQueue>
    128e:	0f c0       	rjmp	.+30     	; 0x12ae <toggleSensorSend+0x10c>
	}
	else{
		if(!sensorsToSend && existsInTimerQueue)
    1290:	90 91 b5 04 	lds	r25, 0x04B5
    1294:	91 11       	cpse	r25, r1
    1296:	0b c0       	rjmp	.+22     	; 0x12ae <toggleSensorSend+0x10c>
    1298:	88 23       	and	r24, r24
    129a:	49 f0       	breq	.+18     	; 0x12ae <toggleSensorSend+0x10c>
		removeEntryFromTimerQueue(&sendSensor);
    129c:	8c e7       	ldi	r24, 0x7C	; 124
    129e:	98 e0       	ldi	r25, 0x08	; 8
    12a0:	0e 94 a2 13 	call	0x2744	; 0x2744 <removeEntryFromTimerQueue>
    12a4:	04 c0       	rjmp	.+8      	; 0x12ae <toggleSensorSend+0x10c>
	//toggleSensorRead(sensor);
	if(sensorsToSend && !existsInTimerQueue){
		addEntryToTimerQueue(&sendSensor, 1000UL * 1000UL, Periodic);
	}
	else{
		if(!sensorsToSend && existsInTimerQueue)
    12a6:	80 91 b5 04 	lds	r24, 0x04B5
    12aa:	88 23       	and	r24, r24
    12ac:	b9 f3       	breq	.-18     	; 0x129c <toggleSensorSend+0xfa>
		removeEntryFromTimerQueue(&sendSensor);
	}
}
    12ae:	df 91       	pop	r29
    12b0:	cf 91       	pop	r28
    12b2:	08 95       	ret

000012b4 <setSensorsRead>:
			removeEntryFromTimerQueue(&readSensors);
		}
	}
}
void setSensorsRead(uint8_t val){
	if(val){
    12b4:	88 23       	and	r24, r24
    12b6:	69 f0       	breq	.+26     	; 0x12d2 <setSensorsRead+0x1e>
		sensorsToRead = 15;
    12b8:	8f e0       	ldi	r24, 0x0F	; 15
    12ba:	80 93 b4 04 	sts	0x04B4, r24
		addEntryIfNotExists(&readSensors, 50UL * 1000UL, Periodic);
    12be:	21 e0       	ldi	r18, 0x01	; 1
    12c0:	40 e5       	ldi	r20, 0x50	; 80
    12c2:	53 ec       	ldi	r21, 0xC3	; 195
    12c4:	60 e0       	ldi	r22, 0x00	; 0
    12c6:	70 e0       	ldi	r23, 0x00	; 0
    12c8:	8f ef       	ldi	r24, 0xFF	; 255
    12ca:	9a e0       	ldi	r25, 0x0A	; 10
    12cc:	0e 94 2f 12 	call	0x245e	; 0x245e <addEntryIfNotExists>
    12d0:	08 95       	ret
	}
	else{
		removeEntryFromTimerQueue(&readSensors);
    12d2:	8f ef       	ldi	r24, 0xFF	; 255
    12d4:	9a e0       	ldi	r25, 0x0A	; 10
    12d6:	0e 94 a2 13 	call	0x2744	; 0x2744 <removeEntryFromTimerQueue>
    12da:	08 95       	ret

000012dc <setSensorsSend>:
	}
}

uint8_t sendSensors();
void setSensorsSend(uint8_t val){
	if(val){
    12dc:	88 23       	and	r24, r24
    12de:	51 f0       	breq	.+20     	; 0x12f4 <setSensorsSend+0x18>
		addEntryIfNotExists(&sendSensors, 250UL*1000UL, Periodic);
    12e0:	21 e0       	ldi	r18, 0x01	; 1
    12e2:	40 e9       	ldi	r20, 0x90	; 144
    12e4:	50 ed       	ldi	r21, 0xD0	; 208
    12e6:	63 e0       	ldi	r22, 0x03	; 3
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	85 e8       	ldi	r24, 0x85	; 133
    12ec:	99 e0       	ldi	r25, 0x09	; 9
    12ee:	0e 94 2f 12 	call	0x245e	; 0x245e <addEntryIfNotExists>
    12f2:	08 95       	ret
	}
	else{
		removeEntryFromTimerQueue(&sendSensors);
    12f4:	85 e8       	ldi	r24, 0x85	; 133
    12f6:	99 e0       	ldi	r25, 0x09	; 9
    12f8:	0e 94 a2 13 	call	0x2744	; 0x2744 <removeEntryFromTimerQueue>
    12fc:	08 95       	ret

000012fe <usprintf>:
	}
}
void usprintf(uint8_t *p, uint32_t nr){
    12fe:	fc 01       	movw	r30, r24
	union unionUInt32ToArray tmp;
	tmp.nr = nr;
	p[0] = tmp.array[3];
    1300:	70 83       	st	Z, r23
	p[1] = tmp.array[2];
    1302:	61 83       	std	Z+1, r22	; 0x01
	p[2] = tmp.array[1];
    1304:	52 83       	std	Z+2, r21	; 0x02
	p[3] = tmp.array[0];
    1306:	43 83       	std	Z+3, r20	; 0x03
    1308:	08 95       	ret

0000130a <sendSensors>:
}

uint8_t sendSensors(){
    130a:	cf 93       	push	r28
    130c:	df 93       	push	r29
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	64 97       	sbiw	r28, 0x14	; 20
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	cd bf       	out	0x3d, r28	; 61
	uint8_t msg[20];	
	msg[0] = StartByte;
    131e:	8a ea       	ldi	r24, 0xAA	; 170
    1320:	89 83       	std	Y+1, r24	; 0x01
	msg[1] = ISensorsValues;
    1322:	83 e1       	ldi	r24, 0x13	; 19
    1324:	8a 83       	std	Y+2, r24	; 0x02
	msg[2] = 16;
    1326:	80 e1       	ldi	r24, 0x10	; 16
    1328:	8b 83       	std	Y+3, r24	; 0x03
	usprintf(msg+3, lastCMValue[0]);
    132a:	40 91 72 04 	lds	r20, 0x0472
    132e:	50 91 73 04 	lds	r21, 0x0473
    1332:	60 91 74 04 	lds	r22, 0x0474
    1336:	70 91 75 04 	lds	r23, 0x0475
    133a:	ce 01       	movw	r24, r28
    133c:	04 96       	adiw	r24, 0x04	; 4
    133e:	0e 94 7f 09 	call	0x12fe	; 0x12fe <usprintf>
	usprintf(msg+7, lastCMValue[1]);
    1342:	40 91 76 04 	lds	r20, 0x0476
    1346:	50 91 77 04 	lds	r21, 0x0477
    134a:	60 91 78 04 	lds	r22, 0x0478
    134e:	70 91 79 04 	lds	r23, 0x0479
    1352:	ce 01       	movw	r24, r28
    1354:	08 96       	adiw	r24, 0x08	; 8
    1356:	0e 94 7f 09 	call	0x12fe	; 0x12fe <usprintf>
	usprintf(msg+11, lastCMValue[2]);
    135a:	40 91 7a 04 	lds	r20, 0x047A
    135e:	50 91 7b 04 	lds	r21, 0x047B
    1362:	60 91 7c 04 	lds	r22, 0x047C
    1366:	70 91 7d 04 	lds	r23, 0x047D
    136a:	ce 01       	movw	r24, r28
    136c:	0c 96       	adiw	r24, 0x0c	; 12
    136e:	0e 94 7f 09 	call	0x12fe	; 0x12fe <usprintf>
	usprintf(msg+15, lastCMValue[3]);
    1372:	40 91 7e 04 	lds	r20, 0x047E
    1376:	50 91 7f 04 	lds	r21, 0x047F
    137a:	60 91 80 04 	lds	r22, 0x0480
    137e:	70 91 81 04 	lds	r23, 0x0481
    1382:	ce 01       	movw	r24, r28
    1384:	40 96       	adiw	r24, 0x10	; 16
    1386:	0e 94 7f 09 	call	0x12fe	; 0x12fe <usprintf>
	msg[19] = EndByte;
    138a:	85 e5       	ldi	r24, 0x55	; 85
    138c:	8c 8b       	std	Y+20, r24	; 0x14
	
	BTTransmitMsgU(msg, 20);
    138e:	64 e1       	ldi	r22, 0x14	; 20
    1390:	ce 01       	movw	r24, r28
    1392:	01 96       	adiw	r24, 0x01	; 1
    1394:	0e 94 0c 03 	call	0x618	; 0x618 <BTTransmitMsgU>
	return NO;
}
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	64 96       	adiw	r28, 0x14	; 20
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	f8 94       	cli
    13a0:	de bf       	out	0x3e, r29	; 62
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	cd bf       	out	0x3d, r28	; 61
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	08 95       	ret

000013ac <initSensors>:


void initSensors(void){
		
	//init ADC
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
    13ac:	aa e7       	ldi	r26, 0x7A	; 122
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	8c 91       	ld	r24, X
    13b2:	87 60       	ori	r24, 0x07	; 7
    13b4:	8c 93       	st	X, r24

	ADMUX |= (1 << REFS0);
    13b6:	ec e7       	ldi	r30, 0x7C	; 124
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	80 64       	ori	r24, 0x40	; 64
    13be:	80 83       	st	Z, r24
	ADMUX &=~ (1 << REFS1); // Set ADC reference to AVCC
    13c0:	80 81       	ld	r24, Z
    13c2:	8f 77       	andi	r24, 0x7F	; 127
    13c4:	80 83       	st	Z, r24
	
	ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
    13c6:	80 81       	ld	r24, Z
    13c8:	80 62       	ori	r24, 0x20	; 32
    13ca:	80 83       	st	Z, r24
	
	//ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running Mode
	
	ADCSRA |= (1 << ADEN);  // Enable ADC
    13cc:	8c 91       	ld	r24, X
    13ce:	80 68       	ori	r24, 0x80	; 128
    13d0:	8c 93       	st	X, r24
	//ADCSRA |= (1 << ADSC);  // start adc
	sensorsToRead = sensorsToSend = 0;
    13d2:	10 92 b5 04 	sts	0x04B5, r1
    13d6:	10 92 b4 04 	sts	0x04B4, r1
    13da:	08 95       	ret

000013dc <startADCConversionForSensor>:
}

void startADCConversionForSensor(Sensor sensor){

	ADMUX &= ~31; // set lasts 5 bits to 00000
    13dc:	ec e7       	ldi	r30, 0x7C	; 124
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	90 81       	ld	r25, Z
    13e2:	90 7e       	andi	r25, 0xE0	; 224
    13e4:	90 83       	st	Z, r25
	//ADMUX |= 0; // 0-ADC0, 1-ADC1, 2-ADC2 ...    datasheet pg 249-251
	ADMUX |= sensor; // Sensor ia valorile 0,1,2,3, exact ca cele pt ADC-uri
    13e6:	90 81       	ld	r25, Z
    13e8:	89 2b       	or	r24, r25
    13ea:	80 83       	st	Z, r24
	// No MUX values needed to be changed to use ADC0

	
	ADCSRA |= (1 << ADSC);  // Start A2D Conversions
    13ec:	ea e7       	ldi	r30, 0x7A	; 122
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	80 64       	ori	r24, 0x40	; 64
    13f4:	80 83       	st	Z, r24
    13f6:	08 95       	ret

000013f8 <getCurrentValueOfSensor>:
#include "../Timing/Timing.h"


uint32_t getValueOfSensor3(Sensor sensor);
uint16_t getCurrentValueOfSensor(Sensor sensor){	
	startADCConversionForSensor(sensor);	
    13f8:	0e 94 ee 09 	call	0x13dc	; 0x13dc <startADCConversionForSensor>
	while ( ADCSRA & (1 << ADSC));	
    13fc:	ea e7       	ldi	r30, 0x7A	; 122
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	86 fd       	sbrc	r24, 6
    1404:	fd cf       	rjmp	.-6      	; 0x1400 <getCurrentValueOfSensor+0x8>
	uint16_t val;
	val = ADCL >> 6;
    1406:	20 91 78 00 	lds	r18, 0x0078
    140a:	22 95       	swap	r18
    140c:	26 95       	lsr	r18
    140e:	26 95       	lsr	r18
    1410:	23 70       	andi	r18, 0x03	; 3
	val |= ADCH << 2;	
    1412:	80 91 79 00 	lds	r24, 0x0079
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
	return val;
}
    1420:	82 2b       	or	r24, r18
    1422:	08 95       	ret

00001424 <getValueOfSensor3>:
	BTTransmitMsgU(msg, 20);
	return NO;
}


uint32_t getValueOfSensor3(Sensor sensor){
    1424:	8f 92       	push	r8
    1426:	9f 92       	push	r9
    1428:	af 92       	push	r10
    142a:	bf 92       	push	r11
    142c:	cf 92       	push	r12
    142e:	df 92       	push	r13
    1430:	ef 92       	push	r14
    1432:	ff 92       	push	r15
    1434:	0f 93       	push	r16
    1436:	1f 93       	push	r17
    1438:	cf 93       	push	r28
    143a:	df 93       	push	r29
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62
    1440:	2e 97       	sbiw	r28, 0x0e	; 14
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	18 2f       	mov	r17, r24
    144e:	9e 01       	movw	r18, r28
    1450:	2f 5f       	subi	r18, 0xFF	; 255
    1452:	3f 4f       	sbci	r19, 0xFF	; 255
    1454:	79 01       	movw	r14, r18
    1456:	6e 01       	movw	r12, r28
    1458:	3f e0       	ldi	r19, 0x0F	; 15
    145a:	c3 0e       	add	r12, r19
    145c:	d1 1c       	adc	r13, r1
	uint8_t i;
	uint16_t s, sVals[7];
	
	//citesc 7 valori ale senzorului
	for(i=0;i<7;i++)
		sVals[i] = getCurrentValueOfSensor(sensor);
    145e:	81 2f       	mov	r24, r17
    1460:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <getCurrentValueOfSensor>
    1464:	f7 01       	movw	r30, r14
    1466:	81 93       	st	Z+, r24
    1468:	91 93       	st	Z+, r25
    146a:	7f 01       	movw	r14, r30
uint32_t getValueOfSensor3(Sensor sensor){
	uint8_t i;
	uint16_t s, sVals[7];
	
	//citesc 7 valori ale senzorului
	for(i=0;i<7;i++)
    146c:	ec 15       	cp	r30, r12
    146e:	fd 05       	cpc	r31, r13
    1470:	b1 f7       	brne	.-20     	; 0x145e <getValueOfSensor3+0x3a>
    1472:	21 e0       	ldi	r18, 0x01	; 1
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	80 e0       	ldi	r24, 0x00	; 0
		sVals[i] = getCurrentValueOfSensor(sensor);
		
	do{ // le sortez (bubble sort)
		s=1;
    1478:	01 e0       	ldi	r16, 0x01	; 1
    147a:	f1 2c       	mov	r15, r1
		for(i=0;i<6;i++)
    147c:	90 e0       	ldi	r25, 0x00	; 0
			if(sVals[i]>sVals[i+1]){
				s = sVals[i];
				sVals[i] = sVals[i+1];
				sVals[i+1] = s;
				s=0;
    147e:	d1 2c       	mov	r13, r1
    1480:	e1 2c       	mov	r14, r1
    1482:	32 c0       	rjmp	.+100    	; 0x14e8 <getValueOfSensor3+0xc4>
		sVals[i] = getCurrentValueOfSensor(sensor);
		
	do{ // le sortez (bubble sort)
		s=1;
		for(i=0;i<6;i++)
			if(sVals[i]>sVals[i+1]){
    1484:	48 2f       	mov	r20, r24
    1486:	50 e0       	ldi	r21, 0x00	; 0
    1488:	fa 01       	movw	r30, r20
    148a:	ee 0f       	add	r30, r30
    148c:	ff 1f       	adc	r31, r31
    148e:	aa 24       	eor	r10, r10
    1490:	a3 94       	inc	r10
    1492:	b1 2c       	mov	r11, r1
    1494:	ac 0e       	add	r10, r28
    1496:	bd 1e       	adc	r11, r29
    1498:	ea 0d       	add	r30, r10
    149a:	fb 1d       	adc	r31, r11
    149c:	60 81       	ld	r22, Z
    149e:	71 81       	ldd	r23, Z+1	; 0x01
    14a0:	4a 01       	movw	r8, r20
    14a2:	ef ef       	ldi	r30, 0xFF	; 255
    14a4:	8e 1a       	sub	r8, r30
    14a6:	9e 0a       	sbc	r9, r30
    14a8:	d4 01       	movw	r26, r8
    14aa:	aa 0f       	add	r26, r26
    14ac:	bb 1f       	adc	r27, r27
    14ae:	aa 0d       	add	r26, r10
    14b0:	bb 1d       	adc	r27, r11
    14b2:	0d 90       	ld	r0, X+
    14b4:	bc 91       	ld	r27, X
    14b6:	a0 2d       	mov	r26, r0
    14b8:	a6 17       	cp	r26, r22
    14ba:	b7 07       	cpc	r27, r23
    14bc:	80 f4       	brcc	.+32     	; 0x14de <getValueOfSensor3+0xba>
				s = sVals[i];
				sVals[i] = sVals[i+1];
    14be:	44 0f       	add	r20, r20
    14c0:	55 1f       	adc	r21, r21
    14c2:	4a 0d       	add	r20, r10
    14c4:	5b 1d       	adc	r21, r11
    14c6:	fa 01       	movw	r30, r20
    14c8:	b1 83       	std	Z+1, r27	; 0x01
    14ca:	a0 83       	st	Z, r26
				sVals[i+1] = s;
    14cc:	f4 01       	movw	r30, r8
    14ce:	ee 0f       	add	r30, r30
    14d0:	ff 1f       	adc	r31, r31
    14d2:	ea 0d       	add	r30, r10
    14d4:	fb 1d       	adc	r31, r11
    14d6:	71 83       	std	Z+1, r23	; 0x01
    14d8:	60 83       	st	Z, r22
				s=0;
    14da:	2d 2d       	mov	r18, r13
    14dc:	3e 2d       	mov	r19, r14
	for(i=0;i<7;i++)
		sVals[i] = getCurrentValueOfSensor(sensor);
		
	do{ // le sortez (bubble sort)
		s=1;
		for(i=0;i<6;i++)
    14de:	8f 5f       	subi	r24, 0xFF	; 255
    14e0:	03 c0       	rjmp	.+6      	; 0x14e8 <getValueOfSensor3+0xc4>
	//citesc 7 valori ale senzorului
	for(i=0;i<7;i++)
		sVals[i] = getCurrentValueOfSensor(sensor);
		
	do{ // le sortez (bubble sort)
		s=1;
    14e2:	20 2f       	mov	r18, r16
    14e4:	3f 2d       	mov	r19, r15
		for(i=0;i<6;i++)
    14e6:	89 2f       	mov	r24, r25
    14e8:	86 30       	cpi	r24, 0x06	; 6
    14ea:	60 f2       	brcs	.-104    	; 0x1484 <getValueOfSensor3+0x60>
				s = sVals[i];
				sVals[i] = sVals[i+1];
				sVals[i+1] = s;
				s=0;
			}
	}while(!s);
    14ec:	23 2b       	or	r18, r19
    14ee:	c9 f3       	breq	.-14     	; 0x14e2 <getValueOfSensor3+0xbe>
	
	s = sVals[2] + sVals[3] + sVals[4];
    14f0:	2f 81       	ldd	r18, Y+7	; 0x07
    14f2:	38 85       	ldd	r19, Y+8	; 0x08
    14f4:	8d 81       	ldd	r24, Y+5	; 0x05
    14f6:	9e 81       	ldd	r25, Y+6	; 0x06
    14f8:	28 0f       	add	r18, r24
    14fa:	39 1f       	adc	r19, r25
    14fc:	89 85       	ldd	r24, Y+9	; 0x09
    14fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1500:	28 0f       	add	r18, r24
    1502:	39 1f       	adc	r19, r25
	s/=3;//calculez media celor 3 din mijloc (eliminandu-le astfel pe cele mai mari si pe cele mai mici)
    1504:	ab ea       	ldi	r26, 0xAB	; 171
    1506:	ba ea       	ldi	r27, 0xAA	; 170
    1508:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <__umulhisi3>
    150c:	96 95       	lsr	r25
    150e:	87 95       	ror	r24
	
	//valoarea noua este media ponderata a vechii valori (70%) si valorii curente(30%)
	if(!oldValue[sensor])
    1510:	41 2f       	mov	r20, r17
    1512:	50 e0       	ldi	r21, 0x00	; 0
    1514:	fa 01       	movw	r30, r20
    1516:	ee 0f       	add	r30, r30
    1518:	ff 1f       	adc	r31, r31
    151a:	e6 59       	subi	r30, 0x96	; 150
    151c:	fb 4f       	sbci	r31, 0xFB	; 251
    151e:	60 81       	ld	r22, Z
    1520:	71 81       	ldd	r23, Z+1	; 0x01
    1522:	67 2b       	or	r22, r23
    1524:	41 f4       	brne	.+16     	; 0x1536 <getValueOfSensor3+0x112>
		oldValue[sensor] = s;
    1526:	fa 01       	movw	r30, r20
    1528:	ee 0f       	add	r30, r30
    152a:	ff 1f       	adc	r31, r31
    152c:	e6 59       	subi	r30, 0x96	; 150
    152e:	fb 4f       	sbci	r31, 0xFB	; 251
    1530:	91 83       	std	Z+1, r25	; 0x01
    1532:	80 83       	st	Z, r24
    1534:	1c c0       	rjmp	.+56     	; 0x156e <getValueOfSensor3+0x14a>
	else
		oldValue[sensor] = (5*oldValue[sensor] + 5*s) / 10;
    1536:	fa 01       	movw	r30, r20
    1538:	ee 0f       	add	r30, r30
    153a:	ff 1f       	adc	r31, r31
    153c:	e6 59       	subi	r30, 0x96	; 150
    153e:	fb 4f       	sbci	r31, 0xFB	; 251
    1540:	20 81       	ld	r18, Z
    1542:	31 81       	ldd	r19, Z+1	; 0x01
    1544:	82 0f       	add	r24, r18
    1546:	93 1f       	adc	r25, r19
    1548:	9c 01       	movw	r18, r24
    154a:	22 0f       	add	r18, r18
    154c:	33 1f       	adc	r19, r19
    154e:	22 0f       	add	r18, r18
    1550:	33 1f       	adc	r19, r19
    1552:	28 0f       	add	r18, r24
    1554:	39 1f       	adc	r19, r25
    1556:	ad ec       	ldi	r26, 0xCD	; 205
    1558:	bc ec       	ldi	r27, 0xCC	; 204
    155a:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <__umulhisi3>
    155e:	96 95       	lsr	r25
    1560:	87 95       	ror	r24
    1562:	96 95       	lsr	r25
    1564:	87 95       	ror	r24
    1566:	96 95       	lsr	r25
    1568:	87 95       	ror	r24
    156a:	91 83       	std	Z+1, r25	; 0x01
    156c:	80 83       	st	Z, r24

	
	if(sensor<2)
    156e:	12 30       	cpi	r17, 0x02	; 2
    1570:	d0 f4       	brcc	.+52     	; 0x15a6 <getValueOfSensor3+0x182>
		return (322641UL/((oldValue[sensor]<<4)-315));// senzori laterali
    1572:	fa 01       	movw	r30, r20
    1574:	ee 0f       	add	r30, r30
    1576:	ff 1f       	adc	r31, r31
    1578:	e6 59       	subi	r30, 0x96	; 150
    157a:	fb 4f       	sbci	r31, 0xFB	; 251
    157c:	20 81       	ld	r18, Z
    157e:	31 81       	ldd	r19, Z+1	; 0x01
    1580:	22 95       	swap	r18
    1582:	32 95       	swap	r19
    1584:	30 7f       	andi	r19, 0xF0	; 240
    1586:	32 27       	eor	r19, r18
    1588:	20 7f       	andi	r18, 0xF0	; 240
    158a:	32 27       	eor	r19, r18
    158c:	2b 53       	subi	r18, 0x3B	; 59
    158e:	31 40       	sbci	r19, 0x01	; 1
    1590:	40 e0       	ldi	r20, 0x00	; 0
    1592:	50 e0       	ldi	r21, 0x00	; 0
    1594:	61 e5       	ldi	r22, 0x51	; 81
    1596:	7c ee       	ldi	r23, 0xEC	; 236
    1598:	84 e0       	ldi	r24, 0x04	; 4
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	0e 94 35 1c 	call	0x386a	; 0x386a <__udivmodsi4>
    15a0:	ca 01       	movw	r24, r20
    15a2:	b9 01       	movw	r22, r18
    15a4:	19 c0       	rjmp	.+50     	; 0x15d8 <getValueOfSensor3+0x1b4>
	else
		return (769533UL/((oldValue[sensor]<<4)-520));	// senzori frontali
    15a6:	fa 01       	movw	r30, r20
    15a8:	ee 0f       	add	r30, r30
    15aa:	ff 1f       	adc	r31, r31
    15ac:	e6 59       	subi	r30, 0x96	; 150
    15ae:	fb 4f       	sbci	r31, 0xFB	; 251
    15b0:	20 81       	ld	r18, Z
    15b2:	31 81       	ldd	r19, Z+1	; 0x01
    15b4:	22 95       	swap	r18
    15b6:	32 95       	swap	r19
    15b8:	30 7f       	andi	r19, 0xF0	; 240
    15ba:	32 27       	eor	r19, r18
    15bc:	20 7f       	andi	r18, 0xF0	; 240
    15be:	32 27       	eor	r19, r18
    15c0:	28 50       	subi	r18, 0x08	; 8
    15c2:	32 40       	sbci	r19, 0x02	; 2
    15c4:	40 e0       	ldi	r20, 0x00	; 0
    15c6:	50 e0       	ldi	r21, 0x00	; 0
    15c8:	6d ef       	ldi	r22, 0xFD	; 253
    15ca:	7d eb       	ldi	r23, 0xBD	; 189
    15cc:	8b e0       	ldi	r24, 0x0B	; 11
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	0e 94 35 1c 	call	0x386a	; 0x386a <__udivmodsi4>
    15d4:	ca 01       	movw	r24, r20
    15d6:	b9 01       	movw	r22, r18
}
    15d8:	2e 96       	adiw	r28, 0x0e	; 14
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	cd bf       	out	0x3d, r28	; 61
    15e4:	df 91       	pop	r29
    15e6:	cf 91       	pop	r28
    15e8:	1f 91       	pop	r17
    15ea:	0f 91       	pop	r16
    15ec:	ff 90       	pop	r15
    15ee:	ef 90       	pop	r14
    15f0:	df 90       	pop	r13
    15f2:	cf 90       	pop	r12
    15f4:	bf 90       	pop	r11
    15f6:	af 90       	pop	r10
    15f8:	9f 90       	pop	r9
    15fa:	8f 90       	pop	r8
    15fc:	08 95       	ret

000015fe <readSensors>:
		removeEntryFromTimerQueue(&sendSensor);
	}
}

uint8_t readSensors(){
	if(sensorsToRead & 1)
    15fe:	80 91 b4 04 	lds	r24, 0x04B4
    1602:	80 ff       	sbrs	r24, 0
    1604:	0b c0       	rjmp	.+22     	; 0x161c <readSensors+0x1e>
		lastCMValue[0] = getValueOfSensor3(0);
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	0e 94 12 0a 	call	0x1424	; 0x1424 <getValueOfSensor3>
    160c:	60 93 72 04 	sts	0x0472, r22
    1610:	70 93 73 04 	sts	0x0473, r23
    1614:	80 93 74 04 	sts	0x0474, r24
    1618:	90 93 75 04 	sts	0x0475, r25
	if(sensorsToRead & 2)
    161c:	80 91 b4 04 	lds	r24, 0x04B4
    1620:	81 ff       	sbrs	r24, 1
    1622:	0b c0       	rjmp	.+22     	; 0x163a <readSensors+0x3c>
		lastCMValue[1] = getValueOfSensor3(1);
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	0e 94 12 0a 	call	0x1424	; 0x1424 <getValueOfSensor3>
    162a:	60 93 76 04 	sts	0x0476, r22
    162e:	70 93 77 04 	sts	0x0477, r23
    1632:	80 93 78 04 	sts	0x0478, r24
    1636:	90 93 79 04 	sts	0x0479, r25
	if(sensorsToRead & 4)
    163a:	80 91 b4 04 	lds	r24, 0x04B4
    163e:	82 ff       	sbrs	r24, 2
    1640:	0b c0       	rjmp	.+22     	; 0x1658 <readSensors+0x5a>
		lastCMValue[2] = getValueOfSensor3(2);
    1642:	82 e0       	ldi	r24, 0x02	; 2
    1644:	0e 94 12 0a 	call	0x1424	; 0x1424 <getValueOfSensor3>
    1648:	60 93 7a 04 	sts	0x047A, r22
    164c:	70 93 7b 04 	sts	0x047B, r23
    1650:	80 93 7c 04 	sts	0x047C, r24
    1654:	90 93 7d 04 	sts	0x047D, r25
	if(sensorsToRead & 8)
    1658:	80 91 b4 04 	lds	r24, 0x04B4
    165c:	83 ff       	sbrs	r24, 3
    165e:	0b c0       	rjmp	.+22     	; 0x1676 <readSensors+0x78>
		lastCMValue[3] = getValueOfSensor3(3);
    1660:	83 e0       	ldi	r24, 0x03	; 3
    1662:	0e 94 12 0a 	call	0x1424	; 0x1424 <getValueOfSensor3>
    1666:	60 93 7e 04 	sts	0x047E, r22
    166a:	70 93 7f 04 	sts	0x047F, r23
    166e:	80 93 80 04 	sts	0x0480, r24
    1672:	90 93 81 04 	sts	0x0481, r25
	return NO;
}
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	08 95       	ret

0000167a <locLiberSMF>:
{
	stareLocLiber=0;
	distP=0;
	addEntryIfNotExists(&locLiberSMF, 150 * 1000UL, Periodic);
}
uint8_t locLiberSMF(){
    167a:	cf 92       	push	r12
    167c:	df 92       	push	r13
    167e:	ef 92       	push	r14
    1680:	ff 92       	push	r15
    1682:	0f 93       	push	r16
    1684:	1f 93       	push	r17
    1686:	cf 93       	push	r28
    1688:	df 93       	push	r29
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
    168e:	e2 97       	sbiw	r28, 0x32	; 50
    1690:	0f b6       	in	r0, 0x3f	; 63
    1692:	f8 94       	cli
    1694:	de bf       	out	0x3e, r29	; 62
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	cd bf       	out	0x3d, r28	; 61
	uint32_t sideRight = getValueOfSensor(SideRightSensor);
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	0e 94 c5 08 	call	0x118a	; 0x118a <getValueOfSensor>
    16a0:	a0 e0       	ldi	r26, 0x00	; 0
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
	char msg[50];
	switch(stareLocLiber){
    16a4:	20 91 c0 04 	lds	r18, 0x04C0
    16a8:	21 30       	cpi	r18, 0x01	; 1
    16aa:	79 f0       	breq	.+30     	; 0x16ca <locLiberSMF+0x50>
    16ac:	38 f0       	brcs	.+14     	; 0x16bc <locLiberSMF+0x42>
    16ae:	22 30       	cpi	r18, 0x02	; 2
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <locLiberSMF+0x3a>
    16b2:	7c c0       	rjmp	.+248    	; 0x17ac <locLiberSMF+0x132>
    16b4:	23 30       	cpi	r18, 0x03	; 3
    16b6:	09 f4       	brne	.+2      	; 0x16ba <locLiberSMF+0x40>
    16b8:	30 c1       	rjmp	.+608    	; 0x191a <locLiberSMF+0x2a0>
    16ba:	9e c1       	rjmp	.+828    	; 0x19f8 <locLiberSMF+0x37e>
		case 0:
			stareLocLiber = 1;
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	80 93 c0 04 	sts	0x04C0, r24
			liber = 1;
    16c2:	80 93 c2 04 	sts	0x04C2, r24
				return liber | 2;				
			}
			
		break;
	}
	return NO;
    16c6:	80 e0       	ldi	r24, 0x00	; 0
	char msg[50];
	switch(stareLocLiber){
		case 0:
			stareLocLiber = 1;
			liber = 1;
		break;
    16c8:	9c c1       	rjmp	.+824    	; 0x1a02 <locLiberSMF+0x388>
		case 1:
			distLocLiber = DISTANTA_PARCURSA + 40;
    16ca:	40 91 60 04 	lds	r20, 0x0460
    16ce:	50 91 61 04 	lds	r21, 0x0461
    16d2:	60 91 62 04 	lds	r22, 0x0462
    16d6:	70 91 63 04 	lds	r23, 0x0463
    16da:	00 91 66 04 	lds	r16, 0x0466
    16de:	10 91 67 04 	lds	r17, 0x0467
    16e2:	20 91 68 04 	lds	r18, 0x0468
    16e6:	30 91 69 04 	lds	r19, 0x0469
    16ea:	40 0f       	add	r20, r16
    16ec:	51 1f       	adc	r21, r17
    16ee:	62 1f       	adc	r22, r18
    16f0:	73 1f       	adc	r23, r19
    16f2:	76 95       	lsr	r23
    16f4:	67 95       	ror	r22
    16f6:	57 95       	ror	r21
    16f8:	47 95       	ror	r20
    16fa:	76 95       	lsr	r23
    16fc:	67 95       	ror	r22
    16fe:	57 95       	ror	r21
    1700:	47 95       	ror	r20
    1702:	8a 01       	movw	r16, r20
    1704:	9b 01       	movw	r18, r22
    1706:	00 0f       	add	r16, r16
    1708:	11 1f       	adc	r17, r17
    170a:	22 1f       	adc	r18, r18
    170c:	33 1f       	adc	r19, r19
    170e:	00 0f       	add	r16, r16
    1710:	11 1f       	adc	r17, r17
    1712:	22 1f       	adc	r18, r18
    1714:	33 1f       	adc	r19, r19
    1716:	68 01       	movw	r12, r16
    1718:	79 01       	movw	r14, r18
    171a:	cc 0c       	add	r12, r12
    171c:	dd 1c       	adc	r13, r13
    171e:	ee 1c       	adc	r14, r14
    1720:	ff 1c       	adc	r15, r15
    1722:	cc 0c       	add	r12, r12
    1724:	dd 1c       	adc	r13, r13
    1726:	ee 1c       	adc	r14, r14
    1728:	ff 1c       	adc	r15, r15
    172a:	0c 0d       	add	r16, r12
    172c:	1d 1d       	adc	r17, r13
    172e:	2e 1d       	adc	r18, r14
    1730:	3f 1d       	adc	r19, r15
    1732:	40 0f       	add	r20, r16
    1734:	51 1f       	adc	r21, r17
    1736:	62 1f       	adc	r22, r18
    1738:	73 1f       	adc	r23, r19
    173a:	48 5d       	subi	r20, 0xD8	; 216
    173c:	5f 4f       	sbci	r21, 0xFF	; 255
    173e:	6f 4f       	sbci	r22, 0xFF	; 255
    1740:	7f 4f       	sbci	r23, 0xFF	; 255
    1742:	40 93 cd 04 	sts	0x04CD, r20
    1746:	50 93 ce 04 	sts	0x04CE, r21
    174a:	60 93 cf 04 	sts	0x04CF, r22
    174e:	70 93 d0 04 	sts	0x04D0, r23
			liber *= (sideRight > 300);
    1752:	21 e0       	ldi	r18, 0x01	; 1
    1754:	8d 32       	cpi	r24, 0x2D	; 45
    1756:	91 40       	sbci	r25, 0x01	; 1
    1758:	a1 05       	cpc	r26, r1
    175a:	b1 05       	cpc	r27, r1
    175c:	08 f4       	brcc	.+2      	; 0x1760 <locLiberSMF+0xe6>
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	80 91 c2 04 	lds	r24, 0x04C2
    1764:	28 9f       	mul	r18, r24
    1766:	80 2d       	mov	r24, r0
    1768:	11 24       	eor	r1, r1
    176a:	80 93 c2 04 	sts	0x04C2, r24
			sprintf(msg, "l1=%d", liber);
    176e:	1f 92       	push	r1
    1770:	8f 93       	push	r24
    1772:	8e e6       	ldi	r24, 0x6E	; 110
    1774:	92 e0       	ldi	r25, 0x02	; 2
    1776:	9f 93       	push	r25
    1778:	8f 93       	push	r24
    177a:	8e 01       	movw	r16, r28
    177c:	0f 5f       	subi	r16, 0xFF	; 255
    177e:	1f 4f       	sbci	r17, 0xFF	; 255
    1780:	1f 93       	push	r17
    1782:	0f 93       	push	r16
    1784:	0e 94 77 1c 	call	0x38ee	; 0x38ee <sprintf>
			BTTransmitStr(msg);
    1788:	c8 01       	movw	r24, r16
    178a:	0e 94 a9 01 	call	0x352	; 0x352 <BTTransmitStr>
			stareLocLiber=2;
    178e:	82 e0       	ldi	r24, 0x02	; 2
    1790:	80 93 c0 04 	sts	0x04C0, r24
			goBack(60,50);			
    1794:	62 e3       	ldi	r22, 0x32	; 50
    1796:	8c e3       	ldi	r24, 0x3C	; 60
    1798:	0e 94 ef 05 	call	0xbde	; 0xbde <goBack>
		break;
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
				return liber | 2;				
			}
			
		break;
	}
	return NO;
    17a8:	80 e0       	ldi	r24, 0x00	; 0
			liber *= (sideRight > 300);
			sprintf(msg, "l1=%d", liber);
			BTTransmitStr(msg);
			stareLocLiber=2;
			goBack(60,50);			
		break;
    17aa:	2b c1       	rjmp	.+598    	; 0x1a02 <locLiberSMF+0x388>
		case 2:
			if(DISTANTA_PARCURSA > distLocLiber){
    17ac:	40 91 60 04 	lds	r20, 0x0460
    17b0:	50 91 61 04 	lds	r21, 0x0461
    17b4:	60 91 62 04 	lds	r22, 0x0462
    17b8:	70 91 63 04 	lds	r23, 0x0463
    17bc:	00 91 66 04 	lds	r16, 0x0466
    17c0:	10 91 67 04 	lds	r17, 0x0467
    17c4:	20 91 68 04 	lds	r18, 0x0468
    17c8:	30 91 69 04 	lds	r19, 0x0469
    17cc:	40 0f       	add	r20, r16
    17ce:	51 1f       	adc	r21, r17
    17d0:	62 1f       	adc	r22, r18
    17d2:	73 1f       	adc	r23, r19
    17d4:	76 95       	lsr	r23
    17d6:	67 95       	ror	r22
    17d8:	57 95       	ror	r21
    17da:	47 95       	ror	r20
    17dc:	76 95       	lsr	r23
    17de:	67 95       	ror	r22
    17e0:	57 95       	ror	r21
    17e2:	47 95       	ror	r20
    17e4:	8a 01       	movw	r16, r20
    17e6:	9b 01       	movw	r18, r22
    17e8:	00 0f       	add	r16, r16
    17ea:	11 1f       	adc	r17, r17
    17ec:	22 1f       	adc	r18, r18
    17ee:	33 1f       	adc	r19, r19
    17f0:	00 0f       	add	r16, r16
    17f2:	11 1f       	adc	r17, r17
    17f4:	22 1f       	adc	r18, r18
    17f6:	33 1f       	adc	r19, r19
    17f8:	68 01       	movw	r12, r16
    17fa:	79 01       	movw	r14, r18
    17fc:	cc 0c       	add	r12, r12
    17fe:	dd 1c       	adc	r13, r13
    1800:	ee 1c       	adc	r14, r14
    1802:	ff 1c       	adc	r15, r15
    1804:	cc 0c       	add	r12, r12
    1806:	dd 1c       	adc	r13, r13
    1808:	ee 1c       	adc	r14, r14
    180a:	ff 1c       	adc	r15, r15
    180c:	0c 0d       	add	r16, r12
    180e:	1d 1d       	adc	r17, r13
    1810:	2e 1d       	adc	r18, r14
    1812:	3f 1d       	adc	r19, r15
    1814:	40 0f       	add	r20, r16
    1816:	51 1f       	adc	r21, r17
    1818:	62 1f       	adc	r22, r18
    181a:	73 1f       	adc	r23, r19
    181c:	c0 90 cd 04 	lds	r12, 0x04CD
    1820:	d0 90 ce 04 	lds	r13, 0x04CE
    1824:	e0 90 cf 04 	lds	r14, 0x04CF
    1828:	f0 90 d0 04 	lds	r15, 0x04D0
    182c:	c4 16       	cp	r12, r20
    182e:	d5 06       	cpc	r13, r21
    1830:	e6 06       	cpc	r14, r22
    1832:	f7 06       	cpc	r15, r23
    1834:	08 f0       	brcs	.+2      	; 0x1838 <locLiberSMF+0x1be>
    1836:	e2 c0       	rjmp	.+452    	; 0x19fc <locLiberSMF+0x382>
				liber *= (sideRight > 300);
    1838:	21 e0       	ldi	r18, 0x01	; 1
    183a:	8d 32       	cpi	r24, 0x2D	; 45
    183c:	91 40       	sbci	r25, 0x01	; 1
    183e:	a1 05       	cpc	r26, r1
    1840:	b1 05       	cpc	r27, r1
    1842:	08 f4       	brcc	.+2      	; 0x1846 <locLiberSMF+0x1cc>
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	80 91 c2 04 	lds	r24, 0x04C2
    184a:	28 9f       	mul	r18, r24
    184c:	80 2d       	mov	r24, r0
    184e:	11 24       	eor	r1, r1
    1850:	80 93 c2 04 	sts	0x04C2, r24
				sprintf(msg, "l1=%d", liber);
    1854:	1f 92       	push	r1
    1856:	8f 93       	push	r24
    1858:	8e e6       	ldi	r24, 0x6E	; 110
    185a:	92 e0       	ldi	r25, 0x02	; 2
    185c:	9f 93       	push	r25
    185e:	8f 93       	push	r24
    1860:	8e 01       	movw	r16, r28
    1862:	0f 5f       	subi	r16, 0xFF	; 255
    1864:	1f 4f       	sbci	r17, 0xFF	; 255
    1866:	1f 93       	push	r17
    1868:	0f 93       	push	r16
    186a:	0e 94 77 1c 	call	0x38ee	; 0x38ee <sprintf>
				BTTransmitStr(msg);
    186e:	c8 01       	movw	r24, r16
    1870:	0e 94 a9 01 	call	0x352	; 0x352 <BTTransmitStr>
				distLocLiber = DISTANTA_PARCURSA + 80;
    1874:	80 91 60 04 	lds	r24, 0x0460
    1878:	90 91 61 04 	lds	r25, 0x0461
    187c:	a0 91 62 04 	lds	r26, 0x0462
    1880:	b0 91 63 04 	lds	r27, 0x0463
    1884:	40 91 66 04 	lds	r20, 0x0466
    1888:	50 91 67 04 	lds	r21, 0x0467
    188c:	60 91 68 04 	lds	r22, 0x0468
    1890:	70 91 69 04 	lds	r23, 0x0469
    1894:	84 0f       	add	r24, r20
    1896:	95 1f       	adc	r25, r21
    1898:	a6 1f       	adc	r26, r22
    189a:	b7 1f       	adc	r27, r23
    189c:	b6 95       	lsr	r27
    189e:	a7 95       	ror	r26
    18a0:	97 95       	ror	r25
    18a2:	87 95       	ror	r24
    18a4:	b6 95       	lsr	r27
    18a6:	a7 95       	ror	r26
    18a8:	97 95       	ror	r25
    18aa:	87 95       	ror	r24
    18ac:	ac 01       	movw	r20, r24
    18ae:	bd 01       	movw	r22, r26
    18b0:	44 0f       	add	r20, r20
    18b2:	55 1f       	adc	r21, r21
    18b4:	66 1f       	adc	r22, r22
    18b6:	77 1f       	adc	r23, r23
    18b8:	44 0f       	add	r20, r20
    18ba:	55 1f       	adc	r21, r21
    18bc:	66 1f       	adc	r22, r22
    18be:	77 1f       	adc	r23, r23
    18c0:	8a 01       	movw	r16, r20
    18c2:	9b 01       	movw	r18, r22
    18c4:	00 0f       	add	r16, r16
    18c6:	11 1f       	adc	r17, r17
    18c8:	22 1f       	adc	r18, r18
    18ca:	33 1f       	adc	r19, r19
    18cc:	00 0f       	add	r16, r16
    18ce:	11 1f       	adc	r17, r17
    18d0:	22 1f       	adc	r18, r18
    18d2:	33 1f       	adc	r19, r19
    18d4:	40 0f       	add	r20, r16
    18d6:	51 1f       	adc	r21, r17
    18d8:	62 1f       	adc	r22, r18
    18da:	73 1f       	adc	r23, r19
    18dc:	84 0f       	add	r24, r20
    18de:	95 1f       	adc	r25, r21
    18e0:	a6 1f       	adc	r26, r22
    18e2:	b7 1f       	adc	r27, r23
    18e4:	80 5b       	subi	r24, 0xB0	; 176
    18e6:	9f 4f       	sbci	r25, 0xFF	; 255
    18e8:	af 4f       	sbci	r26, 0xFF	; 255
    18ea:	bf 4f       	sbci	r27, 0xFF	; 255
    18ec:	80 93 cd 04 	sts	0x04CD, r24
    18f0:	90 93 ce 04 	sts	0x04CE, r25
    18f4:	a0 93 cf 04 	sts	0x04CF, r26
    18f8:	b0 93 d0 04 	sts	0x04D0, r27
				stareLocLiber = 3;
    18fc:	83 e0       	ldi	r24, 0x03	; 3
    18fe:	80 93 c0 04 	sts	0x04C0, r24
				goFront(60, 50);
    1902:	62 e3       	ldi	r22, 0x32	; 50
    1904:	8c e3       	ldi	r24, 0x3C	; 60
    1906:	0e 94 bf 05 	call	0xb7e	; 0xb7e <goFront>
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
				return liber | 2;				
			}
			
		break;
	}
	return NO;
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	74 c0       	rjmp	.+232    	; 0x1a02 <locLiberSMF+0x388>
				stareLocLiber = 3;
				goFront(60, 50);
			}
		break;
		case 3:	
			if(DISTANTA_PARCURSA > distLocLiber){
    191a:	40 91 60 04 	lds	r20, 0x0460
    191e:	50 91 61 04 	lds	r21, 0x0461
    1922:	60 91 62 04 	lds	r22, 0x0462
    1926:	70 91 63 04 	lds	r23, 0x0463
    192a:	00 91 66 04 	lds	r16, 0x0466
    192e:	10 91 67 04 	lds	r17, 0x0467
    1932:	20 91 68 04 	lds	r18, 0x0468
    1936:	30 91 69 04 	lds	r19, 0x0469
    193a:	40 0f       	add	r20, r16
    193c:	51 1f       	adc	r21, r17
    193e:	62 1f       	adc	r22, r18
    1940:	73 1f       	adc	r23, r19
    1942:	76 95       	lsr	r23
    1944:	67 95       	ror	r22
    1946:	57 95       	ror	r21
    1948:	47 95       	ror	r20
    194a:	76 95       	lsr	r23
    194c:	67 95       	ror	r22
    194e:	57 95       	ror	r21
    1950:	47 95       	ror	r20
    1952:	8a 01       	movw	r16, r20
    1954:	9b 01       	movw	r18, r22
    1956:	00 0f       	add	r16, r16
    1958:	11 1f       	adc	r17, r17
    195a:	22 1f       	adc	r18, r18
    195c:	33 1f       	adc	r19, r19
    195e:	00 0f       	add	r16, r16
    1960:	11 1f       	adc	r17, r17
    1962:	22 1f       	adc	r18, r18
    1964:	33 1f       	adc	r19, r19
    1966:	68 01       	movw	r12, r16
    1968:	79 01       	movw	r14, r18
    196a:	cc 0c       	add	r12, r12
    196c:	dd 1c       	adc	r13, r13
    196e:	ee 1c       	adc	r14, r14
    1970:	ff 1c       	adc	r15, r15
    1972:	cc 0c       	add	r12, r12
    1974:	dd 1c       	adc	r13, r13
    1976:	ee 1c       	adc	r14, r14
    1978:	ff 1c       	adc	r15, r15
    197a:	0c 0d       	add	r16, r12
    197c:	1d 1d       	adc	r17, r13
    197e:	2e 1d       	adc	r18, r14
    1980:	3f 1d       	adc	r19, r15
    1982:	40 0f       	add	r20, r16
    1984:	51 1f       	adc	r21, r17
    1986:	62 1f       	adc	r22, r18
    1988:	73 1f       	adc	r23, r19
    198a:	c0 90 cd 04 	lds	r12, 0x04CD
    198e:	d0 90 ce 04 	lds	r13, 0x04CE
    1992:	e0 90 cf 04 	lds	r14, 0x04CF
    1996:	f0 90 d0 04 	lds	r15, 0x04D0
    199a:	c4 16       	cp	r12, r20
    199c:	d5 06       	cpc	r13, r21
    199e:	e6 06       	cpc	r14, r22
    19a0:	f7 06       	cpc	r15, r23
    19a2:	70 f5       	brcc	.+92     	; 0x1a00 <locLiberSMF+0x386>
				liber *= (sideRight > 300);
    19a4:	21 e0       	ldi	r18, 0x01	; 1
    19a6:	8d 32       	cpi	r24, 0x2D	; 45
    19a8:	91 40       	sbci	r25, 0x01	; 1
    19aa:	a1 05       	cpc	r26, r1
    19ac:	b1 05       	cpc	r27, r1
    19ae:	08 f4       	brcc	.+2      	; 0x19b2 <locLiberSMF+0x338>
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	80 91 c2 04 	lds	r24, 0x04C2
    19b6:	28 9f       	mul	r18, r24
    19b8:	80 2d       	mov	r24, r0
    19ba:	11 24       	eor	r1, r1
    19bc:	80 93 c2 04 	sts	0x04C2, r24
				sprintf(msg, "l1=%d", liber);
    19c0:	1f 92       	push	r1
    19c2:	8f 93       	push	r24
    19c4:	8e e6       	ldi	r24, 0x6E	; 110
    19c6:	92 e0       	ldi	r25, 0x02	; 2
    19c8:	9f 93       	push	r25
    19ca:	8f 93       	push	r24
    19cc:	8e 01       	movw	r16, r28
    19ce:	0f 5f       	subi	r16, 0xFF	; 255
    19d0:	1f 4f       	sbci	r17, 0xFF	; 255
    19d2:	1f 93       	push	r17
    19d4:	0f 93       	push	r16
    19d6:	0e 94 77 1c 	call	0x38ee	; 0x38ee <sprintf>
				BTTransmitStr(msg);
    19da:	c8 01       	movw	r24, r16
    19dc:	0e 94 a9 01 	call	0x352	; 0x352 <BTTransmitStr>
				stopEngines();
    19e0:	0e 94 48 05 	call	0xa90	; 0xa90 <stopEngines>
				return liber | 2;				
    19e4:	80 91 c2 04 	lds	r24, 0x04C2
    19e8:	82 60       	ori	r24, 0x02	; 2
    19ea:	0f 90       	pop	r0
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	05 c0       	rjmp	.+10     	; 0x1a02 <locLiberSMF+0x388>
			}
			
		break;
	}
	return NO;
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	03 c0       	rjmp	.+6      	; 0x1a02 <locLiberSMF+0x388>
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	01 c0       	rjmp	.+2      	; 0x1a02 <locLiberSMF+0x388>
    1a00:	80 e0       	ldi	r24, 0x00	; 0

}
    1a02:	e2 96       	adiw	r28, 0x32	; 50
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	f8 94       	cli
    1a08:	de bf       	out	0x3e, r29	; 62
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	cd bf       	out	0x3d, r28	; 61
    1a0e:	df 91       	pop	r29
    1a10:	cf 91       	pop	r28
    1a12:	1f 91       	pop	r17
    1a14:	0f 91       	pop	r16
    1a16:	ff 90       	pop	r15
    1a18:	ef 90       	pop	r14
    1a1a:	df 90       	pop	r13
    1a1c:	cf 90       	pop	r12
    1a1e:	08 95       	ret

00001a20 <findPlaces1>:
	distP2=0;
	liber = 0;
	addEntryIfNotExists(&findPlaces1, 250 * 1000UL, Periodic);
}

uint8_t findPlaces1(){
    1a20:	4f 92       	push	r4
    1a22:	5f 92       	push	r5
    1a24:	6f 92       	push	r6
    1a26:	7f 92       	push	r7
    1a28:	8f 92       	push	r8
    1a2a:	9f 92       	push	r9
    1a2c:	af 92       	push	r10
    1a2e:	bf 92       	push	r11
    1a30:	cf 92       	push	r12
    1a32:	df 92       	push	r13
    1a34:	ef 92       	push	r14
    1a36:	ff 92       	push	r15
    1a38:	0f 93       	push	r16
    1a3a:	1f 93       	push	r17
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62
    1a44:	c4 56       	subi	r28, 0x64	; 100
    1a46:	d1 09       	sbc	r29, r1
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	de bf       	out	0x3e, r29	; 62
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	cd bf       	out	0x3d, r28	; 61
	uint32_t frontRight = getValueOfSensor(FrontRightSensor);
    1a52:	82 e0       	ldi	r24, 0x02	; 2
    1a54:	0e 94 c5 08 	call	0x118a	; 0x118a <getValueOfSensor>
    1a58:	6c 01       	movw	r12, r24
    1a5a:	e1 2c       	mov	r14, r1
    1a5c:	f1 2c       	mov	r15, r1
	char msg[100];
	switch(stareFP1){;
    1a5e:	80 91 bb 04 	lds	r24, 0x04BB
    1a62:	83 30       	cpi	r24, 0x03	; 3
    1a64:	09 f4       	brne	.+2      	; 0x1a68 <findPlaces1+0x48>
    1a66:	8c c1       	rjmp	.+792    	; 0x1d80 <findPlaces1+0x360>
    1a68:	20 f4       	brcc	.+8      	; 0x1a72 <findPlaces1+0x52>
    1a6a:	81 30       	cpi	r24, 0x01	; 1
    1a6c:	69 f1       	breq	.+90     	; 0x1ac8 <findPlaces1+0xa8>
    1a6e:	78 f0       	brcs	.+30     	; 0x1a8e <findPlaces1+0x6e>
    1a70:	e5 c0       	rjmp	.+458    	; 0x1c3c <findPlaces1+0x21c>
    1a72:	85 30       	cpi	r24, 0x05	; 5
    1a74:	09 f4       	brne	.+2      	; 0x1a78 <findPlaces1+0x58>
    1a76:	de c2       	rjmp	.+1468   	; 0x2034 <findPlaces1+0x614>
    1a78:	08 f4       	brcc	.+2      	; 0x1a7c <findPlaces1+0x5c>
    1a7a:	90 c2       	rjmp	.+1312   	; 0x1f9c <findPlaces1+0x57c>
    1a7c:	84 36       	cpi	r24, 0x64	; 100
    1a7e:	09 f0       	breq	.+2      	; 0x1a82 <findPlaces1+0x62>
    1a80:	f9 c2       	rjmp	.+1522   	; 0x2074 <findPlaces1+0x654>
		case 100:
			liber=0;
    1a82:	10 92 c2 04 	sts	0x04C2, r1
			stareFP1 = 0;
    1a86:	10 92 bb 04 	sts	0x04BB, r1
				return YES;
				stopEngines();
			}
		break;
	}
	return NO;
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
	char msg[100];
	switch(stareFP1){;
		case 100:
			liber=0;
			stareFP1 = 0;
		break;
    1a8c:	fc c2       	rjmp	.+1528   	; 0x2086 <findPlaces1+0x666>
		case 0:
			liber++;
    1a8e:	80 91 c2 04 	lds	r24, 0x04C2
    1a92:	8f 5f       	subi	r24, 0xFF	; 255
    1a94:	80 93 c2 04 	sts	0x04C2, r24
			if(liber<4)
    1a98:	84 30       	cpi	r24, 0x04	; 4
    1a9a:	08 f4       	brcc	.+2      	; 0x1a9e <findPlaces1+0x7e>
    1a9c:	ed c2       	rjmp	.+1498   	; 0x2078 <findPlaces1+0x658>
				break;
			lastVFP1 = frontRight;
    1a9e:	c0 92 c4 04 	sts	0x04C4, r12
    1aa2:	d0 92 c5 04 	sts	0x04C5, r13
    1aa6:	e0 92 c6 04 	sts	0x04C6, r14
    1aaa:	f0 92 c7 04 	sts	0x04C7, r15
			goFront(60, 90);
    1aae:	6a e5       	ldi	r22, 0x5A	; 90
    1ab0:	8c e3       	ldi	r24, 0x3C	; 60
    1ab2:	0e 94 bf 05 	call	0xb7e	; 0xb7e <goFront>
			stareFP1 = 1;
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	80 93 bb 04 	sts	0x04BB, r24
			BTTransmitStr("0->1");
    1abc:	84 e7       	ldi	r24, 0x74	; 116
    1abe:	92 e0       	ldi	r25, 0x02	; 2
    1ac0:	0e 94 a9 01 	call	0x352	; 0x352 <BTTransmitStr>
				return YES;
				stopEngines();
			}
		break;
	}
	return NO;
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
				break;
			lastVFP1 = frontRight;
			goFront(60, 90);
			stareFP1 = 1;
			BTTransmitStr("0->1");
		break;
    1ac6:	df c2       	rjmp	.+1470   	; 0x2086 <findPlaces1+0x666>
		case 1:
			if(frontRight > lastVFP1 + 100){
    1ac8:	80 91 c4 04 	lds	r24, 0x04C4
    1acc:	90 91 c5 04 	lds	r25, 0x04C5
    1ad0:	a0 91 c6 04 	lds	r26, 0x04C6
    1ad4:	b0 91 c7 04 	lds	r27, 0x04C7
    1ad8:	8c 59       	subi	r24, 0x9C	; 156
    1ada:	9f 4f       	sbci	r25, 0xFF	; 255
    1adc:	af 4f       	sbci	r26, 0xFF	; 255
    1ade:	bf 4f       	sbci	r27, 0xFF	; 255
    1ae0:	8c 15       	cp	r24, r12
    1ae2:	9d 05       	cpc	r25, r13
    1ae4:	ae 05       	cpc	r26, r14
    1ae6:	bf 05       	cpc	r27, r15
    1ae8:	08 f0       	brcs	.+2      	; 0x1aec <findPlaces1+0xcc>
    1aea:	9e c0       	rjmp	.+316    	; 0x1c28 <findPlaces1+0x208>
				//stopEngines();
				stareFP1 = 2;
    1aec:	82 e0       	ldi	r24, 0x02	; 2
    1aee:	80 93 bb 04 	sts	0x04BB, r24
				distP = DISTANTA_PARCURSA;
    1af2:	80 91 60 04 	lds	r24, 0x0460
    1af6:	90 91 61 04 	lds	r25, 0x0461
    1afa:	a0 91 62 04 	lds	r26, 0x0462
    1afe:	b0 91 63 04 	lds	r27, 0x0463
    1b02:	40 91 66 04 	lds	r20, 0x0466
    1b06:	50 91 67 04 	lds	r21, 0x0467
    1b0a:	60 91 68 04 	lds	r22, 0x0468
    1b0e:	70 91 69 04 	lds	r23, 0x0469
    1b12:	48 0f       	add	r20, r24
    1b14:	59 1f       	adc	r21, r25
    1b16:	6a 1f       	adc	r22, r26
    1b18:	7b 1f       	adc	r23, r27
    1b1a:	76 95       	lsr	r23
    1b1c:	67 95       	ror	r22
    1b1e:	57 95       	ror	r21
    1b20:	47 95       	ror	r20
    1b22:	76 95       	lsr	r23
    1b24:	67 95       	ror	r22
    1b26:	57 95       	ror	r21
    1b28:	47 95       	ror	r20
    1b2a:	db 01       	movw	r26, r22
    1b2c:	ca 01       	movw	r24, r20
    1b2e:	88 0f       	add	r24, r24
    1b30:	99 1f       	adc	r25, r25
    1b32:	aa 1f       	adc	r26, r26
    1b34:	bb 1f       	adc	r27, r27
    1b36:	88 0f       	add	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	aa 1f       	adc	r26, r26
    1b3c:	bb 1f       	adc	r27, r27
    1b3e:	8c 01       	movw	r16, r24
    1b40:	9d 01       	movw	r18, r26
    1b42:	00 0f       	add	r16, r16
    1b44:	11 1f       	adc	r17, r17
    1b46:	22 1f       	adc	r18, r18
    1b48:	33 1f       	adc	r19, r19
    1b4a:	00 0f       	add	r16, r16
    1b4c:	11 1f       	adc	r17, r17
    1b4e:	22 1f       	adc	r18, r18
    1b50:	33 1f       	adc	r19, r19
    1b52:	80 0f       	add	r24, r16
    1b54:	91 1f       	adc	r25, r17
    1b56:	a2 1f       	adc	r26, r18
    1b58:	b3 1f       	adc	r27, r19
    1b5a:	84 0f       	add	r24, r20
    1b5c:	95 1f       	adc	r25, r21
    1b5e:	a6 1f       	adc	r26, r22
    1b60:	b7 1f       	adc	r27, r23
    1b62:	80 93 b7 04 	sts	0x04B7, r24
    1b66:	90 93 b8 04 	sts	0x04B8, r25
    1b6a:	a0 93 b9 04 	sts	0x04B9, r26
    1b6e:	b0 93 ba 04 	sts	0x04BA, r27
				//char msg[50];
				//sprintf(msg, "%lu   ", distP);
				//BTTransmitStr(msg);
				distP2 = DISTANTA_PARCURSA + 100;
    1b72:	40 91 60 04 	lds	r20, 0x0460
    1b76:	50 91 61 04 	lds	r21, 0x0461
    1b7a:	60 91 62 04 	lds	r22, 0x0462
    1b7e:	70 91 63 04 	lds	r23, 0x0463
    1b82:	00 91 66 04 	lds	r16, 0x0466
    1b86:	10 91 67 04 	lds	r17, 0x0467
    1b8a:	20 91 68 04 	lds	r18, 0x0468
    1b8e:	30 91 69 04 	lds	r19, 0x0469
    1b92:	40 0f       	add	r20, r16
    1b94:	51 1f       	adc	r21, r17
    1b96:	62 1f       	adc	r22, r18
    1b98:	73 1f       	adc	r23, r19
    1b9a:	76 95       	lsr	r23
    1b9c:	67 95       	ror	r22
    1b9e:	57 95       	ror	r21
    1ba0:	47 95       	ror	r20
    1ba2:	76 95       	lsr	r23
    1ba4:	67 95       	ror	r22
    1ba6:	57 95       	ror	r21
    1ba8:	47 95       	ror	r20
    1baa:	8a 01       	movw	r16, r20
    1bac:	9b 01       	movw	r18, r22
    1bae:	00 0f       	add	r16, r16
    1bb0:	11 1f       	adc	r17, r17
    1bb2:	22 1f       	adc	r18, r18
    1bb4:	33 1f       	adc	r19, r19
    1bb6:	00 0f       	add	r16, r16
    1bb8:	11 1f       	adc	r17, r17
    1bba:	22 1f       	adc	r18, r18
    1bbc:	33 1f       	adc	r19, r19
    1bbe:	48 01       	movw	r8, r16
    1bc0:	59 01       	movw	r10, r18
    1bc2:	88 0c       	add	r8, r8
    1bc4:	99 1c       	adc	r9, r9
    1bc6:	aa 1c       	adc	r10, r10
    1bc8:	bb 1c       	adc	r11, r11
    1bca:	88 0c       	add	r8, r8
    1bcc:	99 1c       	adc	r9, r9
    1bce:	aa 1c       	adc	r10, r10
    1bd0:	bb 1c       	adc	r11, r11
    1bd2:	08 0d       	add	r16, r8
    1bd4:	19 1d       	adc	r17, r9
    1bd6:	2a 1d       	adc	r18, r10
    1bd8:	3b 1d       	adc	r19, r11
    1bda:	40 0f       	add	r20, r16
    1bdc:	51 1f       	adc	r21, r17
    1bde:	62 1f       	adc	r22, r18
    1be0:	73 1f       	adc	r23, r19
    1be2:	4c 59       	subi	r20, 0x9C	; 156
    1be4:	5f 4f       	sbci	r21, 0xFF	; 255
    1be6:	6f 4f       	sbci	r22, 0xFF	; 255
    1be8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bea:	40 93 bc 04 	sts	0x04BC, r20
    1bee:	50 93 bd 04 	sts	0x04BD, r21
    1bf2:	60 93 be 04 	sts	0x04BE, r22
    1bf6:	70 93 bf 04 	sts	0x04BF, r23
			
				sprintf(msg, "stare->2  distP=%lu", distP);
    1bfa:	bf 93       	push	r27
    1bfc:	af 93       	push	r26
    1bfe:	9f 93       	push	r25
    1c00:	8f 93       	push	r24
    1c02:	89 e7       	ldi	r24, 0x79	; 121
    1c04:	92 e0       	ldi	r25, 0x02	; 2
    1c06:	9f 93       	push	r25
    1c08:	8f 93       	push	r24
    1c0a:	8e 01       	movw	r16, r28
    1c0c:	0f 5f       	subi	r16, 0xFF	; 255
    1c0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c10:	1f 93       	push	r17
    1c12:	0f 93       	push	r16
    1c14:	0e 94 77 1c 	call	0x38ee	; 0x38ee <sprintf>
				BTTransmitStr(msg);
    1c18:	c8 01       	movw	r24, r16
    1c1a:	0e 94 a9 01 	call	0x352	; 0x352 <BTTransmitStr>
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	f8 94       	cli
    1c22:	de bf       	out	0x3e, r29	; 62
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	cd bf       	out	0x3d, r28	; 61
			
			}
			lastVFP1 = frontRight;
    1c28:	c0 92 c4 04 	sts	0x04C4, r12
    1c2c:	d0 92 c5 04 	sts	0x04C5, r13
    1c30:	e0 92 c6 04 	sts	0x04C6, r14
    1c34:	f0 92 c7 04 	sts	0x04C7, r15
				return YES;
				stopEngines();
			}
		break;
	}
	return NO;
    1c38:	80 e0       	ldi	r24, 0x00	; 0
				sprintf(msg, "stare->2  distP=%lu", distP);
				BTTransmitStr(msg);
			
			}
			lastVFP1 = frontRight;
		break;
    1c3a:	25 c2       	rjmp	.+1098   	; 0x2086 <findPlaces1+0x666>
		case 2:
			if(DISTANTA_PARCURSA > distP2){
    1c3c:	80 91 60 04 	lds	r24, 0x0460
    1c40:	90 91 61 04 	lds	r25, 0x0461
    1c44:	a0 91 62 04 	lds	r26, 0x0462
    1c48:	b0 91 63 04 	lds	r27, 0x0463
    1c4c:	40 91 66 04 	lds	r20, 0x0466
    1c50:	50 91 67 04 	lds	r21, 0x0467
    1c54:	60 91 68 04 	lds	r22, 0x0468
    1c58:	70 91 69 04 	lds	r23, 0x0469
    1c5c:	84 0f       	add	r24, r20
    1c5e:	95 1f       	adc	r25, r21
    1c60:	a6 1f       	adc	r26, r22
    1c62:	b7 1f       	adc	r27, r23
    1c64:	b6 95       	lsr	r27
    1c66:	a7 95       	ror	r26
    1c68:	97 95       	ror	r25
    1c6a:	87 95       	ror	r24
    1c6c:	b6 95       	lsr	r27
    1c6e:	a7 95       	ror	r26
    1c70:	97 95       	ror	r25
    1c72:	87 95       	ror	r24
    1c74:	ac 01       	movw	r20, r24
    1c76:	bd 01       	movw	r22, r26
    1c78:	44 0f       	add	r20, r20
    1c7a:	55 1f       	adc	r21, r21
    1c7c:	66 1f       	adc	r22, r22
    1c7e:	77 1f       	adc	r23, r23
    1c80:	44 0f       	add	r20, r20
    1c82:	55 1f       	adc	r21, r21
    1c84:	66 1f       	adc	r22, r22
    1c86:	77 1f       	adc	r23, r23
    1c88:	8a 01       	movw	r16, r20
    1c8a:	9b 01       	movw	r18, r22
    1c8c:	00 0f       	add	r16, r16
    1c8e:	11 1f       	adc	r17, r17
    1c90:	22 1f       	adc	r18, r18
    1c92:	33 1f       	adc	r19, r19
    1c94:	00 0f       	add	r16, r16
    1c96:	11 1f       	adc	r17, r17
    1c98:	22 1f       	adc	r18, r18
    1c9a:	33 1f       	adc	r19, r19
    1c9c:	40 0f       	add	r20, r16
    1c9e:	51 1f       	adc	r21, r17
    1ca0:	62 1f       	adc	r22, r18
    1ca2:	73 1f       	adc	r23, r19
    1ca4:	84 0f       	add	r24, r20
    1ca6:	95 1f       	adc	r25, r21
    1ca8:	a6 1f       	adc	r26, r22
    1caa:	b7 1f       	adc	r27, r23
    1cac:	00 91 bc 04 	lds	r16, 0x04BC
    1cb0:	10 91 bd 04 	lds	r17, 0x04BD
    1cb4:	20 91 be 04 	lds	r18, 0x04BE
    1cb8:	30 91 bf 04 	lds	r19, 0x04BF
    1cbc:	08 17       	cp	r16, r24
    1cbe:	19 07       	cpc	r17, r25
    1cc0:	2a 07       	cpc	r18, r26
    1cc2:	3b 07       	cpc	r19, r27
    1cc4:	08 f0       	brcs	.+2      	; 0x1cc8 <findPlaces1+0x2a8>
    1cc6:	da c1       	rjmp	.+948    	; 0x207c <findPlaces1+0x65c>
				stareFP1= 3;
    1cc8:	83 e0       	ldi	r24, 0x03	; 3
    1cca:	80 93 bb 04 	sts	0x04BB, r24
				lastVFP1 = frontRight;
    1cce:	c0 92 c4 04 	sts	0x04C4, r12
    1cd2:	d0 92 c5 04 	sts	0x04C5, r13
    1cd6:	e0 92 c6 04 	sts	0x04C6, r14
    1cda:	f0 92 c7 04 	sts	0x04C7, r15
			
				sprintf(msg, "stare->3  DP=%lu", DISTANTA_PARCURSA);
    1cde:	80 91 60 04 	lds	r24, 0x0460
    1ce2:	90 91 61 04 	lds	r25, 0x0461
    1ce6:	a0 91 62 04 	lds	r26, 0x0462
    1cea:	b0 91 63 04 	lds	r27, 0x0463
    1cee:	40 91 66 04 	lds	r20, 0x0466
    1cf2:	50 91 67 04 	lds	r21, 0x0467
    1cf6:	60 91 68 04 	lds	r22, 0x0468
    1cfa:	70 91 69 04 	lds	r23, 0x0469
    1cfe:	48 0f       	add	r20, r24
    1d00:	59 1f       	adc	r21, r25
    1d02:	6a 1f       	adc	r22, r26
    1d04:	7b 1f       	adc	r23, r27
    1d06:	76 95       	lsr	r23
    1d08:	67 95       	ror	r22
    1d0a:	57 95       	ror	r21
    1d0c:	47 95       	ror	r20
    1d0e:	76 95       	lsr	r23
    1d10:	67 95       	ror	r22
    1d12:	57 95       	ror	r21
    1d14:	47 95       	ror	r20
    1d16:	db 01       	movw	r26, r22
    1d18:	ca 01       	movw	r24, r20
    1d1a:	88 0f       	add	r24, r24
    1d1c:	99 1f       	adc	r25, r25
    1d1e:	aa 1f       	adc	r26, r26
    1d20:	bb 1f       	adc	r27, r27
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	aa 1f       	adc	r26, r26
    1d28:	bb 1f       	adc	r27, r27
    1d2a:	8c 01       	movw	r16, r24
    1d2c:	9d 01       	movw	r18, r26
    1d2e:	00 0f       	add	r16, r16
    1d30:	11 1f       	adc	r17, r17
    1d32:	22 1f       	adc	r18, r18
    1d34:	33 1f       	adc	r19, r19
    1d36:	00 0f       	add	r16, r16
    1d38:	11 1f       	adc	r17, r17
    1d3a:	22 1f       	adc	r18, r18
    1d3c:	33 1f       	adc	r19, r19
    1d3e:	80 0f       	add	r24, r16
    1d40:	91 1f       	adc	r25, r17
    1d42:	a2 1f       	adc	r26, r18
    1d44:	b3 1f       	adc	r27, r19
    1d46:	84 0f       	add	r24, r20
    1d48:	95 1f       	adc	r25, r21
    1d4a:	a6 1f       	adc	r26, r22
    1d4c:	b7 1f       	adc	r27, r23
    1d4e:	bf 93       	push	r27
    1d50:	af 93       	push	r26
    1d52:	9f 93       	push	r25
    1d54:	8f 93       	push	r24
    1d56:	8d e8       	ldi	r24, 0x8D	; 141
    1d58:	92 e0       	ldi	r25, 0x02	; 2
    1d5a:	9f 93       	push	r25
    1d5c:	8f 93       	push	r24
    1d5e:	8e 01       	movw	r16, r28
    1d60:	0f 5f       	subi	r16, 0xFF	; 255
    1d62:	1f 4f       	sbci	r17, 0xFF	; 255
    1d64:	1f 93       	push	r17
    1d66:	0f 93       	push	r16
    1d68:	0e 94 77 1c 	call	0x38ee	; 0x38ee <sprintf>
				BTTransmitStr(msg);
    1d6c:	c8 01       	movw	r24, r16
    1d6e:	0e 94 a9 01 	call	0x352	; 0x352 <BTTransmitStr>
    1d72:	0f b6       	in	r0, 0x3f	; 63
    1d74:	f8 94       	cli
    1d76:	de bf       	out	0x3e, r29	; 62
    1d78:	0f be       	out	0x3f, r0	; 63
    1d7a:	cd bf       	out	0x3d, r28	; 61
				return YES;
				stopEngines();
			}
		break;
	}
	return NO;
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	83 c1       	rjmp	.+774    	; 0x2086 <findPlaces1+0x666>
				sprintf(msg, "stare->3  DP=%lu", DISTANTA_PARCURSA);
				BTTransmitStr(msg);
			}
		break;
		case 3:
			if(frontRight > lastVFP1 + 100){
    1d80:	80 91 c4 04 	lds	r24, 0x04C4
    1d84:	90 91 c5 04 	lds	r25, 0x04C5
    1d88:	a0 91 c6 04 	lds	r26, 0x04C6
    1d8c:	b0 91 c7 04 	lds	r27, 0x04C7
    1d90:	8c 59       	subi	r24, 0x9C	; 156
    1d92:	9f 4f       	sbci	r25, 0xFF	; 255
    1d94:	af 4f       	sbci	r26, 0xFF	; 255
    1d96:	bf 4f       	sbci	r27, 0xFF	; 255
    1d98:	8c 15       	cp	r24, r12
    1d9a:	9d 05       	cpc	r25, r13
    1d9c:	ae 05       	cpc	r26, r14
    1d9e:	bf 05       	cpc	r27, r15
    1da0:	08 f0       	brcs	.+2      	; 0x1da4 <findPlaces1+0x384>
    1da2:	f2 c0       	rjmp	.+484    	; 0x1f88 <findPlaces1+0x568>
				//stopEngines();
				distP = (DISTANTA_PARCURSA - distP)/2 + DISTANTA_PARCURSA + 50;
    1da4:	80 90 60 04 	lds	r8, 0x0460
    1da8:	90 90 61 04 	lds	r9, 0x0461
    1dac:	a0 90 62 04 	lds	r10, 0x0462
    1db0:	b0 90 63 04 	lds	r11, 0x0463
    1db4:	80 91 66 04 	lds	r24, 0x0466
    1db8:	90 91 67 04 	lds	r25, 0x0467
    1dbc:	a0 91 68 04 	lds	r26, 0x0468
    1dc0:	b0 91 69 04 	lds	r27, 0x0469
    1dc4:	40 91 60 04 	lds	r20, 0x0460
    1dc8:	50 91 61 04 	lds	r21, 0x0461
    1dcc:	60 91 62 04 	lds	r22, 0x0462
    1dd0:	70 91 63 04 	lds	r23, 0x0463
    1dd4:	00 91 66 04 	lds	r16, 0x0466
    1dd8:	10 91 67 04 	lds	r17, 0x0467
    1ddc:	20 91 68 04 	lds	r18, 0x0468
    1de0:	30 91 69 04 	lds	r19, 0x0469
    1de4:	04 0f       	add	r16, r20
    1de6:	15 1f       	adc	r17, r21
    1de8:	26 1f       	adc	r18, r22
    1dea:	37 1f       	adc	r19, r23
    1dec:	36 95       	lsr	r19
    1dee:	27 95       	ror	r18
    1df0:	17 95       	ror	r17
    1df2:	07 95       	ror	r16
    1df4:	36 95       	lsr	r19
    1df6:	27 95       	ror	r18
    1df8:	17 95       	ror	r17
    1dfa:	07 95       	ror	r16
    1dfc:	b9 01       	movw	r22, r18
    1dfe:	a8 01       	movw	r20, r16
    1e00:	44 0f       	add	r20, r20
    1e02:	55 1f       	adc	r21, r21
    1e04:	66 1f       	adc	r22, r22
    1e06:	77 1f       	adc	r23, r23
    1e08:	44 0f       	add	r20, r20
    1e0a:	55 1f       	adc	r21, r21
    1e0c:	66 1f       	adc	r22, r22
    1e0e:	77 1f       	adc	r23, r23
    1e10:	2a 01       	movw	r4, r20
    1e12:	3b 01       	movw	r6, r22
    1e14:	44 0c       	add	r4, r4
    1e16:	55 1c       	adc	r5, r5
    1e18:	66 1c       	adc	r6, r6
    1e1a:	77 1c       	adc	r7, r7
    1e1c:	44 0c       	add	r4, r4
    1e1e:	55 1c       	adc	r5, r5
    1e20:	66 1c       	adc	r6, r6
    1e22:	77 1c       	adc	r7, r7
    1e24:	44 0d       	add	r20, r4
    1e26:	55 1d       	adc	r21, r5
    1e28:	66 1d       	adc	r22, r6
    1e2a:	77 1d       	adc	r23, r7
    1e2c:	04 0f       	add	r16, r20
    1e2e:	15 1f       	adc	r17, r21
    1e30:	26 1f       	adc	r18, r22
    1e32:	37 1f       	adc	r19, r23
    1e34:	0e 5c       	subi	r16, 0xCE	; 206
    1e36:	1f 4f       	sbci	r17, 0xFF	; 255
    1e38:	2f 4f       	sbci	r18, 0xFF	; 255
    1e3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e3c:	88 0d       	add	r24, r8
    1e3e:	99 1d       	adc	r25, r9
    1e40:	aa 1d       	adc	r26, r10
    1e42:	bb 1d       	adc	r27, r11
    1e44:	b6 95       	lsr	r27
    1e46:	a7 95       	ror	r26
    1e48:	97 95       	ror	r25
    1e4a:	87 95       	ror	r24
    1e4c:	b6 95       	lsr	r27
    1e4e:	a7 95       	ror	r26
    1e50:	97 95       	ror	r25
    1e52:	87 95       	ror	r24
    1e54:	ac 01       	movw	r20, r24
    1e56:	bd 01       	movw	r22, r26
    1e58:	44 0f       	add	r20, r20
    1e5a:	55 1f       	adc	r21, r21
    1e5c:	66 1f       	adc	r22, r22
    1e5e:	77 1f       	adc	r23, r23
    1e60:	44 0f       	add	r20, r20
    1e62:	55 1f       	adc	r21, r21
    1e64:	66 1f       	adc	r22, r22
    1e66:	77 1f       	adc	r23, r23
    1e68:	4a 01       	movw	r8, r20
    1e6a:	5b 01       	movw	r10, r22
    1e6c:	88 0c       	add	r8, r8
    1e6e:	99 1c       	adc	r9, r9
    1e70:	aa 1c       	adc	r10, r10
    1e72:	bb 1c       	adc	r11, r11
    1e74:	88 0c       	add	r8, r8
    1e76:	99 1c       	adc	r9, r9
    1e78:	aa 1c       	adc	r10, r10
    1e7a:	bb 1c       	adc	r11, r11
    1e7c:	48 0d       	add	r20, r8
    1e7e:	59 1d       	adc	r21, r9
    1e80:	6a 1d       	adc	r22, r10
    1e82:	7b 1d       	adc	r23, r11
    1e84:	84 0f       	add	r24, r20
    1e86:	95 1f       	adc	r25, r21
    1e88:	a6 1f       	adc	r26, r22
    1e8a:	b7 1f       	adc	r27, r23
    1e8c:	80 90 b7 04 	lds	r8, 0x04B7
    1e90:	90 90 b8 04 	lds	r9, 0x04B8
    1e94:	a0 90 b9 04 	lds	r10, 0x04B9
    1e98:	b0 90 ba 04 	lds	r11, 0x04BA
    1e9c:	88 19       	sub	r24, r8
    1e9e:	99 09       	sbc	r25, r9
    1ea0:	aa 09       	sbc	r26, r10
    1ea2:	bb 09       	sbc	r27, r11
    1ea4:	b6 95       	lsr	r27
    1ea6:	a7 95       	ror	r26
    1ea8:	97 95       	ror	r25
    1eaa:	87 95       	ror	r24
    1eac:	08 0f       	add	r16, r24
    1eae:	19 1f       	adc	r17, r25
    1eb0:	2a 1f       	adc	r18, r26
    1eb2:	3b 1f       	adc	r19, r27
    1eb4:	00 93 b7 04 	sts	0x04B7, r16
    1eb8:	10 93 b8 04 	sts	0x04B8, r17
    1ebc:	20 93 b9 04 	sts	0x04B9, r18
    1ec0:	30 93 ba 04 	sts	0x04BA, r19
				stareFP1 = 4;
    1ec4:	84 e0       	ldi	r24, 0x04	; 4
    1ec6:	80 93 bb 04 	sts	0x04BB, r24
				goBack(60, 60);
    1eca:	6c e3       	ldi	r22, 0x3C	; 60
    1ecc:	8c e3       	ldi	r24, 0x3C	; 60
    1ece:	0e 94 ef 05 	call	0xbde	; 0xbde <goBack>
				sprintf(msg, "stare->4 distP=%lu DP=%lu", distP, DISTANTA_PARCURSA);
    1ed2:	80 91 60 04 	lds	r24, 0x0460
    1ed6:	90 91 61 04 	lds	r25, 0x0461
    1eda:	a0 91 62 04 	lds	r26, 0x0462
    1ede:	b0 91 63 04 	lds	r27, 0x0463
    1ee2:	40 91 66 04 	lds	r20, 0x0466
    1ee6:	50 91 67 04 	lds	r21, 0x0467
    1eea:	60 91 68 04 	lds	r22, 0x0468
    1eee:	70 91 69 04 	lds	r23, 0x0469
    1ef2:	48 0f       	add	r20, r24
    1ef4:	59 1f       	adc	r21, r25
    1ef6:	6a 1f       	adc	r22, r26
    1ef8:	7b 1f       	adc	r23, r27
    1efa:	76 95       	lsr	r23
    1efc:	67 95       	ror	r22
    1efe:	57 95       	ror	r21
    1f00:	47 95       	ror	r20
    1f02:	76 95       	lsr	r23
    1f04:	67 95       	ror	r22
    1f06:	57 95       	ror	r21
    1f08:	47 95       	ror	r20
    1f0a:	db 01       	movw	r26, r22
    1f0c:	ca 01       	movw	r24, r20
    1f0e:	88 0f       	add	r24, r24
    1f10:	99 1f       	adc	r25, r25
    1f12:	aa 1f       	adc	r26, r26
    1f14:	bb 1f       	adc	r27, r27
    1f16:	88 0f       	add	r24, r24
    1f18:	99 1f       	adc	r25, r25
    1f1a:	aa 1f       	adc	r26, r26
    1f1c:	bb 1f       	adc	r27, r27
    1f1e:	8c 01       	movw	r16, r24
    1f20:	9d 01       	movw	r18, r26
    1f22:	00 0f       	add	r16, r16
    1f24:	11 1f       	adc	r17, r17
    1f26:	22 1f       	adc	r18, r18
    1f28:	33 1f       	adc	r19, r19
    1f2a:	00 0f       	add	r16, r16
    1f2c:	11 1f       	adc	r17, r17
    1f2e:	22 1f       	adc	r18, r18
    1f30:	33 1f       	adc	r19, r19
    1f32:	80 0f       	add	r24, r16
    1f34:	91 1f       	adc	r25, r17
    1f36:	a2 1f       	adc	r26, r18
    1f38:	b3 1f       	adc	r27, r19
    1f3a:	84 0f       	add	r24, r20
    1f3c:	95 1f       	adc	r25, r21
    1f3e:	a6 1f       	adc	r26, r22
    1f40:	b7 1f       	adc	r27, r23
    1f42:	bf 93       	push	r27
    1f44:	af 93       	push	r26
    1f46:	9f 93       	push	r25
    1f48:	8f 93       	push	r24
    1f4a:	80 91 ba 04 	lds	r24, 0x04BA
    1f4e:	8f 93       	push	r24
    1f50:	80 91 b9 04 	lds	r24, 0x04B9
    1f54:	8f 93       	push	r24
    1f56:	80 91 b8 04 	lds	r24, 0x04B8
    1f5a:	8f 93       	push	r24
    1f5c:	80 91 b7 04 	lds	r24, 0x04B7
    1f60:	8f 93       	push	r24
    1f62:	8e e9       	ldi	r24, 0x9E	; 158
    1f64:	92 e0       	ldi	r25, 0x02	; 2
    1f66:	9f 93       	push	r25
    1f68:	8f 93       	push	r24
    1f6a:	8e 01       	movw	r16, r28
    1f6c:	0f 5f       	subi	r16, 0xFF	; 255
    1f6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f70:	1f 93       	push	r17
    1f72:	0f 93       	push	r16
    1f74:	0e 94 77 1c 	call	0x38ee	; 0x38ee <sprintf>
				BTTransmitStr(msg);
    1f78:	c8 01       	movw	r24, r16
    1f7a:	0e 94 a9 01 	call	0x352	; 0x352 <BTTransmitStr>
    1f7e:	0f b6       	in	r0, 0x3f	; 63
    1f80:	f8 94       	cli
    1f82:	de bf       	out	0x3e, r29	; 62
    1f84:	0f be       	out	0x3f, r0	; 63
    1f86:	cd bf       	out	0x3d, r28	; 61
			
			}
			lastVFP1 = frontRight;
    1f88:	c0 92 c4 04 	sts	0x04C4, r12
    1f8c:	d0 92 c5 04 	sts	0x04C5, r13
    1f90:	e0 92 c6 04 	sts	0x04C6, r14
    1f94:	f0 92 c7 04 	sts	0x04C7, r15
				return YES;
				stopEngines();
			}
		break;
	}
	return NO;
    1f98:	80 e0       	ldi	r24, 0x00	; 0
				sprintf(msg, "stare->4 distP=%lu DP=%lu", distP, DISTANTA_PARCURSA);
				BTTransmitStr(msg);
			
			}
			lastVFP1 = frontRight;
		break;
    1f9a:	75 c0       	rjmp	.+234    	; 0x2086 <findPlaces1+0x666>
		case 4:
			if(DISTANTA_PARCURSA > distP){
    1f9c:	80 91 60 04 	lds	r24, 0x0460
    1fa0:	90 91 61 04 	lds	r25, 0x0461
    1fa4:	a0 91 62 04 	lds	r26, 0x0462
    1fa8:	b0 91 63 04 	lds	r27, 0x0463
    1fac:	40 91 66 04 	lds	r20, 0x0466
    1fb0:	50 91 67 04 	lds	r21, 0x0467
    1fb4:	60 91 68 04 	lds	r22, 0x0468
    1fb8:	70 91 69 04 	lds	r23, 0x0469
    1fbc:	84 0f       	add	r24, r20
    1fbe:	95 1f       	adc	r25, r21
    1fc0:	a6 1f       	adc	r26, r22
    1fc2:	b7 1f       	adc	r27, r23
    1fc4:	b6 95       	lsr	r27
    1fc6:	a7 95       	ror	r26
    1fc8:	97 95       	ror	r25
    1fca:	87 95       	ror	r24
    1fcc:	b6 95       	lsr	r27
    1fce:	a7 95       	ror	r26
    1fd0:	97 95       	ror	r25
    1fd2:	87 95       	ror	r24
    1fd4:	ac 01       	movw	r20, r24
    1fd6:	bd 01       	movw	r22, r26
    1fd8:	44 0f       	add	r20, r20
    1fda:	55 1f       	adc	r21, r21
    1fdc:	66 1f       	adc	r22, r22
    1fde:	77 1f       	adc	r23, r23
    1fe0:	44 0f       	add	r20, r20
    1fe2:	55 1f       	adc	r21, r21
    1fe4:	66 1f       	adc	r22, r22
    1fe6:	77 1f       	adc	r23, r23
    1fe8:	6a 01       	movw	r12, r20
    1fea:	7b 01       	movw	r14, r22
    1fec:	cc 0c       	add	r12, r12
    1fee:	dd 1c       	adc	r13, r13
    1ff0:	ee 1c       	adc	r14, r14
    1ff2:	ff 1c       	adc	r15, r15
    1ff4:	cc 0c       	add	r12, r12
    1ff6:	dd 1c       	adc	r13, r13
    1ff8:	ee 1c       	adc	r14, r14
    1ffa:	ff 1c       	adc	r15, r15
    1ffc:	4c 0d       	add	r20, r12
    1ffe:	5d 1d       	adc	r21, r13
    2000:	6e 1d       	adc	r22, r14
    2002:	7f 1d       	adc	r23, r15
    2004:	84 0f       	add	r24, r20
    2006:	95 1f       	adc	r25, r21
    2008:	a6 1f       	adc	r26, r22
    200a:	b7 1f       	adc	r27, r23
    200c:	c0 90 b7 04 	lds	r12, 0x04B7
    2010:	d0 90 b8 04 	lds	r13, 0x04B8
    2014:	e0 90 b9 04 	lds	r14, 0x04B9
    2018:	f0 90 ba 04 	lds	r15, 0x04BA
    201c:	c8 16       	cp	r12, r24
    201e:	d9 06       	cpc	r13, r25
    2020:	ea 06       	cpc	r14, r26
    2022:	fb 06       	cpc	r15, r27
    2024:	68 f5       	brcc	.+90     	; 0x2080 <findPlaces1+0x660>
				//stopEngines();
				//return YES;
				stareLocLiber = 0;
    2026:	10 92 c0 04 	sts	0x04C0, r1
				stareFP1 = 5;
    202a:	85 e0       	ldi	r24, 0x05	; 5
    202c:	80 93 bb 04 	sts	0x04BB, r24
				return YES;
				stopEngines();
			}
		break;
	}
	return NO;
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	29 c0       	rjmp	.+82     	; 0x2086 <findPlaces1+0x666>
				stareLocLiber = 0;
				stareFP1 = 5;
			}
		break;
		case 5:
			if(distP = locLiberSMF()){
    2034:	0e 94 3d 0b 	call	0x167a	; 0x167a <locLiberSMF>
    2038:	48 2f       	mov	r20, r24
    203a:	50 e0       	ldi	r21, 0x00	; 0
    203c:	60 e0       	ldi	r22, 0x00	; 0
    203e:	70 e0       	ldi	r23, 0x00	; 0
    2040:	40 93 b7 04 	sts	0x04B7, r20
    2044:	50 93 b8 04 	sts	0x04B8, r21
    2048:	60 93 b9 04 	sts	0x04B9, r22
    204c:	70 93 ba 04 	sts	0x04BA, r23
    2050:	45 2b       	or	r20, r21
    2052:	46 2b       	or	r20, r22
    2054:	47 2b       	or	r20, r23
    2056:	b1 f0       	breq	.+44     	; 0x2084 <findPlaces1+0x664>
				if(distP & 1){
    2058:	80 ff       	sbrs	r24, 0
    205a:	06 c0       	rjmp	.+12     	; 0x2068 <findPlaces1+0x648>
					BTTransmitStr("locul e liber");
    205c:	88 eb       	ldi	r24, 0xB8	; 184
    205e:	92 e0       	ldi	r25, 0x02	; 2
    2060:	0e 94 a9 01 	call	0x352	; 0x352 <BTTransmitStr>
				}
				else{
					BTTransmitStr("locul nu e liber");
				}
				return YES;
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	0f c0       	rjmp	.+30     	; 0x2086 <findPlaces1+0x666>
			if(distP = locLiberSMF()){
				if(distP & 1){
					BTTransmitStr("locul e liber");
				}
				else{
					BTTransmitStr("locul nu e liber");
    2068:	86 ec       	ldi	r24, 0xC6	; 198
    206a:	92 e0       	ldi	r25, 0x02	; 2
    206c:	0e 94 a9 01 	call	0x352	; 0x352 <BTTransmitStr>
				}
				return YES;
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	09 c0       	rjmp	.+18     	; 0x2086 <findPlaces1+0x666>
				stopEngines();
			}
		break;
	}
	return NO;
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	07 c0       	rjmp	.+14     	; 0x2086 <findPlaces1+0x666>
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	05 c0       	rjmp	.+10     	; 0x2086 <findPlaces1+0x666>
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	03 c0       	rjmp	.+6      	; 0x2086 <findPlaces1+0x666>
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	01 c0       	rjmp	.+2      	; 0x2086 <findPlaces1+0x666>
    2084:	80 e0       	ldi	r24, 0x00	; 0
}
    2086:	cc 59       	subi	r28, 0x9C	; 156
    2088:	df 4f       	sbci	r29, 0xFF	; 255
    208a:	0f b6       	in	r0, 0x3f	; 63
    208c:	f8 94       	cli
    208e:	de bf       	out	0x3e, r29	; 62
    2090:	0f be       	out	0x3f, r0	; 63
    2092:	cd bf       	out	0x3d, r28	; 61
    2094:	df 91       	pop	r29
    2096:	cf 91       	pop	r28
    2098:	1f 91       	pop	r17
    209a:	0f 91       	pop	r16
    209c:	ff 90       	pop	r15
    209e:	ef 90       	pop	r14
    20a0:	df 90       	pop	r13
    20a2:	cf 90       	pop	r12
    20a4:	bf 90       	pop	r11
    20a6:	af 90       	pop	r10
    20a8:	9f 90       	pop	r9
    20aa:	8f 90       	pop	r8
    20ac:	7f 90       	pop	r7
    20ae:	6f 90       	pop	r6
    20b0:	5f 90       	pop	r5
    20b2:	4f 90       	pop	r4
    20b4:	08 95       	ret

000020b6 <initFindPlaces1>:
	return NO;

}

void initFindPlaces1(){
	stareFP1 = 100;
    20b6:	84 e6       	ldi	r24, 0x64	; 100
    20b8:	80 93 bb 04 	sts	0x04BB, r24
	lastVFP1=0;
    20bc:	10 92 c4 04 	sts	0x04C4, r1
    20c0:	10 92 c5 04 	sts	0x04C5, r1
    20c4:	10 92 c6 04 	sts	0x04C6, r1
    20c8:	10 92 c7 04 	sts	0x04C7, r1
	distP=0;
    20cc:	10 92 b7 04 	sts	0x04B7, r1
    20d0:	10 92 b8 04 	sts	0x04B8, r1
    20d4:	10 92 b9 04 	sts	0x04B9, r1
    20d8:	10 92 ba 04 	sts	0x04BA, r1
	distP2=0;
    20dc:	10 92 bc 04 	sts	0x04BC, r1
    20e0:	10 92 bd 04 	sts	0x04BD, r1
    20e4:	10 92 be 04 	sts	0x04BE, r1
    20e8:	10 92 bf 04 	sts	0x04BF, r1
	liber = 0;
    20ec:	10 92 c2 04 	sts	0x04C2, r1
	addEntryIfNotExists(&findPlaces1, 250 * 1000UL, Periodic);
    20f0:	21 e0       	ldi	r18, 0x01	; 1
    20f2:	40 e9       	ldi	r20, 0x90	; 144
    20f4:	50 ed       	ldi	r21, 0xD0	; 208
    20f6:	63 e0       	ldi	r22, 0x03	; 3
    20f8:	70 e0       	ldi	r23, 0x00	; 0
    20fa:	80 e1       	ldi	r24, 0x10	; 16
    20fc:	9d e0       	ldi	r25, 0x0D	; 13
    20fe:	0e 94 2f 12 	call	0x245e	; 0x245e <addEntryIfNotExists>
    2102:	08 95       	ret

00002104 <main>:
#include "utile.h"
#include "Settings.h"

int main(void)
{
	initBTProtocol();
    2104:	0e 94 40 03 	call	0x680	; 0x680 <initBTProtocol>
	initTiming();
    2108:	0e 94 69 11 	call	0x22d2	; 0x22d2 <initTiming>
	initEngines();
    210c:	0e 94 73 05 	call	0xae6	; 0xae6 <initEngines>
	initLights();
    2110:	0e 94 29 08 	call	0x1052	; 0x1052 <initLights>
	initSensors();
    2114:	0e 94 d6 09 	call	0x13ac	; 0x13ac <initSensors>
	initEncoders();
    2118:	0e 94 25 05 	call	0xa4a	; 0xa4a <initEncoders>
	sei();
    211c:	78 94       	sei
	
	setDebugging(1);
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	0e 94 a1 10 	call	0x2142	; 0x2142 <setDebugging>
	setReadingSensors(1);
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	0e 94 ac 10 	call	0x2158	; 0x2158 <setReadingSensors>
	setNeonSetting(0);
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <setNeonSetting>
	
	
	BTTransmitStr("  >>>main start<<<  ");	
    2130:	8d e1       	ldi	r24, 0x1D	; 29
    2132:	93 e0       	ldi	r25, 0x03	; 3
    2134:	0e 94 a9 01 	call	0x352	; 0x352 <BTTransmitStr>
	sendCarStartedSignal();
    2138:	0e 94 27 03 	call	0x64e	; 0x64e <sendCarStartedSignal>
    while(1)
    {
		checkTimeQueue();
    213c:	0e 94 11 14 	call	0x2822	; 0x2822 <checkTimeQueue>
    2140:	fd cf       	rjmp	.-6      	; 0x213c <main+0x38>

00002142 <setDebugging>:
#define LAST_DEBUGGING (settings & 128)

volatile uint8_t settings = 0;

void setDebugging(uint8_t val){
	setBit(settings, (val&1), 0);	
    2142:	20 91 46 04 	lds	r18, 0x0446
    2146:	90 91 46 04 	lds	r25, 0x0446
    214a:	82 27       	eor	r24, r18
    214c:	28 2f       	mov	r18, r24
    214e:	21 70       	andi	r18, 0x01	; 1
    2150:	92 27       	eor	r25, r18
    2152:	90 93 46 04 	sts	0x0446, r25
    2156:	08 95       	ret

00002158 <setReadingSensors>:
}
void setReadingSensors(uint8_t val){
	setBit(settings, (val&1), 1);
    2158:	30 91 46 04 	lds	r19, 0x0446
    215c:	20 91 46 04 	lds	r18, 0x0446
    2160:	98 2f       	mov	r25, r24
    2162:	91 70       	andi	r25, 0x01	; 1
    2164:	91 95       	neg	r25
    2166:	93 27       	eor	r25, r19
    2168:	92 70       	andi	r25, 0x02	; 2
    216a:	92 27       	eor	r25, r18
    216c:	90 93 46 04 	sts	0x0446, r25
	setSensorsRead(val);
    2170:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <setSensorsRead>
    2174:	08 95       	ret

00002176 <setSendingInfos>:
}
void setSendingInfos(uint8_t val){
	setBit(settings, (val&1), 2);
    2176:	30 91 46 04 	lds	r19, 0x0446
    217a:	20 91 46 04 	lds	r18, 0x0446
    217e:	98 2f       	mov	r25, r24
    2180:	91 70       	andi	r25, 0x01	; 1
    2182:	91 95       	neg	r25
    2184:	93 27       	eor	r25, r19
    2186:	94 70       	andi	r25, 0x04	; 4
    2188:	92 27       	eor	r25, r18
    218a:	90 93 46 04 	sts	0x0446, r25
	setSendingDistAndTime(val);
    218e:	0e 94 37 05 	call	0xa6e	; 0xa6e <setSendingDistAndTime>
    2192:	08 95       	ret

00002194 <setSendingSensors>:
}
void setSendingSensors(uint8_t val){
	setBit(settings, (val&1), 3);
    2194:	30 91 46 04 	lds	r19, 0x0446
    2198:	20 91 46 04 	lds	r18, 0x0446
    219c:	98 2f       	mov	r25, r24
    219e:	91 70       	andi	r25, 0x01	; 1
    21a0:	91 95       	neg	r25
    21a2:	93 27       	eor	r25, r19
    21a4:	98 70       	andi	r25, 0x08	; 8
    21a6:	92 27       	eor	r25, r18
    21a8:	90 93 46 04 	sts	0x0446, r25
	setSensorsSend(val);
    21ac:	0e 94 6e 09 	call	0x12dc	; 0x12dc <setSensorsSend>
    21b0:	08 95       	ret

000021b2 <setNeonSetting>:
}
void setNeonSetting(uint8_t val){
	settings &= ~ (0x7<<4);
    21b2:	90 91 46 04 	lds	r25, 0x0446
    21b6:	9f 78       	andi	r25, 0x8F	; 143
    21b8:	90 93 46 04 	sts	0x0446, r25
	settings |= val<<4;
    21bc:	90 91 46 04 	lds	r25, 0x0446
    21c0:	40 e1       	ldi	r20, 0x10	; 16
    21c2:	84 9f       	mul	r24, r20
    21c4:	90 01       	movw	r18, r0
    21c6:	11 24       	eor	r1, r1
    21c8:	29 2b       	or	r18, r25
    21ca:	20 93 46 04 	sts	0x0446, r18
	setTheNeonSetting(val);
    21ce:	0e 94 2e 08 	call	0x105c	; 0x105c <setTheNeonSetting>
    21d2:	08 95       	ret

000021d4 <toggleDebuggingOff>:
}

void toggleDebuggingOff(uint8_t val){
	if(!val){
    21d4:	81 11       	cpse	r24, r1
    21d6:	11 c0       	rjmp	.+34     	; 0x21fa <toggleDebuggingOff+0x26>
		if(DEBUGGING){
    21d8:	80 91 46 04 	lds	r24, 0x0446
    21dc:	80 ff       	sbrs	r24, 0
    21de:	1c c0       	rjmp	.+56     	; 0x2218 <toggleDebuggingOff+0x44>
			setDebugging(0);
    21e0:	80 e0       	ldi	r24, 0x00	; 0
    21e2:	0e 94 a1 10 	call	0x2142	; 0x2142 <setDebugging>
			setBit(settings, 1, 7);
    21e6:	80 91 46 04 	lds	r24, 0x0446
    21ea:	90 91 46 04 	lds	r25, 0x0446
    21ee:	80 95       	com	r24
    21f0:	80 78       	andi	r24, 0x80	; 128
    21f2:	89 27       	eor	r24, r25
    21f4:	80 93 46 04 	sts	0x0446, r24
    21f8:	08 95       	ret
		}
	}
	else
		if(LAST_DEBUGGING){
    21fa:	80 91 46 04 	lds	r24, 0x0446
    21fe:	88 23       	and	r24, r24
    2200:	5c f4       	brge	.+22     	; 0x2218 <toggleDebuggingOff+0x44>
			setDebugging(1);
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	0e 94 a1 10 	call	0x2142	; 0x2142 <setDebugging>
			setBit(settings, 0, 7);
    2208:	80 91 46 04 	lds	r24, 0x0446
    220c:	90 91 46 04 	lds	r25, 0x0446
    2210:	80 78       	andi	r24, 0x80	; 128
    2212:	89 27       	eor	r24, r25
    2214:	80 93 46 04 	sts	0x0446, r24
    2218:	08 95       	ret

0000221a <getSettings>:
		}
}

void getSettings(){
    221a:	cf 93       	push	r28
    221c:	df 93       	push	r29
    221e:	00 d0       	rcall	.+0      	; 0x2220 <getSettings+0x6>
    2220:	00 d0       	rcall	.+0      	; 0x2222 <getSettings+0x8>
    2222:	00 d0       	rcall	.+0      	; 0x2224 <getSettings+0xa>
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
	uint8_t msgtt[6];
	msgtt[0] = StartByte;
    2228:	8a ea       	ldi	r24, 0xAA	; 170
    222a:	89 83       	std	Y+1, r24	; 0x01
	msgtt[1] = ICarSettings;
    222c:	84 e1       	ldi	r24, 0x14	; 20
    222e:	8a 83       	std	Y+2, r24	; 0x02
	msgtt[2] = 1;
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	8b 83       	std	Y+3, r24	; 0x03
	msgtt[3] = settings;
    2234:	80 91 46 04 	lds	r24, 0x0446
    2238:	8c 83       	std	Y+4, r24	; 0x04
	msgtt[4] = EndByte;
    223a:	85 e5       	ldi	r24, 0x55	; 85
    223c:	8d 83       	std	Y+5, r24	; 0x05
	BTTransmitMsgU(msgtt, 5);
    223e:	65 e0       	ldi	r22, 0x05	; 5
    2240:	ce 01       	movw	r24, r28
    2242:	01 96       	adiw	r24, 0x01	; 1
    2244:	0e 94 0c 03 	call	0x618	; 0x618 <BTTransmitMsgU>
}
    2248:	26 96       	adiw	r28, 0x06	; 6
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	de bf       	out	0x3e, r29	; 62
    2250:	0f be       	out	0x3f, r0	; 63
    2252:	cd bf       	out	0x3d, r28	; 61
    2254:	df 91       	pop	r29
    2256:	cf 91       	pop	r28
    2258:	08 95       	ret

0000225a <setSettings>:
void setSettings(uint8_t _setting){
    225a:	cf 93       	push	r28
    225c:	c8 2f       	mov	r28, r24
	setDebugging( _setting & 1 );
    225e:	81 70       	andi	r24, 0x01	; 1
    2260:	0e 94 a1 10 	call	0x2142	; 0x2142 <setDebugging>
	setReadingSensors( (_setting>>1) & 1 );
    2264:	c1 fb       	bst	r28, 1
    2266:	88 27       	eor	r24, r24
    2268:	80 f9       	bld	r24, 0
    226a:	0e 94 ac 10 	call	0x2158	; 0x2158 <setReadingSensors>
	setSendingInfos( (_setting>>2) & 1 );
    226e:	c2 fb       	bst	r28, 2
    2270:	88 27       	eor	r24, r24
    2272:	80 f9       	bld	r24, 0
    2274:	0e 94 bb 10 	call	0x2176	; 0x2176 <setSendingInfos>
	setSendingSensors( (_setting >>3) & 1);
    2278:	c3 fb       	bst	r28, 3
    227a:	88 27       	eor	r24, r24
    227c:	80 f9       	bld	r24, 0
    227e:	0e 94 ca 10 	call	0x2194	; 0x2194 <setSendingSensors>
	setNeonSetting( (_setting>>4) & 0x7  );
    2282:	8c 2f       	mov	r24, r28
    2284:	82 95       	swap	r24
    2286:	8f 70       	andi	r24, 0x0F	; 15
    2288:	87 70       	andi	r24, 0x07	; 7
    228a:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <setNeonSetting>
	getSettings();
    228e:	0e 94 0d 11 	call	0x221a	; 0x221a <getSettings>
}
    2292:	cf 91       	pop	r28
    2294:	08 95       	ret

00002296 <reSetSettings>:
void reSetSettings(){
	setSettings(settings);
    2296:	80 91 46 04 	lds	r24, 0x0446
    229a:	0e 94 2d 11 	call	0x225a	; 0x225a <setSettings>
    229e:	08 95       	ret

000022a0 <initTimeQueue>:
}
volatile queueEntry TimerQueue[TimingQueueSize+1];
volatile uint8_t TimingQueueTop;


void initTimeQueue(){
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	// initializez toti pointerii cu 0, adica pe fiecare pozitie din coada e o structura neocupata
	for(i=0;i<TimingQueueSize;i++)
		TimerQueue[i].pointerFct = NULL;
    22a4:	fc 01       	movw	r30, r24
    22a6:	ee 0f       	add	r30, r30
    22a8:	ff 1f       	adc	r31, r31
    22aa:	9c 01       	movw	r18, r24
    22ac:	22 0f       	add	r18, r18
    22ae:	33 1f       	adc	r19, r19
    22b0:	22 0f       	add	r18, r18
    22b2:	33 1f       	adc	r19, r19
    22b4:	22 0f       	add	r18, r18
    22b6:	33 1f       	adc	r19, r19
    22b8:	e2 0f       	add	r30, r18
    22ba:	f3 1f       	adc	r31, r19
    22bc:	eb 52       	subi	r30, 0x2B	; 43
    22be:	fb 4f       	sbci	r31, 0xFB	; 251
    22c0:	11 86       	std	Z+9, r1	; 0x09
    22c2:	10 86       	std	Z+8, r1	; 0x08
    22c4:	01 96       	adiw	r24, 0x01	; 1


void initTimeQueue(){
	uint8_t i;
	// initializez toti pointerii cu 0, adica pe fiecare pozitie din coada e o structura neocupata
	for(i=0;i<TimingQueueSize;i++)
    22c6:	84 31       	cpi	r24, 0x14	; 20
    22c8:	91 05       	cpc	r25, r1
    22ca:	61 f7       	brne	.-40     	; 0x22a4 <initTimeQueue+0x4>
		TimerQueue[i].pointerFct = NULL;
	TimingQueueTop = 0;
    22cc:	10 92 a7 05 	sts	0x05A7, r1
    22d0:	08 95       	ret

000022d2 <initTiming>:
	//blinkA1();
}

void initTiming()
{
	timerClocks=0;
    22d2:	10 92 d1 04 	sts	0x04D1, r1
    22d6:	10 92 d2 04 	sts	0x04D2, r1
    22da:	10 92 d3 04 	sts	0x04D3, r1
    22de:	10 92 d4 04 	sts	0x04D4, r1
	initTimeQueue();
    22e2:	0e 94 50 11 	call	0x22a0	; 0x22a0 <initTimeQueue>
	TIMSK1|=(1<<TOIE1);
    22e6:	ef e6       	ldi	r30, 0x6F	; 111
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	81 60       	ori	r24, 0x01	; 1
    22ee:	80 83       	st	Z, r24
	TCNT1 = 0x00;
    22f0:	10 92 85 00 	sts	0x0085, r1
    22f4:	10 92 84 00 	sts	0x0084, r1
	TCCR1B = 0x01;
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	80 93 81 00 	sts	0x0081, r24
    22fe:	08 95       	ret

00002300 <addEntryToTimerQueue>:
		TimerQueue[i].pointerFct = NULL;
	TimingQueueTop = 0;
}

// delay e in microsecunde (10^-6 secunde)
void addEntryToTimerQueue(uint8_t (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
    2300:	0f 93       	push	r16
    2302:	1f 93       	push	r17
    2304:	cf 93       	push	r28
    2306:	df 93       	push	r29
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    230c:	ce 56       	subi	r28, 0x6E	; 110
    230e:	d1 09       	sbc	r29, r1
    2310:	0f b6       	in	r0, 0x3f	; 63
    2312:	f8 94       	cli
    2314:	de bf       	out	0x3e, r29	; 62
    2316:	0f be       	out	0x3f, r0	; 63
    2318:	cd bf       	out	0x3d, r28	; 61
	
	
	//construire entry pentru functia curenta 
	queueEntry thisEntry;
	thisEntry.delay = _delay;
	thisEntry.repeatDelay = _repeat ? _delay : 0;
    231a:	21 11       	cpse	r18, r1
    231c:	05 c0       	rjmp	.+10     	; 0x2328 <addEntryToTimerQueue+0x28>
    231e:	b0 e0       	ldi	r27, 0x00	; 0
    2320:	a0 e0       	ldi	r26, 0x00	; 0
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	e0 e0       	ldi	r30, 0x00	; 0
    2326:	04 c0       	rjmp	.+8      	; 0x2330 <addEntryToTimerQueue+0x30>
    2328:	b4 2f       	mov	r27, r20
    232a:	a5 2f       	mov	r26, r21
    232c:	f6 2f       	mov	r31, r22
    232e:	e7 2f       	mov	r30, r23
	thisEntry.pointerFct = _theFct;	
	TimerQueue[TimingQueueTop] = thisEntry;
    2330:	20 91 a7 05 	lds	r18, 0x05A7
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	49 83       	std	Y+1, r20	; 0x01
    2338:	5a 83       	std	Y+2, r21	; 0x02
    233a:	6b 83       	std	Y+3, r22	; 0x03
    233c:	7c 83       	std	Y+4, r23	; 0x04
    233e:	bd 83       	std	Y+5, r27	; 0x05
    2340:	ae 83       	std	Y+6, r26	; 0x06
    2342:	ff 83       	std	Y+7, r31	; 0x07
    2344:	e8 87       	std	Y+8, r30	; 0x08
    2346:	9a 87       	std	Y+10, r25	; 0x0a
    2348:	89 87       	std	Y+9, r24	; 0x09
    234a:	d9 01       	movw	r26, r18
    234c:	aa 0f       	add	r26, r26
    234e:	bb 1f       	adc	r27, r27
    2350:	22 0f       	add	r18, r18
    2352:	33 1f       	adc	r19, r19
    2354:	22 0f       	add	r18, r18
    2356:	33 1f       	adc	r19, r19
    2358:	22 0f       	add	r18, r18
    235a:	33 1f       	adc	r19, r19
    235c:	a2 0f       	add	r26, r18
    235e:	b3 1f       	adc	r27, r19
    2360:	ab 52       	subi	r26, 0x2B	; 43
    2362:	bb 4f       	sbci	r27, 0xFB	; 251
    2364:	8a e0       	ldi	r24, 0x0A	; 10
    2366:	fe 01       	movw	r30, r28
    2368:	31 96       	adiw	r30, 0x01	; 1
    236a:	01 90       	ld	r0, Z+
    236c:	0d 92       	st	X+, r0
    236e:	8a 95       	dec	r24
    2370:	e1 f7       	brne	.-8      	; 0x236a <addEntryToTimerQueue+0x6a>
	
	TimingQueueTop++;
    2372:	80 91 a7 05 	lds	r24, 0x05A7
    2376:	8f 5f       	subi	r24, 0xFF	; 255
    2378:	80 93 a7 05 	sts	0x05A7, r24
	
	if(DEBUGGING){
    237c:	80 91 46 04 	lds	r24, 0x0446
    2380:	80 ff       	sbrs	r24, 0
    2382:	33 c0       	rjmp	.+102    	; 0x23ea <addEntryToTimerQueue+0xea>
		char msg[100];		
		sprintf(msg, "Entry adaugat in coada! la index %d si cu delay: %lu", TimingQueueTop-1, TimerQueue[TimingQueueTop-1].delay);
    2384:	80 91 a7 05 	lds	r24, 0x05A7
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	fc 01       	movw	r30, r24
    238e:	ee 0f       	add	r30, r30
    2390:	ff 1f       	adc	r31, r31
    2392:	88 0f       	add	r24, r24
    2394:	99 1f       	adc	r25, r25
    2396:	88 0f       	add	r24, r24
    2398:	99 1f       	adc	r25, r25
    239a:	88 0f       	add	r24, r24
    239c:	99 1f       	adc	r25, r25
    239e:	e8 0f       	add	r30, r24
    23a0:	f9 1f       	adc	r31, r25
    23a2:	eb 52       	subi	r30, 0x2B	; 43
    23a4:	fb 4f       	sbci	r31, 0xFB	; 251
    23a6:	80 81       	ld	r24, Z
    23a8:	91 81       	ldd	r25, Z+1	; 0x01
    23aa:	a2 81       	ldd	r26, Z+2	; 0x02
    23ac:	b3 81       	ldd	r27, Z+3	; 0x03
    23ae:	20 91 a7 05 	lds	r18, 0x05A7
    23b2:	bf 93       	push	r27
    23b4:	af 93       	push	r26
    23b6:	9f 93       	push	r25
    23b8:	8f 93       	push	r24
    23ba:	82 2f       	mov	r24, r18
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	9f 93       	push	r25
    23c2:	8f 93       	push	r24
    23c4:	82 e3       	ldi	r24, 0x32	; 50
    23c6:	93 e0       	ldi	r25, 0x03	; 3
    23c8:	9f 93       	push	r25
    23ca:	8f 93       	push	r24
    23cc:	8e 01       	movw	r16, r28
    23ce:	05 5f       	subi	r16, 0xF5	; 245
    23d0:	1f 4f       	sbci	r17, 0xFF	; 255
    23d2:	1f 93       	push	r17
    23d4:	0f 93       	push	r16
    23d6:	0e 94 77 1c 	call	0x38ee	; 0x38ee <sprintf>
		BTTransmitStr(msg);
    23da:	c8 01       	movw	r24, r16
    23dc:	0e 94 a9 01 	call	0x352	; 0x352 <BTTransmitStr>
    23e0:	0f b6       	in	r0, 0x3f	; 63
    23e2:	f8 94       	cli
    23e4:	de bf       	out	0x3e, r29	; 62
    23e6:	0f be       	out	0x3f, r0	; 63
    23e8:	cd bf       	out	0x3d, r28	; 61
	}
	//sei();
}
    23ea:	c2 59       	subi	r28, 0x92	; 146
    23ec:	df 4f       	sbci	r29, 0xFF	; 255
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	f8 94       	cli
    23f2:	de bf       	out	0x3e, r29	; 62
    23f4:	0f be       	out	0x3f, r0	; 63
    23f6:	cd bf       	out	0x3d, r28	; 61
    23f8:	df 91       	pop	r29
    23fa:	cf 91       	pop	r28
    23fc:	1f 91       	pop	r17
    23fe:	0f 91       	pop	r16
    2400:	08 95       	ret

00002402 <existsEntryInTimerQueue>:
	return c;
}

uint8_t existsEntryInTimerQueue(uint8_t (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
    2402:	20 91 a7 05 	lds	r18, 0x05A7
    2406:	22 23       	and	r18, r18
    2408:	21 f1       	breq	.+72     	; 0x2452 <existsEntryInTimerQueue+0x50>
		if(TimerQueue[i].pointerFct == _theFct){			
    240a:	20 91 dd 04 	lds	r18, 0x04DD
    240e:	30 91 de 04 	lds	r19, 0x04DE
    2412:	28 17       	cp	r18, r24
    2414:	39 07       	cpc	r19, r25
    2416:	f9 f0       	breq	.+62     	; 0x2456 <existsEntryInTimerQueue+0x54>
	return c;
}

uint8_t existsEntryInTimerQueue(uint8_t (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
    2418:	40 e0       	ldi	r20, 0x00	; 0
    241a:	14 c0       	rjmp	.+40     	; 0x2444 <existsEntryInTimerQueue+0x42>
		if(TimerQueue[i].pointerFct == _theFct){			
    241c:	24 2f       	mov	r18, r20
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	f9 01       	movw	r30, r18
    2422:	ee 0f       	add	r30, r30
    2424:	ff 1f       	adc	r31, r31
    2426:	22 0f       	add	r18, r18
    2428:	33 1f       	adc	r19, r19
    242a:	22 0f       	add	r18, r18
    242c:	33 1f       	adc	r19, r19
    242e:	22 0f       	add	r18, r18
    2430:	33 1f       	adc	r19, r19
    2432:	e2 0f       	add	r30, r18
    2434:	f3 1f       	adc	r31, r19
    2436:	eb 52       	subi	r30, 0x2B	; 43
    2438:	fb 4f       	sbci	r31, 0xFB	; 251
    243a:	20 85       	ldd	r18, Z+8	; 0x08
    243c:	31 85       	ldd	r19, Z+9	; 0x09
    243e:	28 17       	cp	r18, r24
    2440:	39 07       	cpc	r19, r25
    2442:	59 f0       	breq	.+22     	; 0x245a <existsEntryInTimerQueue+0x58>
	return c;
}

uint8_t existsEntryInTimerQueue(uint8_t (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
    2444:	4f 5f       	subi	r20, 0xFF	; 255
    2446:	20 91 a7 05 	lds	r18, 0x05A7
    244a:	42 17       	cp	r20, r18
    244c:	38 f3       	brcs	.-50     	; 0x241c <existsEntryInTimerQueue+0x1a>
		if(TimerQueue[i].pointerFct == _theFct){			
			return YES;
		}
	}
	return NO;
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	08 95       	ret
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	08 95       	ret

uint8_t existsEntryInTimerQueue(uint8_t (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
		if(TimerQueue[i].pointerFct == _theFct){			
			return YES;
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	08 95       	ret
    245a:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return NO;
}
    245c:	08 95       	ret

0000245e <addEntryIfNotExists>:

void addEntryIfNotExists(uint8_t (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
    245e:	0f 93       	push	r16
    2460:	1f 93       	push	r17
    2462:	cf 93       	push	r28
    2464:	df 93       	push	r29
    2466:	c2 2f       	mov	r28, r18
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
    2468:	20 91 a7 05 	lds	r18, 0x05A7
    246c:	22 23       	and	r18, r18
    246e:	09 f4       	brne	.+2      	; 0x2472 <addEntryIfNotExists+0x14>
    2470:	59 c0       	rjmp	.+178    	; 0x2524 <addEntryIfNotExists+0xc6>
		if(TimerQueue[i].pointerFct == _theFct){
    2472:	e0 91 dd 04 	lds	r30, 0x04DD
    2476:	f0 91 de 04 	lds	r31, 0x04DE
    247a:	e8 17       	cp	r30, r24
    247c:	f9 07       	cpc	r31, r25
    247e:	09 f0       	breq	.+2      	; 0x2482 <addEntryIfNotExists+0x24>
    2480:	49 c0       	rjmp	.+146    	; 0x2514 <addEntryIfNotExists+0xb6>
    2482:	18 c0       	rjmp	.+48     	; 0x24b4 <addEntryIfNotExists+0x56>
    2484:	ed 2f       	mov	r30, r29
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	8f 01       	movw	r16, r30
    248a:	00 0f       	add	r16, r16
    248c:	11 1f       	adc	r17, r17
    248e:	df 01       	movw	r26, r30
    2490:	aa 0f       	add	r26, r26
    2492:	bb 1f       	adc	r27, r27
    2494:	aa 0f       	add	r26, r26
    2496:	bb 1f       	adc	r27, r27
    2498:	aa 0f       	add	r26, r26
    249a:	bb 1f       	adc	r27, r27
    249c:	a0 0f       	add	r26, r16
    249e:	b1 1f       	adc	r27, r17
    24a0:	ab 52       	subi	r26, 0x2B	; 43
    24a2:	bb 4f       	sbci	r27, 0xFB	; 251
    24a4:	18 96       	adiw	r26, 0x08	; 8
    24a6:	0d 90       	ld	r0, X+
    24a8:	bc 91       	ld	r27, X
    24aa:	a0 2d       	mov	r26, r0
    24ac:	a8 17       	cp	r26, r24
    24ae:	b9 07       	cpc	r27, r25
    24b0:	91 f5       	brne	.+100    	; 0x2516 <addEntryIfNotExists+0xb8>
    24b2:	03 c0       	rjmp	.+6      	; 0x24ba <addEntryIfNotExists+0x5c>
    24b4:	e0 e0       	ldi	r30, 0x00	; 0
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
	return NO;
}

void addEntryIfNotExists(uint8_t (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
    24b8:	d0 e0       	ldi	r29, 0x00	; 0
		if(TimerQueue[i].pointerFct == _theFct){
			TimerQueue[i].delay = _delay;
    24ba:	9f 01       	movw	r18, r30
    24bc:	22 0f       	add	r18, r18
    24be:	33 1f       	adc	r19, r19
    24c0:	22 0f       	add	r18, r18
    24c2:	33 1f       	adc	r19, r19
    24c4:	22 0f       	add	r18, r18
    24c6:	33 1f       	adc	r19, r19
    24c8:	df 01       	movw	r26, r30
    24ca:	aa 0f       	add	r26, r26
    24cc:	bb 1f       	adc	r27, r27
    24ce:	a2 0f       	add	r26, r18
    24d0:	b3 1f       	adc	r27, r19
    24d2:	ab 52       	subi	r26, 0x2B	; 43
    24d4:	bb 4f       	sbci	r27, 0xFB	; 251
    24d6:	4d 93       	st	X+, r20
    24d8:	5d 93       	st	X+, r21
    24da:	6d 93       	st	X+, r22
    24dc:	7c 93       	st	X, r23
    24de:	13 97       	sbiw	r26, 0x03	; 3
			TimerQueue[i].repeatDelay = _repeat?_delay:0;
    24e0:	c1 11       	cpse	r28, r1
    24e2:	04 c0       	rjmp	.+8      	; 0x24ec <addEntryIfNotExists+0x8e>
    24e4:	00 e0       	ldi	r16, 0x00	; 0
    24e6:	10 e0       	ldi	r17, 0x00	; 0
    24e8:	98 01       	movw	r18, r16
    24ea:	02 c0       	rjmp	.+4      	; 0x24f0 <addEntryIfNotExists+0x92>
    24ec:	8a 01       	movw	r16, r20
    24ee:	9b 01       	movw	r18, r22
    24f0:	df 01       	movw	r26, r30
    24f2:	aa 0f       	add	r26, r26
    24f4:	bb 1f       	adc	r27, r27
    24f6:	ee 0f       	add	r30, r30
    24f8:	ff 1f       	adc	r31, r31
    24fa:	ee 0f       	add	r30, r30
    24fc:	ff 1f       	adc	r31, r31
    24fe:	ee 0f       	add	r30, r30
    2500:	ff 1f       	adc	r31, r31
    2502:	ea 0f       	add	r30, r26
    2504:	fb 1f       	adc	r31, r27
    2506:	eb 52       	subi	r30, 0x2B	; 43
    2508:	fb 4f       	sbci	r31, 0xFB	; 251
    250a:	04 83       	std	Z+4, r16	; 0x04
    250c:	15 83       	std	Z+5, r17	; 0x05
    250e:	26 83       	std	Z+6, r18	; 0x06
    2510:	37 83       	std	Z+7, r19	; 0x07
			break;
    2512:	09 c0       	rjmp	.+18     	; 0x2526 <addEntryIfNotExists+0xc8>
	return NO;
}

void addEntryIfNotExists(uint8_t (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
    2514:	d0 e0       	ldi	r29, 0x00	; 0
    2516:	df 5f       	subi	r29, 0xFF	; 255
    2518:	20 91 a7 05 	lds	r18, 0x05A7
    251c:	d2 17       	cp	r29, r18
    251e:	08 f4       	brcc	.+2      	; 0x2522 <addEntryIfNotExists+0xc4>
    2520:	b1 cf       	rjmp	.-158    	; 0x2484 <addEntryIfNotExists+0x26>
    2522:	01 c0       	rjmp	.+2      	; 0x2526 <addEntryIfNotExists+0xc8>
    2524:	d0 e0       	ldi	r29, 0x00	; 0
			TimerQueue[i].delay = _delay;
			TimerQueue[i].repeatDelay = _repeat?_delay:0;
			break;
		}
	}	
	if(i==TimingQueueTop)
    2526:	20 91 a7 05 	lds	r18, 0x05A7
    252a:	d2 13       	cpse	r29, r18
    252c:	03 c0       	rjmp	.+6      	; 0x2534 <addEntryIfNotExists+0xd6>
		addEntryToTimerQueue(_theFct, _delay, _repeat);
    252e:	2c 2f       	mov	r18, r28
    2530:	0e 94 80 11 	call	0x2300	; 0x2300 <addEntryToTimerQueue>
}
    2534:	df 91       	pop	r29
    2536:	cf 91       	pop	r28
    2538:	1f 91       	pop	r17
    253a:	0f 91       	pop	r16
    253c:	08 95       	ret

0000253e <timePassed>:


//se apeleaza din intrerupere (cate microsecunde au trecut)
//pentru fiecare functie(valida) din queue se scade din delay numarul de microsecunde care a trecut

void timePassed(uint32_t passed_us){
    253e:	8f 92       	push	r8
    2540:	9f 92       	push	r9
    2542:	af 92       	push	r10
    2544:	bf 92       	push	r11
    2546:	ff 92       	push	r15
    2548:	0f 93       	push	r16
    254a:	1f 93       	push	r17
    254c:	cf 93       	push	r28
    254e:	df 93       	push	r29
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
    2550:	20 91 a7 05 	lds	r18, 0x05A7
    2554:	22 23       	and	r18, r18
    2556:	09 f4       	brne	.+2      	; 0x255a <timePassed+0x1c>
    2558:	7a c0       	rjmp	.+244    	; 0x264e <timePassed+0x110>
    255a:	c0 e0       	ldi	r28, 0x00	; 0
		if(TimerQueue[i].pointerFct != NULL){
			if(TimerQueue[i].delay > 0)
				TimerQueue[i].delay = TimerQueue[i].delay > passed_us ? TimerQueue[i].delay - passed_us : 0;
    255c:	f1 2c       	mov	r15, r1
    255e:	00 e0       	ldi	r16, 0x00	; 0
    2560:	10 e0       	ldi	r17, 0x00	; 0
    2562:	d0 e0       	ldi	r29, 0x00	; 0
//pentru fiecare functie(valida) din queue se scade din delay numarul de microsecunde care a trecut

void timePassed(uint32_t passed_us){
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
		if(TimerQueue[i].pointerFct != NULL){
    2564:	2c 2f       	mov	r18, r28
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	f9 01       	movw	r30, r18
    256a:	ee 0f       	add	r30, r30
    256c:	ff 1f       	adc	r31, r31
    256e:	a9 01       	movw	r20, r18
    2570:	44 0f       	add	r20, r20
    2572:	55 1f       	adc	r21, r21
    2574:	44 0f       	add	r20, r20
    2576:	55 1f       	adc	r21, r21
    2578:	44 0f       	add	r20, r20
    257a:	55 1f       	adc	r21, r21
    257c:	e4 0f       	add	r30, r20
    257e:	f5 1f       	adc	r31, r21
    2580:	eb 52       	subi	r30, 0x2B	; 43
    2582:	fb 4f       	sbci	r31, 0xFB	; 251
    2584:	40 85       	ldd	r20, Z+8	; 0x08
    2586:	51 85       	ldd	r21, Z+9	; 0x09
    2588:	45 2b       	or	r20, r21
    258a:	09 f4       	brne	.+2      	; 0x258e <timePassed+0x50>
    258c:	5a c0       	rjmp	.+180    	; 0x2642 <timePassed+0x104>
			if(TimerQueue[i].delay > 0)
    258e:	a9 01       	movw	r20, r18
    2590:	44 0f       	add	r20, r20
    2592:	55 1f       	adc	r21, r21
    2594:	44 0f       	add	r20, r20
    2596:	55 1f       	adc	r21, r21
    2598:	44 0f       	add	r20, r20
    259a:	55 1f       	adc	r21, r21
    259c:	f9 01       	movw	r30, r18
    259e:	ee 0f       	add	r30, r30
    25a0:	ff 1f       	adc	r31, r31
    25a2:	e4 0f       	add	r30, r20
    25a4:	f5 1f       	adc	r31, r21
    25a6:	eb 52       	subi	r30, 0x2B	; 43
    25a8:	fb 4f       	sbci	r31, 0xFB	; 251
    25aa:	80 80       	ld	r8, Z
    25ac:	91 80       	ldd	r9, Z+1	; 0x01
    25ae:	a2 80       	ldd	r10, Z+2	; 0x02
    25b0:	b3 80       	ldd	r11, Z+3	; 0x03
    25b2:	89 28       	or	r8, r9
    25b4:	8a 28       	or	r8, r10
    25b6:	8b 28       	or	r8, r11
    25b8:	09 f4       	brne	.+2      	; 0x25bc <timePassed+0x7e>
    25ba:	43 c0       	rjmp	.+134    	; 0x2642 <timePassed+0x104>
				TimerQueue[i].delay = TimerQueue[i].delay > passed_us ? TimerQueue[i].delay - passed_us : 0;
    25bc:	a9 01       	movw	r20, r18
    25be:	44 0f       	add	r20, r20
    25c0:	55 1f       	adc	r21, r21
    25c2:	44 0f       	add	r20, r20
    25c4:	55 1f       	adc	r21, r21
    25c6:	44 0f       	add	r20, r20
    25c8:	55 1f       	adc	r21, r21
    25ca:	f9 01       	movw	r30, r18
    25cc:	ee 0f       	add	r30, r30
    25ce:	ff 1f       	adc	r31, r31
    25d0:	e4 0f       	add	r30, r20
    25d2:	f5 1f       	adc	r31, r21
    25d4:	eb 52       	subi	r30, 0x2B	; 43
    25d6:	fb 4f       	sbci	r31, 0xFB	; 251
    25d8:	80 80       	ld	r8, Z
    25da:	91 80       	ldd	r9, Z+1	; 0x01
    25dc:	a2 80       	ldd	r10, Z+2	; 0x02
    25de:	b3 80       	ldd	r11, Z+3	; 0x03
    25e0:	68 15       	cp	r22, r8
    25e2:	79 05       	cpc	r23, r9
    25e4:	8a 05       	cpc	r24, r10
    25e6:	9b 05       	cpc	r25, r11
    25e8:	b8 f4       	brcc	.+46     	; 0x2618 <timePassed+0xda>
    25ea:	a9 01       	movw	r20, r18
    25ec:	44 0f       	add	r20, r20
    25ee:	55 1f       	adc	r21, r21
    25f0:	44 0f       	add	r20, r20
    25f2:	55 1f       	adc	r21, r21
    25f4:	44 0f       	add	r20, r20
    25f6:	55 1f       	adc	r21, r21
    25f8:	f9 01       	movw	r30, r18
    25fa:	ee 0f       	add	r30, r30
    25fc:	ff 1f       	adc	r31, r31
    25fe:	e4 0f       	add	r30, r20
    2600:	f5 1f       	adc	r31, r21
    2602:	eb 52       	subi	r30, 0x2B	; 43
    2604:	fb 4f       	sbci	r31, 0xFB	; 251
    2606:	80 80       	ld	r8, Z
    2608:	91 80       	ldd	r9, Z+1	; 0x01
    260a:	a2 80       	ldd	r10, Z+2	; 0x02
    260c:	b3 80       	ldd	r11, Z+3	; 0x03
    260e:	86 1a       	sub	r8, r22
    2610:	97 0a       	sbc	r9, r23
    2612:	a8 0a       	sbc	r10, r24
    2614:	b9 0a       	sbc	r11, r25
    2616:	04 c0       	rjmp	.+8      	; 0x2620 <timePassed+0xe2>
    2618:	8f 2c       	mov	r8, r15
    261a:	90 2e       	mov	r9, r16
    261c:	a1 2e       	mov	r10, r17
    261e:	bd 2e       	mov	r11, r29
    2620:	f9 01       	movw	r30, r18
    2622:	ee 0f       	add	r30, r30
    2624:	ff 1f       	adc	r31, r31
    2626:	22 0f       	add	r18, r18
    2628:	33 1f       	adc	r19, r19
    262a:	22 0f       	add	r18, r18
    262c:	33 1f       	adc	r19, r19
    262e:	22 0f       	add	r18, r18
    2630:	33 1f       	adc	r19, r19
    2632:	e2 0f       	add	r30, r18
    2634:	f3 1f       	adc	r31, r19
    2636:	eb 52       	subi	r30, 0x2B	; 43
    2638:	fb 4f       	sbci	r31, 0xFB	; 251
    263a:	80 82       	st	Z, r8
    263c:	91 82       	std	Z+1, r9	; 0x01
    263e:	a2 82       	std	Z+2, r10	; 0x02
    2640:	b3 82       	std	Z+3, r11	; 0x03
//se apeleaza din intrerupere (cate microsecunde au trecut)
//pentru fiecare functie(valida) din queue se scade din delay numarul de microsecunde care a trecut

void timePassed(uint32_t passed_us){
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
    2642:	cf 5f       	subi	r28, 0xFF	; 255
    2644:	20 91 a7 05 	lds	r18, 0x05A7
    2648:	c2 17       	cp	r28, r18
    264a:	08 f4       	brcc	.+2      	; 0x264e <timePassed+0x110>
    264c:	8b cf       	rjmp	.-234    	; 0x2564 <timePassed+0x26>
		if(TimerQueue[i].pointerFct != NULL){
			if(TimerQueue[i].delay > 0)
				TimerQueue[i].delay = TimerQueue[i].delay > passed_us ? TimerQueue[i].delay - passed_us : 0;
		}
	}
}
    264e:	df 91       	pop	r29
    2650:	cf 91       	pop	r28
    2652:	1f 91       	pop	r17
    2654:	0f 91       	pop	r16
    2656:	ff 90       	pop	r15
    2658:	bf 90       	pop	r11
    265a:	af 90       	pop	r10
    265c:	9f 90       	pop	r9
    265e:	8f 90       	pop	r8
    2660:	08 95       	ret

00002662 <__vector_15>:
void timePassed(uint32_t passed_us);
void shiftTimeQueue(uint8_t i, char *reason);
void initTimeQueue();
volatile uint32_t timerClocks;
ISR(TIMER1_OVF_vect)// Din datasheet timerq(are 8 mh) => 8/8= 1 microsecunde
{
    2662:	1f 92       	push	r1
    2664:	0f 92       	push	r0
    2666:	0f b6       	in	r0, 0x3f	; 63
    2668:	0f 92       	push	r0
    266a:	11 24       	eor	r1, r1
    266c:	2f 93       	push	r18
    266e:	3f 93       	push	r19
    2670:	4f 93       	push	r20
    2672:	5f 93       	push	r21
    2674:	6f 93       	push	r22
    2676:	7f 93       	push	r23
    2678:	8f 93       	push	r24
    267a:	9f 93       	push	r25
    267c:	af 93       	push	r26
    267e:	bf 93       	push	r27
    2680:	ef 93       	push	r30
    2682:	ff 93       	push	r31
	timerClocks++;
    2684:	80 91 d1 04 	lds	r24, 0x04D1
    2688:	90 91 d2 04 	lds	r25, 0x04D2
    268c:	a0 91 d3 04 	lds	r26, 0x04D3
    2690:	b0 91 d4 04 	lds	r27, 0x04D4
    2694:	01 96       	adiw	r24, 0x01	; 1
    2696:	a1 1d       	adc	r26, r1
    2698:	b1 1d       	adc	r27, r1
    269a:	80 93 d1 04 	sts	0x04D1, r24
    269e:	90 93 d2 04 	sts	0x04D2, r25
    26a2:	a0 93 d3 04 	sts	0x04D3, r26
    26a6:	b0 93 d4 04 	sts	0x04D4, r27
	timePassed(8210);
    26aa:	62 e1       	ldi	r22, 0x12	; 18
    26ac:	70 e2       	ldi	r23, 0x20	; 32
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	0e 94 9f 12 	call	0x253e	; 0x253e <timePassed>
	//blinkA1();
}
    26b6:	ff 91       	pop	r31
    26b8:	ef 91       	pop	r30
    26ba:	bf 91       	pop	r27
    26bc:	af 91       	pop	r26
    26be:	9f 91       	pop	r25
    26c0:	8f 91       	pop	r24
    26c2:	7f 91       	pop	r23
    26c4:	6f 91       	pop	r22
    26c6:	5f 91       	pop	r21
    26c8:	4f 91       	pop	r20
    26ca:	3f 91       	pop	r19
    26cc:	2f 91       	pop	r18
    26ce:	0f 90       	pop	r0
    26d0:	0f be       	out	0x3f, r0	; 63
    26d2:	0f 90       	pop	r0
    26d4:	1f 90       	pop	r1
    26d6:	18 95       	reti

000026d8 <shiftTimeQueue>:
		}
	}
	//sei();
}
void shiftTimeQueue(uint8_t i, char *reason){
	if(DEBUGGING){
    26d8:	90 91 46 04 	lds	r25, 0x0446
		//char str[50];
		//sprintf(str, "shift i=%d (%s)", i, reason);
		//BTTransmitStr(str);
	}
	for(; i<TimingQueueTop; i++)
    26dc:	90 91 a7 05 	lds	r25, 0x05A7
    26e0:	89 17       	cp	r24, r25
    26e2:	50 f5       	brcc	.+84     	; 0x2738 <shiftTimeQueue+0x60>
		TimerQueue[i] = TimerQueue[i+1];
    26e4:	6a e0       	ldi	r22, 0x0A	; 10
    26e6:	28 2f       	mov	r18, r24
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	a9 01       	movw	r20, r18
    26ec:	4f 5f       	subi	r20, 0xFF	; 255
    26ee:	5f 4f       	sbci	r21, 0xFF	; 255
    26f0:	d9 01       	movw	r26, r18
    26f2:	aa 0f       	add	r26, r26
    26f4:	bb 1f       	adc	r27, r27
    26f6:	22 0f       	add	r18, r18
    26f8:	33 1f       	adc	r19, r19
    26fa:	22 0f       	add	r18, r18
    26fc:	33 1f       	adc	r19, r19
    26fe:	22 0f       	add	r18, r18
    2700:	33 1f       	adc	r19, r19
    2702:	a2 0f       	add	r26, r18
    2704:	b3 1f       	adc	r27, r19
    2706:	ab 52       	subi	r26, 0x2B	; 43
    2708:	bb 4f       	sbci	r27, 0xFB	; 251
    270a:	fa 01       	movw	r30, r20
    270c:	ee 0f       	add	r30, r30
    270e:	ff 1f       	adc	r31, r31
    2710:	44 0f       	add	r20, r20
    2712:	55 1f       	adc	r21, r21
    2714:	44 0f       	add	r20, r20
    2716:	55 1f       	adc	r21, r21
    2718:	44 0f       	add	r20, r20
    271a:	55 1f       	adc	r21, r21
    271c:	e4 0f       	add	r30, r20
    271e:	f5 1f       	adc	r31, r21
    2720:	eb 52       	subi	r30, 0x2B	; 43
    2722:	fb 4f       	sbci	r31, 0xFB	; 251
    2724:	96 2f       	mov	r25, r22
    2726:	01 90       	ld	r0, Z+
    2728:	0d 92       	st	X+, r0
    272a:	9a 95       	dec	r25
    272c:	e1 f7       	brne	.-8      	; 0x2726 <shiftTimeQueue+0x4e>
	if(DEBUGGING){
		//char str[50];
		//sprintf(str, "shift i=%d (%s)", i, reason);
		//BTTransmitStr(str);
	}
	for(; i<TimingQueueTop; i++)
    272e:	8f 5f       	subi	r24, 0xFF	; 255
    2730:	90 91 a7 05 	lds	r25, 0x05A7
    2734:	89 17       	cp	r24, r25
    2736:	b8 f2       	brcs	.-82     	; 0x26e6 <shiftTimeQueue+0xe>
		TimerQueue[i] = TimerQueue[i+1];
	TimingQueueTop--;
    2738:	80 91 a7 05 	lds	r24, 0x05A7
    273c:	81 50       	subi	r24, 0x01	; 1
    273e:	80 93 a7 05 	sts	0x05A7, r24
    2742:	08 95       	ret

00002744 <removeEntryFromTimerQueue>:
		sprintf(msg, "Entry adaugat in coada! la index %d si cu delay: %lu", TimingQueueTop-1, TimerQueue[TimingQueueTop-1].delay);
		BTTransmitStr(msg);
	}
	//sei();
}
uint8_t removeEntryFromTimerQueue(uint8_t (*_theFct) (void)){
    2744:	af 92       	push	r10
    2746:	bf 92       	push	r11
    2748:	cf 92       	push	r12
    274a:	df 92       	push	r13
    274c:	ef 92       	push	r14
    274e:	ff 92       	push	r15
    2750:	0f 93       	push	r16
    2752:	1f 93       	push	r17
    2754:	cf 93       	push	r28
    2756:	df 93       	push	r29
    2758:	cd b7       	in	r28, 0x3d	; 61
    275a:	de b7       	in	r29, 0x3e	; 62
    275c:	c4 56       	subi	r28, 0x64	; 100
    275e:	d1 09       	sbc	r29, r1
    2760:	0f b6       	in	r0, 0x3f	; 63
    2762:	f8 94       	cli
    2764:	de bf       	out	0x3e, r29	; 62
    2766:	0f be       	out	0x3f, r0	; 63
    2768:	cd bf       	out	0x3d, r28	; 61
    276a:	8c 01       	movw	r16, r24
	uint8_t i, c=0;
	for(i=0; i<TimingQueueTop; i++){
    276c:	80 91 a7 05 	lds	r24, 0x05A7
    2770:	88 23       	and	r24, r24
    2772:	09 f4       	brne	.+2      	; 0x2776 <removeEntryFromTimerQueue+0x32>
    2774:	42 c0       	rjmp	.+132    	; 0x27fa <removeEntryFromTimerQueue+0xb6>
		BTTransmitStr(msg);
	}
	//sei();
}
uint8_t removeEntryFromTimerQueue(uint8_t (*_theFct) (void)){
	uint8_t i, c=0;
    2776:	a1 2c       	mov	r10, r1
	for(i=0; i<TimingQueueTop; i++){
    2778:	b1 2c       	mov	r11, r1
		if(TimerQueue[i].pointerFct == _theFct){
			if(DEBUGGING){
				char msg[100];
				sprintf(msg, "Entry sters din coada. de pe pozitia %u", i);
    277a:	0f 2e       	mov	r0, r31
    277c:	f7 e6       	ldi	r31, 0x67	; 103
    277e:	cf 2e       	mov	r12, r31
    2780:	f3 e0       	ldi	r31, 0x03	; 3
    2782:	df 2e       	mov	r13, r31
    2784:	f0 2d       	mov	r31, r0
    2786:	ce 01       	movw	r24, r28
    2788:	01 96       	adiw	r24, 0x01	; 1
    278a:	7c 01       	movw	r14, r24
	//sei();
}
uint8_t removeEntryFromTimerQueue(uint8_t (*_theFct) (void)){
	uint8_t i, c=0;
	for(i=0; i<TimingQueueTop; i++){
		if(TimerQueue[i].pointerFct == _theFct){
    278c:	2b 2d       	mov	r18, r11
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	f9 01       	movw	r30, r18
    2792:	ee 0f       	add	r30, r30
    2794:	ff 1f       	adc	r31, r31
    2796:	c9 01       	movw	r24, r18
    2798:	88 0f       	add	r24, r24
    279a:	99 1f       	adc	r25, r25
    279c:	88 0f       	add	r24, r24
    279e:	99 1f       	adc	r25, r25
    27a0:	88 0f       	add	r24, r24
    27a2:	99 1f       	adc	r25, r25
    27a4:	e8 0f       	add	r30, r24
    27a6:	f9 1f       	adc	r31, r25
    27a8:	eb 52       	subi	r30, 0x2B	; 43
    27aa:	fb 4f       	sbci	r31, 0xFB	; 251
    27ac:	40 85       	ldd	r20, Z+8	; 0x08
    27ae:	51 85       	ldd	r21, Z+9	; 0x09
    27b0:	40 17       	cp	r20, r16
    27b2:	51 07       	cpc	r21, r17
    27b4:	e1 f4       	brne	.+56     	; 0x27ee <removeEntryFromTimerQueue+0xaa>
			if(DEBUGGING){
    27b6:	80 91 46 04 	lds	r24, 0x0446
    27ba:	80 ff       	sbrs	r24, 0
    27bc:	11 c0       	rjmp	.+34     	; 0x27e0 <removeEntryFromTimerQueue+0x9c>
				char msg[100];
				sprintf(msg, "Entry sters din coada. de pe pozitia %u", i);
    27be:	3f 93       	push	r19
    27c0:	bf 92       	push	r11
    27c2:	df 92       	push	r13
    27c4:	cf 92       	push	r12
    27c6:	ff 92       	push	r15
    27c8:	ef 92       	push	r14
    27ca:	0e 94 77 1c 	call	0x38ee	; 0x38ee <sprintf>
				BTTransmitStr(msg);
    27ce:	c7 01       	movw	r24, r14
    27d0:	0e 94 a9 01 	call	0x352	; 0x352 <BTTransmitStr>
    27d4:	0f 90       	pop	r0
    27d6:	0f 90       	pop	r0
    27d8:	0f 90       	pop	r0
    27da:	0f 90       	pop	r0
    27dc:	0f 90       	pop	r0
    27de:	0f 90       	pop	r0
			}
			shiftTimeQueue(i, "remove function"); 
    27e0:	6f e8       	ldi	r22, 0x8F	; 143
    27e2:	73 e0       	ldi	r23, 0x03	; 3
    27e4:	8b 2d       	mov	r24, r11
    27e6:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <shiftTimeQueue>
			i--;
    27ea:	ba 94       	dec	r11
			c++;
    27ec:	a3 94       	inc	r10
	}
	//sei();
}
uint8_t removeEntryFromTimerQueue(uint8_t (*_theFct) (void)){
	uint8_t i, c=0;
	for(i=0; i<TimingQueueTop; i++){
    27ee:	b3 94       	inc	r11
    27f0:	80 91 a7 05 	lds	r24, 0x05A7
    27f4:	b8 16       	cp	r11, r24
    27f6:	50 f2       	brcs	.-108    	; 0x278c <removeEntryFromTimerQueue+0x48>
    27f8:	01 c0       	rjmp	.+2      	; 0x27fc <removeEntryFromTimerQueue+0xb8>
		BTTransmitStr(msg);
	}
	//sei();
}
uint8_t removeEntryFromTimerQueue(uint8_t (*_theFct) (void)){
	uint8_t i, c=0;
    27fa:	a1 2c       	mov	r10, r1
			i--;
			c++;
		}
	}
	return c;
}
    27fc:	8a 2d       	mov	r24, r10
    27fe:	cc 59       	subi	r28, 0x9C	; 156
    2800:	df 4f       	sbci	r29, 0xFF	; 255
    2802:	0f b6       	in	r0, 0x3f	; 63
    2804:	f8 94       	cli
    2806:	de bf       	out	0x3e, r29	; 62
    2808:	0f be       	out	0x3f, r0	; 63
    280a:	cd bf       	out	0x3d, r28	; 61
    280c:	df 91       	pop	r29
    280e:	cf 91       	pop	r28
    2810:	1f 91       	pop	r17
    2812:	0f 91       	pop	r16
    2814:	ff 90       	pop	r15
    2816:	ef 90       	pop	r14
    2818:	df 90       	pop	r13
    281a:	cf 90       	pop	r12
    281c:	bf 90       	pop	r11
    281e:	af 90       	pop	r10
    2820:	08 95       	ret

00002822 <checkTimeQueue>:
	}
}

//se apeleaza din main loop
//verifica daca sunt functii care trebuie apelate (daca delay-ul lor a ajuns la 0)
void checkTimeQueue(void){
    2822:	1f 93       	push	r17
    2824:	cf 93       	push	r28
    2826:	df 93       	push	r29
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
    2828:	80 91 a7 05 	lds	r24, 0x05A7
    282c:	88 23       	and	r24, r24
    282e:	09 f4       	brne	.+2      	; 0x2832 <checkTimeQueue+0x10>
    2830:	8b c0       	rjmp	.+278    	; 0x2948 <checkTimeQueue+0x126>
    2832:	10 e0       	ldi	r17, 0x00	; 0
		if(TimerQueue[i].pointerFct != NULL){
    2834:	c1 2f       	mov	r28, r17
    2836:	d0 e0       	ldi	r29, 0x00	; 0
    2838:	fe 01       	movw	r30, r28
    283a:	ee 0f       	add	r30, r30
    283c:	ff 1f       	adc	r31, r31
    283e:	ce 01       	movw	r24, r28
    2840:	88 0f       	add	r24, r24
    2842:	99 1f       	adc	r25, r25
    2844:	88 0f       	add	r24, r24
    2846:	99 1f       	adc	r25, r25
    2848:	88 0f       	add	r24, r24
    284a:	99 1f       	adc	r25, r25
    284c:	e8 0f       	add	r30, r24
    284e:	f9 1f       	adc	r31, r25
    2850:	eb 52       	subi	r30, 0x2B	; 43
    2852:	fb 4f       	sbci	r31, 0xFB	; 251
    2854:	20 85       	ldd	r18, Z+8	; 0x08
    2856:	31 85       	ldd	r19, Z+9	; 0x09
    2858:	23 2b       	or	r18, r19
    285a:	09 f4       	brne	.+2      	; 0x285e <checkTimeQueue+0x3c>
    285c:	6f c0       	rjmp	.+222    	; 0x293c <checkTimeQueue+0x11a>
			if(TimerQueue[i].delay == 0){
    285e:	ce 01       	movw	r24, r28
    2860:	88 0f       	add	r24, r24
    2862:	99 1f       	adc	r25, r25
    2864:	88 0f       	add	r24, r24
    2866:	99 1f       	adc	r25, r25
    2868:	88 0f       	add	r24, r24
    286a:	99 1f       	adc	r25, r25
    286c:	fe 01       	movw	r30, r28
    286e:	ee 0f       	add	r30, r30
    2870:	ff 1f       	adc	r31, r31
    2872:	e8 0f       	add	r30, r24
    2874:	f9 1f       	adc	r31, r25
    2876:	eb 52       	subi	r30, 0x2B	; 43
    2878:	fb 4f       	sbci	r31, 0xFB	; 251
    287a:	40 81       	ld	r20, Z
    287c:	51 81       	ldd	r21, Z+1	; 0x01
    287e:	62 81       	ldd	r22, Z+2	; 0x02
    2880:	73 81       	ldd	r23, Z+3	; 0x03
    2882:	45 2b       	or	r20, r21
    2884:	46 2b       	or	r20, r22
    2886:	47 2b       	or	r20, r23
    2888:	09 f0       	breq	.+2      	; 0x288c <checkTimeQueue+0x6a>
    288a:	58 c0       	rjmp	.+176    	; 0x293c <checkTimeQueue+0x11a>
				if(TimerQueue[i].pointerFct()){
    288c:	ce 01       	movw	r24, r28
    288e:	88 0f       	add	r24, r24
    2890:	99 1f       	adc	r25, r25
    2892:	88 0f       	add	r24, r24
    2894:	99 1f       	adc	r25, r25
    2896:	88 0f       	add	r24, r24
    2898:	99 1f       	adc	r25, r25
    289a:	fe 01       	movw	r30, r28
    289c:	ee 0f       	add	r30, r30
    289e:	ff 1f       	adc	r31, r31
    28a0:	e8 0f       	add	r30, r24
    28a2:	f9 1f       	adc	r31, r25
    28a4:	eb 52       	subi	r30, 0x2B	; 43
    28a6:	fb 4f       	sbci	r31, 0xFB	; 251
    28a8:	00 84       	ldd	r0, Z+8	; 0x08
    28aa:	f1 85       	ldd	r31, Z+9	; 0x09
    28ac:	e0 2d       	mov	r30, r0
    28ae:	09 95       	icall
    28b0:	88 23       	and	r24, r24
    28b2:	39 f0       	breq	.+14     	; 0x28c2 <checkTimeQueue+0xa0>
					shiftTimeQueue(i, "returned true");
    28b4:	6f e9       	ldi	r22, 0x9F	; 159
    28b6:	73 e0       	ldi	r23, 0x03	; 3
    28b8:	81 2f       	mov	r24, r17
    28ba:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <shiftTimeQueue>
					i--;
    28be:	11 50       	subi	r17, 0x01	; 1
    28c0:	3d c0       	rjmp	.+122    	; 0x293c <checkTimeQueue+0x11a>
				}
				else
					if(TimerQueue[i].repeatDelay)
    28c2:	ce 01       	movw	r24, r28
    28c4:	88 0f       	add	r24, r24
    28c6:	99 1f       	adc	r25, r25
    28c8:	88 0f       	add	r24, r24
    28ca:	99 1f       	adc	r25, r25
    28cc:	88 0f       	add	r24, r24
    28ce:	99 1f       	adc	r25, r25
    28d0:	fe 01       	movw	r30, r28
    28d2:	ee 0f       	add	r30, r30
    28d4:	ff 1f       	adc	r31, r31
    28d6:	e8 0f       	add	r30, r24
    28d8:	f9 1f       	adc	r31, r25
    28da:	eb 52       	subi	r30, 0x2B	; 43
    28dc:	fb 4f       	sbci	r31, 0xFB	; 251
    28de:	44 81       	ldd	r20, Z+4	; 0x04
    28e0:	55 81       	ldd	r21, Z+5	; 0x05
    28e2:	66 81       	ldd	r22, Z+6	; 0x06
    28e4:	77 81       	ldd	r23, Z+7	; 0x07
    28e6:	45 2b       	or	r20, r21
    28e8:	46 2b       	or	r20, r22
    28ea:	47 2b       	or	r20, r23
    28ec:	49 f0       	breq	.+18     	; 0x2900 <checkTimeQueue+0xde>
						TimerQueue[i].delay = TimerQueue[i].repeatDelay;
    28ee:	44 81       	ldd	r20, Z+4	; 0x04
    28f0:	55 81       	ldd	r21, Z+5	; 0x05
    28f2:	66 81       	ldd	r22, Z+6	; 0x06
    28f4:	77 81       	ldd	r23, Z+7	; 0x07
    28f6:	40 83       	st	Z, r20
    28f8:	51 83       	std	Z+1, r21	; 0x01
    28fa:	62 83       	std	Z+2, r22	; 0x02
    28fc:	73 83       	std	Z+3, r23	; 0x03
    28fe:	1e c0       	rjmp	.+60     	; 0x293c <checkTimeQueue+0x11a>
					else{
						if(TimerQueue[i].pointerFct ==  &stopEngines)
    2900:	ce 01       	movw	r24, r28
    2902:	88 0f       	add	r24, r24
    2904:	99 1f       	adc	r25, r25
    2906:	cc 0f       	add	r28, r28
    2908:	dd 1f       	adc	r29, r29
    290a:	cc 0f       	add	r28, r28
    290c:	dd 1f       	adc	r29, r29
    290e:	cc 0f       	add	r28, r28
    2910:	dd 1f       	adc	r29, r29
    2912:	c8 0f       	add	r28, r24
    2914:	d9 1f       	adc	r29, r25
    2916:	cb 52       	subi	r28, 0x2B	; 43
    2918:	db 4f       	sbci	r29, 0xFB	; 251
    291a:	88 85       	ldd	r24, Y+8	; 0x08
    291c:	99 85       	ldd	r25, Y+9	; 0x09
    291e:	88 54       	subi	r24, 0x48	; 72
    2920:	95 40       	sbci	r25, 0x05	; 5
    2922:	31 f4       	brne	.+12     	; 0x2930 <checkTimeQueue+0x10e>
							i -= removeEntryFromTimerQueue(&stopEngines);
    2924:	88 e4       	ldi	r24, 0x48	; 72
    2926:	95 e0       	ldi	r25, 0x05	; 5
    2928:	0e 94 a2 13 	call	0x2744	; 0x2744 <removeEntryFromTimerQueue>
    292c:	18 1b       	sub	r17, r24
    292e:	06 c0       	rjmp	.+12     	; 0x293c <checkTimeQueue+0x11a>
						else
							shiftTimeQueue(i, "not periodic"),
    2930:	6d ea       	ldi	r22, 0xAD	; 173
    2932:	73 e0       	ldi	r23, 0x03	; 3
    2934:	81 2f       	mov	r24, r17
    2936:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <shiftTimeQueue>
							i--;
    293a:	11 50       	subi	r17, 0x01	; 1

//se apeleaza din main loop
//verifica daca sunt functii care trebuie apelate (daca delay-ul lor a ajuns la 0)
void checkTimeQueue(void){
	uint8_t i;
	for(i=0; i<TimingQueueTop; i++){
    293c:	1f 5f       	subi	r17, 0xFF	; 255
    293e:	80 91 a7 05 	lds	r24, 0x05A7
    2942:	18 17       	cp	r17, r24
    2944:	08 f4       	brcc	.+2      	; 0x2948 <checkTimeQueue+0x126>
    2946:	76 cf       	rjmp	.-276    	; 0x2834 <checkTimeQueue+0x12>
					}
			}
		}
	}
	//sei();
}
    2948:	df 91       	pop	r29
    294a:	cf 91       	pop	r28
    294c:	1f 91       	pop	r17
    294e:	08 95       	ret

00002950 <resetTimerQueue>:
	for(; i<TimingQueueTop; i++)
		TimerQueue[i] = TimerQueue[i+1];
	TimingQueueTop--;
}

void resetTimerQueue(void){
    2950:	cf 93       	push	r28
	uint8_t i;
	for(i=0; i<TimingQueueSize; i++)
    2952:	c0 e0       	ldi	r28, 0x00	; 0
		shiftTimeQueue(i, "reset timer queue");
    2954:	6a eb       	ldi	r22, 0xBA	; 186
    2956:	73 e0       	ldi	r23, 0x03	; 3
    2958:	8c 2f       	mov	r24, r28
    295a:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <shiftTimeQueue>
	TimingQueueTop--;
}

void resetTimerQueue(void){
	uint8_t i;
	for(i=0; i<TimingQueueSize; i++)
    295e:	cf 5f       	subi	r28, 0xFF	; 255
    2960:	c4 31       	cpi	r28, 0x14	; 20
    2962:	c1 f7       	brne	.-16     	; 0x2954 <resetTimerQueue+0x4>
		shiftTimeQueue(i, "reset timer queue");
	TimingQueueTop = 1;
    2964:	81 e0       	ldi	r24, 0x01	; 1
    2966:	80 93 a7 05 	sts	0x05A7, r24
    296a:	cf 91       	pop	r28
    296c:	08 95       	ret

0000296e <stateMachineTest1>:
uint8_t stareSMT1 = 0;
void initAndStartStateMachineTest1(){
	stareSMT1 = 0;
	addEntryToTimerQueue(&stateMachineTest1, 100UL * 1000UL, Periodic);
}
uint8_t stateMachineTest1(){
    296e:	8f 92       	push	r8
    2970:	9f 92       	push	r9
    2972:	af 92       	push	r10
    2974:	bf 92       	push	r11
    2976:	cf 92       	push	r12
    2978:	df 92       	push	r13
    297a:	ef 92       	push	r14
    297c:	ff 92       	push	r15
    297e:	0f 93       	push	r16
    2980:	1f 93       	push	r17
    2982:	cf 93       	push	r28
    2984:	df 93       	push	r29
    2986:	cd b7       	in	r28, 0x3d	; 61
    2988:	de b7       	in	r29, 0x3e	; 62
    298a:	c4 56       	subi	r28, 0x64	; 100
    298c:	d1 09       	sbc	r29, r1
    298e:	0f b6       	in	r0, 0x3f	; 63
    2990:	f8 94       	cli
    2992:	de bf       	out	0x3e, r29	; 62
    2994:	0f be       	out	0x3f, r0	; 63
    2996:	cd bf       	out	0x3d, r28	; 61
	uint32_t fl, fr;//, sl, sr;
	fl = getValueOfSensor(FrontLeftSensor);
    2998:	83 e0       	ldi	r24, 0x03	; 3
    299a:	0e 94 c5 08 	call	0x118a	; 0x118a <getValueOfSensor>
    299e:	6c 01       	movw	r12, r24
    29a0:	e1 2c       	mov	r14, r1
    29a2:	f1 2c       	mov	r15, r1
	fr = getValueOfSensor(FrontRightSensor);
    29a4:	82 e0       	ldi	r24, 0x02	; 2
    29a6:	0e 94 c5 08 	call	0x118a	; 0x118a <getValueOfSensor>
    29aa:	4c 01       	movw	r8, r24
    29ac:	a1 2c       	mov	r10, r1
    29ae:	b1 2c       	mov	r11, r1
	//sl = getValueOfSensor(SideLeftSensor);
	//sr = getValueOfSensor(SideRightSensor);
	if(DEBUGGING){
    29b0:	80 91 46 04 	lds	r24, 0x0446
    29b4:	80 ff       	sbrs	r24, 0
    29b6:	1b c0       	rjmp	.+54     	; 0x29ee <stateMachineTest1+0x80>
		char bfr[100];
		sprintf(bfr, "fl:%lu  fr:%lu", fl, fr);
    29b8:	1f 92       	push	r1
    29ba:	1f 92       	push	r1
    29bc:	9f 92       	push	r9
    29be:	8f 92       	push	r8
    29c0:	1f 92       	push	r1
    29c2:	1f 92       	push	r1
    29c4:	df 92       	push	r13
    29c6:	cf 92       	push	r12
    29c8:	8c ec       	ldi	r24, 0xCC	; 204
    29ca:	93 e0       	ldi	r25, 0x03	; 3
    29cc:	9f 93       	push	r25
    29ce:	8f 93       	push	r24
    29d0:	8e 01       	movw	r16, r28
    29d2:	0f 5f       	subi	r16, 0xFF	; 255
    29d4:	1f 4f       	sbci	r17, 0xFF	; 255
    29d6:	1f 93       	push	r17
    29d8:	0f 93       	push	r16
    29da:	0e 94 77 1c 	call	0x38ee	; 0x38ee <sprintf>
		BTTransmitStr(bfr);
    29de:	c8 01       	movw	r24, r16
    29e0:	0e 94 a9 01 	call	0x352	; 0x352 <BTTransmitStr>
    29e4:	0f b6       	in	r0, 0x3f	; 63
    29e6:	f8 94       	cli
    29e8:	de bf       	out	0x3e, r29	; 62
    29ea:	0f be       	out	0x3f, r0	; 63
    29ec:	cd bf       	out	0x3d, r28	; 61
	}
	
	switch(stareSMT1){
    29ee:	80 91 47 04 	lds	r24, 0x0447
    29f2:	81 30       	cpi	r24, 0x01	; 1
    29f4:	69 f0       	breq	.+26     	; 0x2a10 <stateMachineTest1+0xa2>
    29f6:	18 f0       	brcs	.+6      	; 0x29fe <stateMachineTest1+0x90>
    29f8:	82 30       	cpi	r24, 0x02	; 2
    29fa:	f9 f0       	breq	.+62     	; 0x2a3a <stateMachineTest1+0xcc>
    29fc:	22 c0       	rjmp	.+68     	; 0x2a42 <stateMachineTest1+0xd4>
		case 0:
			stareSMT1 = 1;
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	80 93 47 04 	sts	0x0447, r24
			goFront(30, 150);
    2a04:	66 e9       	ldi	r22, 0x96	; 150
    2a06:	8e e1       	ldi	r24, 0x1E	; 30
    2a08:	0e 94 bf 05 	call	0xb7e	; 0xb7e <goFront>
		case 2:
			stopEngines();
			return YES;		
		break;
	}
	return NO;	
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(stareSMT1){
		case 0:
			stareSMT1 = 1;
			goFront(30, 150);
		break;
    2a0e:	1e c0       	rjmp	.+60     	; 0x2a4c <stateMachineTest1+0xde>
		case 1:
			if(fl<130 && fr<130)
    2a10:	92 e8       	ldi	r25, 0x82	; 130
    2a12:	c9 16       	cp	r12, r25
    2a14:	d1 04       	cpc	r13, r1
    2a16:	e1 04       	cpc	r14, r1
    2a18:	f1 04       	cpc	r15, r1
    2a1a:	a8 f4       	brcc	.+42     	; 0x2a46 <stateMachineTest1+0xd8>
    2a1c:	82 e8       	ldi	r24, 0x82	; 130
    2a1e:	88 16       	cp	r8, r24
    2a20:	91 04       	cpc	r9, r1
    2a22:	a1 04       	cpc	r10, r1
    2a24:	b1 04       	cpc	r11, r1
    2a26:	88 f4       	brcc	.+34     	; 0x2a4a <stateMachineTest1+0xdc>
				stareSMT1 = 2,
    2a28:	82 e0       	ldi	r24, 0x02	; 2
    2a2a:	80 93 47 04 	sts	0x0447, r24
				goBack(1, 150);
    2a2e:	66 e9       	ldi	r22, 0x96	; 150
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	0e 94 ef 05 	call	0xbde	; 0xbde <goBack>
		case 2:
			stopEngines();
			return YES;		
		break;
	}
	return NO;	
    2a36:	80 e0       	ldi	r24, 0x00	; 0
    2a38:	09 c0       	rjmp	.+18     	; 0x2a4c <stateMachineTest1+0xde>
			if(fl<130 && fr<130)
				stareSMT1 = 2,
				goBack(1, 150);
		break;
		case 2:
			stopEngines();
    2a3a:	0e 94 48 05 	call	0xa90	; 0xa90 <stopEngines>
			return YES;		
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	05 c0       	rjmp	.+10     	; 0x2a4c <stateMachineTest1+0xde>
		break;
	}
	return NO;	
    2a42:	80 e0       	ldi	r24, 0x00	; 0
    2a44:	03 c0       	rjmp	.+6      	; 0x2a4c <stateMachineTest1+0xde>
    2a46:	80 e0       	ldi	r24, 0x00	; 0
    2a48:	01 c0       	rjmp	.+2      	; 0x2a4c <stateMachineTest1+0xde>
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
}
    2a4c:	cc 59       	subi	r28, 0x9C	; 156
    2a4e:	df 4f       	sbci	r29, 0xFF	; 255
    2a50:	0f b6       	in	r0, 0x3f	; 63
    2a52:	f8 94       	cli
    2a54:	de bf       	out	0x3e, r29	; 62
    2a56:	0f be       	out	0x3f, r0	; 63
    2a58:	cd bf       	out	0x3d, r28	; 61
    2a5a:	df 91       	pop	r29
    2a5c:	cf 91       	pop	r28
    2a5e:	1f 91       	pop	r17
    2a60:	0f 91       	pop	r16
    2a62:	ff 90       	pop	r15
    2a64:	ef 90       	pop	r14
    2a66:	df 90       	pop	r13
    2a68:	cf 90       	pop	r12
    2a6a:	bf 90       	pop	r11
    2a6c:	af 90       	pop	r10
    2a6e:	9f 90       	pop	r9
    2a70:	8f 90       	pop	r8
    2a72:	08 95       	ret

00002a74 <SMFParcurgereDistanta>:
	vitezaCuCareParcurg = viteza;
	addEntryIfNotExists(&SMFParcurgereDistanta, 10*1000UL, Periodic);
}

extern volatile uint32_t deciSecondsPassed;
uint8_t SMFParcurgereDistanta(){
    2a74:	0f 93       	push	r16
    2a76:	1f 93       	push	r17
    2a78:	cf 93       	push	r28
    2a7a:	df 93       	push	r29
    2a7c:	cd b7       	in	r28, 0x3d	; 61
    2a7e:	de b7       	in	r29, 0x3e	; 62
    2a80:	c4 56       	subi	r28, 0x64	; 100
    2a82:	d1 09       	sbc	r29, r1
    2a84:	0f b6       	in	r0, 0x3f	; 63
    2a86:	f8 94       	cli
    2a88:	de bf       	out	0x3e, r29	; 62
    2a8a:	0f be       	out	0x3f, r0	; 63
    2a8c:	cd bf       	out	0x3d, r28	; 61
	//char buffer[100];
	//sprintf(buffer, "dp: %lu  time:%lu", DISTANTA_PARCURSA, deciSecondsPassed);
	//BTTransmitStr(buffer);
	
	switch(starePD){
    2a8e:	80 91 13 06 	lds	r24, 0x0613
    2a92:	81 30       	cpi	r24, 0x01	; 1
    2a94:	71 f0       	breq	.+28     	; 0x2ab2 <SMFParcurgereDistanta+0x3e>
    2a96:	20 f0       	brcs	.+8      	; 0x2aa0 <SMFParcurgereDistanta+0x2c>
    2a98:	82 30       	cpi	r24, 0x02	; 2
    2a9a:	09 f4       	brne	.+2      	; 0x2a9e <SMFParcurgereDistanta+0x2a>
    2a9c:	58 c0       	rjmp	.+176    	; 0x2b4e <SMFParcurgereDistanta+0xda>
    2a9e:	ba c0       	rjmp	.+372    	; 0x2c14 <SMFParcurgereDistanta+0x1a0>
		case 0:
			goFront(100, vitezaCuCareParcurg);
    2aa0:	60 91 22 06 	lds	r22, 0x0622
    2aa4:	84 e6       	ldi	r24, 0x64	; 100
    2aa6:	0e 94 bf 05 	call	0xb7e	; 0xb7e <goFront>
			starePD = 1;
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	80 93 13 06 	sts	0x0613, r24
		break;
    2ab0:	af c0       	rjmp	.+350    	; 0x2c10 <SMFParcurgereDistanta+0x19c>
		case 1:
			if(DISTANTA_PARCURSA > distantaDeParcurs){
    2ab2:	80 91 60 04 	lds	r24, 0x0460
    2ab6:	90 91 61 04 	lds	r25, 0x0461
    2aba:	a0 91 62 04 	lds	r26, 0x0462
    2abe:	b0 91 63 04 	lds	r27, 0x0463
    2ac2:	40 91 66 04 	lds	r20, 0x0466
    2ac6:	50 91 67 04 	lds	r21, 0x0467
    2aca:	60 91 68 04 	lds	r22, 0x0468
    2ace:	70 91 69 04 	lds	r23, 0x0469
    2ad2:	84 0f       	add	r24, r20
    2ad4:	95 1f       	adc	r25, r21
    2ad6:	a6 1f       	adc	r26, r22
    2ad8:	b7 1f       	adc	r27, r23
    2ada:	b6 95       	lsr	r27
    2adc:	a7 95       	ror	r26
    2ade:	97 95       	ror	r25
    2ae0:	87 95       	ror	r24
    2ae2:	b6 95       	lsr	r27
    2ae4:	a7 95       	ror	r26
    2ae6:	97 95       	ror	r25
    2ae8:	87 95       	ror	r24
    2aea:	ac 01       	movw	r20, r24
    2aec:	bd 01       	movw	r22, r26
    2aee:	44 0f       	add	r20, r20
    2af0:	55 1f       	adc	r21, r21
    2af2:	66 1f       	adc	r22, r22
    2af4:	77 1f       	adc	r23, r23
    2af6:	44 0f       	add	r20, r20
    2af8:	55 1f       	adc	r21, r21
    2afa:	66 1f       	adc	r22, r22
    2afc:	77 1f       	adc	r23, r23
    2afe:	8a 01       	movw	r16, r20
    2b00:	9b 01       	movw	r18, r22
    2b02:	00 0f       	add	r16, r16
    2b04:	11 1f       	adc	r17, r17
    2b06:	22 1f       	adc	r18, r18
    2b08:	33 1f       	adc	r19, r19
    2b0a:	00 0f       	add	r16, r16
    2b0c:	11 1f       	adc	r17, r17
    2b0e:	22 1f       	adc	r18, r18
    2b10:	33 1f       	adc	r19, r19
    2b12:	40 0f       	add	r20, r16
    2b14:	51 1f       	adc	r21, r17
    2b16:	62 1f       	adc	r22, r18
    2b18:	73 1f       	adc	r23, r19
    2b1a:	84 0f       	add	r24, r20
    2b1c:	95 1f       	adc	r25, r21
    2b1e:	a6 1f       	adc	r26, r22
    2b20:	b7 1f       	adc	r27, r23
    2b22:	00 91 15 06 	lds	r16, 0x0615
    2b26:	10 91 16 06 	lds	r17, 0x0616
    2b2a:	20 91 17 06 	lds	r18, 0x0617
    2b2e:	30 91 18 06 	lds	r19, 0x0618
    2b32:	08 17       	cp	r16, r24
    2b34:	19 07       	cpc	r17, r25
    2b36:	2a 07       	cpc	r18, r26
    2b38:	3b 07       	cpc	r19, r27
    2b3a:	08 f0       	brcs	.+2      	; 0x2b3e <SMFParcurgereDistanta+0xca>
    2b3c:	69 c0       	rjmp	.+210    	; 0x2c10 <SMFParcurgereDistanta+0x19c>
				goBack(1, 130);
    2b3e:	62 e8       	ldi	r22, 0x82	; 130
    2b40:	81 e0       	ldi	r24, 0x01	; 1
    2b42:	0e 94 ef 05 	call	0xbde	; 0xbde <goBack>
				starePD = 2;
    2b46:	82 e0       	ldi	r24, 0x02	; 2
    2b48:	80 93 13 06 	sts	0x0613, r24
    2b4c:	61 c0       	rjmp	.+194    	; 0x2c10 <SMFParcurgereDistanta+0x19c>
			}
		break;
		case 2:
			stopEngines();
    2b4e:	0e 94 48 05 	call	0xa90	; 0xa90 <stopEngines>
			char buffer[100];
			sprintf(buffer, "dp: %lu  time:%lu", DISTANTA_PARCURSA, deciSecondsPassed);
    2b52:	40 91 41 04 	lds	r20, 0x0441
    2b56:	50 91 42 04 	lds	r21, 0x0442
    2b5a:	60 91 43 04 	lds	r22, 0x0443
    2b5e:	70 91 44 04 	lds	r23, 0x0444
    2b62:	80 91 60 04 	lds	r24, 0x0460
    2b66:	90 91 61 04 	lds	r25, 0x0461
    2b6a:	a0 91 62 04 	lds	r26, 0x0462
    2b6e:	b0 91 63 04 	lds	r27, 0x0463
    2b72:	00 91 66 04 	lds	r16, 0x0466
    2b76:	10 91 67 04 	lds	r17, 0x0467
    2b7a:	20 91 68 04 	lds	r18, 0x0468
    2b7e:	30 91 69 04 	lds	r19, 0x0469
    2b82:	7f 93       	push	r23
    2b84:	6f 93       	push	r22
    2b86:	5f 93       	push	r21
    2b88:	4f 93       	push	r20
    2b8a:	b9 01       	movw	r22, r18
    2b8c:	a8 01       	movw	r20, r16
    2b8e:	48 0f       	add	r20, r24
    2b90:	59 1f       	adc	r21, r25
    2b92:	6a 1f       	adc	r22, r26
    2b94:	7b 1f       	adc	r23, r27
    2b96:	76 95       	lsr	r23
    2b98:	67 95       	ror	r22
    2b9a:	57 95       	ror	r21
    2b9c:	47 95       	ror	r20
    2b9e:	76 95       	lsr	r23
    2ba0:	67 95       	ror	r22
    2ba2:	57 95       	ror	r21
    2ba4:	47 95       	ror	r20
    2ba6:	db 01       	movw	r26, r22
    2ba8:	ca 01       	movw	r24, r20
    2baa:	88 0f       	add	r24, r24
    2bac:	99 1f       	adc	r25, r25
    2bae:	aa 1f       	adc	r26, r26
    2bb0:	bb 1f       	adc	r27, r27
    2bb2:	88 0f       	add	r24, r24
    2bb4:	99 1f       	adc	r25, r25
    2bb6:	aa 1f       	adc	r26, r26
    2bb8:	bb 1f       	adc	r27, r27
    2bba:	8c 01       	movw	r16, r24
    2bbc:	9d 01       	movw	r18, r26
    2bbe:	00 0f       	add	r16, r16
    2bc0:	11 1f       	adc	r17, r17
    2bc2:	22 1f       	adc	r18, r18
    2bc4:	33 1f       	adc	r19, r19
    2bc6:	00 0f       	add	r16, r16
    2bc8:	11 1f       	adc	r17, r17
    2bca:	22 1f       	adc	r18, r18
    2bcc:	33 1f       	adc	r19, r19
    2bce:	80 0f       	add	r24, r16
    2bd0:	91 1f       	adc	r25, r17
    2bd2:	a2 1f       	adc	r26, r18
    2bd4:	b3 1f       	adc	r27, r19
    2bd6:	84 0f       	add	r24, r20
    2bd8:	95 1f       	adc	r25, r21
    2bda:	a6 1f       	adc	r26, r22
    2bdc:	b7 1f       	adc	r27, r23
    2bde:	bf 93       	push	r27
    2be0:	af 93       	push	r26
    2be2:	9f 93       	push	r25
    2be4:	8f 93       	push	r24
    2be6:	8b ed       	ldi	r24, 0xDB	; 219
    2be8:	93 e0       	ldi	r25, 0x03	; 3
    2bea:	9f 93       	push	r25
    2bec:	8f 93       	push	r24
    2bee:	8e 01       	movw	r16, r28
    2bf0:	0f 5f       	subi	r16, 0xFF	; 255
    2bf2:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf4:	1f 93       	push	r17
    2bf6:	0f 93       	push	r16
    2bf8:	0e 94 77 1c 	call	0x38ee	; 0x38ee <sprintf>
			BTTransmitStr(buffer);
    2bfc:	c8 01       	movw	r24, r16
    2bfe:	0e 94 a9 01 	call	0x352	; 0x352 <BTTransmitStr>
			return YES;
    2c02:	0f b6       	in	r0, 0x3f	; 63
    2c04:	f8 94       	cli
    2c06:	de bf       	out	0x3e, r29	; 62
    2c08:	0f be       	out	0x3f, r0	; 63
    2c0a:	cd bf       	out	0x3d, r28	; 61
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	03 c0       	rjmp	.+6      	; 0x2c16 <SMFParcurgereDistanta+0x1a2>
		break;
	}	
	return NO;
    2c10:	80 e0       	ldi	r24, 0x00	; 0
    2c12:	01 c0       	rjmp	.+2      	; 0x2c16 <SMFParcurgereDistanta+0x1a2>
    2c14:	80 e0       	ldi	r24, 0x00	; 0
}
    2c16:	cc 59       	subi	r28, 0x9C	; 156
    2c18:	df 4f       	sbci	r29, 0xFF	; 255
    2c1a:	0f b6       	in	r0, 0x3f	; 63
    2c1c:	f8 94       	cli
    2c1e:	de bf       	out	0x3e, r29	; 62
    2c20:	0f be       	out	0x3f, r0	; 63
    2c22:	cd bf       	out	0x3d, r28	; 61
    2c24:	df 91       	pop	r29
    2c26:	cf 91       	pop	r28
    2c28:	1f 91       	pop	r17
    2c2a:	0f 91       	pop	r16
    2c2c:	08 95       	ret

00002c2e <ledAction>:
	//BTTransmitStr(msg);
	
	a1 = (a1!=0);
	a2 = (a2!=0);
	
	if(a1)
    2c2e:	88 23       	and	r24, r24
    2c30:	11 f0       	breq	.+4      	; 0x2c36 <ledAction+0x8>
		PORTA |= _BV(PINA5);
    2c32:	15 9a       	sbi	0x02, 5	; 2
    2c34:	01 c0       	rjmp	.+2      	; 0x2c38 <ledAction+0xa>
	else
		PORTA &= ~_BV(PINA5);
    2c36:	15 98       	cbi	0x02, 5	; 2
	if(a2)
    2c38:	66 23       	and	r22, r22
    2c3a:	11 f0       	breq	.+4      	; 0x2c40 <ledAction+0x12>
		PORTA |= _BV(PINA4);
    2c3c:	14 9a       	sbi	0x02, 4	; 2
    2c3e:	08 95       	ret
	else
		PORTA &= ~_BV(PINA4);
    2c40:	14 98       	cbi	0x02, 4	; 2
    2c42:	08 95       	ret

00002c44 <initAndStartStateMachineTest1>:
extern uint32_t time;

uint8_t stateMachineTest1();
uint8_t stareSMT1 = 0;
void initAndStartStateMachineTest1(){
	stareSMT1 = 0;
    2c44:	10 92 47 04 	sts	0x0447, r1
	addEntryToTimerQueue(&stateMachineTest1, 100UL * 1000UL, Periodic);
    2c48:	21 e0       	ldi	r18, 0x01	; 1
    2c4a:	40 ea       	ldi	r20, 0xA0	; 160
    2c4c:	56 e8       	ldi	r21, 0x86	; 134
    2c4e:	61 e0       	ldi	r22, 0x01	; 1
    2c50:	70 e0       	ldi	r23, 0x00	; 0
    2c52:	87 eb       	ldi	r24, 0xB7	; 183
    2c54:	94 e1       	ldi	r25, 0x14	; 20
    2c56:	0e 94 80 11 	call	0x2300	; 0x2300 <addEntryToTimerQueue>
    2c5a:	08 95       	ret

00002c5c <initParcurgereDistanta>:

uint8_t SMFParcurgereDistanta();
uint8_t starePD;
uint32_t distantaDeParcurs;
uint8_t vitezaCuCareParcurg;
void initParcurgereDistanta(uint32_t distanta, uint8_t viteza){
    2c5c:	8f 92       	push	r8
    2c5e:	9f 92       	push	r9
    2c60:	af 92       	push	r10
    2c62:	bf 92       	push	r11
    2c64:	cf 92       	push	r12
    2c66:	df 92       	push	r13
    2c68:	ef 92       	push	r14
    2c6a:	ff 92       	push	r15
    2c6c:	0f 93       	push	r16
    2c6e:	1f 93       	push	r17
	starePD = 0;
    2c70:	10 92 13 06 	sts	0x0613, r1
	distantaDeParcurs = distanta + DISTANTA_PARCURSA;
    2c74:	c0 90 60 04 	lds	r12, 0x0460
    2c78:	d0 90 61 04 	lds	r13, 0x0461
    2c7c:	e0 90 62 04 	lds	r14, 0x0462
    2c80:	f0 90 63 04 	lds	r15, 0x0463
    2c84:	00 91 66 04 	lds	r16, 0x0466
    2c88:	10 91 67 04 	lds	r17, 0x0467
    2c8c:	20 91 68 04 	lds	r18, 0x0468
    2c90:	30 91 69 04 	lds	r19, 0x0469
    2c94:	0c 0d       	add	r16, r12
    2c96:	1d 1d       	adc	r17, r13
    2c98:	2e 1d       	adc	r18, r14
    2c9a:	3f 1d       	adc	r19, r15
    2c9c:	68 01       	movw	r12, r16
    2c9e:	79 01       	movw	r14, r18
    2ca0:	f6 94       	lsr	r15
    2ca2:	e7 94       	ror	r14
    2ca4:	d7 94       	ror	r13
    2ca6:	c7 94       	ror	r12
    2ca8:	f6 94       	lsr	r15
    2caa:	e7 94       	ror	r14
    2cac:	d7 94       	ror	r13
    2cae:	c7 94       	ror	r12
    2cb0:	97 01       	movw	r18, r14
    2cb2:	86 01       	movw	r16, r12
    2cb4:	00 0f       	add	r16, r16
    2cb6:	11 1f       	adc	r17, r17
    2cb8:	22 1f       	adc	r18, r18
    2cba:	33 1f       	adc	r19, r19
    2cbc:	00 0f       	add	r16, r16
    2cbe:	11 1f       	adc	r17, r17
    2cc0:	22 1f       	adc	r18, r18
    2cc2:	33 1f       	adc	r19, r19
    2cc4:	48 01       	movw	r8, r16
    2cc6:	59 01       	movw	r10, r18
    2cc8:	88 0c       	add	r8, r8
    2cca:	99 1c       	adc	r9, r9
    2ccc:	aa 1c       	adc	r10, r10
    2cce:	bb 1c       	adc	r11, r11
    2cd0:	88 0c       	add	r8, r8
    2cd2:	99 1c       	adc	r9, r9
    2cd4:	aa 1c       	adc	r10, r10
    2cd6:	bb 1c       	adc	r11, r11
    2cd8:	08 0d       	add	r16, r8
    2cda:	19 1d       	adc	r17, r9
    2cdc:	2a 1d       	adc	r18, r10
    2cde:	3b 1d       	adc	r19, r11
    2ce0:	0c 0d       	add	r16, r12
    2ce2:	1d 1d       	adc	r17, r13
    2ce4:	2e 1d       	adc	r18, r14
    2ce6:	3f 1d       	adc	r19, r15
    2ce8:	6b 01       	movw	r12, r22
    2cea:	7c 01       	movw	r14, r24
    2cec:	c0 0e       	add	r12, r16
    2cee:	d1 1e       	adc	r13, r17
    2cf0:	e2 1e       	adc	r14, r18
    2cf2:	f3 1e       	adc	r15, r19
    2cf4:	c0 92 15 06 	sts	0x0615, r12
    2cf8:	d0 92 16 06 	sts	0x0616, r13
    2cfc:	e0 92 17 06 	sts	0x0617, r14
    2d00:	f0 92 18 06 	sts	0x0618, r15
	vitezaCuCareParcurg = viteza;
    2d04:	40 93 22 06 	sts	0x0622, r20
	addEntryIfNotExists(&SMFParcurgereDistanta, 10*1000UL, Periodic);
    2d08:	21 e0       	ldi	r18, 0x01	; 1
    2d0a:	40 e1       	ldi	r20, 0x10	; 16
    2d0c:	57 e2       	ldi	r21, 0x27	; 39
    2d0e:	60 e0       	ldi	r22, 0x00	; 0
    2d10:	70 e0       	ldi	r23, 0x00	; 0
    2d12:	8a e3       	ldi	r24, 0x3A	; 58
    2d14:	95 e1       	ldi	r25, 0x15	; 21
    2d16:	0e 94 2f 12 	call	0x245e	; 0x245e <addEntryIfNotExists>
}
    2d1a:	1f 91       	pop	r17
    2d1c:	0f 91       	pop	r16
    2d1e:	ff 90       	pop	r15
    2d20:	ef 90       	pop	r14
    2d22:	df 90       	pop	r13
    2d24:	cf 90       	pop	r12
    2d26:	bf 90       	pop	r11
    2d28:	af 90       	pop	r10
    2d2a:	9f 90       	pop	r9
    2d2c:	8f 90       	pop	r8
    2d2e:	08 95       	ret

00002d30 <isParalel>:
}



ParallelResult isParalel(uint32_t sideValue, uint32_t frontValue, uint32_t sensorOffset, uint32_t epsilon, uint32_t warningEpsilon)
{
    2d30:	4f 92       	push	r4
    2d32:	5f 92       	push	r5
    2d34:	6f 92       	push	r6
    2d36:	7f 92       	push	r7
    2d38:	af 92       	push	r10
    2d3a:	bf 92       	push	r11
    2d3c:	cf 92       	push	r12
    2d3e:	df 92       	push	r13
    2d40:	ef 92       	push	r14
    2d42:	ff 92       	push	r15
    2d44:	0f 93       	push	r16
    2d46:	1f 93       	push	r17
    2d48:	cf 93       	push	r28
    2d4a:	df 93       	push	r29
    2d4c:	00 d0       	rcall	.+0      	; 0x2d4e <isParalel+0x1e>
    2d4e:	00 d0       	rcall	.+0      	; 0x2d50 <isParalel+0x20>
    2d50:	cd b7       	in	r28, 0x3d	; 61
    2d52:	de b7       	in	r29, 0x3e	; 62
    2d54:	2b 01       	movw	r4, r22
    2d56:	3c 01       	movw	r6, r24
    2d58:	29 83       	std	Y+1, r18	; 0x01
    2d5a:	3a 83       	std	Y+2, r19	; 0x02
    2d5c:	4b 83       	std	Y+3, r20	; 0x03
    2d5e:	5c 83       	std	Y+4, r21	; 0x04
	uint32_t sideCalculated = (frontValue - (sensorOffset * (1<<9) / 362)) * 362 / (1<<9);
    2d60:	c8 01       	movw	r24, r16
    2d62:	b7 01       	movw	r22, r14
    2d64:	05 2e       	mov	r0, r21
    2d66:	59 e0       	ldi	r21, 0x09	; 9
    2d68:	66 0f       	add	r22, r22
    2d6a:	77 1f       	adc	r23, r23
    2d6c:	88 1f       	adc	r24, r24
    2d6e:	99 1f       	adc	r25, r25
    2d70:	5a 95       	dec	r21
    2d72:	d1 f7       	brne	.-12     	; 0x2d68 <isParalel+0x38>
    2d74:	50 2d       	mov	r21, r0
    2d76:	2a e6       	ldi	r18, 0x6A	; 106
    2d78:	31 e0       	ldi	r19, 0x01	; 1
    2d7a:	40 e0       	ldi	r20, 0x00	; 0
    2d7c:	50 e0       	ldi	r21, 0x00	; 0
    2d7e:	0e 94 35 1c 	call	0x386a	; 0x386a <__udivmodsi4>
    2d82:	89 81       	ldd	r24, Y+1	; 0x01
    2d84:	9a 81       	ldd	r25, Y+2	; 0x02
    2d86:	ab 81       	ldd	r26, Y+3	; 0x03
    2d88:	bc 81       	ldd	r27, Y+4	; 0x04
    2d8a:	82 1b       	sub	r24, r18
    2d8c:	93 0b       	sbc	r25, r19
    2d8e:	a4 0b       	sbc	r26, r20
    2d90:	b5 0b       	sbc	r27, r21
    2d92:	9c 01       	movw	r18, r24
    2d94:	ad 01       	movw	r20, r26
    2d96:	aa e6       	ldi	r26, 0x6A	; 106
    2d98:	b1 e0       	ldi	r27, 0x01	; 1
    2d9a:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__muluhisi3>
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cb 01       	movw	r24, r22
    2da2:	07 2e       	mov	r0, r23
    2da4:	79 e0       	ldi	r23, 0x09	; 9
    2da6:	b6 95       	lsr	r27
    2da8:	a7 95       	ror	r26
    2daa:	97 95       	ror	r25
    2dac:	87 95       	ror	r24
    2dae:	7a 95       	dec	r23
    2db0:	d1 f7       	brne	.-12     	; 0x2da6 <isParalel+0x76>
    2db2:	70 2d       	mov	r23, r0
	
	if(sideCalculated > sideValue)
    2db4:	48 16       	cp	r4, r24
    2db6:	59 06       	cpc	r5, r25
    2db8:	6a 06       	cpc	r6, r26
    2dba:	7b 06       	cpc	r7, r27
    2dbc:	a0 f4       	brcc	.+40     	; 0x2de6 <isParalel+0xb6>
		if(sideCalculated - sideValue > warningEpsilon)
    2dbe:	84 19       	sub	r24, r4
    2dc0:	95 09       	sbc	r25, r5
    2dc2:	a6 09       	sbc	r26, r6
    2dc4:	b7 09       	sbc	r27, r7
    2dc6:	2d 89       	ldd	r18, Y+21	; 0x15
    2dc8:	3e 89       	ldd	r19, Y+22	; 0x16
    2dca:	4f 89       	ldd	r20, Y+23	; 0x17
    2dcc:	58 8d       	ldd	r21, Y+24	; 0x18
    2dce:	28 17       	cp	r18, r24
    2dd0:	39 07       	cpc	r19, r25
    2dd2:	4a 07       	cpc	r20, r26
    2dd4:	5b 07       	cpc	r21, r27
    2dd6:	d8 f0       	brcs	.+54     	; 0x2e0e <isParalel+0xde>
			return PreaDepartat;
		else if(sideCalculated - sideValue > epsilon)
    2dd8:	a8 16       	cp	r10, r24
    2dda:	b9 06       	cpc	r11, r25
    2ddc:	ca 06       	cpc	r12, r26
    2dde:	db 06       	cpc	r13, r27
    2de0:	c0 f4       	brcc	.+48     	; 0x2e12 <isParalel+0xe2>
			return Departat;
    2de2:	83 e0       	ldi	r24, 0x03	; 3
    2de4:	1b c0       	rjmp	.+54     	; 0x2e1c <isParalel+0xec>
		else
			return Paralel;
	else
		if(sideValue - sideCalculated > warningEpsilon)
    2de6:	48 1a       	sub	r4, r24
    2de8:	59 0a       	sbc	r5, r25
    2dea:	6a 0a       	sbc	r6, r26
    2dec:	7b 0a       	sbc	r7, r27
    2dee:	8d 89       	ldd	r24, Y+21	; 0x15
    2df0:	9e 89       	ldd	r25, Y+22	; 0x16
    2df2:	af 89       	ldd	r26, Y+23	; 0x17
    2df4:	b8 8d       	ldd	r27, Y+24	; 0x18
    2df6:	84 15       	cp	r24, r4
    2df8:	95 05       	cpc	r25, r5
    2dfa:	a6 05       	cpc	r26, r6
    2dfc:	b7 05       	cpc	r27, r7
    2dfe:	58 f0       	brcs	.+22     	; 0x2e16 <isParalel+0xe6>
			return PreaApropiat;
		else if(sideValue - sideCalculated > epsilon)
    2e00:	a4 14       	cp	r10, r4
    2e02:	b5 04       	cpc	r11, r5
    2e04:	c6 04       	cpc	r12, r6
    2e06:	d7 04       	cpc	r13, r7
    2e08:	40 f4       	brcc	.+16     	; 0x2e1a <isParalel+0xea>
			return Apropiat;
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	07 c0       	rjmp	.+14     	; 0x2e1c <isParalel+0xec>
{
	uint32_t sideCalculated = (frontValue - (sensorOffset * (1<<9) / 362)) * 362 / (1<<9);
	
	if(sideCalculated > sideValue)
		if(sideCalculated - sideValue > warningEpsilon)
			return PreaDepartat;
    2e0e:	84 e0       	ldi	r24, 0x04	; 4
    2e10:	05 c0       	rjmp	.+10     	; 0x2e1c <isParalel+0xec>
		else if(sideCalculated - sideValue > epsilon)
			return Departat;
		else
			return Paralel;
    2e12:	82 e0       	ldi	r24, 0x02	; 2
    2e14:	03 c0       	rjmp	.+6      	; 0x2e1c <isParalel+0xec>
	else
		if(sideValue - sideCalculated > warningEpsilon)
			return PreaApropiat;
    2e16:	80 e0       	ldi	r24, 0x00	; 0
    2e18:	01 c0       	rjmp	.+2      	; 0x2e1c <isParalel+0xec>
		else if(sideValue - sideCalculated > epsilon)
			return Apropiat;
		else 
			return Paralel;
    2e1a:	82 e0       	ldi	r24, 0x02	; 2
}
    2e1c:	0f 90       	pop	r0
    2e1e:	0f 90       	pop	r0
    2e20:	0f 90       	pop	r0
    2e22:	0f 90       	pop	r0
    2e24:	df 91       	pop	r29
    2e26:	cf 91       	pop	r28
    2e28:	1f 91       	pop	r17
    2e2a:	0f 91       	pop	r16
    2e2c:	ff 90       	pop	r15
    2e2e:	ef 90       	pop	r14
    2e30:	df 90       	pop	r13
    2e32:	cf 90       	pop	r12
    2e34:	bf 90       	pop	r11
    2e36:	af 90       	pop	r10
    2e38:	7f 90       	pop	r7
    2e3a:	6f 90       	pop	r6
    2e3c:	5f 90       	pop	r5
    2e3e:	4f 90       	pop	r4
    2e40:	08 95       	ret

00002e42 <SMRPcheck>:
		addEntryIfNotExists(&SMRPcheck, 250UL * 1000UL, Periodic),
		BTTransmitStr("added paralel check fct");
}

volatile ParallelResult lastParallelResult = Paralel;
uint8_t SMRPcheck(){
    2e42:	af 92       	push	r10
    2e44:	bf 92       	push	r11
    2e46:	cf 92       	push	r12
    2e48:	df 92       	push	r13
    2e4a:	ef 92       	push	r14
    2e4c:	ff 92       	push	r15
    2e4e:	0f 93       	push	r16
    2e50:	1f 93       	push	r17
    2e52:	cf 93       	push	r28
    2e54:	df 93       	push	r29
	//sensor offset 95 mm;	
	uint32_t fr, sr;
	fr = getValueOfSensor(FrontRightSensor);
    2e56:	82 e0       	ldi	r24, 0x02	; 2
    2e58:	0e 94 c5 08 	call	0x118a	; 0x118a <getValueOfSensor>
    2e5c:	ec 01       	movw	r28, r24
	//fr = getValueOfSensor(FrontRightSensor);
	sr = getValueOfSensor(SideRightSensor);
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	0e 94 c5 08 	call	0x118a	; 0x118a <getValueOfSensor>

volatile ParallelResult lastParallelResult = Paralel;
uint8_t SMRPcheck(){
	//sensor offset 95 mm;	
	uint32_t fr, sr;
	fr = getValueOfSensor(FrontRightSensor);
    2e64:	9e 01       	movw	r18, r28
    2e66:	40 e0       	ldi	r20, 0x00	; 0
    2e68:	50 e0       	ldi	r21, 0x00	; 0
	//fr = getValueOfSensor(FrontRightSensor);
	sr = getValueOfSensor(SideRightSensor);
    2e6a:	bc 01       	movw	r22, r24
    2e6c:	80 e0       	ldi	r24, 0x00	; 0
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
	//sr = getValueOfSensor(SideRightSensor);
	
	ParallelResult rez = isParalel(sr, fr, 95, 22, 45);
    2e70:	1f 92       	push	r1
    2e72:	1f 92       	push	r1
    2e74:	1f 92       	push	r1
    2e76:	ed e2       	ldi	r30, 0x2D	; 45
    2e78:	ef 93       	push	r30
    2e7a:	0f 2e       	mov	r0, r31
    2e7c:	f6 e1       	ldi	r31, 0x16	; 22
    2e7e:	af 2e       	mov	r10, r31
    2e80:	b1 2c       	mov	r11, r1
    2e82:	c1 2c       	mov	r12, r1
    2e84:	d1 2c       	mov	r13, r1
    2e86:	f0 2d       	mov	r31, r0
    2e88:	1f e5       	ldi	r17, 0x5F	; 95
    2e8a:	e1 2e       	mov	r14, r17
    2e8c:	f1 2c       	mov	r15, r1
    2e8e:	00 e0       	ldi	r16, 0x00	; 0
    2e90:	10 e0       	ldi	r17, 0x00	; 0
    2e92:	0e 94 98 16 	call	0x2d30	; 0x2d30 <isParalel>
    2e96:	0f 90       	pop	r0
    2e98:	0f 90       	pop	r0
    2e9a:	0f 90       	pop	r0
    2e9c:	0f 90       	pop	r0
    2e9e:	c8 2f       	mov	r28, r24
	
	//char msg[50];
	//sprintf(msg, "is paralel: %d sr:%lu  fr:%lu", rez, sr, fr);
	//BTTransmitStr(msg);
	if(rez == Paralel && lastParallelResult == Paralel)
    2ea0:	82 30       	cpi	r24, 0x02	; 2
    2ea2:	29 f4       	brne	.+10     	; 0x2eae <SMRPcheck+0x6c>
    2ea4:	80 91 01 01 	lds	r24, 0x0101
    2ea8:	82 30       	cpi	r24, 0x02	; 2
    2eaa:	c1 f5       	brne	.+112    	; 0x2f1c <SMRPcheck+0xda>
    2eac:	33 c0       	rjmp	.+102    	; 0x2f14 <SMRPcheck+0xd2>
		return YES;
	if(rez != lastParallelResult){
    2eae:	80 91 01 01 	lds	r24, 0x0101
    2eb2:	c8 17       	cp	r28, r24
    2eb4:	89 f1       	breq	.+98     	; 0x2f18 <SMRPcheck+0xd6>
		switch(rez){
    2eb6:	c2 30       	cpi	r28, 0x02	; 2
    2eb8:	b9 f0       	breq	.+46     	; 0x2ee8 <SMRPcheck+0xa6>
    2eba:	28 f4       	brcc	.+10     	; 0x2ec6 <SMRPcheck+0x84>
    2ebc:	cc 23       	and	r28, r28
    2ebe:	41 f0       	breq	.+16     	; 0x2ed0 <SMRPcheck+0x8e>
    2ec0:	c1 30       	cpi	r28, 0x01	; 1
    2ec2:	61 f0       	breq	.+24     	; 0x2edc <SMRPcheck+0x9a>
    2ec4:	23 c0       	rjmp	.+70     	; 0x2f0c <SMRPcheck+0xca>
    2ec6:	c3 30       	cpi	r28, 0x03	; 3
    2ec8:	b1 f0       	breq	.+44     	; 0x2ef6 <SMRPcheck+0xb4>
    2eca:	c4 30       	cpi	r28, 0x04	; 4
    2ecc:	d1 f0       	breq	.+52     	; 0x2f02 <SMRPcheck+0xc0>
    2ece:	1e c0       	rjmp	.+60     	; 0x2f0c <SMRPcheck+0xca>
			case PreaApropiat:
				rotirePeLoc(10, 90, RightEngines);
    2ed0:	40 e0       	ldi	r20, 0x00	; 0
    2ed2:	6a e5       	ldi	r22, 0x5A	; 90
    2ed4:	8a e0       	ldi	r24, 0x0A	; 10
    2ed6:	0e 94 92 07 	call	0xf24	; 0xf24 <rotirePeLoc>
			break;		
    2eda:	18 c0       	rjmp	.+48     	; 0x2f0c <SMRPcheck+0xca>
			case Apropiat:
				rotirePeLoc(10, 75, RightEngines);
    2edc:	40 e0       	ldi	r20, 0x00	; 0
    2ede:	6b e4       	ldi	r22, 0x4B	; 75
    2ee0:	8a e0       	ldi	r24, 0x0A	; 10
    2ee2:	0e 94 92 07 	call	0xf24	; 0xf24 <rotirePeLoc>
			break;		
    2ee6:	12 c0       	rjmp	.+36     	; 0x2f0c <SMRPcheck+0xca>
			case Paralel:
				stopEngines();
    2ee8:	0e 94 48 05 	call	0xa90	; 0xa90 <stopEngines>
				lastParallelResult = Paralel;
    2eec:	82 e0       	ldi	r24, 0x02	; 2
    2eee:	80 93 01 01 	sts	0x0101, r24
				return YES;
    2ef2:	81 e0       	ldi	r24, 0x01	; 1
    2ef4:	18 c0       	rjmp	.+48     	; 0x2f26 <SMRPcheck+0xe4>
			break;
			case Departat:
				rotirePeLoc(10, 75, LeftEngines);
    2ef6:	41 e0       	ldi	r20, 0x01	; 1
    2ef8:	6b e4       	ldi	r22, 0x4B	; 75
    2efa:	8a e0       	ldi	r24, 0x0A	; 10
    2efc:	0e 94 92 07 	call	0xf24	; 0xf24 <rotirePeLoc>
			break;
    2f00:	05 c0       	rjmp	.+10     	; 0x2f0c <SMRPcheck+0xca>
			case PreaDepartat:
				rotirePeLoc(10, 90, LeftEngines);
    2f02:	41 e0       	ldi	r20, 0x01	; 1
    2f04:	6a e5       	ldi	r22, 0x5A	; 90
    2f06:	8a e0       	ldi	r24, 0x0A	; 10
    2f08:	0e 94 92 07 	call	0xf24	; 0xf24 <rotirePeLoc>
			break;
		}
		lastParallelResult = rez;
    2f0c:	c0 93 01 01 	sts	0x0101, r28
	}	
	return NO;
    2f10:	80 e0       	ldi	r24, 0x00	; 0
    2f12:	09 c0       	rjmp	.+18     	; 0x2f26 <SMRPcheck+0xe4>
	
	//char msg[50];
	//sprintf(msg, "is paralel: %d sr:%lu  fr:%lu", rez, sr, fr);
	//BTTransmitStr(msg);
	if(rez == Paralel && lastParallelResult == Paralel)
		return YES;
    2f14:	81 e0       	ldi	r24, 0x01	; 1
    2f16:	07 c0       	rjmp	.+14     	; 0x2f26 <SMRPcheck+0xe4>
				rotirePeLoc(10, 90, LeftEngines);
			break;
		}
		lastParallelResult = rez;
	}	
	return NO;
    2f18:	80 e0       	ldi	r24, 0x00	; 0
    2f1a:	05 c0       	rjmp	.+10     	; 0x2f26 <SMRPcheck+0xe4>
	//char msg[50];
	//sprintf(msg, "is paralel: %d sr:%lu  fr:%lu", rez, sr, fr);
	//BTTransmitStr(msg);
	if(rez == Paralel && lastParallelResult == Paralel)
		return YES;
	if(rez != lastParallelResult){
    2f1c:	80 91 01 01 	lds	r24, 0x0101
    2f20:	82 30       	cpi	r24, 0x02	; 2
    2f22:	11 f7       	brne	.-60     	; 0x2ee8 <SMRPcheck+0xa6>
				rotirePeLoc(10, 90, LeftEngines);
			break;
		}
		lastParallelResult = rez;
	}	
	return NO;
    2f24:	80 e0       	ldi	r24, 0x00	; 0
}
    2f26:	df 91       	pop	r29
    2f28:	cf 91       	pop	r28
    2f2a:	1f 91       	pop	r17
    2f2c:	0f 91       	pop	r16
    2f2e:	ff 90       	pop	r15
    2f30:	ef 90       	pop	r14
    2f32:	df 90       	pop	r13
    2f34:	cf 90       	pop	r12
    2f36:	bf 90       	pop	r11
    2f38:	af 90       	pop	r10
    2f3a:	08 95       	ret

00002f3c <initParalelParking>:

uint32_t srTmp;
uint8_t lastState;

void initParalelParking(){
	statePP = 33;
    2f3c:	81 e2       	ldi	r24, 0x21	; 33
    2f3e:	80 93 ad 05 	sts	0x05AD, r24
	secsCounter = 0;
    2f42:	10 92 1d 06 	sts	0x061D, r1
	//statePP = 7;
	lastState = 0;
    2f46:	10 92 14 06 	sts	0x0614, r1
	srTmp = 0;
    2f4a:	10 92 1e 06 	sts	0x061E, r1
    2f4e:	10 92 1f 06 	sts	0x061F, r1
    2f52:	10 92 20 06 	sts	0x0620, r1
    2f56:	10 92 21 06 	sts	0x0621, r1
	addEntryIfNotExists(&paralelParkingSMF, 250*1000UL, Periodic);
    2f5a:	21 e0       	ldi	r18, 0x01	; 1
    2f5c:	40 e9       	ldi	r20, 0x90	; 144
    2f5e:	50 ed       	ldi	r21, 0xD0	; 208
    2f60:	63 e0       	ldi	r22, 0x03	; 3
    2f62:	70 e0       	ldi	r23, 0x00	; 0
    2f64:	85 e9       	ldi	r24, 0x95	; 149
    2f66:	98 e1       	ldi	r25, 0x18	; 24
    2f68:	0e 94 2f 12 	call	0x245e	; 0x245e <addEntryIfNotExists>
    2f6c:	08 95       	ret

00002f6e <checkMinim>:
}
char msg[100];
uint8_t tmpCnt;
uint32_t minTest;
uint8_t checkMinim(void)
{
    2f6e:	cf 92       	push	r12
    2f70:	df 92       	push	r13
    2f72:	ef 92       	push	r14
    2f74:	ff 92       	push	r15
	uint32_t sr;
	sr = getValueOfSensor(SideRightSensor);	
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	0e 94 c5 08 	call	0x118a	; 0x118a <getValueOfSensor>
    2f7c:	6c 01       	movw	r12, r24
    2f7e:	e1 2c       	mov	r14, r1
    2f80:	f1 2c       	mov	r15, r1
	
	sprintf(msg, "cm st:%u ", lastState);
    2f82:	80 91 14 06 	lds	r24, 0x0614
    2f86:	1f 92       	push	r1
    2f88:	8f 93       	push	r24
    2f8a:	8f e1       	ldi	r24, 0x1F	; 31
    2f8c:	94 e0       	ldi	r25, 0x04	; 4
    2f8e:	9f 93       	push	r25
    2f90:	8f 93       	push	r24
    2f92:	8f ea       	ldi	r24, 0xAF	; 175
    2f94:	95 e0       	ldi	r25, 0x05	; 5
    2f96:	9f 93       	push	r25
    2f98:	8f 93       	push	r24
    2f9a:	0e 94 77 1c 	call	0x38ee	; 0x38ee <sprintf>
	BTTransmitStr(msg);
    2f9e:	8f ea       	ldi	r24, 0xAF	; 175
    2fa0:	95 e0       	ldi	r25, 0x05	; 5
    2fa2:	0e 94 a9 01 	call	0x352	; 0x352 <BTTransmitStr>
	
	switch(lastState){
    2fa6:	0f 90       	pop	r0
    2fa8:	0f 90       	pop	r0
    2faa:	0f 90       	pop	r0
    2fac:	0f 90       	pop	r0
    2fae:	0f 90       	pop	r0
    2fb0:	0f 90       	pop	r0
    2fb2:	80 91 14 06 	lds	r24, 0x0614
    2fb6:	82 30       	cpi	r24, 0x02	; 2
    2fb8:	09 f4       	brne	.+2      	; 0x2fbc <checkMinim+0x4e>
    2fba:	4c c0       	rjmp	.+152    	; 0x3054 <checkMinim+0xe6>
    2fbc:	28 f4       	brcc	.+10     	; 0x2fc8 <checkMinim+0x5a>
    2fbe:	88 23       	and	r24, r24
    2fc0:	51 f0       	breq	.+20     	; 0x2fd6 <checkMinim+0x68>
    2fc2:	81 30       	cpi	r24, 0x01	; 1
    2fc4:	d1 f0       	breq	.+52     	; 0x2ffa <checkMinim+0x8c>
    2fc6:	a5 c0       	rjmp	.+330    	; 0x3112 <checkMinim+0x1a4>
    2fc8:	83 30       	cpi	r24, 0x03	; 3
    2fca:	09 f4       	brne	.+2      	; 0x2fce <checkMinim+0x60>
    2fcc:	60 c0       	rjmp	.+192    	; 0x308e <checkMinim+0x120>
    2fce:	84 30       	cpi	r24, 0x04	; 4
    2fd0:	09 f4       	brne	.+2      	; 0x2fd4 <checkMinim+0x66>
    2fd2:	94 c0       	rjmp	.+296    	; 0x30fc <checkMinim+0x18e>
    2fd4:	9e c0       	rjmp	.+316    	; 0x3112 <checkMinim+0x1a4>
		case 0:
			lastState = 1;
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	80 93 14 06 	sts	0x0614, r24
			srTmp = sr;
    2fdc:	c0 92 1e 06 	sts	0x061E, r12
    2fe0:	d0 92 1f 06 	sts	0x061F, r13
    2fe4:	e0 92 20 06 	sts	0x0620, r14
    2fe8:	f0 92 21 06 	sts	0x0621, r15
			rotirePeLoc(15, 90, RightEngines);
    2fec:	40 e0       	ldi	r20, 0x00	; 0
    2fee:	6a e5       	ldi	r22, 0x5A	; 90
    2ff0:	8f e0       	ldi	r24, 0x0F	; 15
    2ff2:	0e 94 92 07 	call	0xf24	; 0xf24 <rotirePeLoc>
		break;
		
		
	}
	
	return NO;
    2ff6:	80 e0       	ldi	r24, 0x00	; 0
	switch(lastState){
		case 0:
			lastState = 1;
			srTmp = sr;
			rotirePeLoc(15, 90, RightEngines);
		break;
    2ff8:	93 c0       	rjmp	.+294    	; 0x3120 <checkMinim+0x1b2>
		case 1:
			if( sr > srTmp + 5){
    2ffa:	80 91 1e 06 	lds	r24, 0x061E
    2ffe:	90 91 1f 06 	lds	r25, 0x061F
    3002:	a0 91 20 06 	lds	r26, 0x0620
    3006:	b0 91 21 06 	lds	r27, 0x0621
    300a:	ac 01       	movw	r20, r24
    300c:	bd 01       	movw	r22, r26
    300e:	4b 5f       	subi	r20, 0xFB	; 251
    3010:	5f 4f       	sbci	r21, 0xFF	; 255
    3012:	6f 4f       	sbci	r22, 0xFF	; 255
    3014:	7f 4f       	sbci	r23, 0xFF	; 255
    3016:	4c 15       	cp	r20, r12
    3018:	5d 05       	cpc	r21, r13
    301a:	6e 05       	cpc	r22, r14
    301c:	7f 05       	cpc	r23, r15
    301e:	50 f4       	brcc	.+20     	; 0x3034 <checkMinim+0xc6>
				srTmp = sr;
    3020:	c0 92 1e 06 	sts	0x061E, r12
    3024:	d0 92 1f 06 	sts	0x061F, r13
    3028:	e0 92 20 06 	sts	0x0620, r14
    302c:	f0 92 21 06 	sts	0x0621, r15
		break;
		
		
	}
	
	return NO;
    3030:	80 e0       	ldi	r24, 0x00	; 0
    3032:	76 c0       	rjmp	.+236    	; 0x3120 <checkMinim+0x1b2>
		break;
		case 1:
			if( sr > srTmp + 5){
				srTmp = sr;
			}
			else if(sr < srTmp - 5){
    3034:	05 97       	sbiw	r24, 0x05	; 5
    3036:	a1 09       	sbc	r26, r1
    3038:	b1 09       	sbc	r27, r1
    303a:	c8 16       	cp	r12, r24
    303c:	d9 06       	cpc	r13, r25
    303e:	ea 06       	cpc	r14, r26
    3040:	fb 06       	cpc	r15, r27
    3042:	08 f0       	brcs	.+2      	; 0x3046 <checkMinim+0xd8>
    3044:	68 c0       	rjmp	.+208    	; 0x3116 <checkMinim+0x1a8>
				lastState = 2;
    3046:	82 e0       	ldi	r24, 0x02	; 2
    3048:	80 93 14 06 	sts	0x0614, r24
				tmpCnt=0;
    304c:	10 92 ae 05 	sts	0x05AE, r1
		break;
		
		
	}
	
	return NO;
    3050:	80 e0       	ldi	r24, 0x00	; 0
    3052:	66 c0       	rjmp	.+204    	; 0x3120 <checkMinim+0x1b2>
				lastState = 2;
				tmpCnt=0;
			}
		break;
		case 2:
			tmpCnt++;
    3054:	80 91 ae 05 	lds	r24, 0x05AE
    3058:	8f 5f       	subi	r24, 0xFF	; 255
    305a:	80 93 ae 05 	sts	0x05AE, r24
			srTmp = sr;
    305e:	c0 92 1e 06 	sts	0x061E, r12
    3062:	d0 92 1f 06 	sts	0x061F, r13
    3066:	e0 92 20 06 	sts	0x0620, r14
    306a:	f0 92 21 06 	sts	0x0621, r15
			if(tmpCnt>3){
    306e:	84 30       	cpi	r24, 0x04	; 4
    3070:	08 f4       	brcc	.+2      	; 0x3074 <checkMinim+0x106>
    3072:	53 c0       	rjmp	.+166    	; 0x311a <checkMinim+0x1ac>
				lastState = 3;
    3074:	83 e0       	ldi	r24, 0x03	; 3
    3076:	80 93 14 06 	sts	0x0614, r24
				minTest = sr;	
    307a:	c0 92 a8 05 	sts	0x05A8, r12
    307e:	d0 92 a9 05 	sts	0x05A9, r13
    3082:	e0 92 aa 05 	sts	0x05AA, r14
    3086:	f0 92 ab 05 	sts	0x05AB, r15
		break;
		
		
	}
	
	return NO;
    308a:	80 e0       	ldi	r24, 0x00	; 0
    308c:	49 c0       	rjmp	.+146    	; 0x3120 <checkMinim+0x1b2>
				lastState = 3;
				minTest = sr;	
			}
		break;
		case 3:
			if( sr > srTmp )
    308e:	80 91 1e 06 	lds	r24, 0x061E
    3092:	90 91 1f 06 	lds	r25, 0x061F
    3096:	a0 91 20 06 	lds	r26, 0x0620
    309a:	b0 91 21 06 	lds	r27, 0x0621
    309e:	8c 15       	cp	r24, r12
    30a0:	9d 05       	cpc	r25, r13
    30a2:	ae 05       	cpc	r26, r14
    30a4:	bf 05       	cpc	r27, r15
    30a6:	48 f4       	brcc	.+18     	; 0x30ba <checkMinim+0x14c>
			{
				lastState = 4;
    30a8:	84 e0       	ldi	r24, 0x04	; 4
    30aa:	80 93 14 06 	sts	0x0614, r24
				tmpCnt = 0;
    30ae:	10 92 ae 05 	sts	0x05AE, r1
				rotirePeLoc(4, 65, LeftEngines);
    30b2:	41 e0       	ldi	r20, 0x01	; 1
    30b4:	61 e4       	ldi	r22, 0x41	; 65
    30b6:	0e 94 92 07 	call	0xf24	; 0xf24 <rotirePeLoc>
			}
			srTmp = sr;
    30ba:	c0 92 1e 06 	sts	0x061E, r12
    30be:	d0 92 1f 06 	sts	0x061F, r13
    30c2:	e0 92 20 06 	sts	0x0620, r14
    30c6:	f0 92 21 06 	sts	0x0621, r15
			minTest = minTest>sr?sr:minTest;
    30ca:	80 91 a8 05 	lds	r24, 0x05A8
    30ce:	90 91 a9 05 	lds	r25, 0x05A9
    30d2:	a0 91 aa 05 	lds	r26, 0x05AA
    30d6:	b0 91 ab 05 	lds	r27, 0x05AB
    30da:	8c 15       	cp	r24, r12
    30dc:	9d 05       	cpc	r25, r13
    30de:	ae 05       	cpc	r26, r14
    30e0:	bf 05       	cpc	r27, r15
    30e2:	10 f4       	brcc	.+4      	; 0x30e8 <checkMinim+0x17a>
    30e4:	6c 01       	movw	r12, r24
    30e6:	7d 01       	movw	r14, r26
    30e8:	c0 92 a8 05 	sts	0x05A8, r12
    30ec:	d0 92 a9 05 	sts	0x05A9, r13
    30f0:	e0 92 aa 05 	sts	0x05AA, r14
    30f4:	f0 92 ab 05 	sts	0x05AB, r15
		break;
		
		
	}
	
	return NO;
    30f8:	80 e0       	ldi	r24, 0x00	; 0
				tmpCnt = 0;
				rotirePeLoc(4, 65, LeftEngines);
			}
			srTmp = sr;
			minTest = minTest>sr?sr:minTest;
		break;
    30fa:	12 c0       	rjmp	.+36     	; 0x3120 <checkMinim+0x1b2>
		case 4:
			tmpCnt++;
    30fc:	80 91 ae 05 	lds	r24, 0x05AE
    3100:	8f 5f       	subi	r24, 0xFF	; 255
    3102:	80 93 ae 05 	sts	0x05AE, r24
			if(tmpCnt>4){
    3106:	85 30       	cpi	r24, 0x05	; 5
    3108:	50 f0       	brcs	.+20     	; 0x311e <checkMinim+0x1b0>
				stopEngines();
    310a:	0e 94 48 05 	call	0xa90	; 0xa90 <stopEngines>
				return YES;
    310e:	81 e0       	ldi	r24, 0x01	; 1
    3110:	07 c0       	rjmp	.+14     	; 0x3120 <checkMinim+0x1b2>
		break;
		
		
	}
	
	return NO;
    3112:	80 e0       	ldi	r24, 0x00	; 0
    3114:	05 c0       	rjmp	.+10     	; 0x3120 <checkMinim+0x1b2>
    3116:	80 e0       	ldi	r24, 0x00	; 0
    3118:	03 c0       	rjmp	.+6      	; 0x3120 <checkMinim+0x1b2>
    311a:	80 e0       	ldi	r24, 0x00	; 0
    311c:	01 c0       	rjmp	.+2      	; 0x3120 <checkMinim+0x1b2>
    311e:	80 e0       	ldi	r24, 0x00	; 0
	
}
    3120:	ff 90       	pop	r15
    3122:	ef 90       	pop	r14
    3124:	df 90       	pop	r13
    3126:	cf 90       	pop	r12
    3128:	08 95       	ret

0000312a <paralelParkingSMF>:
uint32_t distDeParcurs;

uint8_t checkMinim(void);
uint32_t xx;
uint8_t cnt2;
uint8_t paralelParkingSMF(){
    312a:	8f 92       	push	r8
    312c:	9f 92       	push	r9
    312e:	af 92       	push	r10
    3130:	bf 92       	push	r11
    3132:	cf 92       	push	r12
    3134:	df 92       	push	r13
    3136:	ef 92       	push	r14
    3138:	ff 92       	push	r15
    313a:	0f 93       	push	r16
	uint32_t fr, sr;
	fr = getValueOfSensor(FrontRightSensor);
    313c:	82 e0       	ldi	r24, 0x02	; 2
    313e:	0e 94 c5 08 	call	0x118a	; 0x118a <getValueOfSensor>
    3142:	4c 01       	movw	r8, r24
    3144:	a1 2c       	mov	r10, r1
    3146:	b1 2c       	mov	r11, r1
	//fr = getValueOfSensor(FrontRightSensor);
	sr = getValueOfSensor(SideRightSensor);
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	0e 94 c5 08 	call	0x118a	; 0x118a <getValueOfSensor>
    314e:	6c 01       	movw	r12, r24
    3150:	e1 2c       	mov	r14, r1
    3152:	f1 2c       	mov	r15, r1
	switch(statePP){
    3154:	40 91 ad 05 	lds	r20, 0x05AD
    3158:	50 e0       	ldi	r21, 0x00	; 0
    315a:	45 36       	cpi	r20, 0x65	; 101
    315c:	51 05       	cpc	r21, r1
    315e:	08 f0       	brcs	.+2      	; 0x3162 <paralelParkingSMF+0x38>
    3160:	5d c3       	rjmp	.+1722   	; 0x381c <paralelParkingSMF+0x6f2>
    3162:	fa 01       	movw	r30, r20
    3164:	e9 5a       	subi	r30, 0xA9	; 169
    3166:	ff 4f       	sbci	r31, 0xFF	; 255
    3168:	0c 94 57 1c 	jmp	0x38ae	; 0x38ae <__tablejump2__>
		case 33:
			goFront(30, 160);
    316c:	60 ea       	ldi	r22, 0xA0	; 160
    316e:	8e e1       	ldi	r24, 0x1E	; 30
    3170:	0e 94 bf 05 	call	0xb7e	; 0xb7e <goFront>
			distDeParcurs = DISTANTA_PARCURSA + 200;
    3174:	80 91 60 04 	lds	r24, 0x0460
    3178:	90 91 61 04 	lds	r25, 0x0461
    317c:	a0 91 62 04 	lds	r26, 0x0462
    3180:	b0 91 63 04 	lds	r27, 0x0463
    3184:	40 91 66 04 	lds	r20, 0x0466
    3188:	50 91 67 04 	lds	r21, 0x0467
    318c:	60 91 68 04 	lds	r22, 0x0468
    3190:	70 91 69 04 	lds	r23, 0x0469
    3194:	84 0f       	add	r24, r20
    3196:	95 1f       	adc	r25, r21
    3198:	a6 1f       	adc	r26, r22
    319a:	b7 1f       	adc	r27, r23
    319c:	b6 95       	lsr	r27
    319e:	a7 95       	ror	r26
    31a0:	97 95       	ror	r25
    31a2:	87 95       	ror	r24
    31a4:	b6 95       	lsr	r27
    31a6:	a7 95       	ror	r26
    31a8:	97 95       	ror	r25
    31aa:	87 95       	ror	r24
    31ac:	ac 01       	movw	r20, r24
    31ae:	bd 01       	movw	r22, r26
    31b0:	44 0f       	add	r20, r20
    31b2:	55 1f       	adc	r21, r21
    31b4:	66 1f       	adc	r22, r22
    31b6:	77 1f       	adc	r23, r23
    31b8:	44 0f       	add	r20, r20
    31ba:	55 1f       	adc	r21, r21
    31bc:	66 1f       	adc	r22, r22
    31be:	77 1f       	adc	r23, r23
    31c0:	6a 01       	movw	r12, r20
    31c2:	7b 01       	movw	r14, r22
    31c4:	cc 0c       	add	r12, r12
    31c6:	dd 1c       	adc	r13, r13
    31c8:	ee 1c       	adc	r14, r14
    31ca:	ff 1c       	adc	r15, r15
    31cc:	cc 0c       	add	r12, r12
    31ce:	dd 1c       	adc	r13, r13
    31d0:	ee 1c       	adc	r14, r14
    31d2:	ff 1c       	adc	r15, r15
    31d4:	4c 0d       	add	r20, r12
    31d6:	5d 1d       	adc	r21, r13
    31d8:	6e 1d       	adc	r22, r14
    31da:	7f 1d       	adc	r23, r15
    31dc:	84 0f       	add	r24, r20
    31de:	95 1f       	adc	r25, r21
    31e0:	a6 1f       	adc	r26, r22
    31e2:	b7 1f       	adc	r27, r23
    31e4:	88 53       	subi	r24, 0x38	; 56
    31e6:	9f 4f       	sbci	r25, 0xFF	; 255
    31e8:	af 4f       	sbci	r26, 0xFF	; 255
    31ea:	bf 4f       	sbci	r27, 0xFF	; 255
    31ec:	80 93 23 06 	sts	0x0623, r24
    31f0:	90 93 24 06 	sts	0x0624, r25
    31f4:	a0 93 25 06 	sts	0x0625, r26
    31f8:	b0 93 26 06 	sts	0x0626, r27
			statePP = 34;
    31fc:	82 e2       	ldi	r24, 0x22	; 34
    31fe:	80 93 ad 05 	sts	0x05AD, r24
				}
			//}
		
		break;
	}
	return NO;	
    3202:	80 e0       	ldi	r24, 0x00	; 0
	switch(statePP){
		case 33:
			goFront(30, 160);
			distDeParcurs = DISTANTA_PARCURSA + 200;
			statePP = 34;
		break;
    3204:	28 c3       	rjmp	.+1616   	; 0x3856 <paralelParkingSMF+0x72c>
		case 34:
			if(DISTANTA_PARCURSA > distDeParcurs){
    3206:	80 91 60 04 	lds	r24, 0x0460
    320a:	90 91 61 04 	lds	r25, 0x0461
    320e:	a0 91 62 04 	lds	r26, 0x0462
    3212:	b0 91 63 04 	lds	r27, 0x0463
    3216:	40 91 66 04 	lds	r20, 0x0466
    321a:	50 91 67 04 	lds	r21, 0x0467
    321e:	60 91 68 04 	lds	r22, 0x0468
    3222:	70 91 69 04 	lds	r23, 0x0469
    3226:	84 0f       	add	r24, r20
    3228:	95 1f       	adc	r25, r21
    322a:	a6 1f       	adc	r26, r22
    322c:	b7 1f       	adc	r27, r23
    322e:	b6 95       	lsr	r27
    3230:	a7 95       	ror	r26
    3232:	97 95       	ror	r25
    3234:	87 95       	ror	r24
    3236:	b6 95       	lsr	r27
    3238:	a7 95       	ror	r26
    323a:	97 95       	ror	r25
    323c:	87 95       	ror	r24
    323e:	ac 01       	movw	r20, r24
    3240:	bd 01       	movw	r22, r26
    3242:	44 0f       	add	r20, r20
    3244:	55 1f       	adc	r21, r21
    3246:	66 1f       	adc	r22, r22
    3248:	77 1f       	adc	r23, r23
    324a:	44 0f       	add	r20, r20
    324c:	55 1f       	adc	r21, r21
    324e:	66 1f       	adc	r22, r22
    3250:	77 1f       	adc	r23, r23
    3252:	6a 01       	movw	r12, r20
    3254:	7b 01       	movw	r14, r22
    3256:	cc 0c       	add	r12, r12
    3258:	dd 1c       	adc	r13, r13
    325a:	ee 1c       	adc	r14, r14
    325c:	ff 1c       	adc	r15, r15
    325e:	cc 0c       	add	r12, r12
    3260:	dd 1c       	adc	r13, r13
    3262:	ee 1c       	adc	r14, r14
    3264:	ff 1c       	adc	r15, r15
    3266:	4c 0d       	add	r20, r12
    3268:	5d 1d       	adc	r21, r13
    326a:	6e 1d       	adc	r22, r14
    326c:	7f 1d       	adc	r23, r15
    326e:	84 0f       	add	r24, r20
    3270:	95 1f       	adc	r25, r21
    3272:	a6 1f       	adc	r26, r22
    3274:	b7 1f       	adc	r27, r23
    3276:	c0 90 23 06 	lds	r12, 0x0623
    327a:	d0 90 24 06 	lds	r13, 0x0624
    327e:	e0 90 25 06 	lds	r14, 0x0625
    3282:	f0 90 26 06 	lds	r15, 0x0626
    3286:	c8 16       	cp	r12, r24
    3288:	d9 06       	cpc	r13, r25
    328a:	ea 06       	cpc	r14, r26
    328c:	fb 06       	cpc	r15, r27
    328e:	08 f0       	brcs	.+2      	; 0x3292 <paralelParkingSMF+0x168>
    3290:	c7 c2       	rjmp	.+1422   	; 0x3820 <paralelParkingSMF+0x6f6>
				statePP = 0;
    3292:	10 92 ad 05 	sts	0x05AD, r1
				stopEngines();
    3296:	0e 94 48 05 	call	0xa90	; 0xa90 <stopEngines>
				}
			//}
		
		break;
	}
	return NO;	
    329a:	80 e0       	ldi	r24, 0x00	; 0
    329c:	dc c2       	rjmp	.+1464   	; 0x3856 <paralelParkingSMF+0x72c>
				statePP = 0;
				stopEngines();
			}		
		break;
		case 0:
			if(SMRPcheck() == 1){
    329e:	0e 94 21 17 	call	0x2e42	; 0x2e42 <SMRPcheck>
    32a2:	81 30       	cpi	r24, 0x01	; 1
    32a4:	09 f0       	breq	.+2      	; 0x32a8 <paralelParkingSMF+0x17e>
    32a6:	be c2       	rjmp	.+1404   	; 0x3824 <paralelParkingSMF+0x6fa>
				statePP = 1;
    32a8:	80 93 ad 05 	sts	0x05AD, r24
				goFront(30, 60);
    32ac:	6c e3       	ldi	r22, 0x3C	; 60
    32ae:	8e e1       	ldi	r24, 0x1E	; 30
    32b0:	0e 94 bf 05 	call	0xb7e	; 0xb7e <goFront>
				}
			//}
		
		break;
	}
	return NO;	
    32b4:	80 e0       	ldi	r24, 0x00	; 0
    32b6:	cf c2       	rjmp	.+1438   	; 0x3856 <paralelParkingSMF+0x72c>
				statePP = 1;
				goFront(30, 60);
			}
		break;
		case 1:
			if(sr<130 && sr>40){
    32b8:	29 e2       	ldi	r18, 0x29	; 41
    32ba:	c2 1a       	sub	r12, r18
    32bc:	d1 08       	sbc	r13, r1
    32be:	e1 08       	sbc	r14, r1
    32c0:	f1 08       	sbc	r15, r1
    32c2:	39 e5       	ldi	r19, 0x59	; 89
    32c4:	c3 16       	cp	r12, r19
    32c6:	d1 04       	cpc	r13, r1
    32c8:	e1 04       	cpc	r14, r1
    32ca:	f1 04       	cpc	r15, r1
    32cc:	08 f0       	brcs	.+2      	; 0x32d0 <paralelParkingSMF+0x1a6>
    32ce:	ac c2       	rjmp	.+1368   	; 0x3828 <paralelParkingSMF+0x6fe>
				statePP = 2;
    32d0:	82 e0       	ldi	r24, 0x02	; 2
    32d2:	80 93 ad 05 	sts	0x05AD, r24
				}
			//}
		
		break;
	}
	return NO;	
    32d6:	80 e0       	ldi	r24, 0x00	; 0
    32d8:	be c2       	rjmp	.+1404   	; 0x3856 <paralelParkingSMF+0x72c>
			if(sr<130 && sr>40){
				statePP = 2;
			}
		break;
		case 2:
			if(sr > 300){
    32da:	4d e2       	ldi	r20, 0x2D	; 45
    32dc:	c4 16       	cp	r12, r20
    32de:	41 e0       	ldi	r20, 0x01	; 1
    32e0:	d4 06       	cpc	r13, r20
    32e2:	e1 04       	cpc	r14, r1
    32e4:	f1 04       	cpc	r15, r1
    32e6:	08 f4       	brcc	.+2      	; 0x32ea <paralelParkingSMF+0x1c0>
    32e8:	a1 c2       	rjmp	.+1346   	; 0x382c <paralelParkingSMF+0x702>
				statePP = 100;
    32ea:	84 e6       	ldi	r24, 0x64	; 100
    32ec:	80 93 ad 05 	sts	0x05AD, r24
				goBack(10, 30);				
    32f0:	6e e1       	ldi	r22, 0x1E	; 30
    32f2:	8a e0       	ldi	r24, 0x0A	; 10
    32f4:	0e 94 ef 05 	call	0xbde	; 0xbde <goBack>
				}
			//}
		
		break;
	}
	return NO;	
    32f8:	80 e0       	ldi	r24, 0x00	; 0
		break;
		case 2:
			if(sr > 300){
				statePP = 100;
				goBack(10, 30);				
				break;
    32fa:	ad c2       	rjmp	.+1370   	; 0x3856 <paralelParkingSMF+0x72c>
				//stopEngines();
			}
			
		break;
		case 100:
			if(sr<130 && sr>40){
    32fc:	59 e2       	ldi	r21, 0x29	; 41
    32fe:	c5 1a       	sub	r12, r21
    3300:	d1 08       	sbc	r13, r1
    3302:	e1 08       	sbc	r14, r1
    3304:	f1 08       	sbc	r15, r1
    3306:	89 e5       	ldi	r24, 0x59	; 89
    3308:	c8 16       	cp	r12, r24
    330a:	d1 04       	cpc	r13, r1
    330c:	e1 04       	cpc	r14, r1
    330e:	f1 04       	cpc	r15, r1
    3310:	08 f0       	brcs	.+2      	; 0x3314 <paralelParkingSMF+0x1ea>
    3312:	8e c2       	rjmp	.+1308   	; 0x3830 <paralelParkingSMF+0x706>
				//stopEngines();
				goFront(20, 50);
    3314:	62 e3       	ldi	r22, 0x32	; 50
    3316:	84 e1       	ldi	r24, 0x14	; 20
    3318:	0e 94 bf 05 	call	0xb7e	; 0xb7e <goFront>
				distDeParcurs = DISTANTA_PARCURSA + 110;
    331c:	80 91 60 04 	lds	r24, 0x0460
    3320:	90 91 61 04 	lds	r25, 0x0461
    3324:	a0 91 62 04 	lds	r26, 0x0462
    3328:	b0 91 63 04 	lds	r27, 0x0463
    332c:	40 91 66 04 	lds	r20, 0x0466
    3330:	50 91 67 04 	lds	r21, 0x0467
    3334:	60 91 68 04 	lds	r22, 0x0468
    3338:	70 91 69 04 	lds	r23, 0x0469
    333c:	84 0f       	add	r24, r20
    333e:	95 1f       	adc	r25, r21
    3340:	a6 1f       	adc	r26, r22
    3342:	b7 1f       	adc	r27, r23
    3344:	b6 95       	lsr	r27
    3346:	a7 95       	ror	r26
    3348:	97 95       	ror	r25
    334a:	87 95       	ror	r24
    334c:	b6 95       	lsr	r27
    334e:	a7 95       	ror	r26
    3350:	97 95       	ror	r25
    3352:	87 95       	ror	r24
    3354:	ac 01       	movw	r20, r24
    3356:	bd 01       	movw	r22, r26
    3358:	44 0f       	add	r20, r20
    335a:	55 1f       	adc	r21, r21
    335c:	66 1f       	adc	r22, r22
    335e:	77 1f       	adc	r23, r23
    3360:	44 0f       	add	r20, r20
    3362:	55 1f       	adc	r21, r21
    3364:	66 1f       	adc	r22, r22
    3366:	77 1f       	adc	r23, r23
    3368:	6a 01       	movw	r12, r20
    336a:	7b 01       	movw	r14, r22
    336c:	cc 0c       	add	r12, r12
    336e:	dd 1c       	adc	r13, r13
    3370:	ee 1c       	adc	r14, r14
    3372:	ff 1c       	adc	r15, r15
    3374:	cc 0c       	add	r12, r12
    3376:	dd 1c       	adc	r13, r13
    3378:	ee 1c       	adc	r14, r14
    337a:	ff 1c       	adc	r15, r15
    337c:	4c 0d       	add	r20, r12
    337e:	5d 1d       	adc	r21, r13
    3380:	6e 1d       	adc	r22, r14
    3382:	7f 1d       	adc	r23, r15
    3384:	84 0f       	add	r24, r20
    3386:	95 1f       	adc	r25, r21
    3388:	a6 1f       	adc	r26, r22
    338a:	b7 1f       	adc	r27, r23
    338c:	82 59       	subi	r24, 0x92	; 146
    338e:	9f 4f       	sbci	r25, 0xFF	; 255
    3390:	af 4f       	sbci	r26, 0xFF	; 255
    3392:	bf 4f       	sbci	r27, 0xFF	; 255
    3394:	80 93 23 06 	sts	0x0623, r24
    3398:	90 93 24 06 	sts	0x0624, r25
    339c:	a0 93 25 06 	sts	0x0625, r26
    33a0:	b0 93 26 06 	sts	0x0626, r27
				statePP = 3;
    33a4:	83 e0       	ldi	r24, 0x03	; 3
    33a6:	80 93 ad 05 	sts	0x05AD, r24
				}
			//}
		
		break;
	}
	return NO;	
    33aa:	80 e0       	ldi	r24, 0x00	; 0
			if(sr<130 && sr>40){
				//stopEngines();
				goFront(20, 50);
				distDeParcurs = DISTANTA_PARCURSA + 110;
				statePP = 3;
				break;
    33ac:	54 c2       	rjmp	.+1192   	; 0x3856 <paralelParkingSMF+0x72c>
				stopEngines();				
				//return YES;
			}
		break;*/
		case 3:
			if(DISTANTA_PARCURSA > distDeParcurs){
    33ae:	80 91 60 04 	lds	r24, 0x0460
    33b2:	90 91 61 04 	lds	r25, 0x0461
    33b6:	a0 91 62 04 	lds	r26, 0x0462
    33ba:	b0 91 63 04 	lds	r27, 0x0463
    33be:	40 91 66 04 	lds	r20, 0x0466
    33c2:	50 91 67 04 	lds	r21, 0x0467
    33c6:	60 91 68 04 	lds	r22, 0x0468
    33ca:	70 91 69 04 	lds	r23, 0x0469
    33ce:	84 0f       	add	r24, r20
    33d0:	95 1f       	adc	r25, r21
    33d2:	a6 1f       	adc	r26, r22
    33d4:	b7 1f       	adc	r27, r23
    33d6:	b6 95       	lsr	r27
    33d8:	a7 95       	ror	r26
    33da:	97 95       	ror	r25
    33dc:	87 95       	ror	r24
    33de:	b6 95       	lsr	r27
    33e0:	a7 95       	ror	r26
    33e2:	97 95       	ror	r25
    33e4:	87 95       	ror	r24
    33e6:	ac 01       	movw	r20, r24
    33e8:	bd 01       	movw	r22, r26
    33ea:	44 0f       	add	r20, r20
    33ec:	55 1f       	adc	r21, r21
    33ee:	66 1f       	adc	r22, r22
    33f0:	77 1f       	adc	r23, r23
    33f2:	44 0f       	add	r20, r20
    33f4:	55 1f       	adc	r21, r21
    33f6:	66 1f       	adc	r22, r22
    33f8:	77 1f       	adc	r23, r23
    33fa:	6a 01       	movw	r12, r20
    33fc:	7b 01       	movw	r14, r22
    33fe:	cc 0c       	add	r12, r12
    3400:	dd 1c       	adc	r13, r13
    3402:	ee 1c       	adc	r14, r14
    3404:	ff 1c       	adc	r15, r15
    3406:	cc 0c       	add	r12, r12
    3408:	dd 1c       	adc	r13, r13
    340a:	ee 1c       	adc	r14, r14
    340c:	ff 1c       	adc	r15, r15
    340e:	4c 0d       	add	r20, r12
    3410:	5d 1d       	adc	r21, r13
    3412:	6e 1d       	adc	r22, r14
    3414:	7f 1d       	adc	r23, r15
    3416:	84 0f       	add	r24, r20
    3418:	95 1f       	adc	r25, r21
    341a:	a6 1f       	adc	r26, r22
    341c:	b7 1f       	adc	r27, r23
    341e:	c0 90 23 06 	lds	r12, 0x0623
    3422:	d0 90 24 06 	lds	r13, 0x0624
    3426:	e0 90 25 06 	lds	r14, 0x0625
    342a:	f0 90 26 06 	lds	r15, 0x0626
    342e:	c8 16       	cp	r12, r24
    3430:	d9 06       	cpc	r13, r25
    3432:	ea 06       	cpc	r14, r26
    3434:	fb 06       	cpc	r15, r27
    3436:	08 f0       	brcs	.+2      	; 0x343a <paralelParkingSMF+0x310>
    3438:	fd c1       	rjmp	.+1018   	; 0x3834 <paralelParkingSMF+0x70a>
				stopEngines();
    343a:	0e 94 48 05 	call	0xa90	; 0xa90 <stopEngines>
				statePP = 4;
    343e:	84 e0       	ldi	r24, 0x04	; 4
    3440:	80 93 ad 05 	sts	0x05AD, r24
				rotireSmechera(5, 0, 170, 1, 50);
    3444:	02 e3       	ldi	r16, 0x32	; 50
    3446:	21 e0       	ldi	r18, 0x01	; 1
    3448:	4a ea       	ldi	r20, 0xAA	; 170
    344a:	60 e0       	ldi	r22, 0x00	; 0
    344c:	85 e0       	ldi	r24, 0x05	; 5
    344e:	0e 94 d7 06 	call	0xdae	; 0xdae <rotireSmechera>
				}
			//}
		
		break;
	}
	return NO;	
    3452:	80 e0       	ldi	r24, 0x00	; 0
    3454:	00 c2       	rjmp	.+1024   	; 0x3856 <paralelParkingSMF+0x72c>
				statePP = 4;
				rotireSmechera(5, 0, 170, 1, 50);
			}
		break;
		case 4:
			if(sr<200){
    3456:	28 ec       	ldi	r18, 0xC8	; 200
    3458:	c2 16       	cp	r12, r18
    345a:	d1 04       	cpc	r13, r1
    345c:	e1 04       	cpc	r14, r1
    345e:	f1 04       	cpc	r15, r1
    3460:	08 f0       	brcs	.+2      	; 0x3464 <paralelParkingSMF+0x33a>
    3462:	ea c1       	rjmp	.+980    	; 0x3838 <paralelParkingSMF+0x70e>
				statePP = 5;
    3464:	85 e0       	ldi	r24, 0x05	; 5
    3466:	80 93 ad 05 	sts	0x05AD, r24
				rotirePeLoc(10, 70, LeftEngines);
    346a:	41 e0       	ldi	r20, 0x01	; 1
    346c:	66 e4       	ldi	r22, 0x46	; 70
    346e:	8a e0       	ldi	r24, 0x0A	; 10
    3470:	0e 94 92 07 	call	0xf24	; 0xf24 <rotirePeLoc>
				}
			//}
		
		break;
	}
	return NO;	
    3474:	80 e0       	ldi	r24, 0x00	; 0
    3476:	ef c1       	rjmp	.+990    	; 0x3856 <paralelParkingSMF+0x72c>
				statePP = 5;
				rotirePeLoc(10, 70, LeftEngines);
			}
		break;
		case 5:
			if(sr>220)
    3478:	3d ed       	ldi	r19, 0xDD	; 221
    347a:	c3 16       	cp	r12, r19
    347c:	d1 04       	cpc	r13, r1
    347e:	e1 04       	cpc	r14, r1
    3480:	f1 04       	cpc	r15, r1
    3482:	08 f4       	brcc	.+2      	; 0x3486 <paralelParkingSMF+0x35c>
    3484:	db c1       	rjmp	.+950    	; 0x383c <paralelParkingSMF+0x712>
			{
				goFront(15, 50);
    3486:	62 e3       	ldi	r22, 0x32	; 50
    3488:	8f e0       	ldi	r24, 0x0F	; 15
    348a:	0e 94 bf 05 	call	0xb7e	; 0xb7e <goFront>
				statePP = 6;
    348e:	86 e0       	ldi	r24, 0x06	; 6
    3490:	80 93 ad 05 	sts	0x05AD, r24
				}
			//}
		
		break;
	}
	return NO;	
    3494:	80 e0       	ldi	r24, 0x00	; 0
    3496:	df c1       	rjmp	.+958    	; 0x3856 <paralelParkingSMF+0x72c>
				goFront(15, 50);
				statePP = 6;
			}
		break;
		case 6:
			if(fr < 170){
    3498:	4a ea       	ldi	r20, 0xAA	; 170
    349a:	84 16       	cp	r8, r20
    349c:	91 04       	cpc	r9, r1
    349e:	a1 04       	cpc	r10, r1
    34a0:	b1 04       	cpc	r11, r1
    34a2:	08 f0       	brcs	.+2      	; 0x34a6 <paralelParkingSMF+0x37c>
    34a4:	cd c1       	rjmp	.+922    	; 0x3840 <paralelParkingSMF+0x716>
				statePP = 7;
    34a6:	87 e0       	ldi	r24, 0x07	; 7
    34a8:	80 93 ad 05 	sts	0x05AD, r24
				lastState = 0;
    34ac:	10 92 14 06 	sts	0x0614, r1
				srTmp = 0;
    34b0:	10 92 1e 06 	sts	0x061E, r1
    34b4:	10 92 1f 06 	sts	0x061F, r1
    34b8:	10 92 20 06 	sts	0x0620, r1
    34bc:	10 92 21 06 	sts	0x0621, r1
				}
			//}
		
		break;
	}
	return NO;	
    34c0:	80 e0       	ldi	r24, 0x00	; 0
    34c2:	c9 c1       	rjmp	.+914    	; 0x3856 <paralelParkingSMF+0x72c>
				lastState = 0;
				srTmp = 0;
			}
		break;
		case 7:
			if(checkMinim()){
    34c4:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <checkMinim>
    34c8:	88 23       	and	r24, r24
    34ca:	09 f4       	brne	.+2      	; 0x34ce <paralelParkingSMF+0x3a4>
    34cc:	bb c1       	rjmp	.+886    	; 0x3844 <paralelParkingSMF+0x71a>
				//stopEngines();
				statePP = 8;
    34ce:	88 e0       	ldi	r24, 0x08	; 8
    34d0:	80 93 ad 05 	sts	0x05AD, r24
				goFront(15, 40);
    34d4:	68 e2       	ldi	r22, 0x28	; 40
    34d6:	8f e0       	ldi	r24, 0x0F	; 15
    34d8:	0e 94 bf 05 	call	0xb7e	; 0xb7e <goFront>
				}
			//}
		
		break;
	}
	return NO;	
    34dc:	80 e0       	ldi	r24, 0x00	; 0
    34de:	bb c1       	rjmp	.+886    	; 0x3856 <paralelParkingSMF+0x72c>
				statePP = 8;
				goFront(15, 40);
			}		
		break;
		case 8:
			if(fr<100){
    34e0:	54 e6       	ldi	r21, 0x64	; 100
    34e2:	85 16       	cp	r8, r21
    34e4:	91 04       	cpc	r9, r1
    34e6:	a1 04       	cpc	r10, r1
    34e8:	b1 04       	cpc	r11, r1
    34ea:	08 f0       	brcs	.+2      	; 0x34ee <paralelParkingSMF+0x3c4>
    34ec:	ad c1       	rjmp	.+858    	; 0x3848 <paralelParkingSMF+0x71e>
				//stopEngines();
				//return YES;
				distDeParcurs = DISTANTA_PARCURSA + 100;
    34ee:	80 91 60 04 	lds	r24, 0x0460
    34f2:	90 91 61 04 	lds	r25, 0x0461
    34f6:	a0 91 62 04 	lds	r26, 0x0462
    34fa:	b0 91 63 04 	lds	r27, 0x0463
    34fe:	40 91 66 04 	lds	r20, 0x0466
    3502:	50 91 67 04 	lds	r21, 0x0467
    3506:	60 91 68 04 	lds	r22, 0x0468
    350a:	70 91 69 04 	lds	r23, 0x0469
    350e:	84 0f       	add	r24, r20
    3510:	95 1f       	adc	r25, r21
    3512:	a6 1f       	adc	r26, r22
    3514:	b7 1f       	adc	r27, r23
    3516:	b6 95       	lsr	r27
    3518:	a7 95       	ror	r26
    351a:	97 95       	ror	r25
    351c:	87 95       	ror	r24
    351e:	b6 95       	lsr	r27
    3520:	a7 95       	ror	r26
    3522:	97 95       	ror	r25
    3524:	87 95       	ror	r24
    3526:	ac 01       	movw	r20, r24
    3528:	bd 01       	movw	r22, r26
    352a:	44 0f       	add	r20, r20
    352c:	55 1f       	adc	r21, r21
    352e:	66 1f       	adc	r22, r22
    3530:	77 1f       	adc	r23, r23
    3532:	44 0f       	add	r20, r20
    3534:	55 1f       	adc	r21, r21
    3536:	66 1f       	adc	r22, r22
    3538:	77 1f       	adc	r23, r23
    353a:	6a 01       	movw	r12, r20
    353c:	7b 01       	movw	r14, r22
    353e:	cc 0c       	add	r12, r12
    3540:	dd 1c       	adc	r13, r13
    3542:	ee 1c       	adc	r14, r14
    3544:	ff 1c       	adc	r15, r15
    3546:	cc 0c       	add	r12, r12
    3548:	dd 1c       	adc	r13, r13
    354a:	ee 1c       	adc	r14, r14
    354c:	ff 1c       	adc	r15, r15
    354e:	4c 0d       	add	r20, r12
    3550:	5d 1d       	adc	r21, r13
    3552:	6e 1d       	adc	r22, r14
    3554:	7f 1d       	adc	r23, r15
    3556:	84 0f       	add	r24, r20
    3558:	95 1f       	adc	r25, r21
    355a:	a6 1f       	adc	r26, r22
    355c:	b7 1f       	adc	r27, r23
    355e:	8c 59       	subi	r24, 0x9C	; 156
    3560:	9f 4f       	sbci	r25, 0xFF	; 255
    3562:	af 4f       	sbci	r26, 0xFF	; 255
    3564:	bf 4f       	sbci	r27, 0xFF	; 255
    3566:	80 93 23 06 	sts	0x0623, r24
    356a:	90 93 24 06 	sts	0x0624, r25
    356e:	a0 93 25 06 	sts	0x0625, r26
    3572:	b0 93 26 06 	sts	0x0626, r27
				statePP = 9;
    3576:	89 e0       	ldi	r24, 0x09	; 9
    3578:	80 93 ad 05 	sts	0x05AD, r24
				goBack(10, 50);				
    357c:	62 e3       	ldi	r22, 0x32	; 50
    357e:	8a e0       	ldi	r24, 0x0A	; 10
    3580:	0e 94 ef 05 	call	0xbde	; 0xbde <goBack>
				}
			//}
		
		break;
	}
	return NO;	
    3584:	80 e0       	ldi	r24, 0x00	; 0
    3586:	67 c1       	rjmp	.+718    	; 0x3856 <paralelParkingSMF+0x72c>
				statePP = 9;
				goBack(10, 50);				
			}
		break;
		case 9:
			if(DISTANTA_PARCURSA > distDeParcurs){
    3588:	80 91 60 04 	lds	r24, 0x0460
    358c:	90 91 61 04 	lds	r25, 0x0461
    3590:	a0 91 62 04 	lds	r26, 0x0462
    3594:	b0 91 63 04 	lds	r27, 0x0463
    3598:	40 91 66 04 	lds	r20, 0x0466
    359c:	50 91 67 04 	lds	r21, 0x0467
    35a0:	60 91 68 04 	lds	r22, 0x0468
    35a4:	70 91 69 04 	lds	r23, 0x0469
    35a8:	84 0f       	add	r24, r20
    35aa:	95 1f       	adc	r25, r21
    35ac:	a6 1f       	adc	r26, r22
    35ae:	b7 1f       	adc	r27, r23
    35b0:	b6 95       	lsr	r27
    35b2:	a7 95       	ror	r26
    35b4:	97 95       	ror	r25
    35b6:	87 95       	ror	r24
    35b8:	b6 95       	lsr	r27
    35ba:	a7 95       	ror	r26
    35bc:	97 95       	ror	r25
    35be:	87 95       	ror	r24
    35c0:	ac 01       	movw	r20, r24
    35c2:	bd 01       	movw	r22, r26
    35c4:	44 0f       	add	r20, r20
    35c6:	55 1f       	adc	r21, r21
    35c8:	66 1f       	adc	r22, r22
    35ca:	77 1f       	adc	r23, r23
    35cc:	44 0f       	add	r20, r20
    35ce:	55 1f       	adc	r21, r21
    35d0:	66 1f       	adc	r22, r22
    35d2:	77 1f       	adc	r23, r23
    35d4:	6a 01       	movw	r12, r20
    35d6:	7b 01       	movw	r14, r22
    35d8:	cc 0c       	add	r12, r12
    35da:	dd 1c       	adc	r13, r13
    35dc:	ee 1c       	adc	r14, r14
    35de:	ff 1c       	adc	r15, r15
    35e0:	cc 0c       	add	r12, r12
    35e2:	dd 1c       	adc	r13, r13
    35e4:	ee 1c       	adc	r14, r14
    35e6:	ff 1c       	adc	r15, r15
    35e8:	4c 0d       	add	r20, r12
    35ea:	5d 1d       	adc	r21, r13
    35ec:	6e 1d       	adc	r22, r14
    35ee:	7f 1d       	adc	r23, r15
    35f0:	84 0f       	add	r24, r20
    35f2:	95 1f       	adc	r25, r21
    35f4:	a6 1f       	adc	r26, r22
    35f6:	b7 1f       	adc	r27, r23
    35f8:	c0 90 23 06 	lds	r12, 0x0623
    35fc:	d0 90 24 06 	lds	r13, 0x0624
    3600:	e0 90 25 06 	lds	r14, 0x0625
    3604:	f0 90 26 06 	lds	r15, 0x0626
    3608:	c8 16       	cp	r12, r24
    360a:	d9 06       	cpc	r13, r25
    360c:	ea 06       	cpc	r14, r26
    360e:	fb 06       	cpc	r15, r27
    3610:	08 f0       	brcs	.+2      	; 0x3614 <paralelParkingSMF+0x4ea>
    3612:	1c c1       	rjmp	.+568    	; 0x384c <paralelParkingSMF+0x722>
				stopEngines();
    3614:	0e 94 48 05 	call	0xa90	; 0xa90 <stopEngines>
				//return YES;
				statePP = 10;
    3618:	8a e0       	ldi	r24, 0x0A	; 10
    361a:	80 93 ad 05 	sts	0x05AD, r24
				}
			//}
		
		break;
	}
	return NO;	
    361e:	80 e0       	ldi	r24, 0x00	; 0
    3620:	1a c1       	rjmp	.+564    	; 0x3856 <paralelParkingSMF+0x72c>
			}
		
		break;
		case 10:
			if( 1 || SMRPcheck()){
				stopEngines();
    3622:	0e 94 48 05 	call	0xa90	; 0xa90 <stopEngines>
				distDeParcurs = DISTANTA_PARCURSA + 30;
    3626:	80 91 60 04 	lds	r24, 0x0460
    362a:	90 91 61 04 	lds	r25, 0x0461
    362e:	a0 91 62 04 	lds	r26, 0x0462
    3632:	b0 91 63 04 	lds	r27, 0x0463
    3636:	40 91 66 04 	lds	r20, 0x0466
    363a:	50 91 67 04 	lds	r21, 0x0467
    363e:	60 91 68 04 	lds	r22, 0x0468
    3642:	70 91 69 04 	lds	r23, 0x0469
    3646:	84 0f       	add	r24, r20
    3648:	95 1f       	adc	r25, r21
    364a:	a6 1f       	adc	r26, r22
    364c:	b7 1f       	adc	r27, r23
    364e:	b6 95       	lsr	r27
    3650:	a7 95       	ror	r26
    3652:	97 95       	ror	r25
    3654:	87 95       	ror	r24
    3656:	b6 95       	lsr	r27
    3658:	a7 95       	ror	r26
    365a:	97 95       	ror	r25
    365c:	87 95       	ror	r24
    365e:	ac 01       	movw	r20, r24
    3660:	bd 01       	movw	r22, r26
    3662:	44 0f       	add	r20, r20
    3664:	55 1f       	adc	r21, r21
    3666:	66 1f       	adc	r22, r22
    3668:	77 1f       	adc	r23, r23
    366a:	44 0f       	add	r20, r20
    366c:	55 1f       	adc	r21, r21
    366e:	66 1f       	adc	r22, r22
    3670:	77 1f       	adc	r23, r23
    3672:	4a 01       	movw	r8, r20
    3674:	5b 01       	movw	r10, r22
    3676:	88 0c       	add	r8, r8
    3678:	99 1c       	adc	r9, r9
    367a:	aa 1c       	adc	r10, r10
    367c:	bb 1c       	adc	r11, r11
    367e:	88 0c       	add	r8, r8
    3680:	99 1c       	adc	r9, r9
    3682:	aa 1c       	adc	r10, r10
    3684:	bb 1c       	adc	r11, r11
    3686:	48 0d       	add	r20, r8
    3688:	59 1d       	adc	r21, r9
    368a:	6a 1d       	adc	r22, r10
    368c:	7b 1d       	adc	r23, r11
    368e:	84 0f       	add	r24, r20
    3690:	95 1f       	adc	r25, r21
    3692:	a6 1f       	adc	r26, r22
    3694:	b7 1f       	adc	r27, r23
    3696:	4e 96       	adiw	r24, 0x1e	; 30
    3698:	a1 1d       	adc	r26, r1
    369a:	b1 1d       	adc	r27, r1
    369c:	80 93 23 06 	sts	0x0623, r24
    36a0:	90 93 24 06 	sts	0x0624, r25
    36a4:	a0 93 25 06 	sts	0x0625, r26
    36a8:	b0 93 26 06 	sts	0x0626, r27
				statePP = 11;
    36ac:	8b e0       	ldi	r24, 0x0B	; 11
    36ae:	80 93 ad 05 	sts	0x05AD, r24
				goFront(10, 50);
    36b2:	62 e3       	ldi	r22, 0x32	; 50
    36b4:	8a e0       	ldi	r24, 0x0A	; 10
    36b6:	0e 94 bf 05 	call	0xb7e	; 0xb7e <goFront>
				xx = sr;
    36ba:	c0 92 19 06 	sts	0x0619, r12
    36be:	d0 92 1a 06 	sts	0x061A, r13
    36c2:	e0 92 1b 06 	sts	0x061B, r14
    36c6:	f0 92 1c 06 	sts	0x061C, r15
				}
			//}
		
		break;
	}
	return NO;	
    36ca:	80 e0       	ldi	r24, 0x00	; 0
				goFront(10, 50);
				xx = sr;
				//return YES;
			}
		
		break;
    36cc:	c4 c0       	rjmp	.+392    	; 0x3856 <paralelParkingSMF+0x72c>
		case 11:
			if(DISTANTA_PARCURSA > distDeParcurs){
    36ce:	80 91 60 04 	lds	r24, 0x0460
    36d2:	90 91 61 04 	lds	r25, 0x0461
    36d6:	a0 91 62 04 	lds	r26, 0x0462
    36da:	b0 91 63 04 	lds	r27, 0x0463
    36de:	40 91 66 04 	lds	r20, 0x0466
    36e2:	50 91 67 04 	lds	r21, 0x0467
    36e6:	60 91 68 04 	lds	r22, 0x0468
    36ea:	70 91 69 04 	lds	r23, 0x0469
    36ee:	84 0f       	add	r24, r20
    36f0:	95 1f       	adc	r25, r21
    36f2:	a6 1f       	adc	r26, r22
    36f4:	b7 1f       	adc	r27, r23
    36f6:	b6 95       	lsr	r27
    36f8:	a7 95       	ror	r26
    36fa:	97 95       	ror	r25
    36fc:	87 95       	ror	r24
    36fe:	b6 95       	lsr	r27
    3700:	a7 95       	ror	r26
    3702:	97 95       	ror	r25
    3704:	87 95       	ror	r24
    3706:	ac 01       	movw	r20, r24
    3708:	bd 01       	movw	r22, r26
    370a:	44 0f       	add	r20, r20
    370c:	55 1f       	adc	r21, r21
    370e:	66 1f       	adc	r22, r22
    3710:	77 1f       	adc	r23, r23
    3712:	44 0f       	add	r20, r20
    3714:	55 1f       	adc	r21, r21
    3716:	66 1f       	adc	r22, r22
    3718:	77 1f       	adc	r23, r23
    371a:	4a 01       	movw	r8, r20
    371c:	5b 01       	movw	r10, r22
    371e:	88 0c       	add	r8, r8
    3720:	99 1c       	adc	r9, r9
    3722:	aa 1c       	adc	r10, r10
    3724:	bb 1c       	adc	r11, r11
    3726:	88 0c       	add	r8, r8
    3728:	99 1c       	adc	r9, r9
    372a:	aa 1c       	adc	r10, r10
    372c:	bb 1c       	adc	r11, r11
    372e:	48 0d       	add	r20, r8
    3730:	59 1d       	adc	r21, r9
    3732:	6a 1d       	adc	r22, r10
    3734:	7b 1d       	adc	r23, r11
    3736:	84 0f       	add	r24, r20
    3738:	95 1f       	adc	r25, r21
    373a:	a6 1f       	adc	r26, r22
    373c:	b7 1f       	adc	r27, r23
    373e:	80 90 23 06 	lds	r8, 0x0623
    3742:	90 90 24 06 	lds	r9, 0x0624
    3746:	a0 90 25 06 	lds	r10, 0x0625
    374a:	b0 90 26 06 	lds	r11, 0x0626
    374e:	88 16       	cp	r8, r24
    3750:	99 06       	cpc	r9, r25
    3752:	aa 06       	cpc	r10, r26
    3754:	bb 06       	cpc	r11, r27
    3756:	08 f0       	brcs	.+2      	; 0x375a <paralelParkingSMF+0x630>
    3758:	7b c0       	rjmp	.+246    	; 0x3850 <paralelParkingSMF+0x726>
				if(xx > sr +5){
    375a:	80 91 19 06 	lds	r24, 0x0619
    375e:	90 91 1a 06 	lds	r25, 0x061A
    3762:	a0 91 1b 06 	lds	r26, 0x061B
    3766:	b0 91 1c 06 	lds	r27, 0x061C
    376a:	46 01       	movw	r8, r12
    376c:	57 01       	movw	r10, r14
    376e:	25 e0       	ldi	r18, 0x05	; 5
    3770:	82 0e       	add	r8, r18
    3772:	91 1c       	adc	r9, r1
    3774:	a1 1c       	adc	r10, r1
    3776:	b1 1c       	adc	r11, r1
    3778:	88 16       	cp	r8, r24
    377a:	99 06       	cpc	r9, r25
    377c:	aa 06       	cpc	r10, r26
    377e:	bb 06       	cpc	r11, r27
    3780:	a0 f4       	brcc	.+40     	; 0x37aa <paralelParkingSMF+0x680>
					cnt2 = (xx-sr)%10;
    3782:	bc 01       	movw	r22, r24
    3784:	cd 01       	movw	r24, r26
    3786:	6c 19       	sub	r22, r12
    3788:	7d 09       	sbc	r23, r13
    378a:	8e 09       	sbc	r24, r14
    378c:	9f 09       	sbc	r25, r15
    378e:	2a e0       	ldi	r18, 0x0A	; 10
    3790:	30 e0       	ldi	r19, 0x00	; 0
    3792:	40 e0       	ldi	r20, 0x00	; 0
    3794:	50 e0       	ldi	r21, 0x00	; 0
    3796:	0e 94 35 1c 	call	0x386a	; 0x386a <__udivmodsi4>
    379a:	60 93 ac 05 	sts	0x05AC, r22
					rotirePeLoc(2, 75, RightEngines);
    379e:	40 e0       	ldi	r20, 0x00	; 0
    37a0:	6b e4       	ldi	r22, 0x4B	; 75
    37a2:	82 e0       	ldi	r24, 0x02	; 2
    37a4:	0e 94 92 07 	call	0xf24	; 0xf24 <rotirePeLoc>
    37a8:	27 c0       	rjmp	.+78     	; 0x37f8 <paralelParkingSMF+0x6ce>
				}
				else if(sr > xx + 5){
    37aa:	4c 01       	movw	r8, r24
    37ac:	5d 01       	movw	r10, r26
    37ae:	35 e0       	ldi	r19, 0x05	; 5
    37b0:	83 0e       	add	r8, r19
    37b2:	91 1c       	adc	r9, r1
    37b4:	a1 1c       	adc	r10, r1
    37b6:	b1 1c       	adc	r11, r1
    37b8:	8c 14       	cp	r8, r12
    37ba:	9d 04       	cpc	r9, r13
    37bc:	ae 04       	cpc	r10, r14
    37be:	bf 04       	cpc	r11, r15
    37c0:	b0 f4       	brcc	.+44     	; 0x37ee <paralelParkingSMF+0x6c4>
					cnt2 = (sr-xx)%10;
    37c2:	a7 01       	movw	r20, r14
    37c4:	96 01       	movw	r18, r12
    37c6:	28 1b       	sub	r18, r24
    37c8:	39 0b       	sbc	r19, r25
    37ca:	4a 0b       	sbc	r20, r26
    37cc:	5b 0b       	sbc	r21, r27
    37ce:	ca 01       	movw	r24, r20
    37d0:	b9 01       	movw	r22, r18
    37d2:	2a e0       	ldi	r18, 0x0A	; 10
    37d4:	30 e0       	ldi	r19, 0x00	; 0
    37d6:	40 e0       	ldi	r20, 0x00	; 0
    37d8:	50 e0       	ldi	r21, 0x00	; 0
    37da:	0e 94 35 1c 	call	0x386a	; 0x386a <__udivmodsi4>
    37de:	60 93 ac 05 	sts	0x05AC, r22
					rotirePeLoc(2, 75, LeftEngines);
    37e2:	41 e0       	ldi	r20, 0x01	; 1
    37e4:	6b e4       	ldi	r22, 0x4B	; 75
    37e6:	82 e0       	ldi	r24, 0x02	; 2
    37e8:	0e 94 92 07 	call	0xf24	; 0xf24 <rotirePeLoc>
    37ec:	05 c0       	rjmp	.+10     	; 0x37f8 <paralelParkingSMF+0x6ce>
				}else{
					cnt2 = 1;
    37ee:	81 e0       	ldi	r24, 0x01	; 1
    37f0:	80 93 ac 05 	sts	0x05AC, r24
					stopEngines();
    37f4:	0e 94 48 05 	call	0xa90	; 0xa90 <stopEngines>
				}
				statePP = 12;
    37f8:	8c e0       	ldi	r24, 0x0C	; 12
    37fa:	80 93 ad 05 	sts	0x05AD, r24
				}
			//}
		
		break;
	}
	return NO;	
    37fe:	80 e0       	ldi	r24, 0x00	; 0
    3800:	2a c0       	rjmp	.+84     	; 0x3856 <paralelParkingSMF+0x72c>
				statePP = 12;
			}
		break;
		case 12:
			//if(DISTANTA_PARCURSA > distDeParcurs){
				cnt2 --;
    3802:	80 91 ac 05 	lds	r24, 0x05AC
    3806:	81 50       	subi	r24, 0x01	; 1
    3808:	80 93 ac 05 	sts	0x05AC, r24
				if(cnt2 == 0){
    380c:	81 11       	cpse	r24, r1
    380e:	22 c0       	rjmp	.+68     	; 0x3854 <paralelParkingSMF+0x72a>
					BTTransmitStr("xAm parcat paralel!");
    3810:	89 e2       	ldi	r24, 0x29	; 41
    3812:	94 e0       	ldi	r25, 0x04	; 4
    3814:	0e 94 a9 01 	call	0x352	; 0x352 <BTTransmitStr>
					//stopEngines();
					return YES;
    3818:	81 e0       	ldi	r24, 0x01	; 1
    381a:	1d c0       	rjmp	.+58     	; 0x3856 <paralelParkingSMF+0x72c>
				}
			//}
		
		break;
	}
	return NO;	
    381c:	80 e0       	ldi	r24, 0x00	; 0
    381e:	1b c0       	rjmp	.+54     	; 0x3856 <paralelParkingSMF+0x72c>
    3820:	80 e0       	ldi	r24, 0x00	; 0
    3822:	19 c0       	rjmp	.+50     	; 0x3856 <paralelParkingSMF+0x72c>
    3824:	80 e0       	ldi	r24, 0x00	; 0
    3826:	17 c0       	rjmp	.+46     	; 0x3856 <paralelParkingSMF+0x72c>
    3828:	80 e0       	ldi	r24, 0x00	; 0
    382a:	15 c0       	rjmp	.+42     	; 0x3856 <paralelParkingSMF+0x72c>
    382c:	80 e0       	ldi	r24, 0x00	; 0
    382e:	13 c0       	rjmp	.+38     	; 0x3856 <paralelParkingSMF+0x72c>
    3830:	80 e0       	ldi	r24, 0x00	; 0
    3832:	11 c0       	rjmp	.+34     	; 0x3856 <paralelParkingSMF+0x72c>
    3834:	80 e0       	ldi	r24, 0x00	; 0
    3836:	0f c0       	rjmp	.+30     	; 0x3856 <paralelParkingSMF+0x72c>
    3838:	80 e0       	ldi	r24, 0x00	; 0
    383a:	0d c0       	rjmp	.+26     	; 0x3856 <paralelParkingSMF+0x72c>
    383c:	80 e0       	ldi	r24, 0x00	; 0
    383e:	0b c0       	rjmp	.+22     	; 0x3856 <paralelParkingSMF+0x72c>
    3840:	80 e0       	ldi	r24, 0x00	; 0
    3842:	09 c0       	rjmp	.+18     	; 0x3856 <paralelParkingSMF+0x72c>
    3844:	80 e0       	ldi	r24, 0x00	; 0
    3846:	07 c0       	rjmp	.+14     	; 0x3856 <paralelParkingSMF+0x72c>
    3848:	80 e0       	ldi	r24, 0x00	; 0
    384a:	05 c0       	rjmp	.+10     	; 0x3856 <paralelParkingSMF+0x72c>
    384c:	80 e0       	ldi	r24, 0x00	; 0
    384e:	03 c0       	rjmp	.+6      	; 0x3856 <paralelParkingSMF+0x72c>
    3850:	80 e0       	ldi	r24, 0x00	; 0
    3852:	01 c0       	rjmp	.+2      	; 0x3856 <paralelParkingSMF+0x72c>
    3854:	80 e0       	ldi	r24, 0x00	; 0
}
    3856:	0f 91       	pop	r16
    3858:	ff 90       	pop	r15
    385a:	ef 90       	pop	r14
    385c:	df 90       	pop	r13
    385e:	cf 90       	pop	r12
    3860:	bf 90       	pop	r11
    3862:	af 90       	pop	r10
    3864:	9f 90       	pop	r9
    3866:	8f 90       	pop	r8
    3868:	08 95       	ret

0000386a <__udivmodsi4>:
    386a:	a1 e2       	ldi	r26, 0x21	; 33
    386c:	1a 2e       	mov	r1, r26
    386e:	aa 1b       	sub	r26, r26
    3870:	bb 1b       	sub	r27, r27
    3872:	fd 01       	movw	r30, r26
    3874:	0d c0       	rjmp	.+26     	; 0x3890 <__udivmodsi4_ep>

00003876 <__udivmodsi4_loop>:
    3876:	aa 1f       	adc	r26, r26
    3878:	bb 1f       	adc	r27, r27
    387a:	ee 1f       	adc	r30, r30
    387c:	ff 1f       	adc	r31, r31
    387e:	a2 17       	cp	r26, r18
    3880:	b3 07       	cpc	r27, r19
    3882:	e4 07       	cpc	r30, r20
    3884:	f5 07       	cpc	r31, r21
    3886:	20 f0       	brcs	.+8      	; 0x3890 <__udivmodsi4_ep>
    3888:	a2 1b       	sub	r26, r18
    388a:	b3 0b       	sbc	r27, r19
    388c:	e4 0b       	sbc	r30, r20
    388e:	f5 0b       	sbc	r31, r21

00003890 <__udivmodsi4_ep>:
    3890:	66 1f       	adc	r22, r22
    3892:	77 1f       	adc	r23, r23
    3894:	88 1f       	adc	r24, r24
    3896:	99 1f       	adc	r25, r25
    3898:	1a 94       	dec	r1
    389a:	69 f7       	brne	.-38     	; 0x3876 <__udivmodsi4_loop>
    389c:	60 95       	com	r22
    389e:	70 95       	com	r23
    38a0:	80 95       	com	r24
    38a2:	90 95       	com	r25
    38a4:	9b 01       	movw	r18, r22
    38a6:	ac 01       	movw	r20, r24
    38a8:	bd 01       	movw	r22, r26
    38aa:	cf 01       	movw	r24, r30
    38ac:	08 95       	ret

000038ae <__tablejump2__>:
    38ae:	ee 0f       	add	r30, r30
    38b0:	ff 1f       	adc	r31, r31

000038b2 <__tablejump__>:
    38b2:	05 90       	lpm	r0, Z+
    38b4:	f4 91       	lpm	r31, Z
    38b6:	e0 2d       	mov	r30, r0
    38b8:	09 94       	ijmp

000038ba <__umulhisi3>:
    38ba:	a2 9f       	mul	r26, r18
    38bc:	b0 01       	movw	r22, r0
    38be:	b3 9f       	mul	r27, r19
    38c0:	c0 01       	movw	r24, r0
    38c2:	a3 9f       	mul	r26, r19
    38c4:	70 0d       	add	r23, r0
    38c6:	81 1d       	adc	r24, r1
    38c8:	11 24       	eor	r1, r1
    38ca:	91 1d       	adc	r25, r1
    38cc:	b2 9f       	mul	r27, r18
    38ce:	70 0d       	add	r23, r0
    38d0:	81 1d       	adc	r24, r1
    38d2:	11 24       	eor	r1, r1
    38d4:	91 1d       	adc	r25, r1
    38d6:	08 95       	ret

000038d8 <__muluhisi3>:
    38d8:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <__umulhisi3>
    38dc:	a5 9f       	mul	r26, r21
    38de:	90 0d       	add	r25, r0
    38e0:	b4 9f       	mul	r27, r20
    38e2:	90 0d       	add	r25, r0
    38e4:	a4 9f       	mul	r26, r20
    38e6:	80 0d       	add	r24, r0
    38e8:	91 1d       	adc	r25, r1
    38ea:	11 24       	eor	r1, r1
    38ec:	08 95       	ret

000038ee <sprintf>:
    38ee:	ae e0       	ldi	r26, 0x0E	; 14
    38f0:	b0 e0       	ldi	r27, 0x00	; 0
    38f2:	ed e7       	ldi	r30, 0x7D	; 125
    38f4:	fc e1       	ldi	r31, 0x1C	; 28
    38f6:	0c 94 1f 1f 	jmp	0x3e3e	; 0x3e3e <__prologue_saves__+0x1c>
    38fa:	0d 89       	ldd	r16, Y+21	; 0x15
    38fc:	1e 89       	ldd	r17, Y+22	; 0x16
    38fe:	86 e0       	ldi	r24, 0x06	; 6
    3900:	8c 83       	std	Y+4, r24	; 0x04
    3902:	1a 83       	std	Y+2, r17	; 0x02
    3904:	09 83       	std	Y+1, r16	; 0x01
    3906:	8f ef       	ldi	r24, 0xFF	; 255
    3908:	9f e7       	ldi	r25, 0x7F	; 127
    390a:	9e 83       	std	Y+6, r25	; 0x06
    390c:	8d 83       	std	Y+5, r24	; 0x05
    390e:	ae 01       	movw	r20, r28
    3910:	47 5e       	subi	r20, 0xE7	; 231
    3912:	5f 4f       	sbci	r21, 0xFF	; 255
    3914:	6f 89       	ldd	r22, Y+23	; 0x17
    3916:	78 8d       	ldd	r23, Y+24	; 0x18
    3918:	ce 01       	movw	r24, r28
    391a:	01 96       	adiw	r24, 0x01	; 1
    391c:	0e 94 99 1c 	call	0x3932	; 0x3932 <vfprintf>
    3920:	ef 81       	ldd	r30, Y+7	; 0x07
    3922:	f8 85       	ldd	r31, Y+8	; 0x08
    3924:	e0 0f       	add	r30, r16
    3926:	f1 1f       	adc	r31, r17
    3928:	10 82       	st	Z, r1
    392a:	2e 96       	adiw	r28, 0x0e	; 14
    392c:	e4 e0       	ldi	r30, 0x04	; 4
    392e:	0c 94 3b 1f 	jmp	0x3e76	; 0x3e76 <__epilogue_restores__+0x1c>

00003932 <vfprintf>:
    3932:	ac e0       	ldi	r26, 0x0C	; 12
    3934:	b0 e0       	ldi	r27, 0x00	; 0
    3936:	ef e9       	ldi	r30, 0x9F	; 159
    3938:	fc e1       	ldi	r31, 0x1C	; 28
    393a:	0c 94 11 1f 	jmp	0x3e22	; 0x3e22 <__prologue_saves__>
    393e:	7c 01       	movw	r14, r24
    3940:	6b 01       	movw	r12, r22
    3942:	8a 01       	movw	r16, r20
    3944:	fc 01       	movw	r30, r24
    3946:	17 82       	std	Z+7, r1	; 0x07
    3948:	16 82       	std	Z+6, r1	; 0x06
    394a:	83 81       	ldd	r24, Z+3	; 0x03
    394c:	81 ff       	sbrs	r24, 1
    394e:	bd c1       	rjmp	.+890    	; 0x3cca <vfprintf+0x398>
    3950:	ce 01       	movw	r24, r28
    3952:	01 96       	adiw	r24, 0x01	; 1
    3954:	4c 01       	movw	r8, r24
    3956:	f7 01       	movw	r30, r14
    3958:	93 81       	ldd	r25, Z+3	; 0x03
    395a:	f6 01       	movw	r30, r12
    395c:	93 fd       	sbrc	r25, 3
    395e:	85 91       	lpm	r24, Z+
    3960:	93 ff       	sbrs	r25, 3
    3962:	81 91       	ld	r24, Z+
    3964:	6f 01       	movw	r12, r30
    3966:	88 23       	and	r24, r24
    3968:	09 f4       	brne	.+2      	; 0x396c <vfprintf+0x3a>
    396a:	ab c1       	rjmp	.+854    	; 0x3cc2 <vfprintf+0x390>
    396c:	85 32       	cpi	r24, 0x25	; 37
    396e:	39 f4       	brne	.+14     	; 0x397e <vfprintf+0x4c>
    3970:	93 fd       	sbrc	r25, 3
    3972:	85 91       	lpm	r24, Z+
    3974:	93 ff       	sbrs	r25, 3
    3976:	81 91       	ld	r24, Z+
    3978:	6f 01       	movw	r12, r30
    397a:	85 32       	cpi	r24, 0x25	; 37
    397c:	29 f4       	brne	.+10     	; 0x3988 <vfprintf+0x56>
    397e:	b7 01       	movw	r22, r14
    3980:	90 e0       	ldi	r25, 0x00	; 0
    3982:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <fputc>
    3986:	e7 cf       	rjmp	.-50     	; 0x3956 <vfprintf+0x24>
    3988:	51 2c       	mov	r5, r1
    398a:	31 2c       	mov	r3, r1
    398c:	20 e0       	ldi	r18, 0x00	; 0
    398e:	20 32       	cpi	r18, 0x20	; 32
    3990:	a0 f4       	brcc	.+40     	; 0x39ba <vfprintf+0x88>
    3992:	8b 32       	cpi	r24, 0x2B	; 43
    3994:	69 f0       	breq	.+26     	; 0x39b0 <vfprintf+0x7e>
    3996:	30 f4       	brcc	.+12     	; 0x39a4 <vfprintf+0x72>
    3998:	80 32       	cpi	r24, 0x20	; 32
    399a:	59 f0       	breq	.+22     	; 0x39b2 <vfprintf+0x80>
    399c:	83 32       	cpi	r24, 0x23	; 35
    399e:	69 f4       	brne	.+26     	; 0x39ba <vfprintf+0x88>
    39a0:	20 61       	ori	r18, 0x10	; 16
    39a2:	2c c0       	rjmp	.+88     	; 0x39fc <vfprintf+0xca>
    39a4:	8d 32       	cpi	r24, 0x2D	; 45
    39a6:	39 f0       	breq	.+14     	; 0x39b6 <vfprintf+0x84>
    39a8:	80 33       	cpi	r24, 0x30	; 48
    39aa:	39 f4       	brne	.+14     	; 0x39ba <vfprintf+0x88>
    39ac:	21 60       	ori	r18, 0x01	; 1
    39ae:	26 c0       	rjmp	.+76     	; 0x39fc <vfprintf+0xca>
    39b0:	22 60       	ori	r18, 0x02	; 2
    39b2:	24 60       	ori	r18, 0x04	; 4
    39b4:	23 c0       	rjmp	.+70     	; 0x39fc <vfprintf+0xca>
    39b6:	28 60       	ori	r18, 0x08	; 8
    39b8:	21 c0       	rjmp	.+66     	; 0x39fc <vfprintf+0xca>
    39ba:	27 fd       	sbrc	r18, 7
    39bc:	27 c0       	rjmp	.+78     	; 0x3a0c <vfprintf+0xda>
    39be:	30 ed       	ldi	r19, 0xD0	; 208
    39c0:	38 0f       	add	r19, r24
    39c2:	3a 30       	cpi	r19, 0x0A	; 10
    39c4:	78 f4       	brcc	.+30     	; 0x39e4 <vfprintf+0xb2>
    39c6:	26 ff       	sbrs	r18, 6
    39c8:	06 c0       	rjmp	.+12     	; 0x39d6 <vfprintf+0xa4>
    39ca:	fa e0       	ldi	r31, 0x0A	; 10
    39cc:	5f 9e       	mul	r5, r31
    39ce:	30 0d       	add	r19, r0
    39d0:	11 24       	eor	r1, r1
    39d2:	53 2e       	mov	r5, r19
    39d4:	13 c0       	rjmp	.+38     	; 0x39fc <vfprintf+0xca>
    39d6:	8a e0       	ldi	r24, 0x0A	; 10
    39d8:	38 9e       	mul	r3, r24
    39da:	30 0d       	add	r19, r0
    39dc:	11 24       	eor	r1, r1
    39de:	33 2e       	mov	r3, r19
    39e0:	20 62       	ori	r18, 0x20	; 32
    39e2:	0c c0       	rjmp	.+24     	; 0x39fc <vfprintf+0xca>
    39e4:	8e 32       	cpi	r24, 0x2E	; 46
    39e6:	21 f4       	brne	.+8      	; 0x39f0 <vfprintf+0xbe>
    39e8:	26 fd       	sbrc	r18, 6
    39ea:	6b c1       	rjmp	.+726    	; 0x3cc2 <vfprintf+0x390>
    39ec:	20 64       	ori	r18, 0x40	; 64
    39ee:	06 c0       	rjmp	.+12     	; 0x39fc <vfprintf+0xca>
    39f0:	8c 36       	cpi	r24, 0x6C	; 108
    39f2:	11 f4       	brne	.+4      	; 0x39f8 <vfprintf+0xc6>
    39f4:	20 68       	ori	r18, 0x80	; 128
    39f6:	02 c0       	rjmp	.+4      	; 0x39fc <vfprintf+0xca>
    39f8:	88 36       	cpi	r24, 0x68	; 104
    39fa:	41 f4       	brne	.+16     	; 0x3a0c <vfprintf+0xda>
    39fc:	f6 01       	movw	r30, r12
    39fe:	93 fd       	sbrc	r25, 3
    3a00:	85 91       	lpm	r24, Z+
    3a02:	93 ff       	sbrs	r25, 3
    3a04:	81 91       	ld	r24, Z+
    3a06:	6f 01       	movw	r12, r30
    3a08:	81 11       	cpse	r24, r1
    3a0a:	c1 cf       	rjmp	.-126    	; 0x398e <vfprintf+0x5c>
    3a0c:	98 2f       	mov	r25, r24
    3a0e:	9f 7d       	andi	r25, 0xDF	; 223
    3a10:	95 54       	subi	r25, 0x45	; 69
    3a12:	93 30       	cpi	r25, 0x03	; 3
    3a14:	28 f4       	brcc	.+10     	; 0x3a20 <vfprintf+0xee>
    3a16:	0c 5f       	subi	r16, 0xFC	; 252
    3a18:	1f 4f       	sbci	r17, 0xFF	; 255
    3a1a:	ff e3       	ldi	r31, 0x3F	; 63
    3a1c:	f9 83       	std	Y+1, r31	; 0x01
    3a1e:	0d c0       	rjmp	.+26     	; 0x3a3a <vfprintf+0x108>
    3a20:	83 36       	cpi	r24, 0x63	; 99
    3a22:	31 f0       	breq	.+12     	; 0x3a30 <vfprintf+0xfe>
    3a24:	83 37       	cpi	r24, 0x73	; 115
    3a26:	71 f0       	breq	.+28     	; 0x3a44 <vfprintf+0x112>
    3a28:	83 35       	cpi	r24, 0x53	; 83
    3a2a:	09 f0       	breq	.+2      	; 0x3a2e <vfprintf+0xfc>
    3a2c:	5b c0       	rjmp	.+182    	; 0x3ae4 <vfprintf+0x1b2>
    3a2e:	22 c0       	rjmp	.+68     	; 0x3a74 <vfprintf+0x142>
    3a30:	f8 01       	movw	r30, r16
    3a32:	80 81       	ld	r24, Z
    3a34:	89 83       	std	Y+1, r24	; 0x01
    3a36:	0e 5f       	subi	r16, 0xFE	; 254
    3a38:	1f 4f       	sbci	r17, 0xFF	; 255
    3a3a:	44 24       	eor	r4, r4
    3a3c:	43 94       	inc	r4
    3a3e:	51 2c       	mov	r5, r1
    3a40:	54 01       	movw	r10, r8
    3a42:	15 c0       	rjmp	.+42     	; 0x3a6e <vfprintf+0x13c>
    3a44:	38 01       	movw	r6, r16
    3a46:	f2 e0       	ldi	r31, 0x02	; 2
    3a48:	6f 0e       	add	r6, r31
    3a4a:	71 1c       	adc	r7, r1
    3a4c:	f8 01       	movw	r30, r16
    3a4e:	a0 80       	ld	r10, Z
    3a50:	b1 80       	ldd	r11, Z+1	; 0x01
    3a52:	26 ff       	sbrs	r18, 6
    3a54:	03 c0       	rjmp	.+6      	; 0x3a5c <vfprintf+0x12a>
    3a56:	65 2d       	mov	r22, r5
    3a58:	70 e0       	ldi	r23, 0x00	; 0
    3a5a:	02 c0       	rjmp	.+4      	; 0x3a60 <vfprintf+0x12e>
    3a5c:	6f ef       	ldi	r22, 0xFF	; 255
    3a5e:	7f ef       	ldi	r23, 0xFF	; 255
    3a60:	c5 01       	movw	r24, r10
    3a62:	2c 87       	std	Y+12, r18	; 0x0c
    3a64:	0e 94 76 1e 	call	0x3cec	; 0x3cec <strnlen>
    3a68:	2c 01       	movw	r4, r24
    3a6a:	83 01       	movw	r16, r6
    3a6c:	2c 85       	ldd	r18, Y+12	; 0x0c
    3a6e:	2f 77       	andi	r18, 0x7F	; 127
    3a70:	22 2e       	mov	r2, r18
    3a72:	17 c0       	rjmp	.+46     	; 0x3aa2 <vfprintf+0x170>
    3a74:	38 01       	movw	r6, r16
    3a76:	f2 e0       	ldi	r31, 0x02	; 2
    3a78:	6f 0e       	add	r6, r31
    3a7a:	71 1c       	adc	r7, r1
    3a7c:	f8 01       	movw	r30, r16
    3a7e:	a0 80       	ld	r10, Z
    3a80:	b1 80       	ldd	r11, Z+1	; 0x01
    3a82:	26 ff       	sbrs	r18, 6
    3a84:	03 c0       	rjmp	.+6      	; 0x3a8c <vfprintf+0x15a>
    3a86:	65 2d       	mov	r22, r5
    3a88:	70 e0       	ldi	r23, 0x00	; 0
    3a8a:	02 c0       	rjmp	.+4      	; 0x3a90 <vfprintf+0x15e>
    3a8c:	6f ef       	ldi	r22, 0xFF	; 255
    3a8e:	7f ef       	ldi	r23, 0xFF	; 255
    3a90:	c5 01       	movw	r24, r10
    3a92:	2c 87       	std	Y+12, r18	; 0x0c
    3a94:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <strnlen_P>
    3a98:	2c 01       	movw	r4, r24
    3a9a:	2c 85       	ldd	r18, Y+12	; 0x0c
    3a9c:	20 68       	ori	r18, 0x80	; 128
    3a9e:	22 2e       	mov	r2, r18
    3aa0:	83 01       	movw	r16, r6
    3aa2:	23 fc       	sbrc	r2, 3
    3aa4:	1b c0       	rjmp	.+54     	; 0x3adc <vfprintf+0x1aa>
    3aa6:	83 2d       	mov	r24, r3
    3aa8:	90 e0       	ldi	r25, 0x00	; 0
    3aaa:	48 16       	cp	r4, r24
    3aac:	59 06       	cpc	r5, r25
    3aae:	b0 f4       	brcc	.+44     	; 0x3adc <vfprintf+0x1aa>
    3ab0:	b7 01       	movw	r22, r14
    3ab2:	80 e2       	ldi	r24, 0x20	; 32
    3ab4:	90 e0       	ldi	r25, 0x00	; 0
    3ab6:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <fputc>
    3aba:	3a 94       	dec	r3
    3abc:	f4 cf       	rjmp	.-24     	; 0x3aa6 <vfprintf+0x174>
    3abe:	f5 01       	movw	r30, r10
    3ac0:	27 fc       	sbrc	r2, 7
    3ac2:	85 91       	lpm	r24, Z+
    3ac4:	27 fe       	sbrs	r2, 7
    3ac6:	81 91       	ld	r24, Z+
    3ac8:	5f 01       	movw	r10, r30
    3aca:	b7 01       	movw	r22, r14
    3acc:	90 e0       	ldi	r25, 0x00	; 0
    3ace:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <fputc>
    3ad2:	31 10       	cpse	r3, r1
    3ad4:	3a 94       	dec	r3
    3ad6:	f1 e0       	ldi	r31, 0x01	; 1
    3ad8:	4f 1a       	sub	r4, r31
    3ada:	51 08       	sbc	r5, r1
    3adc:	41 14       	cp	r4, r1
    3ade:	51 04       	cpc	r5, r1
    3ae0:	71 f7       	brne	.-36     	; 0x3abe <vfprintf+0x18c>
    3ae2:	e5 c0       	rjmp	.+458    	; 0x3cae <vfprintf+0x37c>
    3ae4:	84 36       	cpi	r24, 0x64	; 100
    3ae6:	11 f0       	breq	.+4      	; 0x3aec <vfprintf+0x1ba>
    3ae8:	89 36       	cpi	r24, 0x69	; 105
    3aea:	39 f5       	brne	.+78     	; 0x3b3a <vfprintf+0x208>
    3aec:	f8 01       	movw	r30, r16
    3aee:	27 ff       	sbrs	r18, 7
    3af0:	07 c0       	rjmp	.+14     	; 0x3b00 <vfprintf+0x1ce>
    3af2:	60 81       	ld	r22, Z
    3af4:	71 81       	ldd	r23, Z+1	; 0x01
    3af6:	82 81       	ldd	r24, Z+2	; 0x02
    3af8:	93 81       	ldd	r25, Z+3	; 0x03
    3afa:	0c 5f       	subi	r16, 0xFC	; 252
    3afc:	1f 4f       	sbci	r17, 0xFF	; 255
    3afe:	08 c0       	rjmp	.+16     	; 0x3b10 <vfprintf+0x1de>
    3b00:	60 81       	ld	r22, Z
    3b02:	71 81       	ldd	r23, Z+1	; 0x01
    3b04:	88 27       	eor	r24, r24
    3b06:	77 fd       	sbrc	r23, 7
    3b08:	80 95       	com	r24
    3b0a:	98 2f       	mov	r25, r24
    3b0c:	0e 5f       	subi	r16, 0xFE	; 254
    3b0e:	1f 4f       	sbci	r17, 0xFF	; 255
    3b10:	2f 76       	andi	r18, 0x6F	; 111
    3b12:	b2 2e       	mov	r11, r18
    3b14:	97 ff       	sbrs	r25, 7
    3b16:	09 c0       	rjmp	.+18     	; 0x3b2a <vfprintf+0x1f8>
    3b18:	90 95       	com	r25
    3b1a:	80 95       	com	r24
    3b1c:	70 95       	com	r23
    3b1e:	61 95       	neg	r22
    3b20:	7f 4f       	sbci	r23, 0xFF	; 255
    3b22:	8f 4f       	sbci	r24, 0xFF	; 255
    3b24:	9f 4f       	sbci	r25, 0xFF	; 255
    3b26:	20 68       	ori	r18, 0x80	; 128
    3b28:	b2 2e       	mov	r11, r18
    3b2a:	2a e0       	ldi	r18, 0x0A	; 10
    3b2c:	30 e0       	ldi	r19, 0x00	; 0
    3b2e:	a4 01       	movw	r20, r8
    3b30:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__ultoa_invert>
    3b34:	a8 2e       	mov	r10, r24
    3b36:	a8 18       	sub	r10, r8
    3b38:	44 c0       	rjmp	.+136    	; 0x3bc2 <vfprintf+0x290>
    3b3a:	85 37       	cpi	r24, 0x75	; 117
    3b3c:	29 f4       	brne	.+10     	; 0x3b48 <vfprintf+0x216>
    3b3e:	2f 7e       	andi	r18, 0xEF	; 239
    3b40:	b2 2e       	mov	r11, r18
    3b42:	2a e0       	ldi	r18, 0x0A	; 10
    3b44:	30 e0       	ldi	r19, 0x00	; 0
    3b46:	25 c0       	rjmp	.+74     	; 0x3b92 <vfprintf+0x260>
    3b48:	f2 2f       	mov	r31, r18
    3b4a:	f9 7f       	andi	r31, 0xF9	; 249
    3b4c:	bf 2e       	mov	r11, r31
    3b4e:	8f 36       	cpi	r24, 0x6F	; 111
    3b50:	c1 f0       	breq	.+48     	; 0x3b82 <vfprintf+0x250>
    3b52:	18 f4       	brcc	.+6      	; 0x3b5a <vfprintf+0x228>
    3b54:	88 35       	cpi	r24, 0x58	; 88
    3b56:	79 f0       	breq	.+30     	; 0x3b76 <vfprintf+0x244>
    3b58:	b4 c0       	rjmp	.+360    	; 0x3cc2 <vfprintf+0x390>
    3b5a:	80 37       	cpi	r24, 0x70	; 112
    3b5c:	19 f0       	breq	.+6      	; 0x3b64 <vfprintf+0x232>
    3b5e:	88 37       	cpi	r24, 0x78	; 120
    3b60:	21 f0       	breq	.+8      	; 0x3b6a <vfprintf+0x238>
    3b62:	af c0       	rjmp	.+350    	; 0x3cc2 <vfprintf+0x390>
    3b64:	2f 2f       	mov	r18, r31
    3b66:	20 61       	ori	r18, 0x10	; 16
    3b68:	b2 2e       	mov	r11, r18
    3b6a:	b4 fe       	sbrs	r11, 4
    3b6c:	0d c0       	rjmp	.+26     	; 0x3b88 <vfprintf+0x256>
    3b6e:	8b 2d       	mov	r24, r11
    3b70:	84 60       	ori	r24, 0x04	; 4
    3b72:	b8 2e       	mov	r11, r24
    3b74:	09 c0       	rjmp	.+18     	; 0x3b88 <vfprintf+0x256>
    3b76:	24 ff       	sbrs	r18, 4
    3b78:	0a c0       	rjmp	.+20     	; 0x3b8e <vfprintf+0x25c>
    3b7a:	9f 2f       	mov	r25, r31
    3b7c:	96 60       	ori	r25, 0x06	; 6
    3b7e:	b9 2e       	mov	r11, r25
    3b80:	06 c0       	rjmp	.+12     	; 0x3b8e <vfprintf+0x25c>
    3b82:	28 e0       	ldi	r18, 0x08	; 8
    3b84:	30 e0       	ldi	r19, 0x00	; 0
    3b86:	05 c0       	rjmp	.+10     	; 0x3b92 <vfprintf+0x260>
    3b88:	20 e1       	ldi	r18, 0x10	; 16
    3b8a:	30 e0       	ldi	r19, 0x00	; 0
    3b8c:	02 c0       	rjmp	.+4      	; 0x3b92 <vfprintf+0x260>
    3b8e:	20 e1       	ldi	r18, 0x10	; 16
    3b90:	32 e0       	ldi	r19, 0x02	; 2
    3b92:	f8 01       	movw	r30, r16
    3b94:	b7 fe       	sbrs	r11, 7
    3b96:	07 c0       	rjmp	.+14     	; 0x3ba6 <vfprintf+0x274>
    3b98:	60 81       	ld	r22, Z
    3b9a:	71 81       	ldd	r23, Z+1	; 0x01
    3b9c:	82 81       	ldd	r24, Z+2	; 0x02
    3b9e:	93 81       	ldd	r25, Z+3	; 0x03
    3ba0:	0c 5f       	subi	r16, 0xFC	; 252
    3ba2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ba4:	06 c0       	rjmp	.+12     	; 0x3bb2 <vfprintf+0x280>
    3ba6:	60 81       	ld	r22, Z
    3ba8:	71 81       	ldd	r23, Z+1	; 0x01
    3baa:	80 e0       	ldi	r24, 0x00	; 0
    3bac:	90 e0       	ldi	r25, 0x00	; 0
    3bae:	0e 5f       	subi	r16, 0xFE	; 254
    3bb0:	1f 4f       	sbci	r17, 0xFF	; 255
    3bb2:	a4 01       	movw	r20, r8
    3bb4:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__ultoa_invert>
    3bb8:	a8 2e       	mov	r10, r24
    3bba:	a8 18       	sub	r10, r8
    3bbc:	fb 2d       	mov	r31, r11
    3bbe:	ff 77       	andi	r31, 0x7F	; 127
    3bc0:	bf 2e       	mov	r11, r31
    3bc2:	b6 fe       	sbrs	r11, 6
    3bc4:	0b c0       	rjmp	.+22     	; 0x3bdc <vfprintf+0x2aa>
    3bc6:	2b 2d       	mov	r18, r11
    3bc8:	2e 7f       	andi	r18, 0xFE	; 254
    3bca:	a5 14       	cp	r10, r5
    3bcc:	50 f4       	brcc	.+20     	; 0x3be2 <vfprintf+0x2b0>
    3bce:	b4 fe       	sbrs	r11, 4
    3bd0:	0a c0       	rjmp	.+20     	; 0x3be6 <vfprintf+0x2b4>
    3bd2:	b2 fc       	sbrc	r11, 2
    3bd4:	08 c0       	rjmp	.+16     	; 0x3be6 <vfprintf+0x2b4>
    3bd6:	2b 2d       	mov	r18, r11
    3bd8:	2e 7e       	andi	r18, 0xEE	; 238
    3bda:	05 c0       	rjmp	.+10     	; 0x3be6 <vfprintf+0x2b4>
    3bdc:	7a 2c       	mov	r7, r10
    3bde:	2b 2d       	mov	r18, r11
    3be0:	03 c0       	rjmp	.+6      	; 0x3be8 <vfprintf+0x2b6>
    3be2:	7a 2c       	mov	r7, r10
    3be4:	01 c0       	rjmp	.+2      	; 0x3be8 <vfprintf+0x2b6>
    3be6:	75 2c       	mov	r7, r5
    3be8:	24 ff       	sbrs	r18, 4
    3bea:	0d c0       	rjmp	.+26     	; 0x3c06 <vfprintf+0x2d4>
    3bec:	fe 01       	movw	r30, r28
    3bee:	ea 0d       	add	r30, r10
    3bf0:	f1 1d       	adc	r31, r1
    3bf2:	80 81       	ld	r24, Z
    3bf4:	80 33       	cpi	r24, 0x30	; 48
    3bf6:	11 f4       	brne	.+4      	; 0x3bfc <vfprintf+0x2ca>
    3bf8:	29 7e       	andi	r18, 0xE9	; 233
    3bfa:	09 c0       	rjmp	.+18     	; 0x3c0e <vfprintf+0x2dc>
    3bfc:	22 ff       	sbrs	r18, 2
    3bfe:	06 c0       	rjmp	.+12     	; 0x3c0c <vfprintf+0x2da>
    3c00:	73 94       	inc	r7
    3c02:	73 94       	inc	r7
    3c04:	04 c0       	rjmp	.+8      	; 0x3c0e <vfprintf+0x2dc>
    3c06:	82 2f       	mov	r24, r18
    3c08:	86 78       	andi	r24, 0x86	; 134
    3c0a:	09 f0       	breq	.+2      	; 0x3c0e <vfprintf+0x2dc>
    3c0c:	73 94       	inc	r7
    3c0e:	23 fd       	sbrc	r18, 3
    3c10:	13 c0       	rjmp	.+38     	; 0x3c38 <vfprintf+0x306>
    3c12:	20 ff       	sbrs	r18, 0
    3c14:	06 c0       	rjmp	.+12     	; 0x3c22 <vfprintf+0x2f0>
    3c16:	5a 2c       	mov	r5, r10
    3c18:	73 14       	cp	r7, r3
    3c1a:	18 f4       	brcc	.+6      	; 0x3c22 <vfprintf+0x2f0>
    3c1c:	53 0c       	add	r5, r3
    3c1e:	57 18       	sub	r5, r7
    3c20:	73 2c       	mov	r7, r3
    3c22:	73 14       	cp	r7, r3
    3c24:	68 f4       	brcc	.+26     	; 0x3c40 <vfprintf+0x30e>
    3c26:	b7 01       	movw	r22, r14
    3c28:	80 e2       	ldi	r24, 0x20	; 32
    3c2a:	90 e0       	ldi	r25, 0x00	; 0
    3c2c:	2c 87       	std	Y+12, r18	; 0x0c
    3c2e:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <fputc>
    3c32:	73 94       	inc	r7
    3c34:	2c 85       	ldd	r18, Y+12	; 0x0c
    3c36:	f5 cf       	rjmp	.-22     	; 0x3c22 <vfprintf+0x2f0>
    3c38:	73 14       	cp	r7, r3
    3c3a:	10 f4       	brcc	.+4      	; 0x3c40 <vfprintf+0x30e>
    3c3c:	37 18       	sub	r3, r7
    3c3e:	01 c0       	rjmp	.+2      	; 0x3c42 <vfprintf+0x310>
    3c40:	31 2c       	mov	r3, r1
    3c42:	24 ff       	sbrs	r18, 4
    3c44:	12 c0       	rjmp	.+36     	; 0x3c6a <vfprintf+0x338>
    3c46:	b7 01       	movw	r22, r14
    3c48:	80 e3       	ldi	r24, 0x30	; 48
    3c4a:	90 e0       	ldi	r25, 0x00	; 0
    3c4c:	2c 87       	std	Y+12, r18	; 0x0c
    3c4e:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <fputc>
    3c52:	2c 85       	ldd	r18, Y+12	; 0x0c
    3c54:	22 ff       	sbrs	r18, 2
    3c56:	17 c0       	rjmp	.+46     	; 0x3c86 <vfprintf+0x354>
    3c58:	21 ff       	sbrs	r18, 1
    3c5a:	03 c0       	rjmp	.+6      	; 0x3c62 <vfprintf+0x330>
    3c5c:	88 e5       	ldi	r24, 0x58	; 88
    3c5e:	90 e0       	ldi	r25, 0x00	; 0
    3c60:	02 c0       	rjmp	.+4      	; 0x3c66 <vfprintf+0x334>
    3c62:	88 e7       	ldi	r24, 0x78	; 120
    3c64:	90 e0       	ldi	r25, 0x00	; 0
    3c66:	b7 01       	movw	r22, r14
    3c68:	0c c0       	rjmp	.+24     	; 0x3c82 <vfprintf+0x350>
    3c6a:	82 2f       	mov	r24, r18
    3c6c:	86 78       	andi	r24, 0x86	; 134
    3c6e:	59 f0       	breq	.+22     	; 0x3c86 <vfprintf+0x354>
    3c70:	21 fd       	sbrc	r18, 1
    3c72:	02 c0       	rjmp	.+4      	; 0x3c78 <vfprintf+0x346>
    3c74:	80 e2       	ldi	r24, 0x20	; 32
    3c76:	01 c0       	rjmp	.+2      	; 0x3c7a <vfprintf+0x348>
    3c78:	8b e2       	ldi	r24, 0x2B	; 43
    3c7a:	27 fd       	sbrc	r18, 7
    3c7c:	8d e2       	ldi	r24, 0x2D	; 45
    3c7e:	b7 01       	movw	r22, r14
    3c80:	90 e0       	ldi	r25, 0x00	; 0
    3c82:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <fputc>
    3c86:	a5 14       	cp	r10, r5
    3c88:	38 f4       	brcc	.+14     	; 0x3c98 <vfprintf+0x366>
    3c8a:	b7 01       	movw	r22, r14
    3c8c:	80 e3       	ldi	r24, 0x30	; 48
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <fputc>
    3c94:	5a 94       	dec	r5
    3c96:	f7 cf       	rjmp	.-18     	; 0x3c86 <vfprintf+0x354>
    3c98:	aa 94       	dec	r10
    3c9a:	f4 01       	movw	r30, r8
    3c9c:	ea 0d       	add	r30, r10
    3c9e:	f1 1d       	adc	r31, r1
    3ca0:	80 81       	ld	r24, Z
    3ca2:	b7 01       	movw	r22, r14
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <fputc>
    3caa:	a1 10       	cpse	r10, r1
    3cac:	f5 cf       	rjmp	.-22     	; 0x3c98 <vfprintf+0x366>
    3cae:	33 20       	and	r3, r3
    3cb0:	09 f4       	brne	.+2      	; 0x3cb4 <vfprintf+0x382>
    3cb2:	51 ce       	rjmp	.-862    	; 0x3956 <vfprintf+0x24>
    3cb4:	b7 01       	movw	r22, r14
    3cb6:	80 e2       	ldi	r24, 0x20	; 32
    3cb8:	90 e0       	ldi	r25, 0x00	; 0
    3cba:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <fputc>
    3cbe:	3a 94       	dec	r3
    3cc0:	f6 cf       	rjmp	.-20     	; 0x3cae <vfprintf+0x37c>
    3cc2:	f7 01       	movw	r30, r14
    3cc4:	86 81       	ldd	r24, Z+6	; 0x06
    3cc6:	97 81       	ldd	r25, Z+7	; 0x07
    3cc8:	02 c0       	rjmp	.+4      	; 0x3cce <vfprintf+0x39c>
    3cca:	8f ef       	ldi	r24, 0xFF	; 255
    3ccc:	9f ef       	ldi	r25, 0xFF	; 255
    3cce:	2c 96       	adiw	r28, 0x0c	; 12
    3cd0:	e2 e1       	ldi	r30, 0x12	; 18
    3cd2:	0c 94 2d 1f 	jmp	0x3e5a	; 0x3e5a <__epilogue_restores__>

00003cd6 <strnlen_P>:
    3cd6:	fc 01       	movw	r30, r24
    3cd8:	05 90       	lpm	r0, Z+
    3cda:	61 50       	subi	r22, 0x01	; 1
    3cdc:	70 40       	sbci	r23, 0x00	; 0
    3cde:	01 10       	cpse	r0, r1
    3ce0:	d8 f7       	brcc	.-10     	; 0x3cd8 <strnlen_P+0x2>
    3ce2:	80 95       	com	r24
    3ce4:	90 95       	com	r25
    3ce6:	8e 0f       	add	r24, r30
    3ce8:	9f 1f       	adc	r25, r31
    3cea:	08 95       	ret

00003cec <strnlen>:
    3cec:	fc 01       	movw	r30, r24
    3cee:	61 50       	subi	r22, 0x01	; 1
    3cf0:	70 40       	sbci	r23, 0x00	; 0
    3cf2:	01 90       	ld	r0, Z+
    3cf4:	01 10       	cpse	r0, r1
    3cf6:	d8 f7       	brcc	.-10     	; 0x3cee <strnlen+0x2>
    3cf8:	80 95       	com	r24
    3cfa:	90 95       	com	r25
    3cfc:	8e 0f       	add	r24, r30
    3cfe:	9f 1f       	adc	r25, r31
    3d00:	08 95       	ret

00003d02 <fputc>:
    3d02:	0f 93       	push	r16
    3d04:	1f 93       	push	r17
    3d06:	cf 93       	push	r28
    3d08:	df 93       	push	r29
    3d0a:	18 2f       	mov	r17, r24
    3d0c:	09 2f       	mov	r16, r25
    3d0e:	eb 01       	movw	r28, r22
    3d10:	8b 81       	ldd	r24, Y+3	; 0x03
    3d12:	81 fd       	sbrc	r24, 1
    3d14:	03 c0       	rjmp	.+6      	; 0x3d1c <fputc+0x1a>
    3d16:	8f ef       	ldi	r24, 0xFF	; 255
    3d18:	9f ef       	ldi	r25, 0xFF	; 255
    3d1a:	20 c0       	rjmp	.+64     	; 0x3d5c <fputc+0x5a>
    3d1c:	82 ff       	sbrs	r24, 2
    3d1e:	10 c0       	rjmp	.+32     	; 0x3d40 <fputc+0x3e>
    3d20:	4e 81       	ldd	r20, Y+6	; 0x06
    3d22:	5f 81       	ldd	r21, Y+7	; 0x07
    3d24:	2c 81       	ldd	r18, Y+4	; 0x04
    3d26:	3d 81       	ldd	r19, Y+5	; 0x05
    3d28:	42 17       	cp	r20, r18
    3d2a:	53 07       	cpc	r21, r19
    3d2c:	7c f4       	brge	.+30     	; 0x3d4c <fputc+0x4a>
    3d2e:	e8 81       	ld	r30, Y
    3d30:	f9 81       	ldd	r31, Y+1	; 0x01
    3d32:	9f 01       	movw	r18, r30
    3d34:	2f 5f       	subi	r18, 0xFF	; 255
    3d36:	3f 4f       	sbci	r19, 0xFF	; 255
    3d38:	39 83       	std	Y+1, r19	; 0x01
    3d3a:	28 83       	st	Y, r18
    3d3c:	10 83       	st	Z, r17
    3d3e:	06 c0       	rjmp	.+12     	; 0x3d4c <fputc+0x4a>
    3d40:	e8 85       	ldd	r30, Y+8	; 0x08
    3d42:	f9 85       	ldd	r31, Y+9	; 0x09
    3d44:	81 2f       	mov	r24, r17
    3d46:	09 95       	icall
    3d48:	89 2b       	or	r24, r25
    3d4a:	29 f7       	brne	.-54     	; 0x3d16 <fputc+0x14>
    3d4c:	2e 81       	ldd	r18, Y+6	; 0x06
    3d4e:	3f 81       	ldd	r19, Y+7	; 0x07
    3d50:	2f 5f       	subi	r18, 0xFF	; 255
    3d52:	3f 4f       	sbci	r19, 0xFF	; 255
    3d54:	3f 83       	std	Y+7, r19	; 0x07
    3d56:	2e 83       	std	Y+6, r18	; 0x06
    3d58:	81 2f       	mov	r24, r17
    3d5a:	90 2f       	mov	r25, r16
    3d5c:	df 91       	pop	r29
    3d5e:	cf 91       	pop	r28
    3d60:	1f 91       	pop	r17
    3d62:	0f 91       	pop	r16
    3d64:	08 95       	ret

00003d66 <__ultoa_invert>:
    3d66:	fa 01       	movw	r30, r20
    3d68:	aa 27       	eor	r26, r26
    3d6a:	28 30       	cpi	r18, 0x08	; 8
    3d6c:	51 f1       	breq	.+84     	; 0x3dc2 <__ultoa_invert+0x5c>
    3d6e:	20 31       	cpi	r18, 0x10	; 16
    3d70:	81 f1       	breq	.+96     	; 0x3dd2 <__ultoa_invert+0x6c>
    3d72:	e8 94       	clt
    3d74:	6f 93       	push	r22
    3d76:	6e 7f       	andi	r22, 0xFE	; 254
    3d78:	6e 5f       	subi	r22, 0xFE	; 254
    3d7a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d7c:	8f 4f       	sbci	r24, 0xFF	; 255
    3d7e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d80:	af 4f       	sbci	r26, 0xFF	; 255
    3d82:	b1 e0       	ldi	r27, 0x01	; 1
    3d84:	3e d0       	rcall	.+124    	; 0x3e02 <__ultoa_invert+0x9c>
    3d86:	b4 e0       	ldi	r27, 0x04	; 4
    3d88:	3c d0       	rcall	.+120    	; 0x3e02 <__ultoa_invert+0x9c>
    3d8a:	67 0f       	add	r22, r23
    3d8c:	78 1f       	adc	r23, r24
    3d8e:	89 1f       	adc	r24, r25
    3d90:	9a 1f       	adc	r25, r26
    3d92:	a1 1d       	adc	r26, r1
    3d94:	68 0f       	add	r22, r24
    3d96:	79 1f       	adc	r23, r25
    3d98:	8a 1f       	adc	r24, r26
    3d9a:	91 1d       	adc	r25, r1
    3d9c:	a1 1d       	adc	r26, r1
    3d9e:	6a 0f       	add	r22, r26
    3da0:	71 1d       	adc	r23, r1
    3da2:	81 1d       	adc	r24, r1
    3da4:	91 1d       	adc	r25, r1
    3da6:	a1 1d       	adc	r26, r1
    3da8:	20 d0       	rcall	.+64     	; 0x3dea <__ultoa_invert+0x84>
    3daa:	09 f4       	brne	.+2      	; 0x3dae <__ultoa_invert+0x48>
    3dac:	68 94       	set
    3dae:	3f 91       	pop	r19
    3db0:	2a e0       	ldi	r18, 0x0A	; 10
    3db2:	26 9f       	mul	r18, r22
    3db4:	11 24       	eor	r1, r1
    3db6:	30 19       	sub	r19, r0
    3db8:	30 5d       	subi	r19, 0xD0	; 208
    3dba:	31 93       	st	Z+, r19
    3dbc:	de f6       	brtc	.-74     	; 0x3d74 <__ultoa_invert+0xe>
    3dbe:	cf 01       	movw	r24, r30
    3dc0:	08 95       	ret
    3dc2:	46 2f       	mov	r20, r22
    3dc4:	47 70       	andi	r20, 0x07	; 7
    3dc6:	40 5d       	subi	r20, 0xD0	; 208
    3dc8:	41 93       	st	Z+, r20
    3dca:	b3 e0       	ldi	r27, 0x03	; 3
    3dcc:	0f d0       	rcall	.+30     	; 0x3dec <__ultoa_invert+0x86>
    3dce:	c9 f7       	brne	.-14     	; 0x3dc2 <__ultoa_invert+0x5c>
    3dd0:	f6 cf       	rjmp	.-20     	; 0x3dbe <__ultoa_invert+0x58>
    3dd2:	46 2f       	mov	r20, r22
    3dd4:	4f 70       	andi	r20, 0x0F	; 15
    3dd6:	40 5d       	subi	r20, 0xD0	; 208
    3dd8:	4a 33       	cpi	r20, 0x3A	; 58
    3dda:	18 f0       	brcs	.+6      	; 0x3de2 <__ultoa_invert+0x7c>
    3ddc:	49 5d       	subi	r20, 0xD9	; 217
    3dde:	31 fd       	sbrc	r19, 1
    3de0:	40 52       	subi	r20, 0x20	; 32
    3de2:	41 93       	st	Z+, r20
    3de4:	02 d0       	rcall	.+4      	; 0x3dea <__ultoa_invert+0x84>
    3de6:	a9 f7       	brne	.-22     	; 0x3dd2 <__ultoa_invert+0x6c>
    3de8:	ea cf       	rjmp	.-44     	; 0x3dbe <__ultoa_invert+0x58>
    3dea:	b4 e0       	ldi	r27, 0x04	; 4
    3dec:	a6 95       	lsr	r26
    3dee:	97 95       	ror	r25
    3df0:	87 95       	ror	r24
    3df2:	77 95       	ror	r23
    3df4:	67 95       	ror	r22
    3df6:	ba 95       	dec	r27
    3df8:	c9 f7       	brne	.-14     	; 0x3dec <__ultoa_invert+0x86>
    3dfa:	00 97       	sbiw	r24, 0x00	; 0
    3dfc:	61 05       	cpc	r22, r1
    3dfe:	71 05       	cpc	r23, r1
    3e00:	08 95       	ret
    3e02:	9b 01       	movw	r18, r22
    3e04:	ac 01       	movw	r20, r24
    3e06:	0a 2e       	mov	r0, r26
    3e08:	06 94       	lsr	r0
    3e0a:	57 95       	ror	r21
    3e0c:	47 95       	ror	r20
    3e0e:	37 95       	ror	r19
    3e10:	27 95       	ror	r18
    3e12:	ba 95       	dec	r27
    3e14:	c9 f7       	brne	.-14     	; 0x3e08 <__ultoa_invert+0xa2>
    3e16:	62 0f       	add	r22, r18
    3e18:	73 1f       	adc	r23, r19
    3e1a:	84 1f       	adc	r24, r20
    3e1c:	95 1f       	adc	r25, r21
    3e1e:	a0 1d       	adc	r26, r0
    3e20:	08 95       	ret

00003e22 <__prologue_saves__>:
    3e22:	2f 92       	push	r2
    3e24:	3f 92       	push	r3
    3e26:	4f 92       	push	r4
    3e28:	5f 92       	push	r5
    3e2a:	6f 92       	push	r6
    3e2c:	7f 92       	push	r7
    3e2e:	8f 92       	push	r8
    3e30:	9f 92       	push	r9
    3e32:	af 92       	push	r10
    3e34:	bf 92       	push	r11
    3e36:	cf 92       	push	r12
    3e38:	df 92       	push	r13
    3e3a:	ef 92       	push	r14
    3e3c:	ff 92       	push	r15
    3e3e:	0f 93       	push	r16
    3e40:	1f 93       	push	r17
    3e42:	cf 93       	push	r28
    3e44:	df 93       	push	r29
    3e46:	cd b7       	in	r28, 0x3d	; 61
    3e48:	de b7       	in	r29, 0x3e	; 62
    3e4a:	ca 1b       	sub	r28, r26
    3e4c:	db 0b       	sbc	r29, r27
    3e4e:	0f b6       	in	r0, 0x3f	; 63
    3e50:	f8 94       	cli
    3e52:	de bf       	out	0x3e, r29	; 62
    3e54:	0f be       	out	0x3f, r0	; 63
    3e56:	cd bf       	out	0x3d, r28	; 61
    3e58:	09 94       	ijmp

00003e5a <__epilogue_restores__>:
    3e5a:	2a 88       	ldd	r2, Y+18	; 0x12
    3e5c:	39 88       	ldd	r3, Y+17	; 0x11
    3e5e:	48 88       	ldd	r4, Y+16	; 0x10
    3e60:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e62:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e64:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e66:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e68:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e6a:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e6c:	b9 84       	ldd	r11, Y+9	; 0x09
    3e6e:	c8 84       	ldd	r12, Y+8	; 0x08
    3e70:	df 80       	ldd	r13, Y+7	; 0x07
    3e72:	ee 80       	ldd	r14, Y+6	; 0x06
    3e74:	fd 80       	ldd	r15, Y+5	; 0x05
    3e76:	0c 81       	ldd	r16, Y+4	; 0x04
    3e78:	1b 81       	ldd	r17, Y+3	; 0x03
    3e7a:	aa 81       	ldd	r26, Y+2	; 0x02
    3e7c:	b9 81       	ldd	r27, Y+1	; 0x01
    3e7e:	ce 0f       	add	r28, r30
    3e80:	d1 1d       	adc	r29, r1
    3e82:	0f b6       	in	r0, 0x3f	; 63
    3e84:	f8 94       	cli
    3e86:	de bf       	out	0x3e, r29	; 62
    3e88:	0f be       	out	0x3f, r0	; 63
    3e8a:	cd bf       	out	0x3d, r28	; 61
    3e8c:	ed 01       	movw	r28, r26
    3e8e:	08 95       	ret

00003e90 <_exit>:
    3e90:	f8 94       	cli

00003e92 <__stop_program>:
    3e92:	ff cf       	rjmp	.-2      	; 0x3e92 <__stop_program>
