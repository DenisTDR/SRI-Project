
SRI Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002d8  00800100  000019a8  00001a3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000121  008003d8  008003d8  00001d14  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d14  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000278  00000000  00000000  00001d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002991  00000000  00000000  00001fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cee  00000000  00000000  00004979  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000eaf  00000000  00000000  00005667  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000804  00000000  00000000  00006518  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000999  00000000  00000000  00006d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001fb1  00000000  00000000  000076b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000238  00000000  00000000  00009666  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__ctors_end>
       4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
       8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
       c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      10:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      14:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      18:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      1c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      20:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      24:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      28:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      2c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      30:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      34:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      38:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      3c:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <__vector_15>
      40:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      44:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      48:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      4c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      50:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <__vector_20>
      54:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      58:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      5c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      60:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      64:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      68:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      6c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      70:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      74:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      78:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      7c:	e2 00       	.word	0x00e2	; ????
      7e:	b5 00       	.word	0x00b5	; ????
      80:	b8 00       	.word	0x00b8	; ????
      82:	f4 00       	.word	0x00f4	; ????
      84:	f4 00       	.word	0x00f4	; ????
      86:	f4 00       	.word	0x00f4	; ????
      88:	f4 00       	.word	0x00f4	; ????
      8a:	f4 00       	.word	0x00f4	; ????
      8c:	f4 00       	.word	0x00f4	; ????
      8e:	f4 00       	.word	0x00f4	; ????
      90:	f4 00       	.word	0x00f4	; ????
      92:	f4 00       	.word	0x00f4	; ????
      94:	f4 00       	.word	0x00f4	; ????
      96:	d8 00       	.word	0x00d8	; ????
      98:	bb 00       	.word	0x00bb	; ????
      9a:	c0 00       	.word	0x00c0	; ????
      9c:	c5 00       	.word	0x00c5	; ????
      9e:	d0 00       	.word	0x00d0	; ????
      a0:	c8 00       	.word	0x00c8	; ????
      a2:	f0 00       	.word	0x00f0	; ????
      a4:	b2 05       	cpc	r27, r2
      a6:	ba 05       	cpc	r27, r10
      a8:	2d 06       	cpc	r2, r29
      aa:	25 06       	cpc	r2, r21
      ac:	1a 06       	cpc	r1, r26
      ae:	c2 05       	cpc	r28, r2
      b0:	02 06       	cpc	r0, r18
      b2:	13 06       	cpc	r1, r19
      b4:	3c 06       	cpc	r3, r28

000000b6 <__ctors_end>:
      b6:	11 24       	eor	r1, r1
      b8:	1f be       	out	0x3f, r1	; 63
      ba:	cf ef       	ldi	r28, 0xFF	; 255
      bc:	d0 e1       	ldi	r29, 0x10	; 16
      be:	de bf       	out	0x3e, r29	; 62
      c0:	cd bf       	out	0x3d, r28	; 61

000000c2 <__do_copy_data>:
      c2:	13 e0       	ldi	r17, 0x03	; 3
      c4:	a0 e0       	ldi	r26, 0x00	; 0
      c6:	b1 e0       	ldi	r27, 0x01	; 1
      c8:	e8 ea       	ldi	r30, 0xA8	; 168
      ca:	f9 e1       	ldi	r31, 0x19	; 25
      cc:	02 c0       	rjmp	.+4      	; 0xd2 <__do_copy_data+0x10>
      ce:	05 90       	lpm	r0, Z+
      d0:	0d 92       	st	X+, r0
      d2:	a8 3d       	cpi	r26, 0xD8	; 216
      d4:	b1 07       	cpc	r27, r17
      d6:	d9 f7       	brne	.-10     	; 0xce <__do_copy_data+0xc>

000000d8 <__do_clear_bss>:
      d8:	24 e0       	ldi	r18, 0x04	; 4
      da:	a8 ed       	ldi	r26, 0xD8	; 216
      dc:	b3 e0       	ldi	r27, 0x03	; 3
      de:	01 c0       	rjmp	.+2      	; 0xe2 <.do_clear_bss_start>

000000e0 <.do_clear_bss_loop>:
      e0:	1d 92       	st	X+, r1

000000e2 <.do_clear_bss_start>:
      e2:	a9 3f       	cpi	r26, 0xF9	; 249
      e4:	b2 07       	cpc	r27, r18
      e6:	e1 f7       	brne	.-8      	; 0xe0 <.do_clear_bss_loop>
      e8:	0e 94 c9 06 	call	0xd92	; 0xd92 <main>
      ec:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <_exit>

000000f0 <__bad_interrupt>:
      f0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f4 <prelucreazaDatele>:
extern volatile uint8_t ms2p1_enabled;

void prelucreazaDatele(void){
	//BTTransmitStr("Procesez ceva!");
	//cli();
	if(actiune >= GoFront && actiune <= GoRightB){
      f4:	80 91 e2 03 	lds	r24, 0x03E2
      f8:	9f ef       	ldi	r25, 0xFF	; 255
      fa:	98 0f       	add	r25, r24
      fc:	96 30       	cpi	r25, 0x06	; 6
      fe:	50 f5       	brcc	.+84     	; 0x154 <prelucreazaDatele+0x60>
		unsigned char timp = date[0];
     100:	90 91 e3 03 	lds	r25, 0x03E3
		unsigned char viteza = date[1];
     104:	60 91 e4 03 	lds	r22, 0x03E4
		switch(actiune){
     108:	83 30       	cpi	r24, 0x03	; 3
     10a:	a1 f0       	breq	.+40     	; 0x134 <prelucreazaDatele+0x40>
     10c:	28 f4       	brcc	.+10     	; 0x118 <prelucreazaDatele+0x24>
     10e:	81 30       	cpi	r24, 0x01	; 1
     110:	49 f0       	breq	.+18     	; 0x124 <prelucreazaDatele+0x30>
     112:	82 30       	cpi	r24, 0x02	; 2
     114:	59 f0       	breq	.+22     	; 0x12c <prelucreazaDatele+0x38>
     116:	08 95       	ret
     118:	85 30       	cpi	r24, 0x05	; 5
     11a:	81 f0       	breq	.+32     	; 0x13c <prelucreazaDatele+0x48>
     11c:	98 f0       	brcs	.+38     	; 0x144 <prelucreazaDatele+0x50>
     11e:	86 30       	cpi	r24, 0x06	; 6
     120:	a9 f0       	breq	.+42     	; 0x14c <prelucreazaDatele+0x58>
     122:	08 95       	ret
			case GoFront:
			goFront(timp, viteza);
     124:	89 2f       	mov	r24, r25
     126:	0e 94 45 02 	call	0x48a	; 0x48a <goFront>
			break;
     12a:	08 95       	ret
			case GoBack:
			goBack(timp, viteza);
     12c:	89 2f       	mov	r24, r25
     12e:	0e 94 6d 02 	call	0x4da	; 0x4da <goBack>
			break;
     132:	08 95       	ret
			case GoLeftF:
			goFrontLeft(timp, viteza);
     134:	89 2f       	mov	r24, r25
     136:	0e 94 95 02 	call	0x52a	; 0x52a <goFrontLeft>
			break;
     13a:	08 95       	ret
			case GoLeftB:
			goBackLeft(timp, viteza);
     13c:	89 2f       	mov	r24, r25
     13e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <goBackLeft>
			break;
     142:	08 95       	ret
			case GoRightF:
				goFrontRight(timp, viteza);
     144:	89 2f       	mov	r24, r25
     146:	0e 94 ba 02 	call	0x574	; 0x574 <goFrontRight>
			break;
     14a:	08 95       	ret
			case GoRightB:
				goBackRight(timp, viteza);
     14c:	89 2f       	mov	r24, r25
     14e:	0e 94 07 03 	call	0x60e	; 0x60e <goBackRight>
			break;
     152:	08 95       	ret
				break;
		}
		return;
	}
	
	switch(actiune){
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	fc 01       	movw	r30, r24
     158:	37 97       	sbiw	r30, 0x07	; 7
     15a:	e4 31       	cpi	r30, 0x14	; 20
     15c:	f1 05       	cpc	r31, r1
     15e:	08 f0       	brcs	.+2      	; 0x162 <prelucreazaDatele+0x6e>
     160:	43 c0       	rjmp	.+134    	; 0x1e8 <prelucreazaDatele+0xf4>
     162:	e2 5c       	subi	r30, 0xC2	; 194
     164:	ff 4f       	sbci	r31, 0xFF	; 255
     166:	0c 94 cd 09 	jmp	0x139a	; 0x139a <__tablejump2__>
		case GoM2P2:
			completeEnclosedContour();
     16a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <completeEnclosedContour>
		break;
     16e:	08 95       	ret
		case GoM2P3:
			checkFreeParallelParkingPlace();
     170:	0e 94 ef 01 	call	0x3de	; 0x3de <checkFreeParallelParkingPlace>
		break;
     174:	08 95       	ret
		case Led:
			ledAction(date[0]);
     176:	80 91 e3 03 	lds	r24, 0x03E3
     17a:	0e 94 a4 09 	call	0x1348	; 0x1348 <ledAction>
		break;
     17e:	08 95       	ret
		case ReadSensorValue:
			toggleSensorRead(date[0]);		
     180:	80 91 e3 03 	lds	r24, 0x03E3
     184:	0e 94 68 03 	call	0x6d0	; 0x6d0 <toggleSensorRead>
		break;
     188:	08 95       	ret
		case StopEngines:
			stopEngines();
     18a:	0e 94 db 01 	call	0x3b6	; 0x3b6 <stopEngines>
		break;
     18e:	08 95       	ret
		case RotirePeLocDreapta:
			rotirePeLoc(date[0], date[1], RightEngines);
     190:	40 e0       	ldi	r20, 0x00	; 0
     192:	60 91 e4 03 	lds	r22, 0x03E4
     196:	80 91 e3 03 	lds	r24, 0x03E3
     19a:	0e 94 2f 03 	call	0x65e	; 0x65e <rotirePeLoc>
		break;		
     19e:	08 95       	ret
		case RotirePeLocStanga:
			rotirePeLoc(date[0], date[1], LeftEngines);
     1a0:	41 e0       	ldi	r20, 0x01	; 1
     1a2:	60 91 e4 03 	lds	r22, 0x03E4
     1a6:	80 91 e3 03 	lds	r24, 0x03E3
     1aa:	0e 94 2f 03 	call	0x65e	; 0x65e <rotirePeLoc>
		break;
     1ae:	08 95       	ret
		case DisplayMessage:
			//addEntryToTimerQueue(&fctSmechera, 10UL * 1000UL, Periodic);
			addEntryToTimerQueue(&testFct1, 500UL * 1000UL, Periodic);
     1b0:	21 e0       	ldi	r18, 0x01	; 1
     1b2:	40 e2       	ldi	r20, 0x20	; 32
     1b4:	51 ea       	ldi	r21, 0xA1	; 161
     1b6:	67 e0       	ldi	r22, 0x07	; 7
     1b8:	70 e0       	ldi	r23, 0x00	; 0
     1ba:	82 e4       	ldi	r24, 0x42	; 66
     1bc:	95 e0       	ldi	r25, 0x05	; 5
     1be:	0e 94 f7 06 	call	0xdee	; 0xdee <addEntryToTimerQueue>
		break;
     1c2:	08 95       	ret
		case GoM2P1:
			addEntryToTimerQueue(&functieRotireStanga, 1000UL * 500UL, Periodic);
     1c4:	21 e0       	ldi	r18, 0x01	; 1
     1c6:	40 e2       	ldi	r20, 0x20	; 32
     1c8:	51 ea       	ldi	r21, 0xA1	; 161
     1ca:	67 e0       	ldi	r22, 0x07	; 7
     1cc:	70 e0       	ldi	r23, 0x00	; 0
     1ce:	81 e6       	ldi	r24, 0x61	; 97
     1d0:	95 e0       	ldi	r25, 0x05	; 5
     1d2:	0e 94 f7 06 	call	0xdee	; 0xdee <addEntryToTimerQueue>
			iesire=date[0];
     1d6:	80 91 e3 03 	lds	r24, 0x03E3
     1da:	80 93 da 03 	sts	0x03DA, r24
		break;
     1de:	08 95       	ret
		case ResetThings:
			stopEngines();
     1e0:	0e 94 db 01 	call	0x3b6	; 0x3b6 <stopEngines>
			resetTimerQueue();
     1e4:	0e 94 a0 09 	call	0x1340	; 0x1340 <resetTimerQueue>
     1e8:	08 95       	ret

000001ea <BTTransmitStr>:
}

void BTTransmitStr(char *theString){
	uint8_t len, i;
	
	len = strlen(theString);
     1ea:	fc 01       	movw	r30, r24
     1ec:	01 90       	ld	r0, Z+
     1ee:	00 20       	and	r0, r0
     1f0:	e9 f7       	brne	.-6      	; 0x1ec <BTTransmitStr+0x2>
     1f2:	31 97       	sbiw	r30, 0x01	; 1
     1f4:	e8 1b       	sub	r30, r24
     1f6:	f9 0b       	sbc	r31, r25
     1f8:	2e 2f       	mov	r18, r30
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     1fa:	3a ea       	ldi	r19, 0xAA	; 170
     1fc:	30 93 c6 00 	sts	0x00C6, r19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     200:	af e1       	ldi	r26, 0x1F	; 31
     202:	be e4       	ldi	r27, 0x4E	; 78
     204:	11 97       	sbiw	r26, 0x01	; 1
     206:	f1 f7       	brne	.-4      	; 0x204 <BTTransmitStr+0x1a>
     208:	00 c0       	rjmp	.+0      	; 0x20a <BTTransmitStr+0x20>
     20a:	00 00       	nop
     20c:	34 e1       	ldi	r19, 0x14	; 20
     20e:	30 93 c6 00 	sts	0x00C6, r19
     212:	af e1       	ldi	r26, 0x1F	; 31
     214:	be e4       	ldi	r27, 0x4E	; 78
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	f1 f7       	brne	.-4      	; 0x216 <BTTransmitStr+0x2c>
     21a:	00 c0       	rjmp	.+0      	; 0x21c <BTTransmitStr+0x32>
     21c:	00 00       	nop
     21e:	e0 93 c6 00 	sts	0x00C6, r30
     222:	ef e1       	ldi	r30, 0x1F	; 31
     224:	fe e4       	ldi	r31, 0x4E	; 78
     226:	31 97       	sbiw	r30, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <BTTransmitStr+0x3c>
     22a:	00 c0       	rjmp	.+0      	; 0x22c <BTTransmitStr+0x42>
     22c:	00 00       	nop
	
	BTTransmitChar(0xAA);
	BTTransmitChar(DisplayMessage);
	BTTransmitChar(len);
	
	for(i=0;i<len;i++)
     22e:	22 23       	and	r18, r18
     230:	89 f0       	breq	.+34     	; 0x254 <BTTransmitStr+0x6a>
     232:	38 2f       	mov	r19, r24
     234:	e8 2f       	mov	r30, r24
     236:	f9 2f       	mov	r31, r25
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     238:	a6 ec       	ldi	r26, 0xC6	; 198
     23a:	b0 e0       	ldi	r27, 0x00	; 0
	BTTransmitChar(DisplayMessage);
	BTTransmitChar(len);
	
	for(i=0;i<len;i++)
	{
		BTTransmitChar(theString[i]);
     23c:	81 91       	ld	r24, Z+
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     23e:	8c 93       	st	X, r24
     240:	8f e1       	ldi	r24, 0x1F	; 31
     242:	9e e4       	ldi	r25, 0x4E	; 78
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	f1 f7       	brne	.-4      	; 0x244 <BTTransmitStr+0x5a>
     248:	00 c0       	rjmp	.+0      	; 0x24a <BTTransmitStr+0x60>
     24a:	00 00       	nop
     24c:	8e 2f       	mov	r24, r30
     24e:	83 1b       	sub	r24, r19
	
	BTTransmitChar(0xAA);
	BTTransmitChar(DisplayMessage);
	BTTransmitChar(len);
	
	for(i=0;i<len;i++)
     250:	82 17       	cp	r24, r18
     252:	a0 f3       	brcs	.-24     	; 0x23c <BTTransmitStr+0x52>
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     254:	85 e5       	ldi	r24, 0x55	; 85
     256:	80 93 c6 00 	sts	0x00C6, r24
     25a:	af e1       	ldi	r26, 0x1F	; 31
     25c:	be e4       	ldi	r27, 0x4E	; 78
     25e:	11 97       	sbiw	r26, 0x01	; 1
     260:	f1 f7       	brne	.-4      	; 0x25e <BTTransmitStr+0x74>
     262:	00 c0       	rjmp	.+0      	; 0x264 <BTTransmitStr+0x7a>
     264:	00 00       	nop
     266:	08 95       	ret

00000268 <BTTransmitMsg>:
	}
	BTTransmitChar(0x55);
	
}

void BTTransmitMsg(char *theString, uint8_t len){
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
	uint16_t i;
	for(i=0;i<len;i++)
     26c:	70 e0       	ldi	r23, 0x00	; 0
     26e:	61 15       	cp	r22, r1
     270:	71 05       	cpc	r23, r1
     272:	91 f0       	breq	.+36     	; 0x298 <BTTransmitMsg+0x30>
     274:	e8 2f       	mov	r30, r24
     276:	f9 2f       	mov	r31, r25
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	90 e0       	ldi	r25, 0x00	; 0
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     27c:	a6 ec       	ldi	r26, 0xC6	; 198
     27e:	b0 e0       	ldi	r27, 0x00	; 0

void BTTransmitMsg(char *theString, uint8_t len){
	uint16_t i;
	for(i=0;i<len;i++)
	{
		BTTransmitChar(theString[i]);
     280:	21 91       	ld	r18, Z+
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     282:	2c 93       	st	X, r18
     284:	cf e1       	ldi	r28, 0x1F	; 31
     286:	de e4       	ldi	r29, 0x4E	; 78
     288:	21 97       	sbiw	r28, 0x01	; 1
     28a:	f1 f7       	brne	.-4      	; 0x288 <BTTransmitMsg+0x20>
     28c:	00 c0       	rjmp	.+0      	; 0x28e <BTTransmitMsg+0x26>
     28e:	00 00       	nop
	
}

void BTTransmitMsg(char *theString, uint8_t len){
	uint16_t i;
	for(i=0;i<len;i++)
     290:	01 96       	adiw	r24, 0x01	; 1
     292:	86 17       	cp	r24, r22
     294:	97 07       	cpc	r25, r23
     296:	a0 f3       	brcs	.-24     	; 0x280 <BTTransmitMsg+0x18>
	{
		BTTransmitChar(theString[i]);
	}
}
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	08 95       	ret

0000029e <reTransmit>:
#include "../Car/Sensors.h"
#include "../functiiParcare.h"

void prelucreazaDatele(void);

void reTransmit(void){
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	00 d0       	rcall	.+0      	; 0x2a4 <reTransmit+0x6>
     2a4:	00 d0       	rcall	.+0      	; 0x2a6 <reTransmit+0x8>
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
	//trimite un semnal telefonului pentru a retransmite ultimul mesaj
	printf("Trimite din nou ultimul mesaj!!!");
     2aa:	83 e0       	ldi	r24, 0x03	; 3
     2ac:	91 e0       	ldi	r25, 0x01	; 1
     2ae:	9f 93       	push	r25
     2b0:	8f 93       	push	r24
     2b2:	0e 94 ed 09 	call	0x13da	; 0x13da <printf>
	char msg[] = { StartByte, ReTransmitLastMsg, 0, 0x55 };
     2b6:	8a ea       	ldi	r24, 0xAA	; 170
     2b8:	89 83       	std	Y+1, r24	; 0x01
     2ba:	83 e1       	ldi	r24, 0x13	; 19
     2bc:	8a 83       	std	Y+2, r24	; 0x02
     2be:	1b 82       	std	Y+3, r1	; 0x03
     2c0:	85 e5       	ldi	r24, 0x55	; 85
     2c2:	8c 83       	std	Y+4, r24	; 0x04
	BTTransmitMsg(msg, 4);
     2c4:	64 e0       	ldi	r22, 0x04	; 4
     2c6:	ce 01       	movw	r24, r28
     2c8:	01 96       	adiw	r24, 0x01	; 1
     2ca:	0e 94 34 01 	call	0x268	; 0x268 <BTTransmitMsg>
}
     2ce:	0f 90       	pop	r0
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
     2d4:	0f 90       	pop	r0
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
     2de:	08 95       	ret

000002e0 <BTProtocolReadByte>:
}

extern volatile uint8_t debugging;
extern volatile uint8_t iesire;
void BTProtocolReadByte(unsigned char theByte){
	cli();
     2e0:	f8 94       	cli
	switch (state){
     2e2:	90 91 02 01 	lds	r25, 0x0102
     2e6:	92 30       	cpi	r25, 0x02	; 2
     2e8:	21 f1       	breq	.+72     	; 0x332 <BTProtocolReadByte+0x52>
     2ea:	28 f4       	brcc	.+10     	; 0x2f6 <BTProtocolReadByte+0x16>
     2ec:	99 23       	and	r25, r25
     2ee:	49 f0       	breq	.+18     	; 0x302 <BTProtocolReadByte+0x22>
     2f0:	91 30       	cpi	r25, 0x01	; 1
     2f2:	91 f0       	breq	.+36     	; 0x318 <BTProtocolReadByte+0x38>
     2f4:	4d c0       	rjmp	.+154    	; 0x390 <BTProtocolReadByte+0xb0>
     2f6:	93 30       	cpi	r25, 0x03	; 3
     2f8:	81 f1       	breq	.+96     	; 0x35a <BTProtocolReadByte+0x7a>
     2fa:	94 30       	cpi	r25, 0x04	; 4
     2fc:	09 f4       	brne	.+2      	; 0x300 <BTProtocolReadByte+0x20>
     2fe:	3f c0       	rjmp	.+126    	; 0x37e <BTProtocolReadByte+0x9e>
     300:	47 c0       	rjmp	.+142    	; 0x390 <BTProtocolReadByte+0xb0>
		case WaitingStartByte:
			if(theByte == StartByte){
     302:	8a 3a       	cpi	r24, 0xAA	; 170
     304:	09 f0       	breq	.+2      	; 0x308 <BTProtocolReadByte+0x28>
     306:	44 c0       	rjmp	.+136    	; 0x390 <BTProtocolReadByte+0xb0>
				state = WaitingCarAction;
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	80 93 02 01 	sts	0x0102, r24
				debugging = 0;
     30e:	10 92 00 01 	sts	0x0100, r1
				//addEntryToTimerQueue(&resetBTProtocol, 1000UL * 1000UL * 1000UL, Once);
				debugging = 1;
     312:	80 93 00 01 	sts	0x0100, r24
     316:	3c c0       	rjmp	.+120    	; 0x390 <BTProtocolReadByte+0xb0>
			}
			break;

		case WaitingCarAction:
			if(theByte >= NoAction && theByte < EndAction){
     318:	8b 31       	cpi	r24, 0x1B	; 27
     31a:	30 f4       	brcc	.+12     	; 0x328 <BTProtocolReadByte+0x48>
				state = WaitingDataLength;
     31c:	92 e0       	ldi	r25, 0x02	; 2
     31e:	90 93 02 01 	sts	0x0102, r25
				actiune = theByte;
     322:	80 93 e2 03 	sts	0x03E2, r24
     326:	34 c0       	rjmp	.+104    	; 0x390 <BTProtocolReadByte+0xb0>
			}
			else{
				state = WaitingStartByte;
     328:	10 92 02 01 	sts	0x0102, r1
				reTransmit(); // error ocurred, send retransmit signal
     32c:	0e 94 4f 01 	call	0x29e	; 0x29e <reTransmit>
     330:	2f c0       	rjmp	.+94     	; 0x390 <BTProtocolReadByte+0xb0>
			}
			break;

		case WaitingDataLength:
			if(theByte==0){
     332:	81 11       	cpse	r24, r1
     334:	05 c0       	rjmp	.+10     	; 0x340 <BTProtocolReadByte+0x60>
				state = WaitingEndByte;
			}
			state = ReadingData;
			len = theByte;
     336:	10 92 ed 03 	sts	0x03ED, r1
			dateCrtIndex = 0;
     33a:	10 92 e1 03 	sts	0x03E1, r1
     33e:	0a c0       	rjmp	.+20     	; 0x354 <BTProtocolReadByte+0x74>

		case WaitingDataLength:
			if(theByte==0){
				state = WaitingEndByte;
			}
			state = ReadingData;
     340:	93 e0       	ldi	r25, 0x03	; 3
     342:	90 93 02 01 	sts	0x0102, r25
			len = theByte;
     346:	80 93 ed 03 	sts	0x03ED, r24
			dateCrtIndex = 0;
     34a:	10 92 e1 03 	sts	0x03E1, r1
			if(len<=0 || len>50)
     34e:	81 50       	subi	r24, 0x01	; 1
     350:	82 33       	cpi	r24, 0x32	; 50
     352:	f0 f0       	brcs	.+60     	; 0x390 <BTProtocolReadByte+0xb0>
			state=WaitingStartByte;
     354:	10 92 02 01 	sts	0x0102, r1
     358:	1b c0       	rjmp	.+54     	; 0x390 <BTProtocolReadByte+0xb0>
			break;

		case ReadingData:
			date[dateCrtIndex++] = theByte;
     35a:	e0 91 e1 03 	lds	r30, 0x03E1
     35e:	91 e0       	ldi	r25, 0x01	; 1
     360:	9e 0f       	add	r25, r30
     362:	90 93 e1 03 	sts	0x03E1, r25
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	ed 51       	subi	r30, 0x1D	; 29
     36a:	fc 4f       	sbci	r31, 0xFC	; 252
     36c:	80 83       	st	Z, r24
			if(dateCrtIndex >= len)
     36e:	80 91 ed 03 	lds	r24, 0x03ED
     372:	98 17       	cp	r25, r24
     374:	68 f0       	brcs	.+26     	; 0x390 <BTProtocolReadByte+0xb0>
			state = WaitingEndByte;
     376:	84 e0       	ldi	r24, 0x04	; 4
     378:	80 93 02 01 	sts	0x0102, r24
     37c:	09 c0       	rjmp	.+18     	; 0x390 <BTProtocolReadByte+0xb0>
			break;
		case WaitingEndByte:
			if(theByte != 0x55){
     37e:	85 35       	cpi	r24, 0x55	; 85
     380:	19 f0       	breq	.+6      	; 0x388 <BTProtocolReadByte+0xa8>
				reTransmit(); // error ocurred, send retransmit signal
     382:	0e 94 4f 01 	call	0x29e	; 0x29e <reTransmit>
     386:	02 c0       	rjmp	.+4      	; 0x38c <BTProtocolReadByte+0xac>
			}
			else{
				prelucreazaDatele();
     388:	0e 94 7a 00 	call	0xf4	; 0xf4 <prelucreazaDatele>
			}
			state = WaitingStartByte;
     38c:	10 92 02 01 	sts	0x0102, r1
			break;

	}
	sei();
     390:	78 94       	sei
     392:	08 95       	ret

00000394 <BTInit>:
}

void BTInit()
{
	/*Pentru Receive*/
	UBRR0L = 25; //baud rate 9600 bps
     394:	89 e1       	ldi	r24, 0x19	; 25
     396:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B |= _BV(RXCIE0);
     39a:	e1 ec       	ldi	r30, 0xC1	; 193
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	80 81       	ld	r24, Z
     3a0:	80 68       	ori	r24, 0x80	; 128
     3a2:	80 83       	st	Z, r24
	UCSR0B |= _BV(RXEN0);
     3a4:	80 81       	ld	r24, Z
     3a6:	80 61       	ori	r24, 0x10	; 16
     3a8:	80 83       	st	Z, r24
	UCSR0B |= _BV(TXEN0);
     3aa:	80 81       	ld	r24, Z
     3ac:	88 60       	ori	r24, 0x08	; 8
     3ae:	80 83       	st	Z, r24
	//UCSR0B |= (_BV(TXEN0))|(_BV(RXCIE0))|(_BV(RXCIE0));//activare receive,transmit si receive interrupt
	//UCSR0C |=(1<<UPM01)|(1<<UPM00);
	
	state = WaitingStartByte;
     3b0:	10 92 02 01 	sts	0x0102, r1
     3b4:	08 95       	ret

000003b6 <stopEngines>:
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
}

extern volatile uint32_t time;
void stopEngines(){
    BTTransmitStr("M-am oprit!");
     3b6:	84 e2       	ldi	r24, 0x24	; 36
     3b8:	91 e0       	ldi	r25, 0x01	; 1
     3ba:	0e 94 f5 00 	call	0x1ea	; 0x1ea <BTTransmitStr>
	
	OCR0A = 0;
     3be:	17 bc       	out	0x27, r1	; 39
	OCR2A = 0;
     3c0:	10 92 b3 00 	sts	0x00B3, r1
	
	PORTD &= ~ 1<<PIND2;
     3c4:	8b b1       	in	r24, 0x0b	; 11
     3c6:	88 7f       	andi	r24, 0xF8	; 248
     3c8:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~ 1<<PIND4;
     3ca:	8b b1       	in	r24, 0x0b	; 11
     3cc:	80 7e       	andi	r24, 0xE0	; 224
     3ce:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~ 1<<PIND3;
     3d0:	8b b1       	in	r24, 0x0b	; 11
     3d2:	80 7f       	andi	r24, 0xF0	; 240
     3d4:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~ 1<<PIND5;
     3d6:	8b b1       	in	r24, 0x0b	; 11
     3d8:	80 7c       	andi	r24, 0xC0	; 192
     3da:	8b b9       	out	0x0b, r24	; 11
     3dc:	08 95       	ret

000003de <checkFreeParallelParkingPlace>:
	//setEnginesSpeed(RightEngines, 1, 0);
	//setEnginesSpeed(LeftEngines, 1, 0);
}
void checkFreeParallelParkingPlace(){
	
    BTTransmitStr("Start Free P P P!");
     3de:	80 e3       	ldi	r24, 0x30	; 48
     3e0:	91 e0       	ldi	r25, 0x01	; 1
     3e2:	0e 94 f5 00 	call	0x1ea	; 0x1ea <BTTransmitStr>
     3e6:	08 95       	ret

000003e8 <completeEnclosedContour>:
}
void completeEnclosedContour(){
	
	
    BTTransmitStr("Start complete enclosed contour!");
     3e8:	82 e4       	ldi	r24, 0x42	; 66
     3ea:	91 e0       	ldi	r25, 0x01	; 1
     3ec:	0e 94 f5 00 	call	0x1ea	; 0x1ea <BTTransmitStr>
     3f0:	08 95       	ret

000003f2 <initEngines>:


void initEngines()
{
	
	OCR0A = 0;
     3f2:	17 bc       	out	0x27, r1	; 39
	OCR2A = 0;
     3f4:	10 92 b3 00 	sts	0x00B3, r1
	
	//PINB|=(1<<PB3);
	
	
	DDRB |=1<<PINB3;
     3f8:	23 9a       	sbi	0x04, 3	; 4
	TCCR0A |=3;
     3fa:	84 b5       	in	r24, 0x24	; 36
     3fc:	83 60       	ori	r24, 0x03	; 3
     3fe:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0A0);
     400:	84 b5       	in	r24, 0x24	; 36
     402:	80 64       	ori	r24, 0x40	; 64
     404:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0A1);
     406:	84 b5       	in	r24, 0x24	; 36
     408:	80 68       	ori	r24, 0x80	; 128
     40a:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS00);
     40c:	85 b5       	in	r24, 0x25	; 37
     40e:	81 60       	ori	r24, 0x01	; 1
     410:	85 bd       	out	0x25, r24	; 37
	// motor 2
	
	DDRD |= (1 << PD7);
     412:	57 9a       	sbi	0x0a, 7	; 10
	TCCR2A|=3;
     414:	e0 eb       	ldi	r30, 0xB0	; 176
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	80 81       	ld	r24, Z
     41a:	83 60       	ori	r24, 0x03	; 3
     41c:	80 83       	st	Z, r24
	TCCR2A |= (1 << COM2A0);
     41e:	80 81       	ld	r24, Z
     420:	80 64       	ori	r24, 0x40	; 64
     422:	80 83       	st	Z, r24
	TCCR2A |= (1 << COM2A1);
     424:	80 81       	ld	r24, Z
     426:	80 68       	ori	r24, 0x80	; 128
     428:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS20);
     42a:	e1 eb       	ldi	r30, 0xB1	; 177
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	80 81       	ld	r24, Z
     430:	81 60       	ori	r24, 0x01	; 1
     432:	80 83       	st	Z, r24
	
		/*	PORTC |= 1<<PINC1;	
			PORTC |= 1<<PINC0;	*/
		
	//enable standby
	DDRB |= 1<<PINB5;
     434:	25 9a       	sbi	0x04, 5	; 4
	PORTB |= 1<<PINB5;	
     436:	2d 9a       	sbi	0x05, 5	; 5
	DDRB |= 1<<PINB4;
     438:	24 9a       	sbi	0x04, 4	; 4
	PORTB |= 1<<PINB4;
     43a:	2c 9a       	sbi	0x05, 4	; 5
	
	
	//in1 & in2 4 left engines
	DDRD |= 1<<PIND3;
     43c:	53 9a       	sbi	0x0a, 3	; 10
	DDRD |= 1<<PIND5;
     43e:	55 9a       	sbi	0x0a, 5	; 10
	PORTD &= ~ 1<<PIND3;
     440:	8b b1       	in	r24, 0x0b	; 11
     442:	80 7f       	andi	r24, 0xF0	; 240
     444:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~ 1<<PIND5;
     446:	8b b1       	in	r24, 0x0b	; 11
     448:	80 7c       	andi	r24, 0xC0	; 192
     44a:	8b b9       	out	0x0b, r24	; 11
	
	//in1 & in2 4 left engines
	DDRD |= 1<<PIND2;
     44c:	52 9a       	sbi	0x0a, 2	; 10
	DDRD |= 1<<PIND4;
     44e:	54 9a       	sbi	0x0a, 4	; 10
	PORTD &= ~ 1<<PIND2;
     450:	8b b1       	in	r24, 0x0b	; 11
     452:	88 7f       	andi	r24, 0xF8	; 248
     454:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~ 1<<PIND4;
     456:	8b b1       	in	r24, 0x0b	; 11
     458:	80 7e       	andi	r24, 0xE0	; 224
     45a:	8b b9       	out	0x0b, r24	; 11
     45c:	08 95       	ret

0000045e <setEnginesSpeed>:
{
	//PD2 (sens driver dreapta)
	//PD3 (sens driver stanga)
	
	//if(sens == SensFata)
	viteza = 255 - viteza;
     45e:	40 95       	com	r20
		
	if(engine==RightEngines){
     460:	81 11       	cpse	r24, r1
     462:	0a c0       	rjmp	.+20     	; 0x478 <setEnginesSpeed+0x1a>
		if(sens != SensFata){
     464:	66 23       	and	r22, r22
     466:	19 f0       	breq	.+6      	; 0x46e <setEnginesSpeed+0x10>
			PORTD &= ~ (1<<PIND2);
     468:	5a 98       	cbi	0x0b, 2	; 11
			PORTD |=  1<<PIND4;
     46a:	5c 9a       	sbi	0x0b, 4	; 11
     46c:	02 c0       	rjmp	.+4      	; 0x472 <setEnginesSpeed+0x14>
		}			
		else{
			PORTD |=  1<<PIND2;
     46e:	5a 9a       	sbi	0x0b, 2	; 11
			PORTD &= ~( 1<<PIND4);
     470:	5c 98       	cbi	0x0b, 4	; 11
		}
		OCR2A = viteza;	
     472:	40 93 b3 00 	sts	0x00B3, r20
     476:	08 95       	ret
	}
	else
	{
		if(sens != SensFata){	
     478:	66 23       	and	r22, r22
     47a:	19 f0       	breq	.+6      	; 0x482 <setEnginesSpeed+0x24>
			PORTD |=  1<<PIND3;
     47c:	5b 9a       	sbi	0x0b, 3	; 11
			PORTD &= ~ (1<<PIND5);
     47e:	5d 98       	cbi	0x0b, 5	; 11
     480:	02 c0       	rjmp	.+4      	; 0x486 <setEnginesSpeed+0x28>
		}			
		else{			
			PORTD &= ~ (1<<PIND3);
     482:	5b 98       	cbi	0x0b, 3	; 11
			PORTD |=  1<<PIND5;		
     484:	5d 9a       	sbi	0x0b, 5	; 11
		}
		OCR0A = viteza;
     486:	47 bd       	out	0x27, r20	; 39
     488:	08 95       	ret

0000048a <goFront>:
#include "../BTProtocol/BTProtocol.h"
#include "../Timing/Timing.h"

void setEnginesSpeed(Engines, Sens, uint8_t);

void goFront(uint8_t timp, uint8_t viteza){	
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	d8 2f       	mov	r29, r24
     490:	c6 2f       	mov	r28, r22
	setEnginesSpeed(RightEngines, SensFata, viteza);
     492:	46 2f       	mov	r20, r22
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	0e 94 2f 02 	call	0x45e	; 0x45e <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensFata, viteza);
     49c:	4c 2f       	mov	r20, r28
     49e:	60 e0       	ldi	r22, 0x00	; 0
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	0e 94 2f 02 	call	0x45e	; 0x45e <setEnginesSpeed>
	removeEntryFromTimerQueue(&stopEngines);
     4a6:	8b ed       	ldi	r24, 0xDB	; 219
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	0e 94 f8 07 	call	0xff0	; 0xff0 <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);	
     4ae:	ad 2f       	mov	r26, r29
     4b0:	b0 e0       	ldi	r27, 0x00	; 0
     4b2:	20 e4       	ldi	r18, 0x40	; 64
     4b4:	32 e4       	ldi	r19, 0x42	; 66
     4b6:	4f e0       	ldi	r20, 0x0F	; 15
     4b8:	50 e0       	ldi	r21, 0x00	; 0
     4ba:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__muluhisi3>
     4be:	ab 01       	movw	r20, r22
     4c0:	bc 01       	movw	r22, r24
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	8b ed       	ldi	r24, 0xDB	; 219
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	0e 94 f7 06 	call	0xdee	; 0xdee <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inainte!");
     4cc:	83 e6       	ldi	r24, 0x63	; 99
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <BTTransmitStr>
}
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	08 95       	ret

000004da <goBack>:
void goBack(uint8_t timp, uint8_t viteza){
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	d8 2f       	mov	r29, r24
     4e0:	c6 2f       	mov	r28, r22
	setEnginesSpeed(RightEngines, SensSpate, viteza);
     4e2:	46 2f       	mov	r20, r22
     4e4:	61 e0       	ldi	r22, 0x01	; 1
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	0e 94 2f 02 	call	0x45e	; 0x45e <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensSpate, viteza);
     4ec:	4c 2f       	mov	r20, r28
     4ee:	61 e0       	ldi	r22, 0x01	; 1
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	0e 94 2f 02 	call	0x45e	; 0x45e <setEnginesSpeed>
	removeEntryFromTimerQueue(&stopEngines);
     4f6:	8b ed       	ldi	r24, 0xDB	; 219
     4f8:	91 e0       	ldi	r25, 0x01	; 1
     4fa:	0e 94 f8 07 	call	0xff0	; 0xff0 <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     4fe:	ad 2f       	mov	r26, r29
     500:	b0 e0       	ldi	r27, 0x00	; 0
     502:	20 e4       	ldi	r18, 0x40	; 64
     504:	32 e4       	ldi	r19, 0x42	; 66
     506:	4f e0       	ldi	r20, 0x0F	; 15
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__muluhisi3>
     50e:	ab 01       	movw	r20, r22
     510:	bc 01       	movw	r22, r24
     512:	20 e0       	ldi	r18, 0x00	; 0
     514:	8b ed       	ldi	r24, 0xDB	; 219
     516:	91 e0       	ldi	r25, 0x01	; 1
     518:	0e 94 f7 06 	call	0xdee	; 0xdee <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inapoi!");
     51c:	83 e7       	ldi	r24, 0x73	; 115
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	0e 94 f5 00 	call	0x1ea	; 0x1ea <BTTransmitStr>
}
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	08 95       	ret

0000052a <goFrontLeft>:

void goFrontLeft(uint8_t timp, uint8_t viteza){
     52a:	cf 93       	push	r28
     52c:	c8 2f       	mov	r28, r24
     52e:	46 2f       	mov	r20, r22
	
	setEnginesSpeed(RightEngines, SensFata, viteza);
     530:	60 e0       	ldi	r22, 0x00	; 0
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	0e 94 2f 02 	call	0x45e	; 0x45e <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensFata, 10);
     538:	4a e0       	ldi	r20, 0x0A	; 10
     53a:	60 e0       	ldi	r22, 0x00	; 0
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	0e 94 2f 02 	call	0x45e	; 0x45e <setEnginesSpeed>
	removeEntryFromTimerQueue(&stopEngines);
     542:	8b ed       	ldi	r24, 0xDB	; 219
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	0e 94 f8 07 	call	0xff0	; 0xff0 <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     54a:	ac 2f       	mov	r26, r28
     54c:	b0 e0       	ldi	r27, 0x00	; 0
     54e:	20 e4       	ldi	r18, 0x40	; 64
     550:	32 e4       	ldi	r19, 0x42	; 66
     552:	4f e0       	ldi	r20, 0x0F	; 15
     554:	50 e0       	ldi	r21, 0x00	; 0
     556:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__muluhisi3>
     55a:	ab 01       	movw	r20, r22
     55c:	bc 01       	movw	r22, r24
     55e:	20 e0       	ldi	r18, 0x00	; 0
     560:	8b ed       	ldi	r24, 0xDB	; 219
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	0e 94 f7 06 	call	0xdee	; 0xdee <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inainte stanga!");
     568:	82 e8       	ldi	r24, 0x82	; 130
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <BTTransmitStr>
}
     570:	cf 91       	pop	r28
     572:	08 95       	ret

00000574 <goFrontRight>:
void goFrontRight(uint8_t timp, uint8_t viteza){
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	c8 2f       	mov	r28, r24
     57a:	d6 2f       	mov	r29, r22
	
	setEnginesSpeed(RightEngines, SensFata, 10);
     57c:	4a e0       	ldi	r20, 0x0A	; 10
     57e:	60 e0       	ldi	r22, 0x00	; 0
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	0e 94 2f 02 	call	0x45e	; 0x45e <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensFata, viteza);
     586:	4d 2f       	mov	r20, r29
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	0e 94 2f 02 	call	0x45e	; 0x45e <setEnginesSpeed>
	removeEntryFromTimerQueue(&stopEngines);
     590:	8b ed       	ldi	r24, 0xDB	; 219
     592:	91 e0       	ldi	r25, 0x01	; 1
     594:	0e 94 f8 07 	call	0xff0	; 0xff0 <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     598:	ac 2f       	mov	r26, r28
     59a:	b0 e0       	ldi	r27, 0x00	; 0
     59c:	20 e4       	ldi	r18, 0x40	; 64
     59e:	32 e4       	ldi	r19, 0x42	; 66
     5a0:	4f e0       	ldi	r20, 0x0F	; 15
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__muluhisi3>
     5a8:	ab 01       	movw	r20, r22
     5aa:	bc 01       	movw	r22, r24
     5ac:	20 e0       	ldi	r18, 0x00	; 0
     5ae:	8b ed       	ldi	r24, 0xDB	; 219
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	0e 94 f7 06 	call	0xdee	; 0xdee <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inainte dreapta!");
     5b6:	89 e9       	ldi	r24, 0x99	; 153
     5b8:	91 e0       	ldi	r25, 0x01	; 1
     5ba:	0e 94 f5 00 	call	0x1ea	; 0x1ea <BTTransmitStr>
}
     5be:	df 91       	pop	r29
     5c0:	cf 91       	pop	r28
     5c2:	08 95       	ret

000005c4 <goBackLeft>:

void goBackLeft(uint8_t timp, uint8_t viteza){
     5c4:	cf 93       	push	r28
     5c6:	c8 2f       	mov	r28, r24
     5c8:	46 2f       	mov	r20, r22
	
	setEnginesSpeed(RightEngines, SensSpate, viteza);
     5ca:	61 e0       	ldi	r22, 0x01	; 1
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	0e 94 2f 02 	call	0x45e	; 0x45e <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensSpate, 10);
     5d2:	4a e0       	ldi	r20, 0x0A	; 10
     5d4:	61 e0       	ldi	r22, 0x01	; 1
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	0e 94 2f 02 	call	0x45e	; 0x45e <setEnginesSpeed>
	removeEntryFromTimerQueue(&stopEngines);
     5dc:	8b ed       	ldi	r24, 0xDB	; 219
     5de:	91 e0       	ldi	r25, 0x01	; 1
     5e0:	0e 94 f8 07 	call	0xff0	; 0xff0 <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     5e4:	ac 2f       	mov	r26, r28
     5e6:	b0 e0       	ldi	r27, 0x00	; 0
     5e8:	20 e4       	ldi	r18, 0x40	; 64
     5ea:	32 e4       	ldi	r19, 0x42	; 66
     5ec:	4f e0       	ldi	r20, 0x0F	; 15
     5ee:	50 e0       	ldi	r21, 0x00	; 0
     5f0:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__muluhisi3>
     5f4:	ab 01       	movw	r20, r22
     5f6:	bc 01       	movw	r22, r24
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	8b ed       	ldi	r24, 0xDB	; 219
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	0e 94 f7 06 	call	0xdee	; 0xdee <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inapoi stanga!");
     602:	81 eb       	ldi	r24, 0xB1	; 177
     604:	91 e0       	ldi	r25, 0x01	; 1
     606:	0e 94 f5 00 	call	0x1ea	; 0x1ea <BTTransmitStr>
}
     60a:	cf 91       	pop	r28
     60c:	08 95       	ret

0000060e <goBackRight>:
void goBackRight(uint8_t timp, uint8_t viteza){
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	c8 2f       	mov	r28, r24
     614:	d6 2f       	mov	r29, r22
	
	setEnginesSpeed(RightEngines, SensSpate, 10);
     616:	4a e0       	ldi	r20, 0x0A	; 10
     618:	61 e0       	ldi	r22, 0x01	; 1
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	0e 94 2f 02 	call	0x45e	; 0x45e <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensSpate, viteza);
     620:	4d 2f       	mov	r20, r29
     622:	61 e0       	ldi	r22, 0x01	; 1
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	0e 94 2f 02 	call	0x45e	; 0x45e <setEnginesSpeed>
	removeEntryFromTimerQueue(&stopEngines);
     62a:	8b ed       	ldi	r24, 0xDB	; 219
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	0e 94 f8 07 	call	0xff0	; 0xff0 <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     632:	ac 2f       	mov	r26, r28
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	20 e4       	ldi	r18, 0x40	; 64
     638:	32 e4       	ldi	r19, 0x42	; 66
     63a:	4f e0       	ldi	r20, 0x0F	; 15
     63c:	50 e0       	ldi	r21, 0x00	; 0
     63e:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__muluhisi3>
     642:	ab 01       	movw	r20, r22
     644:	bc 01       	movw	r22, r24
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	8b ed       	ldi	r24, 0xDB	; 219
     64a:	91 e0       	ldi	r25, 0x01	; 1
     64c:	0e 94 f7 06 	call	0xdee	; 0xdee <addEntryToTimerQueue>
    BTTransmitStr("Ma duc inapoi dreapta!");
     650:	87 ec       	ldi	r24, 0xC7	; 199
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	0e 94 f5 00 	call	0x1ea	; 0x1ea <BTTransmitStr>
}
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	08 95       	ret

0000065e <rotirePeLoc>:
void rotirePeLoc(uint8_t timp, uint8_t viteza,  uint8_t engines){
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	d8 2f       	mov	r29, r24
     664:	c6 2f       	mov	r28, r22
	
	if(engines == RightEngines){
     666:	41 11       	cpse	r20, r1
     668:	0f c0       	rjmp	.+30     	; 0x688 <rotirePeLoc+0x2a>
		setEnginesSpeed(LeftEngines, SensSpate,  viteza);
     66a:	46 2f       	mov	r20, r22
     66c:	61 e0       	ldi	r22, 0x01	; 1
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	0e 94 2f 02 	call	0x45e	; 0x45e <setEnginesSpeed>
		setEnginesSpeed(RightEngines, SensFata, viteza);
     674:	4c 2f       	mov	r20, r28
     676:	60 e0       	ldi	r22, 0x00	; 0
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	0e 94 2f 02 	call	0x45e	; 0x45e <setEnginesSpeed>
		BTTransmitStr("ma rotesc spre dreapta");
     67e:	8e ed       	ldi	r24, 0xDE	; 222
     680:	91 e0       	ldi	r25, 0x01	; 1
     682:	0e 94 f5 00 	call	0x1ea	; 0x1ea <BTTransmitStr>
     686:	0e c0       	rjmp	.+28     	; 0x6a4 <rotirePeLoc+0x46>
	}
	else {
		setEnginesSpeed(LeftEngines, SensFata, viteza);
     688:	46 2f       	mov	r20, r22
     68a:	60 e0       	ldi	r22, 0x00	; 0
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	0e 94 2f 02 	call	0x45e	; 0x45e <setEnginesSpeed>
		setEnginesSpeed(RightEngines, SensSpate, viteza);
     692:	4c 2f       	mov	r20, r28
     694:	61 e0       	ldi	r22, 0x01	; 1
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	0e 94 2f 02 	call	0x45e	; 0x45e <setEnginesSpeed>
		BTTransmitStr("ma rotesc spre stanga");
     69c:	85 ef       	ldi	r24, 0xF5	; 245
     69e:	91 e0       	ldi	r25, 0x01	; 1
     6a0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <BTTransmitStr>
	}
	removeEntryFromTimerQueue(&stopEngines);
     6a4:	8b ed       	ldi	r24, 0xDB	; 219
     6a6:	91 e0       	ldi	r25, 0x01	; 1
     6a8:	0e 94 f8 07 	call	0xff0	; 0xff0 <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     6ac:	ad 2f       	mov	r26, r29
     6ae:	b0 e0       	ldi	r27, 0x00	; 0
     6b0:	20 e4       	ldi	r18, 0x40	; 64
     6b2:	32 e4       	ldi	r19, 0x42	; 66
     6b4:	4f e0       	ldi	r20, 0x0F	; 15
     6b6:	50 e0       	ldi	r21, 0x00	; 0
     6b8:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__muluhisi3>
     6bc:	ab 01       	movw	r20, r22
     6be:	bc 01       	movw	r22, r24
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	8b ed       	ldi	r24, 0xDB	; 219
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	0e 94 f7 06 	call	0xdee	; 0xdee <addEntryToTimerQueue>
}
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	08 95       	ret

000006d0 <toggleSensorRead>:
			BTTransmitStr(msgBuffer);			
		}
	}
}
void toggleSensorRead(Sensor sensor){
	sensorsToRead ^= 1<<sensor;
     6d0:	40 91 d8 03 	lds	r20, 0x03D8
     6d4:	21 e0       	ldi	r18, 0x01	; 1
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	b9 01       	movw	r22, r18
     6da:	02 c0       	rjmp	.+4      	; 0x6e0 <toggleSensorRead+0x10>
     6dc:	66 0f       	add	r22, r22
     6de:	77 1f       	adc	r23, r23
     6e0:	8a 95       	dec	r24
     6e2:	e2 f7       	brpl	.-8      	; 0x6dc <toggleSensorRead+0xc>
     6e4:	cb 01       	movw	r24, r22
     6e6:	84 27       	eor	r24, r20
     6e8:	80 93 d8 03 	sts	0x03D8, r24
	sprintf(msgBuffer, "sensorsToRead #%d ", sensorsToRead);
     6ec:	80 91 d8 03 	lds	r24, 0x03D8
     6f0:	1f 92       	push	r1
     6f2:	8f 93       	push	r24
     6f4:	8b e0       	ldi	r24, 0x0B	; 11
     6f6:	92 e0       	ldi	r25, 0x02	; 2
     6f8:	9f 93       	push	r25
     6fa:	8f 93       	push	r24
     6fc:	87 ef       	ldi	r24, 0xF7	; 247
     6fe:	93 e0       	ldi	r25, 0x03	; 3
     700:	9f 93       	push	r25
     702:	8f 93       	push	r24
     704:	0e 94 01 0a 	call	0x1402	; 0x1402 <sprintf>
	BTTransmitStr(msgBuffer);
     708:	87 ef       	ldi	r24, 0xF7	; 247
     70a:	93 e0       	ldi	r25, 0x03	; 3
     70c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <BTTransmitStr>
	
	uint8_t existsInTimerQueue = existsEntryInTimerQueue(&readSensorsAndSend);
     710:	8e e7       	ldi	r24, 0x7E	; 126
     712:	94 e0       	ldi	r25, 0x04	; 4
     714:	0e 94 73 08 	call	0x10e6	; 0x10e6 <existsEntryInTimerQueue>
	
	if(sensorsToRead && !existsInTimerQueue){
     718:	90 91 d8 03 	lds	r25, 0x03D8
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	0f 90       	pop	r0
     728:	99 23       	and	r25, r25
     72a:	61 f0       	breq	.+24     	; 0x744 <toggleSensorRead+0x74>
     72c:	81 11       	cpse	r24, r1
     72e:	15 c0       	rjmp	.+42     	; 0x75a <toggleSensorRead+0x8a>
		addEntryToTimerQueue(&readSensorsAndSend, 250UL * 1000UL, Periodic);
     730:	21 e0       	ldi	r18, 0x01	; 1
     732:	40 e9       	ldi	r20, 0x90	; 144
     734:	50 ed       	ldi	r21, 0xD0	; 208
     736:	63 e0       	ldi	r22, 0x03	; 3
     738:	70 e0       	ldi	r23, 0x00	; 0
     73a:	8e e7       	ldi	r24, 0x7E	; 126
     73c:	94 e0       	ldi	r25, 0x04	; 4
     73e:	0e 94 f7 06 	call	0xdee	; 0xdee <addEntryToTimerQueue>
     742:	08 95       	ret
	}
	else{
		if(!sensorsToRead && existsInTimerQueue)
     744:	90 91 d8 03 	lds	r25, 0x03D8
     748:	91 11       	cpse	r25, r1
     74a:	0b c0       	rjmp	.+22     	; 0x762 <toggleSensorRead+0x92>
     74c:	88 23       	and	r24, r24
     74e:	49 f0       	breq	.+18     	; 0x762 <toggleSensorRead+0x92>
			removeEntryFromTimerQueue(&readSensorsAndSend);
     750:	8e e7       	ldi	r24, 0x7E	; 126
     752:	94 e0       	ldi	r25, 0x04	; 4
     754:	0e 94 f8 07 	call	0xff0	; 0xff0 <removeEntryFromTimerQueue>
     758:	08 95       	ret
	
	if(sensorsToRead && !existsInTimerQueue){
		addEntryToTimerQueue(&readSensorsAndSend, 250UL * 1000UL, Periodic);
	}
	else{
		if(!sensorsToRead && existsInTimerQueue)
     75a:	80 91 d8 03 	lds	r24, 0x03D8
     75e:	88 23       	and	r24, r24
     760:	b9 f3       	breq	.-18     	; 0x750 <toggleSensorRead+0x80>
     762:	08 95       	ret

00000764 <initSensors>:
}

void initSensors(void){
		
	//init ADC
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
     764:	aa e7       	ldi	r26, 0x7A	; 122
     766:	b0 e0       	ldi	r27, 0x00	; 0
     768:	8c 91       	ld	r24, X
     76a:	87 60       	ori	r24, 0x07	; 7
     76c:	8c 93       	st	X, r24

	ADMUX |= (1 << REFS0);
     76e:	ec e7       	ldi	r30, 0x7C	; 124
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	80 81       	ld	r24, Z
     774:	80 64       	ori	r24, 0x40	; 64
     776:	80 83       	st	Z, r24
	ADMUX &=~ (1 << REFS1); // Set ADC reference to AVCC
     778:	80 81       	ld	r24, Z
     77a:	8f 77       	andi	r24, 0x7F	; 127
     77c:	80 83       	st	Z, r24
	
	ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
     77e:	80 81       	ld	r24, Z
     780:	80 62       	ori	r24, 0x20	; 32
     782:	80 83       	st	Z, r24
	
	//ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running Mode
	
	ADCSRA |= (1 << ADEN);  // Enable ADC
     784:	8c 91       	ld	r24, X
     786:	80 68       	ori	r24, 0x80	; 128
     788:	8c 93       	st	X, r24
     78a:	08 95       	ret

0000078c <startADCConversionForSensor>:
	//ADCSRA |= (1 << ADSC);  // start adc
}

void startADCConversionForSensor(Sensor sensor){

	ADMUX &= ~31; // set lasts 5 bits to 00000
     78c:	ec e7       	ldi	r30, 0x7C	; 124
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	90 81       	ld	r25, Z
     792:	90 7e       	andi	r25, 0xE0	; 224
     794:	90 83       	st	Z, r25
	//ADMUX |= 0; // 0-ADC0, 1-ADC1, 2-ADC2 ...    datasheet pg 249-251
	ADMUX |= sensor; // Sensor ia valorile 0,1,2,3, exact ca cele pt ADC-uri
     796:	90 81       	ld	r25, Z
     798:	89 2b       	or	r24, r25
     79a:	80 83       	st	Z, r24
	// No MUX values needed to be changed to use ADC0

	
	ADCSRA |= (1 << ADSC);  // Start A2D Conversions
     79c:	ea e7       	ldi	r30, 0x7A	; 122
     79e:	f0 e0       	ldi	r31, 0x00	; 0
     7a0:	80 81       	ld	r24, Z
     7a2:	80 64       	ori	r24, 0x40	; 64
     7a4:	80 83       	st	Z, r24
     7a6:	08 95       	ret

000007a8 <getCurrentValueOfSensor>:
#include "../BTProtocol/BTProtocol.h"
#include "../Timing/Timing.h"
uint32_t getValueOfSensor3(Sensor sensor);
uint16_t getCurrentValueOfSensor(Sensor sensor){
	
	startADCConversionForSensor(sensor);
     7a8:	0e 94 c6 03 	call	0x78c	; 0x78c <startADCConversionForSensor>
	
	while ( ADCSRA & (1 << ADSC));
     7ac:	ea e7       	ldi	r30, 0x7A	; 122
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	80 81       	ld	r24, Z
     7b2:	86 fd       	sbrc	r24, 6
     7b4:	fd cf       	rjmp	.-6      	; 0x7b0 <getCurrentValueOfSensor+0x8>
	
	uint16_t val;
	val = ADCL >> 6;
     7b6:	20 91 78 00 	lds	r18, 0x0078
     7ba:	22 95       	swap	r18
     7bc:	26 95       	lsr	r18
     7be:	26 95       	lsr	r18
     7c0:	23 70       	andi	r18, 0x03	; 3
	val |= ADCH << 2;
     7c2:	80 91 79 00 	lds	r24, 0x0079
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	88 0f       	add	r24, r24
     7ca:	99 1f       	adc	r25, r25
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
	
	return val;
}
     7d0:	82 2b       	or	r24, r18
     7d2:	08 95       	ret

000007d4 <getValueOfSensor3>:
		if(!sensorsToRead && existsInTimerQueue)
			removeEntryFromTimerQueue(&readSensorsAndSend);
	}
}
volatile uint16_t oldValue[4];
uint32_t getValueOfSensor3(Sensor sensor){
     7d4:	8f 92       	push	r8
     7d6:	9f 92       	push	r9
     7d8:	af 92       	push	r10
     7da:	bf 92       	push	r11
     7dc:	cf 92       	push	r12
     7de:	df 92       	push	r13
     7e0:	ef 92       	push	r14
     7e2:	ff 92       	push	r15
     7e4:	0f 93       	push	r16
     7e6:	1f 93       	push	r17
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	cd b7       	in	r28, 0x3d	; 61
     7ee:	de b7       	in	r29, 0x3e	; 62
     7f0:	2e 97       	sbiw	r28, 0x0e	; 14
     7f2:	0f b6       	in	r0, 0x3f	; 63
     7f4:	f8 94       	cli
     7f6:	de bf       	out	0x3e, r29	; 62
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	cd bf       	out	0x3d, r28	; 61
     7fc:	18 2f       	mov	r17, r24
     7fe:	9e 01       	movw	r18, r28
     800:	2f 5f       	subi	r18, 0xFF	; 255
     802:	3f 4f       	sbci	r19, 0xFF	; 255
     804:	79 01       	movw	r14, r18
     806:	6e 01       	movw	r12, r28
     808:	3f e0       	ldi	r19, 0x0F	; 15
     80a:	c3 0e       	add	r12, r19
     80c:	d1 1c       	adc	r13, r1
	uint8_t i;
	uint16_t s, sVals[7];
	
	//citesc 7 valori ale senzorului
	for(i=0;i<7;i++)
		sVals[i] = getCurrentValueOfSensor(sensor);
     80e:	81 2f       	mov	r24, r17
     810:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <getCurrentValueOfSensor>
     814:	f7 01       	movw	r30, r14
     816:	81 93       	st	Z+, r24
     818:	91 93       	st	Z+, r25
     81a:	7f 01       	movw	r14, r30
uint32_t getValueOfSensor3(Sensor sensor){
	uint8_t i;
	uint16_t s, sVals[7];
	
	//citesc 7 valori ale senzorului
	for(i=0;i<7;i++)
     81c:	ec 15       	cp	r30, r12
     81e:	fd 05       	cpc	r31, r13
     820:	b1 f7       	brne	.-20     	; 0x80e <getValueOfSensor3+0x3a>
     822:	21 e0       	ldi	r18, 0x01	; 1
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	80 e0       	ldi	r24, 0x00	; 0
		sVals[i] = getCurrentValueOfSensor(sensor);
		
		
	do{ // le sortez (bubble sort)
		s=1;
     828:	01 e0       	ldi	r16, 0x01	; 1
     82a:	f1 2c       	mov	r15, r1
		for(i=0;i<6;i++)
     82c:	90 e0       	ldi	r25, 0x00	; 0
			if(sVals[i]>sVals[i+1]){
				s = sVals[i];
				sVals[i] = sVals[i+1];
				sVals[i+1] = s;
				s=0;
     82e:	d1 2c       	mov	r13, r1
     830:	e1 2c       	mov	r14, r1
     832:	32 c0       	rjmp	.+100    	; 0x898 <getValueOfSensor3+0xc4>
		
		
	do{ // le sortez (bubble sort)
		s=1;
		for(i=0;i<6;i++)
			if(sVals[i]>sVals[i+1]){
     834:	48 2f       	mov	r20, r24
     836:	50 e0       	ldi	r21, 0x00	; 0
     838:	fa 01       	movw	r30, r20
     83a:	ee 0f       	add	r30, r30
     83c:	ff 1f       	adc	r31, r31
     83e:	aa 24       	eor	r10, r10
     840:	a3 94       	inc	r10
     842:	b1 2c       	mov	r11, r1
     844:	ac 0e       	add	r10, r28
     846:	bd 1e       	adc	r11, r29
     848:	ea 0d       	add	r30, r10
     84a:	fb 1d       	adc	r31, r11
     84c:	60 81       	ld	r22, Z
     84e:	71 81       	ldd	r23, Z+1	; 0x01
     850:	4a 01       	movw	r8, r20
     852:	ef ef       	ldi	r30, 0xFF	; 255
     854:	8e 1a       	sub	r8, r30
     856:	9e 0a       	sbc	r9, r30
     858:	d4 01       	movw	r26, r8
     85a:	aa 0f       	add	r26, r26
     85c:	bb 1f       	adc	r27, r27
     85e:	aa 0d       	add	r26, r10
     860:	bb 1d       	adc	r27, r11
     862:	0d 90       	ld	r0, X+
     864:	bc 91       	ld	r27, X
     866:	a0 2d       	mov	r26, r0
     868:	a6 17       	cp	r26, r22
     86a:	b7 07       	cpc	r27, r23
     86c:	80 f4       	brcc	.+32     	; 0x88e <getValueOfSensor3+0xba>
				s = sVals[i];
				sVals[i] = sVals[i+1];
     86e:	44 0f       	add	r20, r20
     870:	55 1f       	adc	r21, r21
     872:	4a 0d       	add	r20, r10
     874:	5b 1d       	adc	r21, r11
     876:	fa 01       	movw	r30, r20
     878:	b1 83       	std	Z+1, r27	; 0x01
     87a:	a0 83       	st	Z, r26
				sVals[i+1] = s;
     87c:	f4 01       	movw	r30, r8
     87e:	ee 0f       	add	r30, r30
     880:	ff 1f       	adc	r31, r31
     882:	ea 0d       	add	r30, r10
     884:	fb 1d       	adc	r31, r11
     886:	71 83       	std	Z+1, r23	; 0x01
     888:	60 83       	st	Z, r22
				s=0;
     88a:	2d 2d       	mov	r18, r13
     88c:	3e 2d       	mov	r19, r14
		sVals[i] = getCurrentValueOfSensor(sensor);
		
		
	do{ // le sortez (bubble sort)
		s=1;
		for(i=0;i<6;i++)
     88e:	8f 5f       	subi	r24, 0xFF	; 255
     890:	03 c0       	rjmp	.+6      	; 0x898 <getValueOfSensor3+0xc4>
	for(i=0;i<7;i++)
		sVals[i] = getCurrentValueOfSensor(sensor);
		
		
	do{ // le sortez (bubble sort)
		s=1;
     892:	20 2f       	mov	r18, r16
     894:	3f 2d       	mov	r19, r15
		for(i=0;i<6;i++)
     896:	89 2f       	mov	r24, r25
     898:	86 30       	cpi	r24, 0x06	; 6
     89a:	60 f2       	brcs	.-104    	; 0x834 <getValueOfSensor3+0x60>
				s = sVals[i];
				sVals[i] = sVals[i+1];
				sVals[i+1] = s;
				s=0;
			}
	}while(!s);
     89c:	23 2b       	or	r18, r19
     89e:	c9 f3       	breq	.-14     	; 0x892 <getValueOfSensor3+0xbe>
	
	s = sVals[2] + sVals[3] + sVals[4];
     8a0:	2f 81       	ldd	r18, Y+7	; 0x07
     8a2:	38 85       	ldd	r19, Y+8	; 0x08
     8a4:	8d 81       	ldd	r24, Y+5	; 0x05
     8a6:	9e 81       	ldd	r25, Y+6	; 0x06
     8a8:	28 0f       	add	r18, r24
     8aa:	39 1f       	adc	r19, r25
     8ac:	89 85       	ldd	r24, Y+9	; 0x09
     8ae:	9a 85       	ldd	r25, Y+10	; 0x0a
     8b0:	28 0f       	add	r18, r24
     8b2:	39 1f       	adc	r19, r25
	s/=3;//calculez media celor 3 din mijloc (eliminandu-le astfel pe cele mai mari si pe cele mai mici)
     8b4:	ab ea       	ldi	r26, 0xAB	; 171
     8b6:	ba ea       	ldi	r27, 0xAA	; 170
     8b8:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__umulhisi3>
     8bc:	96 95       	lsr	r25
     8be:	87 95       	ror	r24
	
	//valoarea noua este media ponderata a vechii valori (70%) si valorii curente(30%)
	oldValue[sensor]=s;
     8c0:	e1 2f       	mov	r30, r17
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	ee 0f       	add	r30, r30
     8c6:	ff 1f       	adc	r31, r31
     8c8:	e1 51       	subi	r30, 0x11	; 17
     8ca:	fc 4f       	sbci	r31, 0xFC	; 252
     8cc:	91 83       	std	Z+1, r25	; 0x01
     8ce:	80 83       	st	Z, r24
	return s;
     8d0:	bc 01       	movw	r22, r24
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	90 e0       	ldi	r25, 0x00	; 0
	
	if(sensor<2)
		return 77038UL/((oldValue[sensor]<<4)-516); // senzori frontali
	else
		return 24886UL/((oldValue[sensor]<<4)-760);	// senzori laterali
}
     8d6:	2e 96       	adiw	r28, 0x0e	; 14
     8d8:	0f b6       	in	r0, 0x3f	; 63
     8da:	f8 94       	cli
     8dc:	de bf       	out	0x3e, r29	; 62
     8de:	0f be       	out	0x3f, r0	; 63
     8e0:	cd bf       	out	0x3d, r28	; 61
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	1f 91       	pop	r17
     8e8:	0f 91       	pop	r16
     8ea:	ff 90       	pop	r15
     8ec:	ef 90       	pop	r14
     8ee:	df 90       	pop	r13
     8f0:	cf 90       	pop	r12
     8f2:	bf 90       	pop	r11
     8f4:	af 90       	pop	r10
     8f6:	9f 90       	pop	r9
     8f8:	8f 90       	pop	r8
     8fa:	08 95       	ret

000008fc <readSensorsAndSend>:

volatile uint8_t sensorsToRead=0;
volatile Sensor sensorToRead;
volatile uint16_t valueOfSensor;
char msgBuffer[50];
void readSensorsAndSend(){
     8fc:	ef 92       	push	r14
     8fe:	ff 92       	push	r15
     900:	0f 93       	push	r16
     902:	1f 93       	push	r17
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	c0 e0       	ldi	r28, 0x00	; 0
     90a:	d0 e0       	ldi	r29, 0x00	; 0
	
	for(i=0;i<4;i++){		
		if(sensorsToRead & (1<<i)){
			sensorToRead = (Sensor)i;
			valueOfSensor = getValueOfSensor3(sensorToRead);
			sprintf(msgBuffer, "sensor #%d = %hu", sensorToRead, valueOfSensor);			
     90c:	0f 2e       	mov	r0, r31
     90e:	ff e2       	ldi	r31, 0x2F	; 47
     910:	ef 2e       	mov	r14, r31
     912:	f2 e0       	ldi	r31, 0x02	; 2
     914:	ff 2e       	mov	r15, r31
     916:	f0 2d       	mov	r31, r0
     918:	07 ef       	ldi	r16, 0xF7	; 247
     91a:	13 e0       	ldi	r17, 0x03	; 3
char msgBuffer[50];
void readSensorsAndSend(){
	uint8_t i;
	
	for(i=0;i<4;i++){		
		if(sensorsToRead & (1<<i)){
     91c:	80 91 d8 03 	lds	r24, 0x03D8
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	0c 2e       	mov	r0, r28
     924:	02 c0       	rjmp	.+4      	; 0x92a <readSensorsAndSend+0x2e>
     926:	95 95       	asr	r25
     928:	87 95       	ror	r24
     92a:	0a 94       	dec	r0
     92c:	e2 f7       	brpl	.-8      	; 0x926 <readSensorsAndSend+0x2a>
     92e:	80 ff       	sbrs	r24, 0
     930:	25 c0       	rjmp	.+74     	; 0x97c <readSensorsAndSend+0x80>
			sensorToRead = (Sensor)i;
     932:	c0 93 ee 03 	sts	0x03EE, r28
			valueOfSensor = getValueOfSensor3(sensorToRead);
     936:	80 91 ee 03 	lds	r24, 0x03EE
     93a:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <getValueOfSensor3>
     93e:	70 93 2a 04 	sts	0x042A, r23
     942:	60 93 29 04 	sts	0x0429, r22
			sprintf(msgBuffer, "sensor #%d = %hu", sensorToRead, valueOfSensor);			
     946:	80 91 29 04 	lds	r24, 0x0429
     94a:	90 91 2a 04 	lds	r25, 0x042A
     94e:	20 91 ee 03 	lds	r18, 0x03EE
     952:	9f 93       	push	r25
     954:	8f 93       	push	r24
     956:	1f 92       	push	r1
     958:	2f 93       	push	r18
     95a:	ff 92       	push	r15
     95c:	ef 92       	push	r14
     95e:	1f 93       	push	r17
     960:	0f 93       	push	r16
     962:	0e 94 01 0a 	call	0x1402	; 0x1402 <sprintf>
			BTTransmitStr(msgBuffer);			
     966:	c8 01       	movw	r24, r16
     968:	0e 94 f5 00 	call	0x1ea	; 0x1ea <BTTransmitStr>
     96c:	8d b7       	in	r24, 0x3d	; 61
     96e:	9e b7       	in	r25, 0x3e	; 62
     970:	08 96       	adiw	r24, 0x08	; 8
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	f8 94       	cli
     976:	9e bf       	out	0x3e, r25	; 62
     978:	0f be       	out	0x3f, r0	; 63
     97a:	8d bf       	out	0x3d, r24	; 61
     97c:	21 96       	adiw	r28, 0x01	; 1
volatile uint16_t valueOfSensor;
char msgBuffer[50];
void readSensorsAndSend(){
	uint8_t i;
	
	for(i=0;i<4;i++){		
     97e:	c4 30       	cpi	r28, 0x04	; 4
     980:	d1 05       	cpc	r29, r1
     982:	61 f6       	brne	.-104    	; 0x91c <readSensorsAndSend+0x20>
			valueOfSensor = getValueOfSensor3(sensorToRead);
			sprintf(msgBuffer, "sensor #%d = %hu", sensorToRead, valueOfSensor);			
			BTTransmitStr(msgBuffer);			
		}
	}
}
     984:	df 91       	pop	r29
     986:	cf 91       	pop	r28
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	08 95       	ret

00000992 <getValueOfSensor>:
	
	return val;
}


uint16_t getValueOfSensor(Sensor sensor){	
     992:	7f 92       	push	r7
     994:	8f 92       	push	r8
     996:	9f 92       	push	r9
     998:	af 92       	push	r10
     99a:	bf 92       	push	r11
     99c:	cf 92       	push	r12
     99e:	df 92       	push	r13
     9a0:	ef 92       	push	r14
     9a2:	ff 92       	push	r15
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
     9b0:	2e 97       	sbiw	r28, 0x0e	; 14
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	f8 94       	cli
     9b6:	de bf       	out	0x3e, r29	; 62
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	cd bf       	out	0x3d, r28	; 61
     9bc:	78 2e       	mov	r7, r24
     9be:	6e 01       	movw	r12, r28
     9c0:	8f e0       	ldi	r24, 0x0F	; 15
     9c2:	c8 0e       	add	r12, r24
     9c4:	d1 1c       	adc	r13, r1
     9c6:	fe 01       	movw	r30, r28
     9c8:	31 96       	adiw	r30, 0x01	; 1
     9ca:	7f 01       	movw	r14, r30
	uint16_t s;
	
	for(i=0;i<7;i++){
		startADCConversionForSensor(sensor);
		
		while ( ADCSRA & (1 << ADSC));
     9cc:	0a e7       	ldi	r16, 0x7A	; 122
     9ce:	10 e0       	ldi	r17, 0x00	; 0
		sVals[i] = ADCL >> 6;
     9d0:	0f 2e       	mov	r0, r31
     9d2:	f8 e7       	ldi	r31, 0x78	; 120
     9d4:	8f 2e       	mov	r8, r31
     9d6:	91 2c       	mov	r9, r1
     9d8:	f0 2d       	mov	r31, r0
		sVals[i] |= ADCH << 2;		
     9da:	0f 2e       	mov	r0, r31
     9dc:	f9 e7       	ldi	r31, 0x79	; 121
     9de:	af 2e       	mov	r10, r31
     9e0:	b1 2c       	mov	r11, r1
     9e2:	f0 2d       	mov	r31, r0
	uint16_t sVals[7];
	uint8_t i;
	uint16_t s;
	
	for(i=0;i<7;i++){
		startADCConversionForSensor(sensor);
     9e4:	87 2d       	mov	r24, r7
     9e6:	0e 94 c6 03 	call	0x78c	; 0x78c <startADCConversionForSensor>
		
		while ( ADCSRA & (1 << ADSC));
     9ea:	f8 01       	movw	r30, r16
     9ec:	80 81       	ld	r24, Z
     9ee:	86 fd       	sbrc	r24, 6
     9f0:	fc cf       	rjmp	.-8      	; 0x9ea <getValueOfSensor+0x58>
		sVals[i] = ADCL >> 6;
     9f2:	f4 01       	movw	r30, r8
     9f4:	20 81       	ld	r18, Z
     9f6:	22 95       	swap	r18
     9f8:	26 95       	lsr	r18
     9fa:	26 95       	lsr	r18
     9fc:	23 70       	andi	r18, 0x03	; 3
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	f7 01       	movw	r30, r14
     a02:	31 83       	std	Z+1, r19	; 0x01
     a04:	20 83       	st	Z, r18
		sVals[i] |= ADCH << 2;		
     a06:	f5 01       	movw	r30, r10
     a08:	80 81       	ld	r24, Z
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	88 0f       	add	r24, r24
     a0e:	99 1f       	adc	r25, r25
     a10:	88 0f       	add	r24, r24
     a12:	99 1f       	adc	r25, r25
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	f7 01       	movw	r30, r14
     a1a:	21 93       	st	Z+, r18
     a1c:	31 93       	st	Z+, r19
     a1e:	7f 01       	movw	r14, r30
	
	uint16_t sVals[7];
	uint8_t i;
	uint16_t s;
	
	for(i=0;i<7;i++){
     a20:	ec 15       	cp	r30, r12
     a22:	fd 05       	cpc	r31, r13
     a24:	f9 f6       	brne	.-66     	; 0x9e4 <getValueOfSensor+0x52>
     a26:	fe 01       	movw	r30, r28
     a28:	31 96       	adiw	r30, 0x01	; 1
     a2a:	40 e0       	ldi	r20, 0x00	; 0
     a2c:	50 e0       	ldi	r21, 0x00	; 0
		sVals[i] |= ADCH << 2;		
	}
	
	s=0;
	for(i=0;i<7;i++)
		s+=sVals[i];
     a2e:	81 91       	ld	r24, Z+
     a30:	91 91       	ld	r25, Z+
     a32:	48 0f       	add	r20, r24
     a34:	59 1f       	adc	r21, r25
		sVals[i] = ADCL >> 6;
		sVals[i] |= ADCH << 2;		
	}
	
	s=0;
	for(i=0;i<7;i++)
     a36:	ec 15       	cp	r30, r12
     a38:	fd 05       	cpc	r31, r13
     a3a:	c9 f7       	brne	.-14     	; 0xa2e <getValueOfSensor+0x9c>
		
	//sprintf(msg,"lv: %d %d %d %d %d %d %d  =%d",
	//sVals[sensor][0], sVals[sensor][1], sVals[sensor][2], sVals[sensor][3], sVals[sensor][4], sVals[sensor][5], sVals[sensor][6], s/7);
	//BTTransmitStr(msg);
		
	return s/7;
     a3c:	9a 01       	movw	r18, r20
     a3e:	a3 e9       	ldi	r26, 0x93	; 147
     a40:	b4 e2       	ldi	r27, 0x24	; 36
     a42:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__umulhisi3>
     a46:	48 1b       	sub	r20, r24
     a48:	59 0b       	sbc	r21, r25
     a4a:	9a 01       	movw	r18, r20
     a4c:	36 95       	lsr	r19
     a4e:	27 95       	ror	r18
     a50:	82 0f       	add	r24, r18
     a52:	93 1f       	adc	r25, r19
}
     a54:	96 95       	lsr	r25
     a56:	87 95       	ror	r24
     a58:	96 95       	lsr	r25
     a5a:	87 95       	ror	r24
     a5c:	2e 96       	adiw	r28, 0x0e	; 14
     a5e:	0f b6       	in	r0, 0x3f	; 63
     a60:	f8 94       	cli
     a62:	de bf       	out	0x3e, r29	; 62
     a64:	0f be       	out	0x3f, r0	; 63
     a66:	cd bf       	out	0x3d, r28	; 61
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	1f 91       	pop	r17
     a6e:	0f 91       	pop	r16
     a70:	ff 90       	pop	r15
     a72:	ef 90       	pop	r14
     a74:	df 90       	pop	r13
     a76:	cf 90       	pop	r12
     a78:	bf 90       	pop	r11
     a7a:	af 90       	pop	r10
     a7c:	9f 90       	pop	r9
     a7e:	8f 90       	pop	r8
     a80:	7f 90       	pop	r7
     a82:	08 95       	ret

00000a84 <testFct1>:
}

uint8_t str = 0;
void testFct1(void){

	switch(str){
     a84:	80 91 d9 03 	lds	r24, 0x03D9
     a88:	82 30       	cpi	r24, 0x02	; 2
     a8a:	61 f0       	breq	.+24     	; 0xaa4 <testFct1+0x20>
     a8c:	83 30       	cpi	r24, 0x03	; 3
     a8e:	91 f0       	breq	.+36     	; 0xab4 <testFct1+0x30>
     a90:	81 11       	cpse	r24, r1
     a92:	16 c0       	rjmp	.+44     	; 0xac0 <testFct1+0x3c>
		case 0:
			str = 1;
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	80 93 d9 03 	sts	0x03D9, r24
			goFront(60, 150);
     a9a:	66 e9       	ldi	r22, 0x96	; 150
     a9c:	8c e3       	ldi	r24, 0x3C	; 60
     a9e:	0e 94 45 02 	call	0x48a	; 0x48a <goFront>
		break;
     aa2:	08 95       	ret
				str = 2;
				stopEngines();
			}
		break;
		case 2:
			BTTransmitStr("Done!");
     aa4:	80 e4       	ldi	r24, 0x40	; 64
     aa6:	92 e0       	ldi	r25, 0x02	; 2
     aa8:	0e 94 f5 00 	call	0x1ea	; 0x1ea <BTTransmitStr>
			str = 3;
     aac:	83 e0       	ldi	r24, 0x03	; 3
     aae:	80 93 d9 03 	sts	0x03D9, r24
		break;
     ab2:	08 95       	ret
		case 3:
			removeEntryFromTimerQueue(&testFct1);
     ab4:	82 e4       	ldi	r24, 0x42	; 66
     ab6:	95 e0       	ldi	r25, 0x05	; 5
     ab8:	0e 94 f8 07 	call	0xff0	; 0xff0 <removeEntryFromTimerQueue>
			str = 0;
     abc:	10 92 d9 03 	sts	0x03D9, r1
     ac0:	08 95       	ret

00000ac2 <functieRotireStanga>:
		break;
	}	
}


void functieRotireStanga(void){
     ac2:	af 92       	push	r10
     ac4:	bf 92       	push	r11
     ac6:	cf 92       	push	r12
     ac8:	df 92       	push	r13
     aca:	ef 92       	push	r14
     acc:	ff 92       	push	r15
     ace:	0f 93       	push	r16
     ad0:	1f 93       	push	r17
     ad2:	cf 93       	push	r28
     ad4:	df 93       	push	r29
     ad6:	cd b7       	in	r28, 0x3d	; 61
     ad8:	de b7       	in	r29, 0x3e	; 62
     ada:	c4 56       	subi	r28, 0x64	; 100
     adc:	d1 09       	sbc	r29, r1
     ade:	0f b6       	in	r0, 0x3f	; 63
     ae0:	f8 94       	cli
     ae2:	de bf       	out	0x3e, r29	; 62
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	cd bf       	out	0x3d, r28	; 61
	uint16_t senzorSt = getValueOfSensor(SideLeftSensor);
     ae8:	82 e0       	ldi	r24, 0x02	; 2
     aea:	0e 94 c9 04 	call	0x992	; 0x992 <getValueOfSensor>
     aee:	b8 2e       	mov	r11, r24
     af0:	a9 2e       	mov	r10, r25
	uint16_t senzorDr = getValueOfSensor(SideRightSensor);
     af2:	83 e0       	ldi	r24, 0x03	; 3
     af4:	0e 94 c9 04 	call	0x992	; 0x992 <getValueOfSensor>
     af8:	8c 01       	movw	r16, r24
	debugging = 0;
     afa:	10 92 00 01 	sts	0x0100, r1
	uint16_t senzorStFata = getValueOfSensor(FrontLeftSensor);
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	0e 94 c9 04 	call	0x992	; 0x992 <getValueOfSensor>
     b04:	6c 01       	movw	r12, r24
	uint16_t senzorDrFata =getValueOfSensor(FrontRightSensor);
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	0e 94 c9 04 	call	0x992	; 0x992 <getValueOfSensor>
     b0c:	7c 01       	movw	r14, r24
	
	char str[100];
	sprintf(str, "SF=%d  DF=%d  S=%d  D=%d  stare=%d", senzorStFata,senzorDrFata, senzorSt,senzorDr, stare);
     b0e:	80 91 db 03 	lds	r24, 0x03DB
     b12:	1f 92       	push	r1
     b14:	8f 93       	push	r24
     b16:	1f 93       	push	r17
     b18:	0f 93       	push	r16
     b1a:	af 92       	push	r10
     b1c:	bf 92       	push	r11
     b1e:	ff 92       	push	r15
     b20:	ef 92       	push	r14
     b22:	df 92       	push	r13
     b24:	cf 92       	push	r12
     b26:	86 e4       	ldi	r24, 0x46	; 70
     b28:	92 e0       	ldi	r25, 0x02	; 2
     b2a:	9f 93       	push	r25
     b2c:	8f 93       	push	r24
     b2e:	ce 01       	movw	r24, r28
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	5c 01       	movw	r10, r24
     b34:	bf 92       	push	r11
     b36:	8f 93       	push	r24
     b38:	0e 94 01 0a 	call	0x1402	; 0x1402 <sprintf>
	BTTransmitStr(str);
     b3c:	c5 01       	movw	r24, r10
     b3e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <BTTransmitStr>
	
	switch(stare){
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	f8 94       	cli
     b46:	de bf       	out	0x3e, r29	; 62
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	cd bf       	out	0x3d, r28	; 61
     b4c:	80 91 db 03 	lds	r24, 0x03DB
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	89 30       	cpi	r24, 0x09	; 9
     b54:	91 05       	cpc	r25, r1
     b56:	08 f0       	brcs	.+2      	; 0xb5a <functieRotireStanga+0x98>
     b58:	99 c0       	rjmp	.+306    	; 0xc8c <functieRotireStanga+0x1ca>
     b5a:	fc 01       	movw	r30, r24
     b5c:	ee 5a       	subi	r30, 0xAE	; 174
     b5e:	ff 4f       	sbci	r31, 0xFF	; 255
     b60:	0c 94 cd 09 	jmp	0x139a	; 0x139a <__tablejump2__>
		case Start:
			stare = intrareInParcare;
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	80 93 db 03 	sts	0x03DB, r24
			BTTransmitStr("Sa incepem :D");
     b6a:	89 e6       	ldi	r24, 0x69	; 105
     b6c:	92 e0       	ldi	r25, 0x02	; 2
     b6e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <BTTransmitStr>
		break;
     b72:	8c c0       	rjmp	.+280    	; 0xc8c <functieRotireStanga+0x1ca>
		case intrareInParcare:/*
			if(senzorStFata>200 && senzorDrFata>200){
				rotirePeLoc(60, 75, RightEngines);
				stare=rotireLoc;
			}*/
			goFrontRight(60,125);
     b74:	6d e7       	ldi	r22, 0x7D	; 125
     b76:	8c e3       	ldi	r24, 0x3C	; 60
     b78:	0e 94 ba 02 	call	0x574	; 0x574 <goFrontRight>
			stare = rotireMersDR;			
     b7c:	83 e0       	ldi	r24, 0x03	; 3
     b7e:	80 93 db 03 	sts	0x03DB, r24
		break;
     b82:	84 c0       	rjmp	.+264    	; 0xc8c <functieRotireStanga+0x1ca>
		case mersFata: // merge in fata
			if(senzorStFata>150 && senzorDrFata>150){
     b84:	97 e9       	ldi	r25, 0x97	; 151
     b86:	c9 16       	cp	r12, r25
     b88:	d1 04       	cpc	r13, r1
     b8a:	60 f0       	brcs	.+24     	; 0xba4 <functieRotireStanga+0xe2>
     b8c:	87 e9       	ldi	r24, 0x97	; 151
     b8e:	e8 16       	cp	r14, r24
     b90:	f1 04       	cpc	r15, r1
     b92:	40 f0       	brcs	.+16     	; 0xba4 <functieRotireStanga+0xe2>
				stare = rotireLoc;
     b94:	82 e0       	ldi	r24, 0x02	; 2
     b96:	80 93 db 03 	sts	0x03DB, r24
				//goFrontLeft(60, 250);
				rotirePeLoc(60, 75, LeftEngines);
     b9a:	41 e0       	ldi	r20, 0x01	; 1
     b9c:	6b e4       	ldi	r22, 0x4B	; 75
     b9e:	8c e3       	ldi	r24, 0x3C	; 60
     ba0:	0e 94 2f 03 	call	0x65e	; 0x65e <rotirePeLoc>
			}
			if(senzorDr<100){
     ba4:	04 36       	cpi	r16, 0x64	; 100
     ba6:	11 05       	cpc	r17, r1
     ba8:	a8 f4       	brcc	.+42     	; 0xbd4 <functieRotireStanga+0x112>
				iesire--;
     baa:	80 91 da 03 	lds	r24, 0x03DA
     bae:	81 50       	subi	r24, 0x01	; 1
     bb0:	80 93 da 03 	sts	0x03DA, r24
				if(iesire==0){
     bb4:	80 91 da 03 	lds	r24, 0x03DA
     bb8:	81 11       	cpse	r24, r1
     bba:	09 c0       	rjmp	.+18     	; 0xbce <functieRotireStanga+0x10c>
					rotirePeLoc(60,75, RightEngines);
     bbc:	40 e0       	ldi	r20, 0x00	; 0
     bbe:	6b e4       	ldi	r22, 0x4B	; 75
     bc0:	8c e3       	ldi	r24, 0x3C	; 60
     bc2:	0e 94 2f 03 	call	0x65e	; 0x65e <rotirePeLoc>
					stare= poarta;}
     bc6:	86 e0       	ldi	r24, 0x06	; 6
     bc8:	80 93 db 03 	sts	0x03DB, r24
     bcc:	03 c0       	rjmp	.+6      	; 0xbd4 <functieRotireStanga+0x112>
				else stare=nuPoarta;
     bce:	88 e0       	ldi	r24, 0x08	; 8
     bd0:	80 93 db 03 	sts	0x03DB, r24
				
			}
			if(senzorDr > 220){
     bd4:	0d 3d       	cpi	r16, 0xDD	; 221
     bd6:	11 05       	cpc	r17, r1
     bd8:	38 f0       	brcs	.+14     	; 0xbe8 <functieRotireStanga+0x126>
				stare = rotireMersSt;
     bda:	84 e0       	ldi	r24, 0x04	; 4
     bdc:	80 93 db 03 	sts	0x03DB, r24
				goFrontLeft(60, 75);
     be0:	6b e4       	ldi	r22, 0x4B	; 75
     be2:	8c e3       	ldi	r24, 0x3C	; 60
     be4:	0e 94 95 02 	call	0x52a	; 0x52a <goFrontLeft>
			}		
			if(senzorDr<250 && senzorDr>170){
     be8:	0b 5a       	subi	r16, 0xAB	; 171
     bea:	11 09       	sbc	r17, r1
     bec:	0f 34       	cpi	r16, 0x4F	; 79
     bee:	11 05       	cpc	r17, r1
     bf0:	08 f0       	brcs	.+2      	; 0xbf4 <functieRotireStanga+0x132>
     bf2:	4c c0       	rjmp	.+152    	; 0xc8c <functieRotireStanga+0x1ca>
				stare= rotireMersDR;
     bf4:	83 e0       	ldi	r24, 0x03	; 3
     bf6:	80 93 db 03 	sts	0x03DB, r24
				goFrontRight(60, 75);
     bfa:	6b e4       	ldi	r22, 0x4B	; 75
     bfc:	8c e3       	ldi	r24, 0x3C	; 60
     bfe:	0e 94 ba 02 	call	0x574	; 0x574 <goFrontRight>
     c02:	44 c0       	rjmp	.+136    	; 0xc8c <functieRotireStanga+0x1ca>
			}
				
		break;
		case poarta:
			if(senzorStFata <91 && senzorDrFata <180){
     c04:	9b e5       	ldi	r25, 0x5B	; 91
     c06:	c9 16       	cp	r12, r25
     c08:	d1 04       	cpc	r13, r1
     c0a:	08 f0       	brcs	.+2      	; 0xc0e <functieRotireStanga+0x14c>
     c0c:	3f c0       	rjmp	.+126    	; 0xc8c <functieRotireStanga+0x1ca>
     c0e:	84 eb       	ldi	r24, 0xB4	; 180
     c10:	e8 16       	cp	r14, r24
     c12:	f1 04       	cpc	r15, r1
     c14:	d8 f5       	brcc	.+118    	; 0xc8c <functieRotireStanga+0x1ca>
				goFront(6,75);
     c16:	6b e4       	ldi	r22, 0x4B	; 75
     c18:	86 e0       	ldi	r24, 0x06	; 6
     c1a:	0e 94 45 02 	call	0x48a	; 0x48a <goFront>
				stare=bv;
     c1e:	87 e0       	ldi	r24, 0x07	; 7
     c20:	80 93 db 03 	sts	0x03DB, r24
     c24:	33 c0       	rjmp	.+102    	; 0xc8c <functieRotireStanga+0x1ca>
			}
		break;	
		case bv:
			{
				stopEngines();
     c26:	0e 94 db 01 	call	0x3b6	; 0x3b6 <stopEngines>
				removeEntryFromTimerQueue(&functieRotireStanga);
     c2a:	81 e6       	ldi	r24, 0x61	; 97
     c2c:	95 e0       	ldi	r25, 0x05	; 5
     c2e:	0e 94 f8 07 	call	0xff0	; 0xff0 <removeEntryFromTimerQueue>
			}
		break;		
     c32:	2c c0       	rjmp	.+88     	; 0xc8c <functieRotireStanga+0x1ca>
		case rotireMersSt:
			if(senzorDr < 300){
     c34:	0c 32       	cpi	r16, 0x2C	; 44
     c36:	11 40       	sbci	r17, 0x01	; 1
     c38:	48 f5       	brcc	.+82     	; 0xc8c <functieRotireStanga+0x1ca>
				stare = mersFata;
     c3a:	85 e0       	ldi	r24, 0x05	; 5
     c3c:	80 93 db 03 	sts	0x03DB, r24
				goFront(60, 75);
     c40:	6b e4       	ldi	r22, 0x4B	; 75
     c42:	8c e3       	ldi	r24, 0x3C	; 60
     c44:	0e 94 45 02 	call	0x48a	; 0x48a <goFront>
     c48:	21 c0       	rjmp	.+66     	; 0xc8c <functieRotireStanga+0x1ca>
			}		
		break;
		case rotireMersDR:
			//if(range(senzorDr,senzorDrFata)==0)
			{
				stare=mersFata;
     c4a:	85 e0       	ldi	r24, 0x05	; 5
     c4c:	80 93 db 03 	sts	0x03DB, r24
				goFront(60, 75);
     c50:	6b e4       	ldi	r22, 0x4B	; 75
     c52:	8c e3       	ldi	r24, 0x3C	; 60
     c54:	0e 94 45 02 	call	0x48a	; 0x48a <goFront>
			}
		break;
     c58:	19 c0       	rjmp	.+50     	; 0xc8c <functieRotireStanga+0x1ca>
		case rotireLoc:
			if(senzorDrFata> 100 && senzorDrFata<140){
     c5a:	85 e6       	ldi	r24, 0x65	; 101
     c5c:	e8 1a       	sub	r14, r24
     c5e:	f1 08       	sbc	r15, r1
     c60:	97 e2       	ldi	r25, 0x27	; 39
     c62:	e9 16       	cp	r14, r25
     c64:	f1 04       	cpc	r15, r1
     c66:	90 f4       	brcc	.+36     	; 0xc8c <functieRotireStanga+0x1ca>
				goFront(60, 75);
     c68:	6b e4       	ldi	r22, 0x4B	; 75
     c6a:	8c e3       	ldi	r24, 0x3C	; 60
     c6c:	0e 94 45 02 	call	0x48a	; 0x48a <goFront>
				stare=mersFata;				
     c70:	85 e0       	ldi	r24, 0x05	; 5
     c72:	80 93 db 03 	sts	0x03DB, r24
     c76:	0a c0       	rjmp	.+20     	; 0xc8c <functieRotireStanga+0x1ca>
			}
		break;
		case nuPoarta:
			if(senzorDr < 300){
     c78:	0c 32       	cpi	r16, 0x2C	; 44
     c7a:	11 40       	sbci	r17, 0x01	; 1
     c7c:	38 f4       	brcc	.+14     	; 0xc8c <functieRotireStanga+0x1ca>
				stare=mersFata;
     c7e:	85 e0       	ldi	r24, 0x05	; 5
     c80:	80 93 db 03 	sts	0x03DB, r24
				goFront(60,75);
     c84:	6b e4       	ldi	r22, 0x4B	; 75
     c86:	8c e3       	ldi	r24, 0x3C	; 60
     c88:	0e 94 45 02 	call	0x48a	; 0x48a <goFront>
			}
		break;
	}
	
	debugging = 1;
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	80 93 00 01 	sts	0x0100, r24
}
     c92:	cc 59       	subi	r28, 0x9C	; 156
     c94:	df 4f       	sbci	r29, 0xFF	; 255
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	f8 94       	cli
     c9a:	de bf       	out	0x3e, r29	; 62
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	cd bf       	out	0x3d, r28	; 61
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	1f 91       	pop	r17
     ca6:	0f 91       	pop	r16
     ca8:	ff 90       	pop	r15
     caa:	ef 90       	pop	r14
     cac:	df 90       	pop	r13
     cae:	cf 90       	pop	r12
     cb0:	bf 90       	pop	r11
     cb2:	af 90       	pop	r10
     cb4:	08 95       	ret

00000cb6 <timer_init>:

volatile uint32_t time=0;
void timer_init()
{
	//PIND = (1 << PIND0);
	TIMSK1|=(1<<TOIE1);
     cb6:	ef e6       	ldi	r30, 0x6F	; 111
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	81 60       	ori	r24, 0x01	; 1
     cbe:	80 83       	st	Z, r24
	TCNT1 = 0x00;
     cc0:	10 92 85 00 	sts	0x0085, r1
     cc4:	10 92 84 00 	sts	0x0084, r1
	TCCR1B = 0x01;//pt ca modificam ultimu bit din datasheet
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	80 93 81 00 	sts	0x0081, r24
     cce:	08 95       	ret

00000cd0 <__vector_15>:
}
ISR(TIMER1_OVF_vect)// Din datasheet timerq(are 8 mh) => 8/8= 1 microsecunde
{
     cd0:	1f 92       	push	r1
     cd2:	0f 92       	push	r0
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	0f 92       	push	r0
     cd8:	11 24       	eor	r1, r1
     cda:	2f 93       	push	r18
     cdc:	3f 93       	push	r19
     cde:	4f 93       	push	r20
     ce0:	5f 93       	push	r21
     ce2:	6f 93       	push	r22
     ce4:	7f 93       	push	r23
     ce6:	8f 93       	push	r24
     ce8:	9f 93       	push	r25
     cea:	af 93       	push	r26
     cec:	bf 93       	push	r27
     cee:	ef 93       	push	r30
     cf0:	ff 93       	push	r31
	time++;
     cf2:	80 91 dc 03 	lds	r24, 0x03DC
     cf6:	90 91 dd 03 	lds	r25, 0x03DD
     cfa:	a0 91 de 03 	lds	r26, 0x03DE
     cfe:	b0 91 df 03 	lds	r27, 0x03DF
     d02:	01 96       	adiw	r24, 0x01	; 1
     d04:	a1 1d       	adc	r26, r1
     d06:	b1 1d       	adc	r27, r1
     d08:	80 93 dc 03 	sts	0x03DC, r24
     d0c:	90 93 dd 03 	sts	0x03DD, r25
     d10:	a0 93 de 03 	sts	0x03DE, r26
     d14:	b0 93 df 03 	sts	0x03DF, r27
	//TCCR1B = 0x01; // init pentru 7.5 ms
	//TCCR1B = 0x02; // init pentru 60 ms
	//timePassed(7500); //7.5 ms = 7500 us;
	timePassed(8800);	
     d18:	60 e6       	ldi	r22, 0x60	; 96
     d1a:	72 e2       	ldi	r23, 0x22	; 34
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	0e 94 a0 08 	call	0x1140	; 0x1140 <timePassed>
	//PORTD ^= 1<<PIND5;
	//PORTD ^=( 1<<PIND2);
}
     d24:	ff 91       	pop	r31
     d26:	ef 91       	pop	r30
     d28:	bf 91       	pop	r27
     d2a:	af 91       	pop	r26
     d2c:	9f 91       	pop	r25
     d2e:	8f 91       	pop	r24
     d30:	7f 91       	pop	r23
     d32:	6f 91       	pop	r22
     d34:	5f 91       	pop	r21
     d36:	4f 91       	pop	r20
     d38:	3f 91       	pop	r19
     d3a:	2f 91       	pop	r18
     d3c:	0f 90       	pop	r0
     d3e:	0f be       	out	0x3f, r0	; 63
     d40:	0f 90       	pop	r0
     d42:	1f 90       	pop	r1
     d44:	18 95       	reti

00000d46 <__vector_20>:

ISR(USART0_RX_vect)
{
     d46:	1f 92       	push	r1
     d48:	0f 92       	push	r0
     d4a:	0f b6       	in	r0, 0x3f	; 63
     d4c:	0f 92       	push	r0
     d4e:	11 24       	eor	r1, r1
     d50:	2f 93       	push	r18
     d52:	3f 93       	push	r19
     d54:	4f 93       	push	r20
     d56:	5f 93       	push	r21
     d58:	6f 93       	push	r22
     d5a:	7f 93       	push	r23
     d5c:	8f 93       	push	r24
     d5e:	9f 93       	push	r25
     d60:	af 93       	push	r26
     d62:	bf 93       	push	r27
     d64:	ef 93       	push	r30
     d66:	ff 93       	push	r31
	BTProtocolReadByte(UDR0);
     d68:	80 91 c6 00 	lds	r24, 0x00C6
     d6c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <BTProtocolReadByte>
	//PORTD ^=( 1<<PIND2);
	//UDR0 = 66;
}
     d70:	ff 91       	pop	r31
     d72:	ef 91       	pop	r30
     d74:	bf 91       	pop	r27
     d76:	af 91       	pop	r26
     d78:	9f 91       	pop	r25
     d7a:	8f 91       	pop	r24
     d7c:	7f 91       	pop	r23
     d7e:	6f 91       	pop	r22
     d80:	5f 91       	pop	r21
     d82:	4f 91       	pop	r20
     d84:	3f 91       	pop	r19
     d86:	2f 91       	pop	r18
     d88:	0f 90       	pop	r0
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	0f 90       	pop	r0
     d8e:	1f 90       	pop	r1
     d90:	18 95       	reti

00000d92 <main>:

volatile uint8_t sradc0, shouldBlink=0;

int main(void)
{
	BTInit();
     d92:	0e 94 ca 01 	call	0x394	; 0x394 <BTInit>
	timer_init();
     d96:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <timer_init>
	initLeds();
     d9a:	0e 94 cc 09 	call	0x1398	; 0x1398 <initLeds>
	initEngines();
     d9e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <initEngines>
	initSensors();
     da2:	0e 94 b2 03 	call	0x764	; 0x764 <initSensors>
	initTimeQueue();
     da6:	0e 94 dd 06 	call	0xdba	; 0xdba <initTimeQueue>
	
	sei();
     daa:	78 94       	sei
	BTTransmitStr("  >>>main start<<<  ");
     dac:	85 e9       	ldi	r24, 0x95	; 149
     dae:	92 e0       	ldi	r25, 0x02	; 2
     db0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <BTTransmitStr>
	
    while(1)
    {
		
		//_delay_ms(1);
		checkTimeQueue();
     db4:	0e 94 37 09 	call	0x126e	; 0x126e <checkTimeQueue>
     db8:	fd cf       	rjmp	.-6      	; 0xdb4 <main+0x22>

00000dba <initTimeQueue>:
extern uint32_t time;

void initTimeQueue(){
	uint8_t i;
	// initializez toti pointerii cu 0, adica pe fiecare pozitie din coada e o structura neocupata
	for(i=0;i<TimerQueueSize;i++)
     dba:	40 91 01 01 	lds	r20, 0x0101
     dbe:	44 23       	and	r20, r20
     dc0:	a9 f0       	breq	.+42     	; 0xdec <initTimeQueue+0x32>
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	90 e0       	ldi	r25, 0x00	; 0
		TimerQueue[i].pointerFct = 0;
     dc6:	fc 01       	movw	r30, r24
     dc8:	ee 0f       	add	r30, r30
     dca:	ff 1f       	adc	r31, r31
     dcc:	9c 01       	movw	r18, r24
     dce:	22 0f       	add	r18, r18
     dd0:	33 1f       	adc	r19, r19
     dd2:	22 0f       	add	r18, r18
     dd4:	33 1f       	adc	r19, r19
     dd6:	22 0f       	add	r18, r18
     dd8:	33 1f       	adc	r19, r19
     dda:	e2 0f       	add	r30, r18
     ddc:	f3 1f       	adc	r31, r19
     dde:	e5 5d       	subi	r30, 0xD5	; 213
     de0:	fb 4f       	sbci	r31, 0xFB	; 251
     de2:	11 86       	std	Z+9, r1	; 0x09
     de4:	10 86       	std	Z+8, r1	; 0x08
     de6:	01 96       	adiw	r24, 0x01	; 1
extern uint32_t time;

void initTimeQueue(){
	uint8_t i;
	// initializez toti pointerii cu 0, adica pe fiecare pozitie din coada e o structura neocupata
	for(i=0;i<TimerQueueSize;i++)
     de8:	84 17       	cp	r24, r20
     dea:	68 f3       	brcs	.-38     	; 0xdc6 <initTimeQueue+0xc>
     dec:	08 95       	ret

00000dee <addEntryToTimerQueue>:
		TimerQueue[i].pointerFct = 0;
}

extern volatile uint8_t debugging;
// delay e in microsecunde (10^-6 secunde)
void addEntryToTimerQueue(void (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
     dee:	df 92       	push	r13
     df0:	ef 92       	push	r14
     df2:	ff 92       	push	r15
     df4:	0f 93       	push	r16
     df6:	1f 93       	push	r17
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	ce 56       	subi	r28, 0x6E	; 110
     e02:	d1 09       	sbc	r29, r1
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	f8 94       	cli
     e08:	de bf       	out	0x3e, r29	; 62
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	cd bf       	out	0x3d, r28	; 61
	cli(); // dezactivare intreruperi
     e0e:	f8 94       	cli
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
     e10:	d0 90 01 01 	lds	r13, 0x0101
     e14:	dd 20       	and	r13, r13
     e16:	09 f4       	brne	.+2      	; 0xe1a <addEntryToTimerQueue+0x2c>
     e18:	77 c0       	rjmp	.+238    	; 0xf08 <addEntryToTimerQueue+0x11a>
		if(TimerQueue[i].pointerFct == 0)
     e1a:	e0 91 33 04 	lds	r30, 0x0433
     e1e:	f0 91 34 04 	lds	r31, 0x0434
     e22:	ef 2b       	or	r30, r31
     e24:	09 f4       	brne	.+2      	; 0xe28 <addEntryToTimerQueue+0x3a>
     e26:	7a c0       	rjmp	.+244    	; 0xf1c <addEntryToTimerQueue+0x12e>
			break;
		if(TimerQueue[i].pointerFct == _theFct){
     e28:	e0 91 33 04 	lds	r30, 0x0433
     e2c:	f0 91 34 04 	lds	r31, 0x0434
     e30:	e8 17       	cp	r30, r24
     e32:	f9 07       	cpc	r31, r25
     e34:	09 f0       	breq	.+2      	; 0xe38 <addEntryToTimerQueue+0x4a>
     e36:	5e c0       	rjmp	.+188    	; 0xef4 <addEntryToTimerQueue+0x106>
     e38:	2d c0       	rjmp	.+90     	; 0xe94 <addEntryToTimerQueue+0xa6>
void addEntryToTimerQueue(void (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
	cli(); // dezactivare intreruperi
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct == 0)
     e3a:	7f 01       	movw	r14, r30
     e3c:	df 01       	movw	r26, r30
     e3e:	aa 0f       	add	r26, r26
     e40:	bb 1f       	adc	r27, r27
     e42:	aa 0f       	add	r26, r26
     e44:	bb 1f       	adc	r27, r27
     e46:	aa 0f       	add	r26, r26
     e48:	bb 1f       	adc	r27, r27
     e4a:	8f 01       	movw	r16, r30
     e4c:	00 0f       	add	r16, r16
     e4e:	11 1f       	adc	r17, r17
     e50:	a0 0f       	add	r26, r16
     e52:	b1 1f       	adc	r27, r17
     e54:	a5 5d       	subi	r26, 0xD5	; 213
     e56:	bb 4f       	sbci	r27, 0xFB	; 251
     e58:	18 96       	adiw	r26, 0x08	; 8
     e5a:	0d 90       	ld	r0, X+
     e5c:	bc 91       	ld	r27, X
     e5e:	a0 2d       	mov	r26, r0
     e60:	ab 2b       	or	r26, r27
     e62:	09 f4       	brne	.+2      	; 0xe66 <addEntryToTimerQueue+0x78>
     e64:	4e c0       	rjmp	.+156    	; 0xf02 <addEntryToTimerQueue+0x114>
			break;
		if(TimerQueue[i].pointerFct == _theFct){
     e66:	8f 01       	movw	r16, r30
     e68:	00 0f       	add	r16, r16
     e6a:	11 1f       	adc	r17, r17
     e6c:	df 01       	movw	r26, r30
     e6e:	aa 0f       	add	r26, r26
     e70:	bb 1f       	adc	r27, r27
     e72:	aa 0f       	add	r26, r26
     e74:	bb 1f       	adc	r27, r27
     e76:	aa 0f       	add	r26, r26
     e78:	bb 1f       	adc	r27, r27
     e7a:	a0 0f       	add	r26, r16
     e7c:	b1 1f       	adc	r27, r17
     e7e:	a5 5d       	subi	r26, 0xD5	; 213
     e80:	bb 4f       	sbci	r27, 0xFB	; 251
     e82:	18 96       	adiw	r26, 0x08	; 8
     e84:	0d 90       	ld	r0, X+
     e86:	bc 91       	ld	r27, X
     e88:	a0 2d       	mov	r26, r0
     e8a:	31 96       	adiw	r30, 0x01	; 1
     e8c:	a8 17       	cp	r26, r24
     e8e:	b9 07       	cpc	r27, r25
     e90:	99 f5       	brne	.+102    	; 0xef8 <addEntryToTimerQueue+0x10a>
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <addEntryToTimerQueue+0xaa>
void addEntryToTimerQueue(void (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
	cli(); // dezactivare intreruperi
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct == 0)
     e94:	e1 2c       	mov	r14, r1
     e96:	f1 2c       	mov	r15, r1
			break;
		if(TimerQueue[i].pointerFct == _theFct){
			if(debugging){
     e98:	80 91 00 01 	lds	r24, 0x0100
     e9c:	88 23       	and	r24, r24
     e9e:	09 f4       	brne	.+2      	; 0xea2 <addEntryToTimerQueue+0xb4>
     ea0:	98 c0       	rjmp	.+304    	; 0xfd2 <addEntryToTimerQueue+0x1e4>
				char msg[100];
				sprintf(msg, "Functia asta e deja in coada! cu delay: %lu", TimerQueue[i].delay);
     ea2:	f7 01       	movw	r30, r14
     ea4:	ee 0f       	add	r30, r30
     ea6:	ff 1f       	adc	r31, r31
     ea8:	ee 0c       	add	r14, r14
     eaa:	ff 1c       	adc	r15, r15
     eac:	ee 0c       	add	r14, r14
     eae:	ff 1c       	adc	r15, r15
     eb0:	ee 0c       	add	r14, r14
     eb2:	ff 1c       	adc	r15, r15
     eb4:	ee 0d       	add	r30, r14
     eb6:	ff 1d       	adc	r31, r15
     eb8:	e5 5d       	subi	r30, 0xD5	; 213
     eba:	fb 4f       	sbci	r31, 0xFB	; 251
     ebc:	80 81       	ld	r24, Z
     ebe:	91 81       	ldd	r25, Z+1	; 0x01
     ec0:	a2 81       	ldd	r26, Z+2	; 0x02
     ec2:	b3 81       	ldd	r27, Z+3	; 0x03
     ec4:	bf 93       	push	r27
     ec6:	af 93       	push	r26
     ec8:	9f 93       	push	r25
     eca:	8f 93       	push	r24
     ecc:	8a ea       	ldi	r24, 0xAA	; 170
     ece:	92 e0       	ldi	r25, 0x02	; 2
     ed0:	9f 93       	push	r25
     ed2:	8f 93       	push	r24
     ed4:	8e 01       	movw	r16, r28
     ed6:	05 5f       	subi	r16, 0xF5	; 245
     ed8:	1f 4f       	sbci	r17, 0xFF	; 255
     eda:	1f 93       	push	r17
     edc:	0f 93       	push	r16
     ede:	0e 94 01 0a 	call	0x1402	; 0x1402 <sprintf>
				BTTransmitStr(msg);
     ee2:	c8 01       	movw	r24, r16
     ee4:	0e 94 f5 00 	call	0x1ea	; 0x1ea <BTTransmitStr>
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	f8 94       	cli
     eec:	de bf       	out	0x3e, r29	; 62
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	cd bf       	out	0x3d, r28	; 61
     ef2:	6f c0       	rjmp	.+222    	; 0xfd2 <addEntryToTimerQueue+0x1e4>
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct == 0)
			break;
		if(TimerQueue[i].pointerFct == _theFct){
     ef4:	e1 e0       	ldi	r30, 0x01	; 1
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
// delay e in microsecunde (10^-6 secunde)
void addEntryToTimerQueue(void (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
	cli(); // dezactivare intreruperi
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
     ef8:	3e 2f       	mov	r19, r30
     efa:	ed 15       	cp	r30, r13
     efc:	08 f4       	brcc	.+2      	; 0xf00 <addEntryToTimerQueue+0x112>
     efe:	9d cf       	rjmp	.-198    	; 0xe3a <addEntryToTimerQueue+0x4c>
     f00:	01 c0       	rjmp	.+2      	; 0xf04 <addEntryToTimerQueue+0x116>
     f02:	e3 2f       	mov	r30, r19
				BTTransmitStr(msg);
			}
			return;
		}
	}
	if(i == TimerQueueSize){
     f04:	ed 11       	cpse	r30, r13
     f06:	0b c0       	rjmp	.+22     	; 0xf1e <addEntryToTimerQueue+0x130>
		//nu mai e loc in coada
		if(debugging)
     f08:	80 91 00 01 	lds	r24, 0x0100
     f0c:	88 23       	and	r24, r24
     f0e:	09 f4       	brne	.+2      	; 0xf12 <addEntryToTimerQueue+0x124>
     f10:	60 c0       	rjmp	.+192    	; 0xfd2 <addEntryToTimerQueue+0x1e4>
			BTTransmitStr("Coada e full!");
     f12:	86 ed       	ldi	r24, 0xD6	; 214
     f14:	92 e0       	ldi	r25, 0x02	; 2
     f16:	0e 94 f5 00 	call	0x1ea	; 0x1ea <BTTransmitStr>
     f1a:	5b c0       	rjmp	.+182    	; 0xfd2 <addEntryToTimerQueue+0x1e4>
// delay e in microsecunde (10^-6 secunde)
void addEntryToTimerQueue(void (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
	cli(); // dezactivare intreruperi
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
     f1c:	30 e0       	ldi	r19, 0x00	; 0
	}
	
	//construire entry pentru functia curenta 
	queueEntry thisEntry;
	thisEntry.delay = _delay;
	thisEntry.repeatDelay = _repeat ? _delay :0;
     f1e:	21 11       	cpse	r18, r1
     f20:	04 c0       	rjmp	.+8      	; 0xf2a <addEntryToTimerQueue+0x13c>
     f22:	a0 e0       	ldi	r26, 0x00	; 0
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	e0 e0       	ldi	r30, 0x00	; 0
     f28:	04 c0       	rjmp	.+8      	; 0xf32 <addEntryToTimerQueue+0x144>
     f2a:	a4 2f       	mov	r26, r20
     f2c:	f5 2f       	mov	r31, r21
     f2e:	e6 2f       	mov	r30, r22
     f30:	27 2f       	mov	r18, r23
	thisEntry.pointerFct = _theFct;
	
	TimerQueue[i] = thisEntry;
     f32:	03 2f       	mov	r16, r19
     f34:	10 e0       	ldi	r17, 0x00	; 0
     f36:	49 83       	std	Y+1, r20	; 0x01
     f38:	5a 83       	std	Y+2, r21	; 0x02
     f3a:	6b 83       	std	Y+3, r22	; 0x03
     f3c:	7c 83       	std	Y+4, r23	; 0x04
     f3e:	ad 83       	std	Y+5, r26	; 0x05
     f40:	fe 83       	std	Y+6, r31	; 0x06
     f42:	ef 83       	std	Y+7, r30	; 0x07
     f44:	28 87       	std	Y+8, r18	; 0x08
     f46:	9a 87       	std	Y+10, r25	; 0x0a
     f48:	89 87       	std	Y+9, r24	; 0x09
     f4a:	d8 01       	movw	r26, r16
     f4c:	aa 0f       	add	r26, r26
     f4e:	bb 1f       	adc	r27, r27
     f50:	c8 01       	movw	r24, r16
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	a8 0f       	add	r26, r24
     f60:	b9 1f       	adc	r27, r25
     f62:	a5 5d       	subi	r26, 0xD5	; 213
     f64:	bb 4f       	sbci	r27, 0xFB	; 251
     f66:	8a e0       	ldi	r24, 0x0A	; 10
     f68:	fe 01       	movw	r30, r28
     f6a:	31 96       	adiw	r30, 0x01	; 1
     f6c:	01 90       	ld	r0, Z+
     f6e:	0d 92       	st	X+, r0
     f70:	8a 95       	dec	r24
     f72:	e1 f7       	brne	.-8      	; 0xf6c <addEntryToTimerQueue+0x17e>
	
	if(debugging){
     f74:	80 91 00 01 	lds	r24, 0x0100
     f78:	88 23       	and	r24, r24
     f7a:	51 f1       	breq	.+84     	; 0xfd0 <addEntryToTimerQueue+0x1e2>
		char msg[100];		
		sprintf(msg, "Entry adaugat in coada! la index %d si cu delay: %lu", i, TimerQueue[i].delay);
     f7c:	f8 01       	movw	r30, r16
     f7e:	ee 0f       	add	r30, r30
     f80:	ff 1f       	adc	r31, r31
     f82:	00 0f       	add	r16, r16
     f84:	11 1f       	adc	r17, r17
     f86:	00 0f       	add	r16, r16
     f88:	11 1f       	adc	r17, r17
     f8a:	00 0f       	add	r16, r16
     f8c:	11 1f       	adc	r17, r17
     f8e:	e0 0f       	add	r30, r16
     f90:	f1 1f       	adc	r31, r17
     f92:	e5 5d       	subi	r30, 0xD5	; 213
     f94:	fb 4f       	sbci	r31, 0xFB	; 251
     f96:	80 81       	ld	r24, Z
     f98:	91 81       	ldd	r25, Z+1	; 0x01
     f9a:	a2 81       	ldd	r26, Z+2	; 0x02
     f9c:	b3 81       	ldd	r27, Z+3	; 0x03
     f9e:	bf 93       	push	r27
     fa0:	af 93       	push	r26
     fa2:	9f 93       	push	r25
     fa4:	8f 93       	push	r24
     fa6:	1f 92       	push	r1
     fa8:	3f 93       	push	r19
     faa:	84 ee       	ldi	r24, 0xE4	; 228
     fac:	92 e0       	ldi	r25, 0x02	; 2
     fae:	9f 93       	push	r25
     fb0:	8f 93       	push	r24
     fb2:	8e 01       	movw	r16, r28
     fb4:	05 5f       	subi	r16, 0xF5	; 245
     fb6:	1f 4f       	sbci	r17, 0xFF	; 255
     fb8:	1f 93       	push	r17
     fba:	0f 93       	push	r16
     fbc:	0e 94 01 0a 	call	0x1402	; 0x1402 <sprintf>
		BTTransmitStr(msg);
     fc0:	c8 01       	movw	r24, r16
     fc2:	0e 94 f5 00 	call	0x1ea	; 0x1ea <BTTransmitStr>
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	de bf       	out	0x3e, r29	; 62
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	cd bf       	out	0x3d, r28	; 61
	}
	sei();
     fd0:	78 94       	sei
}
     fd2:	c2 59       	subi	r28, 0x92	; 146
     fd4:	df 4f       	sbci	r29, 0xFF	; 255
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	f8 94       	cli
     fda:	de bf       	out	0x3e, r29	; 62
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	cd bf       	out	0x3d, r28	; 61
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	ff 90       	pop	r15
     fea:	ef 90       	pop	r14
     fec:	df 90       	pop	r13
     fee:	08 95       	ret

00000ff0 <removeEntryFromTimerQueue>:
void removeEntryFromTimerQueue(void (*_theFct) (void)){
     ff0:	bf 92       	push	r11
     ff2:	cf 92       	push	r12
     ff4:	df 92       	push	r13
     ff6:	ef 92       	push	r14
     ff8:	ff 92       	push	r15
     ffa:	0f 93       	push	r16
     ffc:	1f 93       	push	r17
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    1006:	c4 56       	subi	r28, 0x64	; 100
    1008:	d1 09       	sbc	r29, r1
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	f8 94       	cli
    100e:	de bf       	out	0x3e, r29	; 62
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	cd bf       	out	0x3d, r28	; 61
    1014:	8c 01       	movw	r16, r24
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
    1016:	80 91 01 01 	lds	r24, 0x0101
    101a:	88 23       	and	r24, r24
    101c:	09 f4       	brne	.+2      	; 0x1020 <removeEntryFromTimerQueue+0x30>
    101e:	52 c0       	rjmp	.+164    	; 0x10c4 <removeEntryFromTimerQueue+0xd4>
    1020:	b1 2c       	mov	r11, r1
			TimerQueue[i].pointerFct = 0;
			TimerQueue[i].delay = 0;
			TimerQueue[i].repeatDelay = 0;
			if(debugging){
				char msg[100];
				sprintf(msg, "Entry sters din coada. de pe pozitia %d", i);
    1022:	0f 2e       	mov	r0, r31
    1024:	f9 e1       	ldi	r31, 0x19	; 25
    1026:	cf 2e       	mov	r12, r31
    1028:	f3 e0       	ldi	r31, 0x03	; 3
    102a:	df 2e       	mov	r13, r31
    102c:	f0 2d       	mov	r31, r0
    102e:	ce 01       	movw	r24, r28
    1030:	01 96       	adiw	r24, 0x01	; 1
    1032:	7c 01       	movw	r14, r24
	sei();
}
void removeEntryFromTimerQueue(void (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct == _theFct){
    1034:	2b 2d       	mov	r18, r11
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	f9 01       	movw	r30, r18
    103a:	ee 0f       	add	r30, r30
    103c:	ff 1f       	adc	r31, r31
    103e:	c9 01       	movw	r24, r18
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	e8 0f       	add	r30, r24
    104e:	f9 1f       	adc	r31, r25
    1050:	e5 5d       	subi	r30, 0xD5	; 213
    1052:	fb 4f       	sbci	r31, 0xFB	; 251
    1054:	40 85       	ldd	r20, Z+8	; 0x08
    1056:	51 85       	ldd	r21, Z+9	; 0x09
    1058:	40 17       	cp	r20, r16
    105a:	51 07       	cpc	r21, r17
    105c:	69 f5       	brne	.+90     	; 0x10b8 <removeEntryFromTimerQueue+0xc8>
			TimerQueue[i].pointerFct = 0;
    105e:	c9 01       	movw	r24, r18
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	f9 01       	movw	r30, r18
    106e:	ee 0f       	add	r30, r30
    1070:	ff 1f       	adc	r31, r31
    1072:	e8 0f       	add	r30, r24
    1074:	f9 1f       	adc	r31, r25
    1076:	e5 5d       	subi	r30, 0xD5	; 213
    1078:	fb 4f       	sbci	r31, 0xFB	; 251
    107a:	11 86       	std	Z+9, r1	; 0x09
    107c:	10 86       	std	Z+8, r1	; 0x08
			TimerQueue[i].delay = 0;
    107e:	10 82       	st	Z, r1
    1080:	11 82       	std	Z+1, r1	; 0x01
    1082:	12 82       	std	Z+2, r1	; 0x02
    1084:	13 82       	std	Z+3, r1	; 0x03
			TimerQueue[i].repeatDelay = 0;
    1086:	14 82       	std	Z+4, r1	; 0x04
    1088:	15 82       	std	Z+5, r1	; 0x05
    108a:	16 82       	std	Z+6, r1	; 0x06
    108c:	17 82       	std	Z+7, r1	; 0x07
			if(debugging){
    108e:	80 91 00 01 	lds	r24, 0x0100
    1092:	88 23       	and	r24, r24
    1094:	89 f0       	breq	.+34     	; 0x10b8 <removeEntryFromTimerQueue+0xc8>
				char msg[100];
				sprintf(msg, "Entry sters din coada. de pe pozitia %d", i);
    1096:	3f 93       	push	r19
    1098:	bf 92       	push	r11
    109a:	df 92       	push	r13
    109c:	cf 92       	push	r12
    109e:	ff 92       	push	r15
    10a0:	ef 92       	push	r14
    10a2:	0e 94 01 0a 	call	0x1402	; 0x1402 <sprintf>
				BTTransmitStr(msg);
    10a6:	c7 01       	movw	r24, r14
    10a8:	0e 94 f5 00 	call	0x1ea	; 0x1ea <BTTransmitStr>
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
	}
	sei();
}
void removeEntryFromTimerQueue(void (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
    10b8:	b3 94       	inc	r11
    10ba:	80 91 01 01 	lds	r24, 0x0101
    10be:	b8 16       	cp	r11, r24
    10c0:	08 f4       	brcc	.+2      	; 0x10c4 <removeEntryFromTimerQueue+0xd4>
    10c2:	b8 cf       	rjmp	.-144    	; 0x1034 <removeEntryFromTimerQueue+0x44>
				sprintf(msg, "Entry sters din coada. de pe pozitia %d", i);
				BTTransmitStr(msg);
			}
		}
	}
}
    10c4:	cc 59       	subi	r28, 0x9C	; 156
    10c6:	df 4f       	sbci	r29, 0xFF	; 255
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	de bf       	out	0x3e, r29	; 62
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	cd bf       	out	0x3d, r28	; 61
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	1f 91       	pop	r17
    10d8:	0f 91       	pop	r16
    10da:	ff 90       	pop	r15
    10dc:	ef 90       	pop	r14
    10de:	df 90       	pop	r13
    10e0:	cf 90       	pop	r12
    10e2:	bf 90       	pop	r11
    10e4:	08 95       	ret

000010e6 <existsEntryInTimerQueue>:

uint8_t existsEntryInTimerQueue(void (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
    10e6:	60 91 01 01 	lds	r22, 0x0101
    10ea:	66 23       	and	r22, r22
    10ec:	19 f1       	breq	.+70     	; 0x1134 <__stack+0x35>
		if(TimerQueue[i].pointerFct == _theFct){
    10ee:	20 91 33 04 	lds	r18, 0x0433
    10f2:	30 91 34 04 	lds	r19, 0x0434
    10f6:	28 17       	cp	r18, r24
    10f8:	39 07       	cpc	r19, r25
    10fa:	f1 f0       	breq	.+60     	; 0x1138 <__stack+0x39>
    10fc:	21 e0       	ldi	r18, 0x01	; 1
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	15 c0       	rjmp	.+42     	; 0x112c <__stack+0x2d>
    1102:	f9 01       	movw	r30, r18
    1104:	ee 0f       	add	r30, r30
    1106:	ff 1f       	adc	r31, r31
    1108:	a9 01       	movw	r20, r18
    110a:	44 0f       	add	r20, r20
    110c:	55 1f       	adc	r21, r21
    110e:	44 0f       	add	r20, r20
    1110:	55 1f       	adc	r21, r21
    1112:	44 0f       	add	r20, r20
    1114:	55 1f       	adc	r21, r21
    1116:	e4 0f       	add	r30, r20
    1118:	f5 1f       	adc	r31, r21
    111a:	e5 5d       	subi	r30, 0xD5	; 213
    111c:	fb 4f       	sbci	r31, 0xFB	; 251
    111e:	40 85       	ldd	r20, Z+8	; 0x08
    1120:	51 85       	ldd	r21, Z+9	; 0x09
    1122:	2f 5f       	subi	r18, 0xFF	; 255
    1124:	3f 4f       	sbci	r19, 0xFF	; 255
    1126:	48 17       	cp	r20, r24
    1128:	59 07       	cpc	r21, r25
    112a:	41 f0       	breq	.+16     	; 0x113c <__stack+0x3d>
	}
}

uint8_t existsEntryInTimerQueue(void (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
    112c:	26 17       	cp	r18, r22
    112e:	48 f3       	brcs	.-46     	; 0x1102 <__stack+0x3>
		if(TimerQueue[i].pointerFct == _theFct){
			
			return 1;
		}
	}
	return 0;
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	08 95       	ret
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	08 95       	ret
uint8_t existsEntryInTimerQueue(void (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct == _theFct){
			
			return 1;
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	08 95       	ret
    113c:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    113e:	08 95       	ret

00001140 <timePassed>:

//se apeleaza din intrerupere (cate microsecunde au trecut)
//pentru fiecare functie(valida) din queue se scade din delay numarul de microsecunde care a trecut

void timePassed(uint32_t passed_us){
    1140:	8f 92       	push	r8
    1142:	9f 92       	push	r9
    1144:	af 92       	push	r10
    1146:	bf 92       	push	r11
    1148:	df 92       	push	r13
    114a:	ef 92       	push	r14
    114c:	ff 92       	push	r15
    114e:	0f 93       	push	r16
    1150:	1f 93       	push	r17
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
    1156:	10 91 01 01 	lds	r17, 0x0101
    115a:	11 23       	and	r17, r17
    115c:	09 f4       	brne	.+2      	; 0x1160 <timePassed+0x20>
    115e:	7b c0       	rjmp	.+246    	; 0x1256 <timePassed+0x116>
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
		if(TimerQueue[i].pointerFct != 0){
			if(TimerQueue[i].delay > 0)
				TimerQueue[i].delay = TimerQueue[i].delay > passed_us ? TimerQueue[i].delay-passed_us : 0;
    1164:	d1 2c       	mov	r13, r1
    1166:	e1 2c       	mov	r14, r1
    1168:	f1 2c       	mov	r15, r1
    116a:	00 e0       	ldi	r16, 0x00	; 0
//pentru fiecare functie(valida) din queue se scade din delay numarul de microsecunde care a trecut

void timePassed(uint32_t passed_us){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct != 0){
    116c:	f9 01       	movw	r30, r18
    116e:	a9 01       	movw	r20, r18
    1170:	44 0f       	add	r20, r20
    1172:	55 1f       	adc	r21, r21
    1174:	44 0f       	add	r20, r20
    1176:	55 1f       	adc	r21, r21
    1178:	44 0f       	add	r20, r20
    117a:	55 1f       	adc	r21, r21
    117c:	d9 01       	movw	r26, r18
    117e:	aa 0f       	add	r26, r26
    1180:	bb 1f       	adc	r27, r27
    1182:	a4 0f       	add	r26, r20
    1184:	b5 1f       	adc	r27, r21
    1186:	a5 5d       	subi	r26, 0xD5	; 213
    1188:	bb 4f       	sbci	r27, 0xFB	; 251
    118a:	18 96       	adiw	r26, 0x08	; 8
    118c:	4d 91       	ld	r20, X+
    118e:	5c 91       	ld	r21, X
    1190:	19 97       	sbiw	r26, 0x09	; 9
    1192:	45 2b       	or	r20, r21
    1194:	09 f4       	brne	.+2      	; 0x1198 <timePassed+0x58>
    1196:	5a c0       	rjmp	.+180    	; 0x124c <timePassed+0x10c>
			if(TimerQueue[i].delay > 0)
    1198:	a9 01       	movw	r20, r18
    119a:	44 0f       	add	r20, r20
    119c:	55 1f       	adc	r21, r21
    119e:	44 0f       	add	r20, r20
    11a0:	55 1f       	adc	r21, r21
    11a2:	44 0f       	add	r20, r20
    11a4:	55 1f       	adc	r21, r21
    11a6:	d9 01       	movw	r26, r18
    11a8:	aa 0f       	add	r26, r26
    11aa:	bb 1f       	adc	r27, r27
    11ac:	a4 0f       	add	r26, r20
    11ae:	b5 1f       	adc	r27, r21
    11b0:	a5 5d       	subi	r26, 0xD5	; 213
    11b2:	bb 4f       	sbci	r27, 0xFB	; 251
    11b4:	8d 90       	ld	r8, X+
    11b6:	9d 90       	ld	r9, X+
    11b8:	ad 90       	ld	r10, X+
    11ba:	bc 90       	ld	r11, X
    11bc:	89 28       	or	r8, r9
    11be:	8a 28       	or	r8, r10
    11c0:	8b 28       	or	r8, r11
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <timePassed+0x86>
    11c4:	43 c0       	rjmp	.+134    	; 0x124c <timePassed+0x10c>
				TimerQueue[i].delay = TimerQueue[i].delay > passed_us ? TimerQueue[i].delay-passed_us : 0;
    11c6:	a9 01       	movw	r20, r18
    11c8:	44 0f       	add	r20, r20
    11ca:	55 1f       	adc	r21, r21
    11cc:	44 0f       	add	r20, r20
    11ce:	55 1f       	adc	r21, r21
    11d0:	44 0f       	add	r20, r20
    11d2:	55 1f       	adc	r21, r21
    11d4:	d9 01       	movw	r26, r18
    11d6:	aa 0f       	add	r26, r26
    11d8:	bb 1f       	adc	r27, r27
    11da:	a4 0f       	add	r26, r20
    11dc:	b5 1f       	adc	r27, r21
    11de:	a5 5d       	subi	r26, 0xD5	; 213
    11e0:	bb 4f       	sbci	r27, 0xFB	; 251
    11e2:	8d 90       	ld	r8, X+
    11e4:	9d 90       	ld	r9, X+
    11e6:	ad 90       	ld	r10, X+
    11e8:	bc 90       	ld	r11, X
    11ea:	68 15       	cp	r22, r8
    11ec:	79 05       	cpc	r23, r9
    11ee:	8a 05       	cpc	r24, r10
    11f0:	9b 05       	cpc	r25, r11
    11f2:	b8 f4       	brcc	.+46     	; 0x1222 <timePassed+0xe2>
    11f4:	a9 01       	movw	r20, r18
    11f6:	44 0f       	add	r20, r20
    11f8:	55 1f       	adc	r21, r21
    11fa:	44 0f       	add	r20, r20
    11fc:	55 1f       	adc	r21, r21
    11fe:	44 0f       	add	r20, r20
    1200:	55 1f       	adc	r21, r21
    1202:	d9 01       	movw	r26, r18
    1204:	aa 0f       	add	r26, r26
    1206:	bb 1f       	adc	r27, r27
    1208:	a4 0f       	add	r26, r20
    120a:	b5 1f       	adc	r27, r21
    120c:	a5 5d       	subi	r26, 0xD5	; 213
    120e:	bb 4f       	sbci	r27, 0xFB	; 251
    1210:	8d 90       	ld	r8, X+
    1212:	9d 90       	ld	r9, X+
    1214:	ad 90       	ld	r10, X+
    1216:	bc 90       	ld	r11, X
    1218:	86 1a       	sub	r8, r22
    121a:	97 0a       	sbc	r9, r23
    121c:	a8 0a       	sbc	r10, r24
    121e:	b9 0a       	sbc	r11, r25
    1220:	04 c0       	rjmp	.+8      	; 0x122a <timePassed+0xea>
    1222:	8d 2c       	mov	r8, r13
    1224:	9e 2c       	mov	r9, r14
    1226:	af 2c       	mov	r10, r15
    1228:	b0 2e       	mov	r11, r16
    122a:	ef 01       	movw	r28, r30
    122c:	cc 0f       	add	r28, r28
    122e:	dd 1f       	adc	r29, r29
    1230:	ee 0f       	add	r30, r30
    1232:	ff 1f       	adc	r31, r31
    1234:	ee 0f       	add	r30, r30
    1236:	ff 1f       	adc	r31, r31
    1238:	ee 0f       	add	r30, r30
    123a:	ff 1f       	adc	r31, r31
    123c:	ec 0f       	add	r30, r28
    123e:	fd 1f       	adc	r31, r29
    1240:	e5 5d       	subi	r30, 0xD5	; 213
    1242:	fb 4f       	sbci	r31, 0xFB	; 251
    1244:	80 82       	st	Z, r8
    1246:	91 82       	std	Z+1, r9	; 0x01
    1248:	a2 82       	std	Z+2, r10	; 0x02
    124a:	b3 82       	std	Z+3, r11	; 0x03
    124c:	2f 5f       	subi	r18, 0xFF	; 255
    124e:	3f 4f       	sbci	r19, 0xFF	; 255
//se apeleaza din intrerupere (cate microsecunde au trecut)
//pentru fiecare functie(valida) din queue se scade din delay numarul de microsecunde care a trecut

void timePassed(uint32_t passed_us){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
    1250:	21 17       	cp	r18, r17
    1252:	08 f4       	brcc	.+2      	; 0x1256 <timePassed+0x116>
    1254:	8b cf       	rjmp	.-234    	; 0x116c <timePassed+0x2c>
		if(TimerQueue[i].pointerFct != 0){
			if(TimerQueue[i].delay > 0)
				TimerQueue[i].delay = TimerQueue[i].delay > passed_us ? TimerQueue[i].delay-passed_us : 0;
		}
	}
}
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	1f 91       	pop	r17
    125c:	0f 91       	pop	r16
    125e:	ff 90       	pop	r15
    1260:	ef 90       	pop	r14
    1262:	df 90       	pop	r13
    1264:	bf 90       	pop	r11
    1266:	af 90       	pop	r10
    1268:	9f 90       	pop	r9
    126a:	8f 90       	pop	r8
    126c:	08 95       	ret

0000126e <checkTimeQueue>:

//se apeleaza din main loop
//verifica daca sunt functii care trebuie apelate (daca delay-ul lor a ajuns la 0)
void checkTimeQueue(void){
    126e:	ef 92       	push	r14
    1270:	ff 92       	push	r15
    1272:	1f 93       	push	r17
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
	cli();
    1278:	f8 94       	cli
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
    127a:	80 91 01 01 	lds	r24, 0x0101
    127e:	88 23       	and	r24, r24
    1280:	09 f4       	brne	.+2      	; 0x1284 <checkTimeQueue+0x16>
    1282:	57 c0       	rjmp	.+174    	; 0x1332 <checkTimeQueue+0xc4>
    1284:	10 e0       	ldi	r17, 0x00	; 0
		if(TimerQueue[i].pointerFct != 0){
    1286:	c1 2f       	mov	r28, r17
    1288:	d0 e0       	ldi	r29, 0x00	; 0
    128a:	fe 01       	movw	r30, r28
    128c:	ee 0f       	add	r30, r30
    128e:	ff 1f       	adc	r31, r31
    1290:	ce 01       	movw	r24, r28
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	e8 0f       	add	r30, r24
    12a0:	f9 1f       	adc	r31, r25
    12a2:	e5 5d       	subi	r30, 0xD5	; 213
    12a4:	fb 4f       	sbci	r31, 0xFB	; 251
    12a6:	80 85       	ldd	r24, Z+8	; 0x08
    12a8:	91 85       	ldd	r25, Z+9	; 0x09
    12aa:	89 2b       	or	r24, r25
    12ac:	e1 f1       	breq	.+120    	; 0x1326 <checkTimeQueue+0xb8>
			if(TimerQueue[i].delay == 0){
    12ae:	ce 01       	movw	r24, r28
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	fe 01       	movw	r30, r28
    12be:	ee 0f       	add	r30, r30
    12c0:	ff 1f       	adc	r31, r31
    12c2:	e8 0f       	add	r30, r24
    12c4:	f9 1f       	adc	r31, r25
    12c6:	e5 5d       	subi	r30, 0xD5	; 213
    12c8:	fb 4f       	sbci	r31, 0xFB	; 251
    12ca:	80 81       	ld	r24, Z
    12cc:	91 81       	ldd	r25, Z+1	; 0x01
    12ce:	a2 81       	ldd	r26, Z+2	; 0x02
    12d0:	b3 81       	ldd	r27, Z+3	; 0x03
    12d2:	89 2b       	or	r24, r25
    12d4:	8a 2b       	or	r24, r26
    12d6:	8b 2b       	or	r24, r27
    12d8:	31 f5       	brne	.+76     	; 0x1326 <checkTimeQueue+0xb8>
				TimerQueue[i].pointerFct();
    12da:	7f 01       	movw	r14, r30
    12dc:	00 84       	ldd	r0, Z+8	; 0x08
    12de:	f1 85       	ldd	r31, Z+9	; 0x09
    12e0:	e0 2d       	mov	r30, r0
    12e2:	09 95       	icall
				if(TimerQueue[i].repeatDelay)
    12e4:	f7 01       	movw	r30, r14
    12e6:	84 81       	ldd	r24, Z+4	; 0x04
    12e8:	95 81       	ldd	r25, Z+5	; 0x05
    12ea:	a6 81       	ldd	r26, Z+6	; 0x06
    12ec:	b7 81       	ldd	r27, Z+7	; 0x07
    12ee:	89 2b       	or	r24, r25
    12f0:	8a 2b       	or	r24, r26
    12f2:	8b 2b       	or	r24, r27
    12f4:	49 f0       	breq	.+18     	; 0x1308 <checkTimeQueue+0x9a>
					TimerQueue[i].delay = TimerQueue[i].repeatDelay;
    12f6:	84 81       	ldd	r24, Z+4	; 0x04
    12f8:	95 81       	ldd	r25, Z+5	; 0x05
    12fa:	a6 81       	ldd	r26, Z+6	; 0x06
    12fc:	b7 81       	ldd	r27, Z+7	; 0x07
    12fe:	80 83       	st	Z, r24
    1300:	91 83       	std	Z+1, r25	; 0x01
    1302:	a2 83       	std	Z+2, r26	; 0x02
    1304:	b3 83       	std	Z+3, r27	; 0x03
    1306:	0f c0       	rjmp	.+30     	; 0x1326 <checkTimeQueue+0xb8>
				else
					TimerQueue[i].pointerFct = 0;
    1308:	ce 01       	movw	r24, r28
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	cc 0f       	add	r28, r28
    1310:	dd 1f       	adc	r29, r29
    1312:	cc 0f       	add	r28, r28
    1314:	dd 1f       	adc	r29, r29
    1316:	cc 0f       	add	r28, r28
    1318:	dd 1f       	adc	r29, r29
    131a:	c8 0f       	add	r28, r24
    131c:	d9 1f       	adc	r29, r25
    131e:	c5 5d       	subi	r28, 0xD5	; 213
    1320:	db 4f       	sbci	r29, 0xFB	; 251
    1322:	19 86       	std	Y+9, r1	; 0x09
    1324:	18 86       	std	Y+8, r1	; 0x08
//se apeleaza din main loop
//verifica daca sunt functii care trebuie apelate (daca delay-ul lor a ajuns la 0)
void checkTimeQueue(void){
	cli();
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
    1326:	1f 5f       	subi	r17, 0xFF	; 255
    1328:	80 91 01 01 	lds	r24, 0x0101
    132c:	18 17       	cp	r17, r24
    132e:	08 f4       	brcc	.+2      	; 0x1332 <checkTimeQueue+0xc4>
    1330:	aa cf       	rjmp	.-172    	; 0x1286 <checkTimeQueue+0x18>
				else
					TimerQueue[i].pointerFct = 0;
			}
		}
	}
	sei();
    1332:	78 94       	sei
}
    1334:	df 91       	pop	r29
    1336:	cf 91       	pop	r28
    1338:	1f 91       	pop	r17
    133a:	ff 90       	pop	r15
    133c:	ef 90       	pop	r14
    133e:	08 95       	ret

00001340 <resetTimerQueue>:

void resetTimerQueue(){
	initTimeQueue();	
    1340:	0e 94 dd 06 	call	0xdba	; 0xdba <initTimeQueue>
    1344:	08 95       	ret

00001346 <blinkLedD6_v1>:
#include "Car/Sensors.h"
#include "Car/Engines.h"
#include "PID/PID1.h"

volatile uint8_t e_stins = 0;
void blinkLedD6_v1(){
    1346:	08 95       	ret

00001348 <ledAction>:
void ledAction(char act){
	//char msg[] = "led action:  ";
	//msg[strlen(msg)-1]= act+'0';
	//BTTransmitStr(msg);
	
	switch(act){
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	69 f0       	breq	.+26     	; 0x1366 <ledAction+0x1e>
    134c:	18 f0       	brcs	.+6      	; 0x1354 <ledAction+0xc>
    134e:	82 30       	cpi	r24, 0x02	; 2
    1350:	99 f0       	breq	.+38     	; 0x1378 <ledAction+0x30>
    1352:	08 95       	ret
		case 0:
			removeEntryFromTimerQueue(&blinkLedD6_v1);
    1354:	83 ea       	ldi	r24, 0xA3	; 163
    1356:	99 e0       	ldi	r25, 0x09	; 9
    1358:	0e 94 f8 07 	call	0xff0	; 0xff0 <removeEntryFromTimerQueue>
			//PORTD &=~ (1<<PIND2);
			//shouldBlink = 0;
			BTTransmitStr("ledul a fost stins.");
    135c:	81 e4       	ldi	r24, 0x41	; 65
    135e:	93 e0       	ldi	r25, 0x03	; 3
    1360:	0e 94 f5 00 	call	0x1ea	; 0x1ea <BTTransmitStr>
			break;
    1364:	08 95       	ret
		case 1:
			removeEntryFromTimerQueue(&blinkLedD6_v1);
    1366:	83 ea       	ldi	r24, 0xA3	; 163
    1368:	99 e0       	ldi	r25, 0x09	; 9
    136a:	0e 94 f8 07 	call	0xff0	; 0xff0 <removeEntryFromTimerQueue>
			//PORTD |= 1<<PIND2;
			//shouldBlink = 0;
			BTTransmitStr("ledul a fost aprins.");
    136e:	85 e5       	ldi	r24, 0x55	; 85
    1370:	93 e0       	ldi	r25, 0x03	; 3
    1372:	0e 94 f5 00 	call	0x1ea	; 0x1ea <BTTransmitStr>
			break;
    1376:	08 95       	ret
		
		case 2:
			e_stins = 0;
    1378:	10 92 e0 03 	sts	0x03E0, r1
			addEntryToTimerQueue(&blinkLedD6_v1, (1000UL * 1000UL), Periodic);
    137c:	21 e0       	ldi	r18, 0x01	; 1
    137e:	40 e4       	ldi	r20, 0x40	; 64
    1380:	52 e4       	ldi	r21, 0x42	; 66
    1382:	6f e0       	ldi	r22, 0x0F	; 15
    1384:	70 e0       	ldi	r23, 0x00	; 0
    1386:	83 ea       	ldi	r24, 0xA3	; 163
    1388:	99 e0       	ldi	r25, 0x09	; 9
    138a:	0e 94 f7 06 	call	0xdee	; 0xdee <addEntryToTimerQueue>
			BTTransmitStr("ledul va 'blincari'.");
    138e:	8a e6       	ldi	r24, 0x6A	; 106
    1390:	93 e0       	ldi	r25, 0x03	; 3
    1392:	0e 94 f5 00 	call	0x1ea	; 0x1ea <BTTransmitStr>
    1396:	08 95       	ret

00001398 <initLeds>:
			break;
	}
}

void initLeds(){	
    1398:	08 95       	ret

0000139a <__tablejump2__>:
    139a:	ee 0f       	add	r30, r30
    139c:	ff 1f       	adc	r31, r31

0000139e <__tablejump__>:
    139e:	05 90       	lpm	r0, Z+
    13a0:	f4 91       	lpm	r31, Z
    13a2:	e0 2d       	mov	r30, r0
    13a4:	09 94       	ijmp

000013a6 <__umulhisi3>:
    13a6:	a2 9f       	mul	r26, r18
    13a8:	b0 01       	movw	r22, r0
    13aa:	b3 9f       	mul	r27, r19
    13ac:	c0 01       	movw	r24, r0
    13ae:	a3 9f       	mul	r26, r19
    13b0:	70 0d       	add	r23, r0
    13b2:	81 1d       	adc	r24, r1
    13b4:	11 24       	eor	r1, r1
    13b6:	91 1d       	adc	r25, r1
    13b8:	b2 9f       	mul	r27, r18
    13ba:	70 0d       	add	r23, r0
    13bc:	81 1d       	adc	r24, r1
    13be:	11 24       	eor	r1, r1
    13c0:	91 1d       	adc	r25, r1
    13c2:	08 95       	ret

000013c4 <__muluhisi3>:
    13c4:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__umulhisi3>
    13c8:	a5 9f       	mul	r26, r21
    13ca:	90 0d       	add	r25, r0
    13cc:	b4 9f       	mul	r27, r20
    13ce:	90 0d       	add	r25, r0
    13d0:	a4 9f       	mul	r26, r20
    13d2:	80 0d       	add	r24, r0
    13d4:	91 1d       	adc	r25, r1
    13d6:	11 24       	eor	r1, r1
    13d8:	08 95       	ret

000013da <printf>:
    13da:	a0 e0       	ldi	r26, 0x00	; 0
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e3 ef       	ldi	r30, 0xF3	; 243
    13e0:	f9 e0       	ldi	r31, 0x09	; 9
    13e2:	0c 94 ab 0c 	jmp	0x1956	; 0x1956 <__prologue_saves__+0x20>
    13e6:	fe 01       	movw	r30, r28
    13e8:	35 96       	adiw	r30, 0x05	; 5
    13ea:	61 91       	ld	r22, Z+
    13ec:	71 91       	ld	r23, Z+
    13ee:	af 01       	movw	r20, r30
    13f0:	80 91 f5 04 	lds	r24, 0x04F5
    13f4:	90 91 f6 04 	lds	r25, 0x04F6
    13f8:	0e 94 23 0a 	call	0x1446	; 0x1446 <vfprintf>
    13fc:	e2 e0       	ldi	r30, 0x02	; 2
    13fe:	0c 94 c7 0c 	jmp	0x198e	; 0x198e <__epilogue_restores__+0x20>

00001402 <sprintf>:
    1402:	ae e0       	ldi	r26, 0x0E	; 14
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e7 e0       	ldi	r30, 0x07	; 7
    1408:	fa e0       	ldi	r31, 0x0A	; 10
    140a:	0c 94 a9 0c 	jmp	0x1952	; 0x1952 <__prologue_saves__+0x1c>
    140e:	0d 89       	ldd	r16, Y+21	; 0x15
    1410:	1e 89       	ldd	r17, Y+22	; 0x16
    1412:	86 e0       	ldi	r24, 0x06	; 6
    1414:	8c 83       	std	Y+4, r24	; 0x04
    1416:	1a 83       	std	Y+2, r17	; 0x02
    1418:	09 83       	std	Y+1, r16	; 0x01
    141a:	8f ef       	ldi	r24, 0xFF	; 255
    141c:	9f e7       	ldi	r25, 0x7F	; 127
    141e:	9e 83       	std	Y+6, r25	; 0x06
    1420:	8d 83       	std	Y+5, r24	; 0x05
    1422:	ae 01       	movw	r20, r28
    1424:	47 5e       	subi	r20, 0xE7	; 231
    1426:	5f 4f       	sbci	r21, 0xFF	; 255
    1428:	6f 89       	ldd	r22, Y+23	; 0x17
    142a:	78 8d       	ldd	r23, Y+24	; 0x18
    142c:	ce 01       	movw	r24, r28
    142e:	01 96       	adiw	r24, 0x01	; 1
    1430:	0e 94 23 0a 	call	0x1446	; 0x1446 <vfprintf>
    1434:	ef 81       	ldd	r30, Y+7	; 0x07
    1436:	f8 85       	ldd	r31, Y+8	; 0x08
    1438:	e0 0f       	add	r30, r16
    143a:	f1 1f       	adc	r31, r17
    143c:	10 82       	st	Z, r1
    143e:	2e 96       	adiw	r28, 0x0e	; 14
    1440:	e4 e0       	ldi	r30, 0x04	; 4
    1442:	0c 94 c5 0c 	jmp	0x198a	; 0x198a <__epilogue_restores__+0x1c>

00001446 <vfprintf>:
    1446:	ac e0       	ldi	r26, 0x0C	; 12
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e9 e2       	ldi	r30, 0x29	; 41
    144c:	fa e0       	ldi	r31, 0x0A	; 10
    144e:	0c 94 9b 0c 	jmp	0x1936	; 0x1936 <__prologue_saves__>
    1452:	7c 01       	movw	r14, r24
    1454:	6b 01       	movw	r12, r22
    1456:	8a 01       	movw	r16, r20
    1458:	fc 01       	movw	r30, r24
    145a:	17 82       	std	Z+7, r1	; 0x07
    145c:	16 82       	std	Z+6, r1	; 0x06
    145e:	83 81       	ldd	r24, Z+3	; 0x03
    1460:	81 ff       	sbrs	r24, 1
    1462:	bd c1       	rjmp	.+890    	; 0x17de <vfprintf+0x398>
    1464:	ce 01       	movw	r24, r28
    1466:	01 96       	adiw	r24, 0x01	; 1
    1468:	4c 01       	movw	r8, r24
    146a:	f7 01       	movw	r30, r14
    146c:	93 81       	ldd	r25, Z+3	; 0x03
    146e:	f6 01       	movw	r30, r12
    1470:	93 fd       	sbrc	r25, 3
    1472:	85 91       	lpm	r24, Z+
    1474:	93 ff       	sbrs	r25, 3
    1476:	81 91       	ld	r24, Z+
    1478:	6f 01       	movw	r12, r30
    147a:	88 23       	and	r24, r24
    147c:	09 f4       	brne	.+2      	; 0x1480 <vfprintf+0x3a>
    147e:	ab c1       	rjmp	.+854    	; 0x17d6 <vfprintf+0x390>
    1480:	85 32       	cpi	r24, 0x25	; 37
    1482:	39 f4       	brne	.+14     	; 0x1492 <vfprintf+0x4c>
    1484:	93 fd       	sbrc	r25, 3
    1486:	85 91       	lpm	r24, Z+
    1488:	93 ff       	sbrs	r25, 3
    148a:	81 91       	ld	r24, Z+
    148c:	6f 01       	movw	r12, r30
    148e:	85 32       	cpi	r24, 0x25	; 37
    1490:	29 f4       	brne	.+10     	; 0x149c <vfprintf+0x56>
    1492:	b7 01       	movw	r22, r14
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	0e 94 0b 0c 	call	0x1816	; 0x1816 <fputc>
    149a:	e7 cf       	rjmp	.-50     	; 0x146a <vfprintf+0x24>
    149c:	51 2c       	mov	r5, r1
    149e:	31 2c       	mov	r3, r1
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	20 32       	cpi	r18, 0x20	; 32
    14a4:	a0 f4       	brcc	.+40     	; 0x14ce <vfprintf+0x88>
    14a6:	8b 32       	cpi	r24, 0x2B	; 43
    14a8:	69 f0       	breq	.+26     	; 0x14c4 <vfprintf+0x7e>
    14aa:	30 f4       	brcc	.+12     	; 0x14b8 <vfprintf+0x72>
    14ac:	80 32       	cpi	r24, 0x20	; 32
    14ae:	59 f0       	breq	.+22     	; 0x14c6 <vfprintf+0x80>
    14b0:	83 32       	cpi	r24, 0x23	; 35
    14b2:	69 f4       	brne	.+26     	; 0x14ce <vfprintf+0x88>
    14b4:	20 61       	ori	r18, 0x10	; 16
    14b6:	2c c0       	rjmp	.+88     	; 0x1510 <vfprintf+0xca>
    14b8:	8d 32       	cpi	r24, 0x2D	; 45
    14ba:	39 f0       	breq	.+14     	; 0x14ca <vfprintf+0x84>
    14bc:	80 33       	cpi	r24, 0x30	; 48
    14be:	39 f4       	brne	.+14     	; 0x14ce <vfprintf+0x88>
    14c0:	21 60       	ori	r18, 0x01	; 1
    14c2:	26 c0       	rjmp	.+76     	; 0x1510 <vfprintf+0xca>
    14c4:	22 60       	ori	r18, 0x02	; 2
    14c6:	24 60       	ori	r18, 0x04	; 4
    14c8:	23 c0       	rjmp	.+70     	; 0x1510 <vfprintf+0xca>
    14ca:	28 60       	ori	r18, 0x08	; 8
    14cc:	21 c0       	rjmp	.+66     	; 0x1510 <vfprintf+0xca>
    14ce:	27 fd       	sbrc	r18, 7
    14d0:	27 c0       	rjmp	.+78     	; 0x1520 <vfprintf+0xda>
    14d2:	30 ed       	ldi	r19, 0xD0	; 208
    14d4:	38 0f       	add	r19, r24
    14d6:	3a 30       	cpi	r19, 0x0A	; 10
    14d8:	78 f4       	brcc	.+30     	; 0x14f8 <vfprintf+0xb2>
    14da:	26 ff       	sbrs	r18, 6
    14dc:	06 c0       	rjmp	.+12     	; 0x14ea <vfprintf+0xa4>
    14de:	fa e0       	ldi	r31, 0x0A	; 10
    14e0:	5f 9e       	mul	r5, r31
    14e2:	30 0d       	add	r19, r0
    14e4:	11 24       	eor	r1, r1
    14e6:	53 2e       	mov	r5, r19
    14e8:	13 c0       	rjmp	.+38     	; 0x1510 <vfprintf+0xca>
    14ea:	8a e0       	ldi	r24, 0x0A	; 10
    14ec:	38 9e       	mul	r3, r24
    14ee:	30 0d       	add	r19, r0
    14f0:	11 24       	eor	r1, r1
    14f2:	33 2e       	mov	r3, r19
    14f4:	20 62       	ori	r18, 0x20	; 32
    14f6:	0c c0       	rjmp	.+24     	; 0x1510 <vfprintf+0xca>
    14f8:	8e 32       	cpi	r24, 0x2E	; 46
    14fa:	21 f4       	brne	.+8      	; 0x1504 <vfprintf+0xbe>
    14fc:	26 fd       	sbrc	r18, 6
    14fe:	6b c1       	rjmp	.+726    	; 0x17d6 <vfprintf+0x390>
    1500:	20 64       	ori	r18, 0x40	; 64
    1502:	06 c0       	rjmp	.+12     	; 0x1510 <vfprintf+0xca>
    1504:	8c 36       	cpi	r24, 0x6C	; 108
    1506:	11 f4       	brne	.+4      	; 0x150c <vfprintf+0xc6>
    1508:	20 68       	ori	r18, 0x80	; 128
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <vfprintf+0xca>
    150c:	88 36       	cpi	r24, 0x68	; 104
    150e:	41 f4       	brne	.+16     	; 0x1520 <vfprintf+0xda>
    1510:	f6 01       	movw	r30, r12
    1512:	93 fd       	sbrc	r25, 3
    1514:	85 91       	lpm	r24, Z+
    1516:	93 ff       	sbrs	r25, 3
    1518:	81 91       	ld	r24, Z+
    151a:	6f 01       	movw	r12, r30
    151c:	81 11       	cpse	r24, r1
    151e:	c1 cf       	rjmp	.-126    	; 0x14a2 <vfprintf+0x5c>
    1520:	98 2f       	mov	r25, r24
    1522:	9f 7d       	andi	r25, 0xDF	; 223
    1524:	95 54       	subi	r25, 0x45	; 69
    1526:	93 30       	cpi	r25, 0x03	; 3
    1528:	28 f4       	brcc	.+10     	; 0x1534 <vfprintf+0xee>
    152a:	0c 5f       	subi	r16, 0xFC	; 252
    152c:	1f 4f       	sbci	r17, 0xFF	; 255
    152e:	ff e3       	ldi	r31, 0x3F	; 63
    1530:	f9 83       	std	Y+1, r31	; 0x01
    1532:	0d c0       	rjmp	.+26     	; 0x154e <vfprintf+0x108>
    1534:	83 36       	cpi	r24, 0x63	; 99
    1536:	31 f0       	breq	.+12     	; 0x1544 <vfprintf+0xfe>
    1538:	83 37       	cpi	r24, 0x73	; 115
    153a:	71 f0       	breq	.+28     	; 0x1558 <vfprintf+0x112>
    153c:	83 35       	cpi	r24, 0x53	; 83
    153e:	09 f0       	breq	.+2      	; 0x1542 <vfprintf+0xfc>
    1540:	5b c0       	rjmp	.+182    	; 0x15f8 <vfprintf+0x1b2>
    1542:	22 c0       	rjmp	.+68     	; 0x1588 <vfprintf+0x142>
    1544:	f8 01       	movw	r30, r16
    1546:	80 81       	ld	r24, Z
    1548:	89 83       	std	Y+1, r24	; 0x01
    154a:	0e 5f       	subi	r16, 0xFE	; 254
    154c:	1f 4f       	sbci	r17, 0xFF	; 255
    154e:	44 24       	eor	r4, r4
    1550:	43 94       	inc	r4
    1552:	51 2c       	mov	r5, r1
    1554:	54 01       	movw	r10, r8
    1556:	15 c0       	rjmp	.+42     	; 0x1582 <vfprintf+0x13c>
    1558:	38 01       	movw	r6, r16
    155a:	f2 e0       	ldi	r31, 0x02	; 2
    155c:	6f 0e       	add	r6, r31
    155e:	71 1c       	adc	r7, r1
    1560:	f8 01       	movw	r30, r16
    1562:	a0 80       	ld	r10, Z
    1564:	b1 80       	ldd	r11, Z+1	; 0x01
    1566:	26 ff       	sbrs	r18, 6
    1568:	03 c0       	rjmp	.+6      	; 0x1570 <vfprintf+0x12a>
    156a:	65 2d       	mov	r22, r5
    156c:	70 e0       	ldi	r23, 0x00	; 0
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <vfprintf+0x12e>
    1570:	6f ef       	ldi	r22, 0xFF	; 255
    1572:	7f ef       	ldi	r23, 0xFF	; 255
    1574:	c5 01       	movw	r24, r10
    1576:	2c 87       	std	Y+12, r18	; 0x0c
    1578:	0e 94 00 0c 	call	0x1800	; 0x1800 <strnlen>
    157c:	2c 01       	movw	r4, r24
    157e:	83 01       	movw	r16, r6
    1580:	2c 85       	ldd	r18, Y+12	; 0x0c
    1582:	2f 77       	andi	r18, 0x7F	; 127
    1584:	22 2e       	mov	r2, r18
    1586:	17 c0       	rjmp	.+46     	; 0x15b6 <vfprintf+0x170>
    1588:	38 01       	movw	r6, r16
    158a:	f2 e0       	ldi	r31, 0x02	; 2
    158c:	6f 0e       	add	r6, r31
    158e:	71 1c       	adc	r7, r1
    1590:	f8 01       	movw	r30, r16
    1592:	a0 80       	ld	r10, Z
    1594:	b1 80       	ldd	r11, Z+1	; 0x01
    1596:	26 ff       	sbrs	r18, 6
    1598:	03 c0       	rjmp	.+6      	; 0x15a0 <vfprintf+0x15a>
    159a:	65 2d       	mov	r22, r5
    159c:	70 e0       	ldi	r23, 0x00	; 0
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <vfprintf+0x15e>
    15a0:	6f ef       	ldi	r22, 0xFF	; 255
    15a2:	7f ef       	ldi	r23, 0xFF	; 255
    15a4:	c5 01       	movw	r24, r10
    15a6:	2c 87       	std	Y+12, r18	; 0x0c
    15a8:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <strnlen_P>
    15ac:	2c 01       	movw	r4, r24
    15ae:	2c 85       	ldd	r18, Y+12	; 0x0c
    15b0:	20 68       	ori	r18, 0x80	; 128
    15b2:	22 2e       	mov	r2, r18
    15b4:	83 01       	movw	r16, r6
    15b6:	23 fc       	sbrc	r2, 3
    15b8:	1b c0       	rjmp	.+54     	; 0x15f0 <vfprintf+0x1aa>
    15ba:	83 2d       	mov	r24, r3
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	48 16       	cp	r4, r24
    15c0:	59 06       	cpc	r5, r25
    15c2:	b0 f4       	brcc	.+44     	; 0x15f0 <vfprintf+0x1aa>
    15c4:	b7 01       	movw	r22, r14
    15c6:	80 e2       	ldi	r24, 0x20	; 32
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	0e 94 0b 0c 	call	0x1816	; 0x1816 <fputc>
    15ce:	3a 94       	dec	r3
    15d0:	f4 cf       	rjmp	.-24     	; 0x15ba <vfprintf+0x174>
    15d2:	f5 01       	movw	r30, r10
    15d4:	27 fc       	sbrc	r2, 7
    15d6:	85 91       	lpm	r24, Z+
    15d8:	27 fe       	sbrs	r2, 7
    15da:	81 91       	ld	r24, Z+
    15dc:	5f 01       	movw	r10, r30
    15de:	b7 01       	movw	r22, r14
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	0e 94 0b 0c 	call	0x1816	; 0x1816 <fputc>
    15e6:	31 10       	cpse	r3, r1
    15e8:	3a 94       	dec	r3
    15ea:	f1 e0       	ldi	r31, 0x01	; 1
    15ec:	4f 1a       	sub	r4, r31
    15ee:	51 08       	sbc	r5, r1
    15f0:	41 14       	cp	r4, r1
    15f2:	51 04       	cpc	r5, r1
    15f4:	71 f7       	brne	.-36     	; 0x15d2 <vfprintf+0x18c>
    15f6:	e5 c0       	rjmp	.+458    	; 0x17c2 <vfprintf+0x37c>
    15f8:	84 36       	cpi	r24, 0x64	; 100
    15fa:	11 f0       	breq	.+4      	; 0x1600 <vfprintf+0x1ba>
    15fc:	89 36       	cpi	r24, 0x69	; 105
    15fe:	39 f5       	brne	.+78     	; 0x164e <vfprintf+0x208>
    1600:	f8 01       	movw	r30, r16
    1602:	27 ff       	sbrs	r18, 7
    1604:	07 c0       	rjmp	.+14     	; 0x1614 <vfprintf+0x1ce>
    1606:	60 81       	ld	r22, Z
    1608:	71 81       	ldd	r23, Z+1	; 0x01
    160a:	82 81       	ldd	r24, Z+2	; 0x02
    160c:	93 81       	ldd	r25, Z+3	; 0x03
    160e:	0c 5f       	subi	r16, 0xFC	; 252
    1610:	1f 4f       	sbci	r17, 0xFF	; 255
    1612:	08 c0       	rjmp	.+16     	; 0x1624 <vfprintf+0x1de>
    1614:	60 81       	ld	r22, Z
    1616:	71 81       	ldd	r23, Z+1	; 0x01
    1618:	88 27       	eor	r24, r24
    161a:	77 fd       	sbrc	r23, 7
    161c:	80 95       	com	r24
    161e:	98 2f       	mov	r25, r24
    1620:	0e 5f       	subi	r16, 0xFE	; 254
    1622:	1f 4f       	sbci	r17, 0xFF	; 255
    1624:	2f 76       	andi	r18, 0x6F	; 111
    1626:	b2 2e       	mov	r11, r18
    1628:	97 ff       	sbrs	r25, 7
    162a:	09 c0       	rjmp	.+18     	; 0x163e <vfprintf+0x1f8>
    162c:	90 95       	com	r25
    162e:	80 95       	com	r24
    1630:	70 95       	com	r23
    1632:	61 95       	neg	r22
    1634:	7f 4f       	sbci	r23, 0xFF	; 255
    1636:	8f 4f       	sbci	r24, 0xFF	; 255
    1638:	9f 4f       	sbci	r25, 0xFF	; 255
    163a:	20 68       	ori	r18, 0x80	; 128
    163c:	b2 2e       	mov	r11, r18
    163e:	2a e0       	ldi	r18, 0x0A	; 10
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	a4 01       	movw	r20, r8
    1644:	0e 94 3d 0c 	call	0x187a	; 0x187a <__ultoa_invert>
    1648:	a8 2e       	mov	r10, r24
    164a:	a8 18       	sub	r10, r8
    164c:	44 c0       	rjmp	.+136    	; 0x16d6 <vfprintf+0x290>
    164e:	85 37       	cpi	r24, 0x75	; 117
    1650:	29 f4       	brne	.+10     	; 0x165c <vfprintf+0x216>
    1652:	2f 7e       	andi	r18, 0xEF	; 239
    1654:	b2 2e       	mov	r11, r18
    1656:	2a e0       	ldi	r18, 0x0A	; 10
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	25 c0       	rjmp	.+74     	; 0x16a6 <vfprintf+0x260>
    165c:	f2 2f       	mov	r31, r18
    165e:	f9 7f       	andi	r31, 0xF9	; 249
    1660:	bf 2e       	mov	r11, r31
    1662:	8f 36       	cpi	r24, 0x6F	; 111
    1664:	c1 f0       	breq	.+48     	; 0x1696 <vfprintf+0x250>
    1666:	18 f4       	brcc	.+6      	; 0x166e <vfprintf+0x228>
    1668:	88 35       	cpi	r24, 0x58	; 88
    166a:	79 f0       	breq	.+30     	; 0x168a <vfprintf+0x244>
    166c:	b4 c0       	rjmp	.+360    	; 0x17d6 <vfprintf+0x390>
    166e:	80 37       	cpi	r24, 0x70	; 112
    1670:	19 f0       	breq	.+6      	; 0x1678 <vfprintf+0x232>
    1672:	88 37       	cpi	r24, 0x78	; 120
    1674:	21 f0       	breq	.+8      	; 0x167e <vfprintf+0x238>
    1676:	af c0       	rjmp	.+350    	; 0x17d6 <vfprintf+0x390>
    1678:	2f 2f       	mov	r18, r31
    167a:	20 61       	ori	r18, 0x10	; 16
    167c:	b2 2e       	mov	r11, r18
    167e:	b4 fe       	sbrs	r11, 4
    1680:	0d c0       	rjmp	.+26     	; 0x169c <vfprintf+0x256>
    1682:	8b 2d       	mov	r24, r11
    1684:	84 60       	ori	r24, 0x04	; 4
    1686:	b8 2e       	mov	r11, r24
    1688:	09 c0       	rjmp	.+18     	; 0x169c <vfprintf+0x256>
    168a:	24 ff       	sbrs	r18, 4
    168c:	0a c0       	rjmp	.+20     	; 0x16a2 <vfprintf+0x25c>
    168e:	9f 2f       	mov	r25, r31
    1690:	96 60       	ori	r25, 0x06	; 6
    1692:	b9 2e       	mov	r11, r25
    1694:	06 c0       	rjmp	.+12     	; 0x16a2 <vfprintf+0x25c>
    1696:	28 e0       	ldi	r18, 0x08	; 8
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	05 c0       	rjmp	.+10     	; 0x16a6 <vfprintf+0x260>
    169c:	20 e1       	ldi	r18, 0x10	; 16
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <vfprintf+0x260>
    16a2:	20 e1       	ldi	r18, 0x10	; 16
    16a4:	32 e0       	ldi	r19, 0x02	; 2
    16a6:	f8 01       	movw	r30, r16
    16a8:	b7 fe       	sbrs	r11, 7
    16aa:	07 c0       	rjmp	.+14     	; 0x16ba <vfprintf+0x274>
    16ac:	60 81       	ld	r22, Z
    16ae:	71 81       	ldd	r23, Z+1	; 0x01
    16b0:	82 81       	ldd	r24, Z+2	; 0x02
    16b2:	93 81       	ldd	r25, Z+3	; 0x03
    16b4:	0c 5f       	subi	r16, 0xFC	; 252
    16b6:	1f 4f       	sbci	r17, 0xFF	; 255
    16b8:	06 c0       	rjmp	.+12     	; 0x16c6 <vfprintf+0x280>
    16ba:	60 81       	ld	r22, Z
    16bc:	71 81       	ldd	r23, Z+1	; 0x01
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	0e 5f       	subi	r16, 0xFE	; 254
    16c4:	1f 4f       	sbci	r17, 0xFF	; 255
    16c6:	a4 01       	movw	r20, r8
    16c8:	0e 94 3d 0c 	call	0x187a	; 0x187a <__ultoa_invert>
    16cc:	a8 2e       	mov	r10, r24
    16ce:	a8 18       	sub	r10, r8
    16d0:	fb 2d       	mov	r31, r11
    16d2:	ff 77       	andi	r31, 0x7F	; 127
    16d4:	bf 2e       	mov	r11, r31
    16d6:	b6 fe       	sbrs	r11, 6
    16d8:	0b c0       	rjmp	.+22     	; 0x16f0 <vfprintf+0x2aa>
    16da:	2b 2d       	mov	r18, r11
    16dc:	2e 7f       	andi	r18, 0xFE	; 254
    16de:	a5 14       	cp	r10, r5
    16e0:	50 f4       	brcc	.+20     	; 0x16f6 <vfprintf+0x2b0>
    16e2:	b4 fe       	sbrs	r11, 4
    16e4:	0a c0       	rjmp	.+20     	; 0x16fa <vfprintf+0x2b4>
    16e6:	b2 fc       	sbrc	r11, 2
    16e8:	08 c0       	rjmp	.+16     	; 0x16fa <vfprintf+0x2b4>
    16ea:	2b 2d       	mov	r18, r11
    16ec:	2e 7e       	andi	r18, 0xEE	; 238
    16ee:	05 c0       	rjmp	.+10     	; 0x16fa <vfprintf+0x2b4>
    16f0:	7a 2c       	mov	r7, r10
    16f2:	2b 2d       	mov	r18, r11
    16f4:	03 c0       	rjmp	.+6      	; 0x16fc <vfprintf+0x2b6>
    16f6:	7a 2c       	mov	r7, r10
    16f8:	01 c0       	rjmp	.+2      	; 0x16fc <vfprintf+0x2b6>
    16fa:	75 2c       	mov	r7, r5
    16fc:	24 ff       	sbrs	r18, 4
    16fe:	0d c0       	rjmp	.+26     	; 0x171a <vfprintf+0x2d4>
    1700:	fe 01       	movw	r30, r28
    1702:	ea 0d       	add	r30, r10
    1704:	f1 1d       	adc	r31, r1
    1706:	80 81       	ld	r24, Z
    1708:	80 33       	cpi	r24, 0x30	; 48
    170a:	11 f4       	brne	.+4      	; 0x1710 <vfprintf+0x2ca>
    170c:	29 7e       	andi	r18, 0xE9	; 233
    170e:	09 c0       	rjmp	.+18     	; 0x1722 <vfprintf+0x2dc>
    1710:	22 ff       	sbrs	r18, 2
    1712:	06 c0       	rjmp	.+12     	; 0x1720 <vfprintf+0x2da>
    1714:	73 94       	inc	r7
    1716:	73 94       	inc	r7
    1718:	04 c0       	rjmp	.+8      	; 0x1722 <vfprintf+0x2dc>
    171a:	82 2f       	mov	r24, r18
    171c:	86 78       	andi	r24, 0x86	; 134
    171e:	09 f0       	breq	.+2      	; 0x1722 <vfprintf+0x2dc>
    1720:	73 94       	inc	r7
    1722:	23 fd       	sbrc	r18, 3
    1724:	13 c0       	rjmp	.+38     	; 0x174c <vfprintf+0x306>
    1726:	20 ff       	sbrs	r18, 0
    1728:	06 c0       	rjmp	.+12     	; 0x1736 <vfprintf+0x2f0>
    172a:	5a 2c       	mov	r5, r10
    172c:	73 14       	cp	r7, r3
    172e:	18 f4       	brcc	.+6      	; 0x1736 <vfprintf+0x2f0>
    1730:	53 0c       	add	r5, r3
    1732:	57 18       	sub	r5, r7
    1734:	73 2c       	mov	r7, r3
    1736:	73 14       	cp	r7, r3
    1738:	68 f4       	brcc	.+26     	; 0x1754 <vfprintf+0x30e>
    173a:	b7 01       	movw	r22, r14
    173c:	80 e2       	ldi	r24, 0x20	; 32
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	2c 87       	std	Y+12, r18	; 0x0c
    1742:	0e 94 0b 0c 	call	0x1816	; 0x1816 <fputc>
    1746:	73 94       	inc	r7
    1748:	2c 85       	ldd	r18, Y+12	; 0x0c
    174a:	f5 cf       	rjmp	.-22     	; 0x1736 <vfprintf+0x2f0>
    174c:	73 14       	cp	r7, r3
    174e:	10 f4       	brcc	.+4      	; 0x1754 <vfprintf+0x30e>
    1750:	37 18       	sub	r3, r7
    1752:	01 c0       	rjmp	.+2      	; 0x1756 <vfprintf+0x310>
    1754:	31 2c       	mov	r3, r1
    1756:	24 ff       	sbrs	r18, 4
    1758:	12 c0       	rjmp	.+36     	; 0x177e <vfprintf+0x338>
    175a:	b7 01       	movw	r22, r14
    175c:	80 e3       	ldi	r24, 0x30	; 48
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	2c 87       	std	Y+12, r18	; 0x0c
    1762:	0e 94 0b 0c 	call	0x1816	; 0x1816 <fputc>
    1766:	2c 85       	ldd	r18, Y+12	; 0x0c
    1768:	22 ff       	sbrs	r18, 2
    176a:	17 c0       	rjmp	.+46     	; 0x179a <vfprintf+0x354>
    176c:	21 ff       	sbrs	r18, 1
    176e:	03 c0       	rjmp	.+6      	; 0x1776 <vfprintf+0x330>
    1770:	88 e5       	ldi	r24, 0x58	; 88
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	02 c0       	rjmp	.+4      	; 0x177a <vfprintf+0x334>
    1776:	88 e7       	ldi	r24, 0x78	; 120
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	b7 01       	movw	r22, r14
    177c:	0c c0       	rjmp	.+24     	; 0x1796 <vfprintf+0x350>
    177e:	82 2f       	mov	r24, r18
    1780:	86 78       	andi	r24, 0x86	; 134
    1782:	59 f0       	breq	.+22     	; 0x179a <vfprintf+0x354>
    1784:	21 fd       	sbrc	r18, 1
    1786:	02 c0       	rjmp	.+4      	; 0x178c <vfprintf+0x346>
    1788:	80 e2       	ldi	r24, 0x20	; 32
    178a:	01 c0       	rjmp	.+2      	; 0x178e <vfprintf+0x348>
    178c:	8b e2       	ldi	r24, 0x2B	; 43
    178e:	27 fd       	sbrc	r18, 7
    1790:	8d e2       	ldi	r24, 0x2D	; 45
    1792:	b7 01       	movw	r22, r14
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	0e 94 0b 0c 	call	0x1816	; 0x1816 <fputc>
    179a:	a5 14       	cp	r10, r5
    179c:	38 f4       	brcc	.+14     	; 0x17ac <vfprintf+0x366>
    179e:	b7 01       	movw	r22, r14
    17a0:	80 e3       	ldi	r24, 0x30	; 48
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	0e 94 0b 0c 	call	0x1816	; 0x1816 <fputc>
    17a8:	5a 94       	dec	r5
    17aa:	f7 cf       	rjmp	.-18     	; 0x179a <vfprintf+0x354>
    17ac:	aa 94       	dec	r10
    17ae:	f4 01       	movw	r30, r8
    17b0:	ea 0d       	add	r30, r10
    17b2:	f1 1d       	adc	r31, r1
    17b4:	80 81       	ld	r24, Z
    17b6:	b7 01       	movw	r22, r14
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	0e 94 0b 0c 	call	0x1816	; 0x1816 <fputc>
    17be:	a1 10       	cpse	r10, r1
    17c0:	f5 cf       	rjmp	.-22     	; 0x17ac <vfprintf+0x366>
    17c2:	33 20       	and	r3, r3
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <vfprintf+0x382>
    17c6:	51 ce       	rjmp	.-862    	; 0x146a <vfprintf+0x24>
    17c8:	b7 01       	movw	r22, r14
    17ca:	80 e2       	ldi	r24, 0x20	; 32
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	0e 94 0b 0c 	call	0x1816	; 0x1816 <fputc>
    17d2:	3a 94       	dec	r3
    17d4:	f6 cf       	rjmp	.-20     	; 0x17c2 <vfprintf+0x37c>
    17d6:	f7 01       	movw	r30, r14
    17d8:	86 81       	ldd	r24, Z+6	; 0x06
    17da:	97 81       	ldd	r25, Z+7	; 0x07
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <vfprintf+0x39c>
    17de:	8f ef       	ldi	r24, 0xFF	; 255
    17e0:	9f ef       	ldi	r25, 0xFF	; 255
    17e2:	2c 96       	adiw	r28, 0x0c	; 12
    17e4:	e2 e1       	ldi	r30, 0x12	; 18
    17e6:	0c 94 b7 0c 	jmp	0x196e	; 0x196e <__epilogue_restores__>

000017ea <strnlen_P>:
    17ea:	fc 01       	movw	r30, r24
    17ec:	05 90       	lpm	r0, Z+
    17ee:	61 50       	subi	r22, 0x01	; 1
    17f0:	70 40       	sbci	r23, 0x00	; 0
    17f2:	01 10       	cpse	r0, r1
    17f4:	d8 f7       	brcc	.-10     	; 0x17ec <strnlen_P+0x2>
    17f6:	80 95       	com	r24
    17f8:	90 95       	com	r25
    17fa:	8e 0f       	add	r24, r30
    17fc:	9f 1f       	adc	r25, r31
    17fe:	08 95       	ret

00001800 <strnlen>:
    1800:	fc 01       	movw	r30, r24
    1802:	61 50       	subi	r22, 0x01	; 1
    1804:	70 40       	sbci	r23, 0x00	; 0
    1806:	01 90       	ld	r0, Z+
    1808:	01 10       	cpse	r0, r1
    180a:	d8 f7       	brcc	.-10     	; 0x1802 <strnlen+0x2>
    180c:	80 95       	com	r24
    180e:	90 95       	com	r25
    1810:	8e 0f       	add	r24, r30
    1812:	9f 1f       	adc	r25, r31
    1814:	08 95       	ret

00001816 <fputc>:
    1816:	0f 93       	push	r16
    1818:	1f 93       	push	r17
    181a:	cf 93       	push	r28
    181c:	df 93       	push	r29
    181e:	18 2f       	mov	r17, r24
    1820:	09 2f       	mov	r16, r25
    1822:	eb 01       	movw	r28, r22
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	81 fd       	sbrc	r24, 1
    1828:	03 c0       	rjmp	.+6      	; 0x1830 <fputc+0x1a>
    182a:	8f ef       	ldi	r24, 0xFF	; 255
    182c:	9f ef       	ldi	r25, 0xFF	; 255
    182e:	20 c0       	rjmp	.+64     	; 0x1870 <fputc+0x5a>
    1830:	82 ff       	sbrs	r24, 2
    1832:	10 c0       	rjmp	.+32     	; 0x1854 <fputc+0x3e>
    1834:	4e 81       	ldd	r20, Y+6	; 0x06
    1836:	5f 81       	ldd	r21, Y+7	; 0x07
    1838:	2c 81       	ldd	r18, Y+4	; 0x04
    183a:	3d 81       	ldd	r19, Y+5	; 0x05
    183c:	42 17       	cp	r20, r18
    183e:	53 07       	cpc	r21, r19
    1840:	7c f4       	brge	.+30     	; 0x1860 <fputc+0x4a>
    1842:	e8 81       	ld	r30, Y
    1844:	f9 81       	ldd	r31, Y+1	; 0x01
    1846:	9f 01       	movw	r18, r30
    1848:	2f 5f       	subi	r18, 0xFF	; 255
    184a:	3f 4f       	sbci	r19, 0xFF	; 255
    184c:	39 83       	std	Y+1, r19	; 0x01
    184e:	28 83       	st	Y, r18
    1850:	10 83       	st	Z, r17
    1852:	06 c0       	rjmp	.+12     	; 0x1860 <fputc+0x4a>
    1854:	e8 85       	ldd	r30, Y+8	; 0x08
    1856:	f9 85       	ldd	r31, Y+9	; 0x09
    1858:	81 2f       	mov	r24, r17
    185a:	09 95       	icall
    185c:	89 2b       	or	r24, r25
    185e:	29 f7       	brne	.-54     	; 0x182a <fputc+0x14>
    1860:	2e 81       	ldd	r18, Y+6	; 0x06
    1862:	3f 81       	ldd	r19, Y+7	; 0x07
    1864:	2f 5f       	subi	r18, 0xFF	; 255
    1866:	3f 4f       	sbci	r19, 0xFF	; 255
    1868:	3f 83       	std	Y+7, r19	; 0x07
    186a:	2e 83       	std	Y+6, r18	; 0x06
    186c:	81 2f       	mov	r24, r17
    186e:	90 2f       	mov	r25, r16
    1870:	df 91       	pop	r29
    1872:	cf 91       	pop	r28
    1874:	1f 91       	pop	r17
    1876:	0f 91       	pop	r16
    1878:	08 95       	ret

0000187a <__ultoa_invert>:
    187a:	fa 01       	movw	r30, r20
    187c:	aa 27       	eor	r26, r26
    187e:	28 30       	cpi	r18, 0x08	; 8
    1880:	51 f1       	breq	.+84     	; 0x18d6 <__ultoa_invert+0x5c>
    1882:	20 31       	cpi	r18, 0x10	; 16
    1884:	81 f1       	breq	.+96     	; 0x18e6 <__ultoa_invert+0x6c>
    1886:	e8 94       	clt
    1888:	6f 93       	push	r22
    188a:	6e 7f       	andi	r22, 0xFE	; 254
    188c:	6e 5f       	subi	r22, 0xFE	; 254
    188e:	7f 4f       	sbci	r23, 0xFF	; 255
    1890:	8f 4f       	sbci	r24, 0xFF	; 255
    1892:	9f 4f       	sbci	r25, 0xFF	; 255
    1894:	af 4f       	sbci	r26, 0xFF	; 255
    1896:	b1 e0       	ldi	r27, 0x01	; 1
    1898:	3e d0       	rcall	.+124    	; 0x1916 <__ultoa_invert+0x9c>
    189a:	b4 e0       	ldi	r27, 0x04	; 4
    189c:	3c d0       	rcall	.+120    	; 0x1916 <__ultoa_invert+0x9c>
    189e:	67 0f       	add	r22, r23
    18a0:	78 1f       	adc	r23, r24
    18a2:	89 1f       	adc	r24, r25
    18a4:	9a 1f       	adc	r25, r26
    18a6:	a1 1d       	adc	r26, r1
    18a8:	68 0f       	add	r22, r24
    18aa:	79 1f       	adc	r23, r25
    18ac:	8a 1f       	adc	r24, r26
    18ae:	91 1d       	adc	r25, r1
    18b0:	a1 1d       	adc	r26, r1
    18b2:	6a 0f       	add	r22, r26
    18b4:	71 1d       	adc	r23, r1
    18b6:	81 1d       	adc	r24, r1
    18b8:	91 1d       	adc	r25, r1
    18ba:	a1 1d       	adc	r26, r1
    18bc:	20 d0       	rcall	.+64     	; 0x18fe <__ultoa_invert+0x84>
    18be:	09 f4       	brne	.+2      	; 0x18c2 <__ultoa_invert+0x48>
    18c0:	68 94       	set
    18c2:	3f 91       	pop	r19
    18c4:	2a e0       	ldi	r18, 0x0A	; 10
    18c6:	26 9f       	mul	r18, r22
    18c8:	11 24       	eor	r1, r1
    18ca:	30 19       	sub	r19, r0
    18cc:	30 5d       	subi	r19, 0xD0	; 208
    18ce:	31 93       	st	Z+, r19
    18d0:	de f6       	brtc	.-74     	; 0x1888 <__ultoa_invert+0xe>
    18d2:	cf 01       	movw	r24, r30
    18d4:	08 95       	ret
    18d6:	46 2f       	mov	r20, r22
    18d8:	47 70       	andi	r20, 0x07	; 7
    18da:	40 5d       	subi	r20, 0xD0	; 208
    18dc:	41 93       	st	Z+, r20
    18de:	b3 e0       	ldi	r27, 0x03	; 3
    18e0:	0f d0       	rcall	.+30     	; 0x1900 <__ultoa_invert+0x86>
    18e2:	c9 f7       	brne	.-14     	; 0x18d6 <__ultoa_invert+0x5c>
    18e4:	f6 cf       	rjmp	.-20     	; 0x18d2 <__ultoa_invert+0x58>
    18e6:	46 2f       	mov	r20, r22
    18e8:	4f 70       	andi	r20, 0x0F	; 15
    18ea:	40 5d       	subi	r20, 0xD0	; 208
    18ec:	4a 33       	cpi	r20, 0x3A	; 58
    18ee:	18 f0       	brcs	.+6      	; 0x18f6 <__ultoa_invert+0x7c>
    18f0:	49 5d       	subi	r20, 0xD9	; 217
    18f2:	31 fd       	sbrc	r19, 1
    18f4:	40 52       	subi	r20, 0x20	; 32
    18f6:	41 93       	st	Z+, r20
    18f8:	02 d0       	rcall	.+4      	; 0x18fe <__ultoa_invert+0x84>
    18fa:	a9 f7       	brne	.-22     	; 0x18e6 <__ultoa_invert+0x6c>
    18fc:	ea cf       	rjmp	.-44     	; 0x18d2 <__ultoa_invert+0x58>
    18fe:	b4 e0       	ldi	r27, 0x04	; 4
    1900:	a6 95       	lsr	r26
    1902:	97 95       	ror	r25
    1904:	87 95       	ror	r24
    1906:	77 95       	ror	r23
    1908:	67 95       	ror	r22
    190a:	ba 95       	dec	r27
    190c:	c9 f7       	brne	.-14     	; 0x1900 <__ultoa_invert+0x86>
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	61 05       	cpc	r22, r1
    1912:	71 05       	cpc	r23, r1
    1914:	08 95       	ret
    1916:	9b 01       	movw	r18, r22
    1918:	ac 01       	movw	r20, r24
    191a:	0a 2e       	mov	r0, r26
    191c:	06 94       	lsr	r0
    191e:	57 95       	ror	r21
    1920:	47 95       	ror	r20
    1922:	37 95       	ror	r19
    1924:	27 95       	ror	r18
    1926:	ba 95       	dec	r27
    1928:	c9 f7       	brne	.-14     	; 0x191c <__ultoa_invert+0xa2>
    192a:	62 0f       	add	r22, r18
    192c:	73 1f       	adc	r23, r19
    192e:	84 1f       	adc	r24, r20
    1930:	95 1f       	adc	r25, r21
    1932:	a0 1d       	adc	r26, r0
    1934:	08 95       	ret

00001936 <__prologue_saves__>:
    1936:	2f 92       	push	r2
    1938:	3f 92       	push	r3
    193a:	4f 92       	push	r4
    193c:	5f 92       	push	r5
    193e:	6f 92       	push	r6
    1940:	7f 92       	push	r7
    1942:	8f 92       	push	r8
    1944:	9f 92       	push	r9
    1946:	af 92       	push	r10
    1948:	bf 92       	push	r11
    194a:	cf 92       	push	r12
    194c:	df 92       	push	r13
    194e:	ef 92       	push	r14
    1950:	ff 92       	push	r15
    1952:	0f 93       	push	r16
    1954:	1f 93       	push	r17
    1956:	cf 93       	push	r28
    1958:	df 93       	push	r29
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62
    195e:	ca 1b       	sub	r28, r26
    1960:	db 0b       	sbc	r29, r27
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	f8 94       	cli
    1966:	de bf       	out	0x3e, r29	; 62
    1968:	0f be       	out	0x3f, r0	; 63
    196a:	cd bf       	out	0x3d, r28	; 61
    196c:	09 94       	ijmp

0000196e <__epilogue_restores__>:
    196e:	2a 88       	ldd	r2, Y+18	; 0x12
    1970:	39 88       	ldd	r3, Y+17	; 0x11
    1972:	48 88       	ldd	r4, Y+16	; 0x10
    1974:	5f 84       	ldd	r5, Y+15	; 0x0f
    1976:	6e 84       	ldd	r6, Y+14	; 0x0e
    1978:	7d 84       	ldd	r7, Y+13	; 0x0d
    197a:	8c 84       	ldd	r8, Y+12	; 0x0c
    197c:	9b 84       	ldd	r9, Y+11	; 0x0b
    197e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1980:	b9 84       	ldd	r11, Y+9	; 0x09
    1982:	c8 84       	ldd	r12, Y+8	; 0x08
    1984:	df 80       	ldd	r13, Y+7	; 0x07
    1986:	ee 80       	ldd	r14, Y+6	; 0x06
    1988:	fd 80       	ldd	r15, Y+5	; 0x05
    198a:	0c 81       	ldd	r16, Y+4	; 0x04
    198c:	1b 81       	ldd	r17, Y+3	; 0x03
    198e:	aa 81       	ldd	r26, Y+2	; 0x02
    1990:	b9 81       	ldd	r27, Y+1	; 0x01
    1992:	ce 0f       	add	r28, r30
    1994:	d1 1d       	adc	r29, r1
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	f8 94       	cli
    199a:	de bf       	out	0x3e, r29	; 62
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	cd bf       	out	0x3d, r28	; 61
    19a0:	ed 01       	movw	r28, r26
    19a2:	08 95       	ret

000019a4 <_exit>:
    19a4:	f8 94       	cli

000019a6 <__stop_program>:
    19a6:	ff cf       	rjmp	.-2      	; 0x19a6 <__stop_program>
