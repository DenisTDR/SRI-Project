
SRI Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000030c  00800100  00001f08  00001f9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013d  0080040c  0080040c  000022a8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000022a8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002e8  00000000  00000000  00002304  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002e89  00000000  00000000  000025ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e38  00000000  00000000  00005475  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000010bf  00000000  00000000  000062ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000009a0  00000000  00000000  0000736c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a9d  00000000  00000000  00007d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002309  00000000  00000000  000087a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002a0  00000000  00000000  0000aab2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__ctors_end>
       4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
       8:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
       c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      10:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      14:	0c 94 1c 02 	jmp	0x438	; 0x438 <__vector_5>
      18:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      1c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      20:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      24:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      28:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      2c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      30:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      34:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      38:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      3c:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <__vector_15>
      40:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      44:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      48:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      4c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      50:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__vector_20>
      54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      58:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      5c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      60:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      64:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      68:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      6c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      70:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      74:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      78:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      7c:	fb 00       	.word	0x00fb	; ????
      7e:	ce 00       	.word	0x00ce	; ????
      80:	d1 00       	.word	0x00d1	; ????
      82:	12 01       	movw	r2, r4
      84:	12 01       	movw	r2, r4
      86:	12 01       	movw	r2, r4
      88:	12 01       	movw	r2, r4
      8a:	12 01       	movw	r2, r4
      8c:	12 01       	movw	r2, r4
      8e:	12 01       	movw	r2, r4
      90:	12 01       	movw	r2, r4
      92:	12 01       	movw	r2, r4
      94:	12 01       	movw	r2, r4
      96:	f1 00       	.word	0x00f1	; ????
      98:	d4 00       	.word	0x00d4	; ????
      9a:	d9 00       	.word	0x00d9	; ????
      9c:	de 00       	.word	0x00de	; ????
      9e:	e9 00       	.word	0x00e9	; ????
      a0:	e1 00       	.word	0x00e1	; ????
      a2:	0e 01       	movw	r0, r28
      a4:	09 01       	movw	r0, r18
      a6:	f7 07       	cpc	r31, r23
      a8:	ff 07       	cpc	r31, r31
      aa:	72 08       	sbc	r7, r2
      ac:	6a 08       	sbc	r6, r10
      ae:	5f 08       	sbc	r5, r15
      b0:	07 08       	sbc	r0, r7
      b2:	47 08       	sbc	r4, r7
      b4:	58 08       	sbc	r5, r8
      b6:	81 08       	sbc	r8, r1

000000b8 <__ctors_end>:
      b8:	11 24       	eor	r1, r1
      ba:	1f be       	out	0x3f, r1	; 63
      bc:	cf ef       	ldi	r28, 0xFF	; 255
      be:	d0 e1       	ldi	r29, 0x10	; 16
      c0:	de bf       	out	0x3e, r29	; 62
      c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_copy_data>:
      c4:	14 e0       	ldi	r17, 0x04	; 4
      c6:	a0 e0       	ldi	r26, 0x00	; 0
      c8:	b1 e0       	ldi	r27, 0x01	; 1
      ca:	e8 e0       	ldi	r30, 0x08	; 8
      cc:	ff e1       	ldi	r31, 0x1F	; 31
      ce:	02 c0       	rjmp	.+4      	; 0xd4 <__do_copy_data+0x10>
      d0:	05 90       	lpm	r0, Z+
      d2:	0d 92       	st	X+, r0
      d4:	ac 30       	cpi	r26, 0x0C	; 12
      d6:	b1 07       	cpc	r27, r17
      d8:	d9 f7       	brne	.-10     	; 0xd0 <__do_copy_data+0xc>

000000da <__do_clear_bss>:
      da:	25 e0       	ldi	r18, 0x05	; 5
      dc:	ac e0       	ldi	r26, 0x0C	; 12
      de:	b4 e0       	ldi	r27, 0x04	; 4
      e0:	01 c0       	rjmp	.+2      	; 0xe4 <.do_clear_bss_start>

000000e2 <.do_clear_bss_loop>:
      e2:	1d 92       	st	X+, r1

000000e4 <.do_clear_bss_start>:
      e4:	a9 34       	cpi	r26, 0x49	; 73
      e6:	b2 07       	cpc	r27, r18
      e8:	e1 f7       	brne	.-8      	; 0xe2 <.do_clear_bss_loop>
      ea:	0e 94 a0 08 	call	0x1140	; 0x1140 <main>
      ee:	0c 94 82 0f 	jmp	0x1f04	; 0x1f04 <_exit>

000000f2 <__bad_interrupt>:
      f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f6 <prelucreazaDatele>:
	sei();
	//printf("\nstare noua %d: ", state);
}
extern volatile uint8_t ms2p1_enabled;

void prelucreazaDatele(void){
      f6:	cf 93       	push	r28
      f8:	df 93       	push	r29
	
	//BTTransmitStr("Procesez ceva!");
	//cli();
	if(actiune >= GoFront && actiune <= GoRightB){
      fa:	80 91 19 04 	lds	r24, 0x0419
      fe:	9f ef       	ldi	r25, 0xFF	; 255
     100:	98 0f       	add	r25, r24
     102:	96 30       	cpi	r25, 0x06	; 6
     104:	08 f0       	brcs	.+2      	; 0x108 <prelucreazaDatele+0x12>
     106:	3f c0       	rjmp	.+126    	; 0x186 <prelucreazaDatele+0x90>
		unsigned char timp = date[0];
     108:	c0 91 1a 04 	lds	r28, 0x041A
		unsigned char viteza = date[1];
     10c:	d0 91 1b 04 	lds	r29, 0x041B
		if(dateCrtIndex == 3)
     110:	90 91 18 04 	lds	r25, 0x0418
     114:	93 30       	cpi	r25, 0x03	; 3
     116:	11 f4       	brne	.+4      	; 0x11c <prelucreazaDatele+0x26>
			toggleDebuggingOff();
     118:	0e 94 b6 08 	call	0x116c	; 0x116c <toggleDebuggingOff>
		switch(actiune){
     11c:	90 91 19 04 	lds	r25, 0x0419
     120:	93 30       	cpi	r25, 0x03	; 3
     122:	b1 f0       	breq	.+44     	; 0x150 <prelucreazaDatele+0x5a>
     124:	28 f4       	brcc	.+10     	; 0x130 <prelucreazaDatele+0x3a>
     126:	91 30       	cpi	r25, 0x01	; 1
     128:	49 f0       	breq	.+18     	; 0x13c <prelucreazaDatele+0x46>
     12a:	92 30       	cpi	r25, 0x02	; 2
     12c:	61 f0       	breq	.+24     	; 0x146 <prelucreazaDatele+0x50>
     12e:	23 c0       	rjmp	.+70     	; 0x176 <prelucreazaDatele+0x80>
     130:	95 30       	cpi	r25, 0x05	; 5
     132:	99 f0       	breq	.+38     	; 0x15a <prelucreazaDatele+0x64>
     134:	b8 f0       	brcs	.+46     	; 0x164 <prelucreazaDatele+0x6e>
     136:	96 30       	cpi	r25, 0x06	; 6
     138:	d1 f0       	breq	.+52     	; 0x16e <prelucreazaDatele+0x78>
     13a:	1d c0       	rjmp	.+58     	; 0x176 <prelucreazaDatele+0x80>
			case GoFront:
			goFront(timp, viteza);
     13c:	6d 2f       	mov	r22, r29
     13e:	8c 2f       	mov	r24, r28
     140:	0e 94 71 03 	call	0x6e2	; 0x6e2 <goFront>
			break;
     144:	18 c0       	rjmp	.+48     	; 0x176 <prelucreazaDatele+0x80>
			case GoBack:
			goBack(timp, viteza);
     146:	6d 2f       	mov	r22, r29
     148:	8c 2f       	mov	r24, r28
     14a:	0e 94 9d 03 	call	0x73a	; 0x73a <goBack>
			break;
     14e:	13 c0       	rjmp	.+38     	; 0x176 <prelucreazaDatele+0x80>
			case GoLeftF:
			goFrontLeft(timp, viteza);
     150:	6d 2f       	mov	r22, r29
     152:	8c 2f       	mov	r24, r28
     154:	0e 94 c9 03 	call	0x792	; 0x792 <goFrontLeft>
			break;
     158:	0e c0       	rjmp	.+28     	; 0x176 <prelucreazaDatele+0x80>
			case GoLeftB:
			goBackLeft(timp, viteza);
     15a:	6d 2f       	mov	r22, r29
     15c:	8c 2f       	mov	r24, r28
     15e:	0e 94 1e 04 	call	0x83c	; 0x83c <goBackLeft>
			break;
     162:	09 c0       	rjmp	.+18     	; 0x176 <prelucreazaDatele+0x80>
			case GoRightF:
				goFrontRight(timp, viteza);
     164:	6d 2f       	mov	r22, r29
     166:	8c 2f       	mov	r24, r28
     168:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <goFrontRight>
			break;
     16c:	04 c0       	rjmp	.+8      	; 0x176 <prelucreazaDatele+0x80>
			case GoRightB:
				goBackRight(timp, viteza);
     16e:	6d 2f       	mov	r22, r29
     170:	8c 2f       	mov	r24, r28
     172:	0e 94 47 04 	call	0x88e	; 0x88e <goBackRight>
			break;
			default:
				break;
		}
		if(dateCrtIndex == 3)
     176:	80 91 18 04 	lds	r24, 0x0418
     17a:	83 30       	cpi	r24, 0x03	; 3
     17c:	09 f0       	breq	.+2      	; 0x180 <prelucreazaDatele+0x8a>
     17e:	52 c0       	rjmp	.+164    	; 0x224 <prelucreazaDatele+0x12e>
			toggleDebuggingOff();
     180:	0e 94 b6 08 	call	0x116c	; 0x116c <toggleDebuggingOff>
     184:	4f c0       	rjmp	.+158    	; 0x224 <prelucreazaDatele+0x12e>
			
		return;
	}
	
	switch(actiune){
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	fc 01       	movw	r30, r24
     18a:	37 97       	sbiw	r30, 0x07	; 7
     18c:	e5 31       	cpi	r30, 0x15	; 21
     18e:	f1 05       	cpc	r31, r1
     190:	08 f0       	brcs	.+2      	; 0x194 <prelucreazaDatele+0x9e>
     192:	48 c0       	rjmp	.+144    	; 0x224 <prelucreazaDatele+0x12e>
     194:	e2 5c       	subi	r30, 0xC2	; 194
     196:	ff 4f       	sbci	r31, 0xFF	; 255
     198:	0c 94 7d 0c 	jmp	0x18fa	; 0x18fa <__tablejump2__>
		case GoM2P2:
			completeEnclosedContour();
     19c:	0e 94 0a 03 	call	0x614	; 0x614 <completeEnclosedContour>
		break;
     1a0:	41 c0       	rjmp	.+130    	; 0x224 <prelucreazaDatele+0x12e>
		case GoM2P3:
			checkFreeParallelParkingPlace();
     1a2:	0e 94 01 03 	call	0x602	; 0x602 <checkFreeParallelParkingPlace>
		break;
     1a6:	3e c0       	rjmp	.+124    	; 0x224 <prelucreazaDatele+0x12e>
		case Led:
			ledAction(date[0]);
     1a8:	80 91 1a 04 	lds	r24, 0x041A
     1ac:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <ledAction>
		break;
     1b0:	39 c0       	rjmp	.+114    	; 0x224 <prelucreazaDatele+0x12e>
		case ReadSensorValue:
			toggleSensorSend(date[0]);		
     1b2:	80 91 1a 04 	lds	r24, 0x041A
     1b6:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <toggleSensorSend>
		break;
     1ba:	34 c0       	rjmp	.+104    	; 0x224 <prelucreazaDatele+0x12e>
		case StopEngines:
			stopEngines();
     1bc:	0e 94 ed 02 	call	0x5da	; 0x5da <stopEngines>
		break;
     1c0:	31 c0       	rjmp	.+98     	; 0x224 <prelucreazaDatele+0x12e>
		case RotirePeLocDreapta:
			rotirePeLoc(date[0], date[1], RightEngines);
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	60 91 1b 04 	lds	r22, 0x041B
     1c8:	80 91 1a 04 	lds	r24, 0x041A
     1cc:	0e 94 73 04 	call	0x8e6	; 0x8e6 <rotirePeLoc>
		break;		
     1d0:	29 c0       	rjmp	.+82     	; 0x224 <prelucreazaDatele+0x12e>
		case RotirePeLocStanga:
			rotirePeLoc(date[0], date[1], LeftEngines);
     1d2:	41 e0       	ldi	r20, 0x01	; 1
     1d4:	60 91 1b 04 	lds	r22, 0x041B
     1d8:	80 91 1a 04 	lds	r24, 0x041A
     1dc:	0e 94 73 04 	call	0x8e6	; 0x8e6 <rotirePeLoc>
		break;
     1e0:	21 c0       	rjmp	.+66     	; 0x224 <prelucreazaDatele+0x12e>
		case DisplayMessage:
			//addEntryToTimerQueue(&fctSmechera, 10UL * 1000UL, Periodic);
			//addEntryToTimerQueue(&testFct1, 500UL * 1000UL, Periodic);
			addEntryToTimerQueue(&sendEncoderCounter, 500UL * 1000UL, Once);
     1e2:	20 e0       	ldi	r18, 0x00	; 0
     1e4:	40 e2       	ldi	r20, 0x20	; 32
     1e6:	51 ea       	ldi	r21, 0xA1	; 161
     1e8:	67 e0       	ldi	r22, 0x07	; 7
     1ea:	70 e0       	ldi	r23, 0x00	; 0
     1ec:	89 e1       	ldi	r24, 0x19	; 25
     1ee:	9c e0       	ldi	r25, 0x0C	; 12
     1f0:	0e 94 ed 08 	call	0x11da	; 0x11da <addEntryToTimerQueue>
		break;
     1f4:	17 c0       	rjmp	.+46     	; 0x224 <prelucreazaDatele+0x12e>
		case GoM2P1:
			addEntryToTimerQueue(&functieRotireStanga, 1000UL * 500UL, Periodic);
     1f6:	21 e0       	ldi	r18, 0x01	; 1
     1f8:	40 e2       	ldi	r20, 0x20	; 32
     1fa:	51 ea       	ldi	r21, 0xA1	; 161
     1fc:	67 e0       	ldi	r22, 0x07	; 7
     1fe:	70 e0       	ldi	r23, 0x00	; 0
     200:	86 ea       	ldi	r24, 0xA6	; 166
     202:	97 e0       	ldi	r25, 0x07	; 7
     204:	0e 94 ed 08 	call	0x11da	; 0x11da <addEntryToTimerQueue>
			iesire=date[0];
     208:	80 91 1a 04 	lds	r24, 0x041A
     20c:	80 93 10 04 	sts	0x0410, r24
		break;
     210:	09 c0       	rjmp	.+18     	; 0x224 <prelucreazaDatele+0x12e>
		case ResetThings:
			stopEngines();
     212:	0e 94 ed 02 	call	0x5da	; 0x5da <stopEngines>
			resetTimerQueue();
     216:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <resetTimerQueue>
		break;
     21a:	04 c0       	rjmp	.+8      	; 0x224 <prelucreazaDatele+0x12e>
		case GetAverageSpeed:
			getAverageSpeed(date[0]);
     21c:	80 91 1a 04 	lds	r24, 0x041A
     220:	0e 94 78 02 	call	0x4f0	; 0x4f0 <getAverageSpeed>
		default:
		break;
	}
	//alta actiune...
	//sei();
}
     224:	df 91       	pop	r29
     226:	cf 91       	pop	r28
     228:	08 95       	ret

0000022a <BTTransmitStr>:

void BTTransmitStr(char *theString){
	uint8_t len, i;
	
	len = strlen(theString);
     22a:	fc 01       	movw	r30, r24
     22c:	01 90       	ld	r0, Z+
     22e:	00 20       	and	r0, r0
     230:	e9 f7       	brne	.-6      	; 0x22c <BTTransmitStr+0x2>
     232:	31 97       	sbiw	r30, 0x01	; 1
     234:	e8 1b       	sub	r30, r24
     236:	f9 0b       	sbc	r31, r25
     238:	2e 2f       	mov	r18, r30
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     23a:	3a ea       	ldi	r19, 0xAA	; 170
     23c:	30 93 c6 00 	sts	0x00C6, r19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     240:	af e1       	ldi	r26, 0x1F	; 31
     242:	be e4       	ldi	r27, 0x4E	; 78
     244:	11 97       	sbiw	r26, 0x01	; 1
     246:	f1 f7       	brne	.-4      	; 0x244 <BTTransmitStr+0x1a>
     248:	00 c0       	rjmp	.+0      	; 0x24a <BTTransmitStr+0x20>
     24a:	00 00       	nop
     24c:	34 e1       	ldi	r19, 0x14	; 20
     24e:	30 93 c6 00 	sts	0x00C6, r19
     252:	af e1       	ldi	r26, 0x1F	; 31
     254:	be e4       	ldi	r27, 0x4E	; 78
     256:	11 97       	sbiw	r26, 0x01	; 1
     258:	f1 f7       	brne	.-4      	; 0x256 <BTTransmitStr+0x2c>
     25a:	00 c0       	rjmp	.+0      	; 0x25c <BTTransmitStr+0x32>
     25c:	00 00       	nop
     25e:	e0 93 c6 00 	sts	0x00C6, r30
     262:	ef e1       	ldi	r30, 0x1F	; 31
     264:	fe e4       	ldi	r31, 0x4E	; 78
     266:	31 97       	sbiw	r30, 0x01	; 1
     268:	f1 f7       	brne	.-4      	; 0x266 <BTTransmitStr+0x3c>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <BTTransmitStr+0x42>
     26c:	00 00       	nop
	
	BTTransmitChar(0xAA);
	BTTransmitChar(DisplayMessage);
	BTTransmitChar(len);
	
	for(i=0;i<len;i++)
     26e:	22 23       	and	r18, r18
     270:	89 f0       	breq	.+34     	; 0x294 <BTTransmitStr+0x6a>
     272:	38 2f       	mov	r19, r24
     274:	e8 2f       	mov	r30, r24
     276:	f9 2f       	mov	r31, r25
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     278:	a6 ec       	ldi	r26, 0xC6	; 198
     27a:	b0 e0       	ldi	r27, 0x00	; 0
	BTTransmitChar(DisplayMessage);
	BTTransmitChar(len);
	
	for(i=0;i<len;i++)
	{
		BTTransmitChar(theString[i]);
     27c:	81 91       	ld	r24, Z+
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     27e:	8c 93       	st	X, r24
     280:	8f e1       	ldi	r24, 0x1F	; 31
     282:	9e e4       	ldi	r25, 0x4E	; 78
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	f1 f7       	brne	.-4      	; 0x284 <BTTransmitStr+0x5a>
     288:	00 c0       	rjmp	.+0      	; 0x28a <BTTransmitStr+0x60>
     28a:	00 00       	nop
     28c:	8e 2f       	mov	r24, r30
     28e:	83 1b       	sub	r24, r19
	
	BTTransmitChar(0xAA);
	BTTransmitChar(DisplayMessage);
	BTTransmitChar(len);
	
	for(i=0;i<len;i++)
     290:	82 17       	cp	r24, r18
     292:	a0 f3       	brcs	.-24     	; 0x27c <BTTransmitStr+0x52>
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     294:	85 e5       	ldi	r24, 0x55	; 85
     296:	80 93 c6 00 	sts	0x00C6, r24
     29a:	af e1       	ldi	r26, 0x1F	; 31
     29c:	be e4       	ldi	r27, 0x4E	; 78
     29e:	11 97       	sbiw	r26, 0x01	; 1
     2a0:	f1 f7       	brne	.-4      	; 0x29e <BTTransmitStr+0x74>
     2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <BTTransmitStr+0x7a>
     2a4:	00 00       	nop
     2a6:	08 95       	ret

000002a8 <BTTransmitMsg>:
	}
	BTTransmitChar(0x55);
	
}

void BTTransmitMsg(char *theString, uint8_t len){
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
	uint16_t i;
	for(i=0;i<len;i++)
     2ac:	70 e0       	ldi	r23, 0x00	; 0
     2ae:	61 15       	cp	r22, r1
     2b0:	71 05       	cpc	r23, r1
     2b2:	91 f0       	breq	.+36     	; 0x2d8 <BTTransmitMsg+0x30>
     2b4:	e8 2f       	mov	r30, r24
     2b6:	f9 2f       	mov	r31, r25
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	90 e0       	ldi	r25, 0x00	; 0
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     2bc:	a6 ec       	ldi	r26, 0xC6	; 198
     2be:	b0 e0       	ldi	r27, 0x00	; 0

void BTTransmitMsg(char *theString, uint8_t len){
	uint16_t i;
	for(i=0;i<len;i++)
	{
		BTTransmitChar(theString[i]);
     2c0:	21 91       	ld	r18, Z+
	}
}

void BTTransmitChar(unsigned char theChar){
	//while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = theChar;
     2c2:	2c 93       	st	X, r18
     2c4:	cf e1       	ldi	r28, 0x1F	; 31
     2c6:	de e4       	ldi	r29, 0x4E	; 78
     2c8:	21 97       	sbiw	r28, 0x01	; 1
     2ca:	f1 f7       	brne	.-4      	; 0x2c8 <BTTransmitMsg+0x20>
     2cc:	00 c0       	rjmp	.+0      	; 0x2ce <BTTransmitMsg+0x26>
     2ce:	00 00       	nop
	
}

void BTTransmitMsg(char *theString, uint8_t len){
	uint16_t i;
	for(i=0;i<len;i++)
     2d0:	01 96       	adiw	r24, 0x01	; 1
     2d2:	86 17       	cp	r24, r22
     2d4:	97 07       	cpc	r25, r23
     2d6:	a0 f3       	brcs	.-24     	; 0x2c0 <BTTransmitMsg+0x18>
	{
		BTTransmitChar(theString[i]);
	}
}
     2d8:	df 91       	pop	r29
     2da:	cf 91       	pop	r28
     2dc:	08 95       	ret

000002de <reTransmit>:
{
	BTProtocolReadByte(UDR0);
}


void reTransmit(void){
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	00 d0       	rcall	.+0      	; 0x2e4 <reTransmit+0x6>
     2e4:	00 d0       	rcall	.+0      	; 0x2e6 <reTransmit+0x8>
     2e6:	cd b7       	in	r28, 0x3d	; 61
     2e8:	de b7       	in	r29, 0x3e	; 62
	//trimite un semnal telefonului pentru a retransmite ultimul mesaj
	printf("Trimite din nou ultimul mesaj!!!");
     2ea:	82 e0       	ldi	r24, 0x02	; 2
     2ec:	91 e0       	ldi	r25, 0x01	; 1
     2ee:	9f 93       	push	r25
     2f0:	8f 93       	push	r24
     2f2:	0e 94 9d 0c 	call	0x193a	; 0x193a <printf>
	char msg[] = { StartByte, ReTransmitLastMsg, 0, 0x55 };
     2f6:	8a ea       	ldi	r24, 0xAA	; 170
     2f8:	89 83       	std	Y+1, r24	; 0x01
     2fa:	83 e1       	ldi	r24, 0x13	; 19
     2fc:	8a 83       	std	Y+2, r24	; 0x02
     2fe:	1b 82       	std	Y+3, r1	; 0x03
     300:	85 e5       	ldi	r24, 0x55	; 85
     302:	8c 83       	std	Y+4, r24	; 0x04
	BTTransmitMsg(msg, 4);
     304:	64 e0       	ldi	r22, 0x04	; 4
     306:	ce 01       	movw	r24, r28
     308:	01 96       	adiw	r24, 0x01	; 1
     30a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <BTTransmitMsg>
}
     30e:	0f 90       	pop	r0
     310:	0f 90       	pop	r0
     312:	0f 90       	pop	r0
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	0f 90       	pop	r0
     31a:	df 91       	pop	r29
     31c:	cf 91       	pop	r28
     31e:	08 95       	ret

00000320 <BTProtocolReadByte>:
	state = WaitingStartByte;
}

extern volatile uint8_t iesire;
void BTProtocolReadByte(unsigned char theByte){
	cli();
     320:	f8 94       	cli
	switch (state){
     322:	90 91 01 01 	lds	r25, 0x0101
     326:	92 30       	cpi	r25, 0x02	; 2
     328:	f9 f0       	breq	.+62     	; 0x368 <BTProtocolReadByte+0x48>
     32a:	28 f4       	brcc	.+10     	; 0x336 <BTProtocolReadByte+0x16>
     32c:	99 23       	and	r25, r25
     32e:	41 f0       	breq	.+16     	; 0x340 <BTProtocolReadByte+0x20>
     330:	91 30       	cpi	r25, 0x01	; 1
     332:	69 f0       	breq	.+26     	; 0x34e <BTProtocolReadByte+0x2e>
     334:	48 c0       	rjmp	.+144    	; 0x3c6 <BTProtocolReadByte+0xa6>
     336:	93 30       	cpi	r25, 0x03	; 3
     338:	59 f1       	breq	.+86     	; 0x390 <BTProtocolReadByte+0x70>
     33a:	94 30       	cpi	r25, 0x04	; 4
     33c:	d9 f1       	breq	.+118    	; 0x3b4 <BTProtocolReadByte+0x94>
     33e:	43 c0       	rjmp	.+134    	; 0x3c6 <BTProtocolReadByte+0xa6>
		case WaitingStartByte:
			if(theByte == StartByte){
     340:	8a 3a       	cpi	r24, 0xAA	; 170
     342:	09 f0       	breq	.+2      	; 0x346 <BTProtocolReadByte+0x26>
     344:	40 c0       	rjmp	.+128    	; 0x3c6 <BTProtocolReadByte+0xa6>
				state = WaitingCarAction;
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	80 93 01 01 	sts	0x0101, r24
     34c:	3c c0       	rjmp	.+120    	; 0x3c6 <BTProtocolReadByte+0xa6>
				//addEntryToTimerQueue(&resetBTProtocol, 1000UL * 1000UL * 1000UL, Once);
			}
			break;

		case WaitingCarAction:
			if(theByte >= NoAction && theByte < EndAction){
     34e:	8c 31       	cpi	r24, 0x1C	; 28
     350:	30 f4       	brcc	.+12     	; 0x35e <BTProtocolReadByte+0x3e>
				state = WaitingDataLength;
     352:	92 e0       	ldi	r25, 0x02	; 2
     354:	90 93 01 01 	sts	0x0101, r25
				actiune = theByte;
     358:	80 93 19 04 	sts	0x0419, r24
     35c:	34 c0       	rjmp	.+104    	; 0x3c6 <BTProtocolReadByte+0xa6>
			}
			else{
				state = WaitingStartByte;
     35e:	10 92 01 01 	sts	0x0101, r1
				reTransmit(); // error ocurred, send retransmit signal
     362:	0e 94 6f 01 	call	0x2de	; 0x2de <reTransmit>
     366:	2f c0       	rjmp	.+94     	; 0x3c6 <BTProtocolReadByte+0xa6>
			}
			break;

		case WaitingDataLength:
			if(theByte==0){
     368:	81 11       	cpse	r24, r1
     36a:	05 c0       	rjmp	.+10     	; 0x376 <BTProtocolReadByte+0x56>
				state = WaitingEndByte;
			}
			state = ReadingData;
			len = theByte;
     36c:	10 92 24 04 	sts	0x0424, r1
			dateCrtIndex = 0;
     370:	10 92 18 04 	sts	0x0418, r1
     374:	0a c0       	rjmp	.+20     	; 0x38a <BTProtocolReadByte+0x6a>

		case WaitingDataLength:
			if(theByte==0){
				state = WaitingEndByte;
			}
			state = ReadingData;
     376:	93 e0       	ldi	r25, 0x03	; 3
     378:	90 93 01 01 	sts	0x0101, r25
			len = theByte;
     37c:	80 93 24 04 	sts	0x0424, r24
			dateCrtIndex = 0;
     380:	10 92 18 04 	sts	0x0418, r1
			if(len<=0 || len>50)
     384:	81 50       	subi	r24, 0x01	; 1
     386:	82 33       	cpi	r24, 0x32	; 50
     388:	f0 f0       	brcs	.+60     	; 0x3c6 <BTProtocolReadByte+0xa6>
				state=WaitingStartByte;
     38a:	10 92 01 01 	sts	0x0101, r1
     38e:	1b c0       	rjmp	.+54     	; 0x3c6 <BTProtocolReadByte+0xa6>
			break;

		case ReadingData:
			date[dateCrtIndex++] = theByte;
     390:	e0 91 18 04 	lds	r30, 0x0418
     394:	91 e0       	ldi	r25, 0x01	; 1
     396:	9e 0f       	add	r25, r30
     398:	90 93 18 04 	sts	0x0418, r25
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	e6 5e       	subi	r30, 0xE6	; 230
     3a0:	fb 4f       	sbci	r31, 0xFB	; 251
     3a2:	80 83       	st	Z, r24
			if(dateCrtIndex >= len)
     3a4:	80 91 24 04 	lds	r24, 0x0424
     3a8:	98 17       	cp	r25, r24
     3aa:	68 f0       	brcs	.+26     	; 0x3c6 <BTProtocolReadByte+0xa6>
			state = WaitingEndByte;
     3ac:	84 e0       	ldi	r24, 0x04	; 4
     3ae:	80 93 01 01 	sts	0x0101, r24
     3b2:	09 c0       	rjmp	.+18     	; 0x3c6 <BTProtocolReadByte+0xa6>
			break;
		case WaitingEndByte:
			if(theByte != 0x55){
     3b4:	85 35       	cpi	r24, 0x55	; 85
     3b6:	19 f0       	breq	.+6      	; 0x3be <BTProtocolReadByte+0x9e>
				reTransmit(); // error ocurred, send retransmit signal
     3b8:	0e 94 6f 01 	call	0x2de	; 0x2de <reTransmit>
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <BTProtocolReadByte+0xa2>
			}
			else{
				prelucreazaDatele();
     3be:	0e 94 7b 00 	call	0xf6	; 0xf6 <prelucreazaDatele>
			}
			state = WaitingStartByte;
     3c2:	10 92 01 01 	sts	0x0101, r1
			break;

	}
	sei();
     3c6:	78 94       	sei
     3c8:	08 95       	ret

000003ca <__vector_20>:

void prelucreazaDatele(void);
void BTProtocolReadByte(unsigned char theByte);

ISR(USART0_RX_vect)
{
     3ca:	1f 92       	push	r1
     3cc:	0f 92       	push	r0
     3ce:	0f b6       	in	r0, 0x3f	; 63
     3d0:	0f 92       	push	r0
     3d2:	11 24       	eor	r1, r1
     3d4:	2f 93       	push	r18
     3d6:	3f 93       	push	r19
     3d8:	4f 93       	push	r20
     3da:	5f 93       	push	r21
     3dc:	6f 93       	push	r22
     3de:	7f 93       	push	r23
     3e0:	8f 93       	push	r24
     3e2:	9f 93       	push	r25
     3e4:	af 93       	push	r26
     3e6:	bf 93       	push	r27
     3e8:	ef 93       	push	r30
     3ea:	ff 93       	push	r31
	BTProtocolReadByte(UDR0);
     3ec:	80 91 c6 00 	lds	r24, 0x00C6
     3f0:	0e 94 90 01 	call	0x320	; 0x320 <BTProtocolReadByte>
}
     3f4:	ff 91       	pop	r31
     3f6:	ef 91       	pop	r30
     3f8:	bf 91       	pop	r27
     3fa:	af 91       	pop	r26
     3fc:	9f 91       	pop	r25
     3fe:	8f 91       	pop	r24
     400:	7f 91       	pop	r23
     402:	6f 91       	pop	r22
     404:	5f 91       	pop	r21
     406:	4f 91       	pop	r20
     408:	3f 91       	pop	r19
     40a:	2f 91       	pop	r18
     40c:	0f 90       	pop	r0
     40e:	0f be       	out	0x3f, r0	; 63
     410:	0f 90       	pop	r0
     412:	1f 90       	pop	r1
     414:	18 95       	reti

00000416 <initBTProtocol>:
}

void initBTProtocol()
{
	/*Pentru Receive*/
	UBRR0L = 25; //baud rate 9600 bps
     416:	89 e1       	ldi	r24, 0x19	; 25
     418:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B |= _BV(RXCIE0);
     41c:	e1 ec       	ldi	r30, 0xC1	; 193
     41e:	f0 e0       	ldi	r31, 0x00	; 0
     420:	80 81       	ld	r24, Z
     422:	80 68       	ori	r24, 0x80	; 128
     424:	80 83       	st	Z, r24
	UCSR0B |= _BV(RXEN0);
     426:	80 81       	ld	r24, Z
     428:	80 61       	ori	r24, 0x10	; 16
     42a:	80 83       	st	Z, r24
	UCSR0B |= _BV(TXEN0);
     42c:	80 81       	ld	r24, Z
     42e:	88 60       	ori	r24, 0x08	; 8
     430:	80 83       	st	Z, r24
		
	state = WaitingStartByte;
     432:	10 92 01 01 	sts	0x0101, r1
     436:	08 95       	ret

00000438 <__vector_5>:

volatile uint32_t encoder1CNT, encoder2CNT;
volatile uint8_t lastPB0, lastPB7;
volatile uint32_t secondsPassed = 0;
ISR(PCINT1_vect)
{
     438:	1f 92       	push	r1
     43a:	0f 92       	push	r0
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	0f 92       	push	r0
     440:	11 24       	eor	r1, r1
     442:	8f 93       	push	r24
     444:	9f 93       	push	r25
     446:	af 93       	push	r26
     448:	bf 93       	push	r27
	if( (PINB & _BV(PB0)) ^ lastPB0){
     44a:	83 b1       	in	r24, 0x03	; 3
     44c:	90 91 2a 04 	lds	r25, 0x042A
     450:	81 70       	andi	r24, 0x01	; 1
     452:	98 17       	cp	r25, r24
     454:	b9 f0       	breq	.+46     	; 0x484 <__vector_5+0x4c>
		lastPB0 = (PINB & _BV(PB0));
     456:	83 b1       	in	r24, 0x03	; 3
     458:	81 70       	andi	r24, 0x01	; 1
     45a:	80 93 2a 04 	sts	0x042A, r24
		encoder1CNT++;
     45e:	80 91 25 04 	lds	r24, 0x0425
     462:	90 91 26 04 	lds	r25, 0x0426
     466:	a0 91 27 04 	lds	r26, 0x0427
     46a:	b0 91 28 04 	lds	r27, 0x0428
     46e:	01 96       	adiw	r24, 0x01	; 1
     470:	a1 1d       	adc	r26, r1
     472:	b1 1d       	adc	r27, r1
     474:	80 93 25 04 	sts	0x0425, r24
     478:	90 93 26 04 	sts	0x0426, r25
     47c:	a0 93 27 04 	sts	0x0427, r26
     480:	b0 93 28 04 	sts	0x0428, r27
	}
	if( (PINB & _BV(PB7)) ^ lastPB7){
     484:	93 b1       	in	r25, 0x03	; 3
     486:	80 91 29 04 	lds	r24, 0x0429
     48a:	90 78       	andi	r25, 0x80	; 128
     48c:	98 17       	cp	r25, r24
     48e:	b9 f0       	breq	.+46     	; 0x4be <__vector_5+0x86>
		lastPB7 = (PINB & _BV(PB7));
     490:	83 b1       	in	r24, 0x03	; 3
     492:	80 78       	andi	r24, 0x80	; 128
     494:	80 93 29 04 	sts	0x0429, r24
		encoder2CNT++;
     498:	80 91 2b 04 	lds	r24, 0x042B
     49c:	90 91 2c 04 	lds	r25, 0x042C
     4a0:	a0 91 2d 04 	lds	r26, 0x042D
     4a4:	b0 91 2e 04 	lds	r27, 0x042E
     4a8:	01 96       	adiw	r24, 0x01	; 1
     4aa:	a1 1d       	adc	r26, r1
     4ac:	b1 1d       	adc	r27, r1
     4ae:	80 93 2b 04 	sts	0x042B, r24
     4b2:	90 93 2c 04 	sts	0x042C, r25
     4b6:	a0 93 2d 04 	sts	0x042D, r26
     4ba:	b0 93 2e 04 	sts	0x042E, r27
	}
}
     4be:	bf 91       	pop	r27
     4c0:	af 91       	pop	r26
     4c2:	9f 91       	pop	r25
     4c4:	8f 91       	pop	r24
     4c6:	0f 90       	pop	r0
     4c8:	0f be       	out	0x3f, r0	; 63
     4ca:	0f 90       	pop	r0
     4cc:	1f 90       	pop	r1
     4ce:	18 95       	reti

000004d0 <initEncoders>:


void initEncoders(){		
	PCMSK1 |= _BV(PCINT8);
     4d0:	ec e6       	ldi	r30, 0x6C	; 108
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	80 81       	ld	r24, Z
     4d6:	81 60       	ori	r24, 0x01	; 1
     4d8:	80 83       	st	Z, r24
	DDRB &= ~_BV(PINB0);	
     4da:	20 98       	cbi	0x04, 0	; 4
	PCMSK1 |= _BV(PCINT15);
     4dc:	80 81       	ld	r24, Z
     4de:	80 68       	ori	r24, 0x80	; 128
     4e0:	80 83       	st	Z, r24
	DDRB &= ~_BV(PINB7);	
     4e2:	27 98       	cbi	0x04, 7	; 4
	PCICR |= _BV(PCIE1);
     4e4:	e8 e6       	ldi	r30, 0x68	; 104
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	80 81       	ld	r24, Z
     4ea:	82 60       	ori	r24, 0x02	; 2
     4ec:	80 83       	st	Z, r24
     4ee:	08 95       	ret

000004f0 <getAverageSpeed>:
}

void getAverageSpeed(uint8_t reset){
     4f0:	ff 92       	push	r15
     4f2:	0f 93       	push	r16
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
     4fe:	c4 56       	subi	r28, 0x64	; 100
     500:	d1 09       	sbc	r29, r1
     502:	0f b6       	in	r0, 0x3f	; 63
     504:	f8 94       	cli
     506:	de bf       	out	0x3e, r29	; 62
     508:	0f be       	out	0x3f, r0	; 63
     50a:	cd bf       	out	0x3d, r28	; 61
     50c:	f8 2e       	mov	r15, r24
	char strBuffer[100];
	sprintf(strBuffer, "\ne1C: %lu\ne2C: %lu ", encoder1CNT, encoder2CNT);
     50e:	00 91 2b 04 	lds	r16, 0x042B
     512:	10 91 2c 04 	lds	r17, 0x042C
     516:	20 91 2d 04 	lds	r18, 0x042D
     51a:	30 91 2e 04 	lds	r19, 0x042E
     51e:	40 91 25 04 	lds	r20, 0x0425
     522:	50 91 26 04 	lds	r21, 0x0426
     526:	60 91 27 04 	lds	r22, 0x0427
     52a:	70 91 28 04 	lds	r23, 0x0428
     52e:	3f 93       	push	r19
     530:	2f 93       	push	r18
     532:	1f 93       	push	r17
     534:	0f 93       	push	r16
     536:	7f 93       	push	r23
     538:	6f 93       	push	r22
     53a:	5f 93       	push	r21
     53c:	4f 93       	push	r20
     53e:	23 e2       	ldi	r18, 0x23	; 35
     540:	31 e0       	ldi	r19, 0x01	; 1
     542:	3f 93       	push	r19
     544:	2f 93       	push	r18
     546:	8e 01       	movw	r16, r28
     548:	0f 5f       	subi	r16, 0xFF	; 255
     54a:	1f 4f       	sbci	r17, 0xFF	; 255
     54c:	1f 93       	push	r17
     54e:	0f 93       	push	r16
     550:	0e 94 b1 0c 	call	0x1962	; 0x1962 <sprintf>
	BTTransmitStr(strBuffer);
     554:	c8 01       	movw	r24, r16
     556:	0e 94 15 01 	call	0x22a	; 0x22a <BTTransmitStr>
	if(reset){
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	f8 94       	cli
     55e:	de bf       	out	0x3e, r29	; 62
     560:	0f be       	out	0x3f, r0	; 63
     562:	cd bf       	out	0x3d, r28	; 61
     564:	ff 20       	and	r15, r15
     566:	c1 f0       	breq	.+48     	; 0x598 <getAverageSpeed+0xa8>
		encoder2CNT = encoder1CNT = 0;
     568:	10 92 25 04 	sts	0x0425, r1
     56c:	10 92 26 04 	sts	0x0426, r1
     570:	10 92 27 04 	sts	0x0427, r1
     574:	10 92 28 04 	sts	0x0428, r1
     578:	10 92 2b 04 	sts	0x042B, r1
     57c:	10 92 2c 04 	sts	0x042C, r1
     580:	10 92 2d 04 	sts	0x042D, r1
     584:	10 92 2e 04 	sts	0x042E, r1
		secondsPassed = 0;
     588:	10 92 0c 04 	sts	0x040C, r1
     58c:	10 92 0d 04 	sts	0x040D, r1
     590:	10 92 0e 04 	sts	0x040E, r1
     594:	10 92 0f 04 	sts	0x040F, r1
	}
}
     598:	cc 59       	subi	r28, 0x9C	; 156
     59a:	df 4f       	sbci	r29, 0xFF	; 255
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	de bf       	out	0x3e, r29	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	cd bf       	out	0x3d, r28	; 61
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	1f 91       	pop	r17
     5ac:	0f 91       	pop	r16
     5ae:	ff 90       	pop	r15
     5b0:	08 95       	ret

000005b2 <countSecondsForEncoders>:
void countSecondsForEncoders(){
	secondsPassed ++;
     5b2:	80 91 0c 04 	lds	r24, 0x040C
     5b6:	90 91 0d 04 	lds	r25, 0x040D
     5ba:	a0 91 0e 04 	lds	r26, 0x040E
     5be:	b0 91 0f 04 	lds	r27, 0x040F
     5c2:	01 96       	adiw	r24, 0x01	; 1
     5c4:	a1 1d       	adc	r26, r1
     5c6:	b1 1d       	adc	r27, r1
     5c8:	80 93 0c 04 	sts	0x040C, r24
     5cc:	90 93 0d 04 	sts	0x040D, r25
     5d0:	a0 93 0e 04 	sts	0x040E, r26
     5d4:	b0 93 0f 04 	sts	0x040F, r27
     5d8:	08 95       	ret

000005da <stopEngines>:
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
}


void stopEngines(){
	OCR0A = 0;
     5da:	17 bc       	out	0x27, r1	; 39
	OCR2A = 0;
     5dc:	10 92 b3 00 	sts	0x00B3, r1
	
	PORTD &= ~ 1<<PIND2;
     5e0:	8b b1       	in	r24, 0x0b	; 11
     5e2:	88 7f       	andi	r24, 0xF8	; 248
     5e4:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~ 1<<PIND4;
     5e6:	8b b1       	in	r24, 0x0b	; 11
     5e8:	80 7e       	andi	r24, 0xE0	; 224
     5ea:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~ 1<<PIND3;
     5ec:	8b b1       	in	r24, 0x0b	; 11
     5ee:	80 7f       	andi	r24, 0xF0	; 240
     5f0:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~ 1<<PIND5;
     5f2:	8b b1       	in	r24, 0x0b	; 11
     5f4:	80 7c       	andi	r24, 0xC0	; 192
     5f6:	8b b9       	out	0x0b, r24	; 11
	
	removeEntryFromTimerQueue(&countSecondsForEncoders);
     5f8:	89 ed       	ldi	r24, 0xD9	; 217
     5fa:	92 e0       	ldi	r25, 0x02	; 2
     5fc:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <removeEntryFromTimerQueue>
     600:	08 95       	ret

00000602 <checkFreeParallelParkingPlace>:
	
	//setEnginesSpeed(RightEngines, 1, 0);
	//setEnginesSpeed(LeftEngines, 1, 0);
}
void checkFreeParallelParkingPlace(){
    if(DEBUGGING)
     602:	80 91 12 04 	lds	r24, 0x0412
     606:	80 ff       	sbrs	r24, 0
     608:	04 c0       	rjmp	.+8      	; 0x612 <checkFreeParallelParkingPlace+0x10>
		BTTransmitStr("Start Free P P P!");
     60a:	87 e3       	ldi	r24, 0x37	; 55
     60c:	91 e0       	ldi	r25, 0x01	; 1
     60e:	0e 94 15 01 	call	0x22a	; 0x22a <BTTransmitStr>
     612:	08 95       	ret

00000614 <completeEnclosedContour>:
}
void completeEnclosedContour(){
    if(DEBUGGING)
     614:	80 91 12 04 	lds	r24, 0x0412
     618:	80 ff       	sbrs	r24, 0
     61a:	04 c0       	rjmp	.+8      	; 0x624 <completeEnclosedContour+0x10>
		BTTransmitStr("Start complete enclosed contour!");
     61c:	89 e4       	ldi	r24, 0x49	; 73
     61e:	91 e0       	ldi	r25, 0x01	; 1
     620:	0e 94 15 01 	call	0x22a	; 0x22a <BTTransmitStr>
     624:	08 95       	ret

00000626 <initEngines>:


void initEngines()
{
	
	OCR0A = 0;
     626:	17 bc       	out	0x27, r1	; 39
	OCR2A = 0;
     628:	10 92 b3 00 	sts	0x00B3, r1
	
	//PINB|=(1<<PB3);
	
	
	DDRB |=1<<PINB3;
     62c:	23 9a       	sbi	0x04, 3	; 4
	TCCR0A |=3;
     62e:	84 b5       	in	r24, 0x24	; 36
     630:	83 60       	ori	r24, 0x03	; 3
     632:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0A0);
     634:	84 b5       	in	r24, 0x24	; 36
     636:	80 64       	ori	r24, 0x40	; 64
     638:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0A1);
     63a:	84 b5       	in	r24, 0x24	; 36
     63c:	80 68       	ori	r24, 0x80	; 128
     63e:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS00);
     640:	85 b5       	in	r24, 0x25	; 37
     642:	81 60       	ori	r24, 0x01	; 1
     644:	85 bd       	out	0x25, r24	; 37
	// motor 2
	
	DDRD |= (1 << PD7);
     646:	57 9a       	sbi	0x0a, 7	; 10
	TCCR2A|=3;
     648:	e0 eb       	ldi	r30, 0xB0	; 176
     64a:	f0 e0       	ldi	r31, 0x00	; 0
     64c:	80 81       	ld	r24, Z
     64e:	83 60       	ori	r24, 0x03	; 3
     650:	80 83       	st	Z, r24
	TCCR2A |= (1 << COM2A0);
     652:	80 81       	ld	r24, Z
     654:	80 64       	ori	r24, 0x40	; 64
     656:	80 83       	st	Z, r24
	TCCR2A |= (1 << COM2A1);
     658:	80 81       	ld	r24, Z
     65a:	80 68       	ori	r24, 0x80	; 128
     65c:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS20);
     65e:	e1 eb       	ldi	r30, 0xB1	; 177
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	80 81       	ld	r24, Z
     664:	81 60       	ori	r24, 0x01	; 1
     666:	80 83       	st	Z, r24
	
		/*	PORTC |= 1<<PINC1;	
			PORTC |= 1<<PINC0;	*/
		
	//enable standby
	DDRB |= 1<<PINB5;
     668:	25 9a       	sbi	0x04, 5	; 4
	PORTB |= 1<<PINB5;	
     66a:	2d 9a       	sbi	0x05, 5	; 5
	DDRB |= 1<<PINB4;
     66c:	24 9a       	sbi	0x04, 4	; 4
	PORTB |= 1<<PINB4;
     66e:	2c 9a       	sbi	0x05, 4	; 5
	
	
	//in1 & in2 4 left engines
	DDRD |= 1<<PIND3;
     670:	53 9a       	sbi	0x0a, 3	; 10
	DDRD |= 1<<PIND5;
     672:	55 9a       	sbi	0x0a, 5	; 10
	PORTD &= ~ 1<<PIND3;
     674:	8b b1       	in	r24, 0x0b	; 11
     676:	80 7f       	andi	r24, 0xF0	; 240
     678:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~ 1<<PIND5;
     67a:	8b b1       	in	r24, 0x0b	; 11
     67c:	80 7c       	andi	r24, 0xC0	; 192
     67e:	8b b9       	out	0x0b, r24	; 11
	
	//in1 & in2 4 left engines
	DDRD |= 1<<PIND2;
     680:	52 9a       	sbi	0x0a, 2	; 10
	DDRD |= 1<<PIND4;
     682:	54 9a       	sbi	0x0a, 4	; 10
	PORTD &= ~ 1<<PIND2;
     684:	8b b1       	in	r24, 0x0b	; 11
     686:	88 7f       	andi	r24, 0xF8	; 248
     688:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~ 1<<PIND4;
     68a:	8b b1       	in	r24, 0x0b	; 11
     68c:	80 7e       	andi	r24, 0xE0	; 224
     68e:	8b b9       	out	0x0b, r24	; 11
     690:	08 95       	ret

00000692 <setEnginesSpeed>:
	
}


void setEnginesSpeed(Engines engine, Sens sens, uint8_t viteza)
{
     692:	1f 93       	push	r17
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	d8 2f       	mov	r29, r24
     69a:	c6 2f       	mov	r28, r22
     69c:	14 2f       	mov	r17, r20
	//PD2 (sens driver dreapta)
	//PD3 (sens driver stanga)
	
	//if(sens == SensFata)
	addEntryIfNotExists(&countSecondsForEncoders, 1000UL*1000UL, Periodic);
     69e:	21 e0       	ldi	r18, 0x01	; 1
     6a0:	40 e4       	ldi	r20, 0x40	; 64
     6a2:	52 e4       	ldi	r21, 0x42	; 66
     6a4:	6f e0       	ldi	r22, 0x0F	; 15
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	89 ed       	ldi	r24, 0xD9	; 217
     6aa:	92 e0       	ldi	r25, 0x02	; 2
     6ac:	0e 94 94 0a 	call	0x1528	; 0x1528 <addEntryIfNotExists>
	viteza = 255 - viteza;
     6b0:	10 95       	com	r17
		
	if(engine==RightEngines){
     6b2:	d1 11       	cpse	r29, r1
     6b4:	0a c0       	rjmp	.+20     	; 0x6ca <setEnginesSpeed+0x38>
		if(sens != SensFata){
     6b6:	cc 23       	and	r28, r28
     6b8:	19 f0       	breq	.+6      	; 0x6c0 <setEnginesSpeed+0x2e>
			PORTD &= ~ (1<<PIND2);
     6ba:	5a 98       	cbi	0x0b, 2	; 11
			PORTD |=  1<<PIND4;
     6bc:	5c 9a       	sbi	0x0b, 4	; 11
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <setEnginesSpeed+0x32>
		}			
		else{
			PORTD |=  1<<PIND2;
     6c0:	5a 9a       	sbi	0x0b, 2	; 11
			PORTD &= ~( 1<<PIND4);
     6c2:	5c 98       	cbi	0x0b, 4	; 11
		}
		OCR2A = viteza;	
     6c4:	10 93 b3 00 	sts	0x00B3, r17
     6c8:	08 c0       	rjmp	.+16     	; 0x6da <setEnginesSpeed+0x48>
	}
	else
	{
		if(sens != SensFata){	
     6ca:	cc 23       	and	r28, r28
     6cc:	19 f0       	breq	.+6      	; 0x6d4 <setEnginesSpeed+0x42>
			PORTD |=  1<<PIND3;
     6ce:	5b 9a       	sbi	0x0b, 3	; 11
			PORTD &= ~ (1<<PIND5);
     6d0:	5d 98       	cbi	0x0b, 5	; 11
     6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <setEnginesSpeed+0x46>
		}			
		else{			
			PORTD &= ~ (1<<PIND3);
     6d4:	5b 98       	cbi	0x0b, 3	; 11
			PORTD |=  1<<PIND5;		
     6d6:	5d 9a       	sbi	0x0b, 5	; 11
		}
		OCR0A = viteza;
     6d8:	17 bd       	out	0x27, r17	; 39
	}		
}
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	1f 91       	pop	r17
     6e0:	08 95       	ret

000006e2 <goFront>:
#include "Encoders.h"

void setEnginesSpeed(Engines, Sens, uint8_t);
void countSeconds();

void goFront(uint8_t timp, uint8_t viteza){	
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	d8 2f       	mov	r29, r24
     6e8:	c6 2f       	mov	r28, r22
	setEnginesSpeed(RightEngines, SensFata, viteza);
     6ea:	46 2f       	mov	r20, r22
     6ec:	60 e0       	ldi	r22, 0x00	; 0
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	0e 94 49 03 	call	0x692	; 0x692 <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensFata, viteza);
     6f4:	4c 2f       	mov	r20, r28
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	0e 94 49 03 	call	0x692	; 0x692 <setEnginesSpeed>
	removeEntryFromTimerQueue(&stopEngines);
     6fe:	8d ee       	ldi	r24, 0xED	; 237
     700:	92 e0       	ldi	r25, 0x02	; 2
     702:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     706:	ad 2f       	mov	r26, r29
     708:	b0 e0       	ldi	r27, 0x00	; 0
     70a:	20 e4       	ldi	r18, 0x40	; 64
     70c:	32 e4       	ldi	r19, 0x42	; 66
     70e:	4f e0       	ldi	r20, 0x0F	; 15
     710:	50 e0       	ldi	r21, 0x00	; 0
     712:	0e 94 92 0c 	call	0x1924	; 0x1924 <__muluhisi3>
     716:	ab 01       	movw	r20, r22
     718:	bc 01       	movw	r22, r24
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	8d ee       	ldi	r24, 0xED	; 237
     71e:	92 e0       	ldi	r25, 0x02	; 2
     720:	0e 94 ed 08 	call	0x11da	; 0x11da <addEntryToTimerQueue>
	if(DEBUGGING)
     724:	80 91 12 04 	lds	r24, 0x0412
     728:	80 ff       	sbrs	r24, 0
     72a:	04 c0       	rjmp	.+8      	; 0x734 <goFront+0x52>
		BTTransmitStr("Ma duc inainte!");
     72c:	8a e6       	ldi	r24, 0x6A	; 106
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	0e 94 15 01 	call	0x22a	; 0x22a <BTTransmitStr>
}
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	08 95       	ret

0000073a <goBack>:
void goBack(uint8_t timp, uint8_t viteza){
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	d8 2f       	mov	r29, r24
     740:	c6 2f       	mov	r28, r22
	setEnginesSpeed(RightEngines, SensSpate, viteza);
     742:	46 2f       	mov	r20, r22
     744:	61 e0       	ldi	r22, 0x01	; 1
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	0e 94 49 03 	call	0x692	; 0x692 <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensSpate, viteza);
     74c:	4c 2f       	mov	r20, r28
     74e:	61 e0       	ldi	r22, 0x01	; 1
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	0e 94 49 03 	call	0x692	; 0x692 <setEnginesSpeed>
	removeEntryFromTimerQueue(&stopEngines);
     756:	8d ee       	ldi	r24, 0xED	; 237
     758:	92 e0       	ldi	r25, 0x02	; 2
     75a:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     75e:	ad 2f       	mov	r26, r29
     760:	b0 e0       	ldi	r27, 0x00	; 0
     762:	20 e4       	ldi	r18, 0x40	; 64
     764:	32 e4       	ldi	r19, 0x42	; 66
     766:	4f e0       	ldi	r20, 0x0F	; 15
     768:	50 e0       	ldi	r21, 0x00	; 0
     76a:	0e 94 92 0c 	call	0x1924	; 0x1924 <__muluhisi3>
     76e:	ab 01       	movw	r20, r22
     770:	bc 01       	movw	r22, r24
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	8d ee       	ldi	r24, 0xED	; 237
     776:	92 e0       	ldi	r25, 0x02	; 2
     778:	0e 94 ed 08 	call	0x11da	; 0x11da <addEntryToTimerQueue>
    if(DEBUGGING)
     77c:	80 91 12 04 	lds	r24, 0x0412
     780:	80 ff       	sbrs	r24, 0
     782:	04 c0       	rjmp	.+8      	; 0x78c <goBack+0x52>
		BTTransmitStr("Ma duc inapoi!");
     784:	8a e7       	ldi	r24, 0x7A	; 122
     786:	91 e0       	ldi	r25, 0x01	; 1
     788:	0e 94 15 01 	call	0x22a	; 0x22a <BTTransmitStr>
}
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	08 95       	ret

00000792 <goFrontLeft>:

void goFrontLeft(uint8_t timp, uint8_t viteza){
     792:	cf 93       	push	r28
     794:	c8 2f       	mov	r28, r24
     796:	46 2f       	mov	r20, r22
	
	setEnginesSpeed(RightEngines, SensFata, viteza);
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	0e 94 49 03 	call	0x692	; 0x692 <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensFata, 10);
     7a0:	4a e0       	ldi	r20, 0x0A	; 10
     7a2:	60 e0       	ldi	r22, 0x00	; 0
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	0e 94 49 03 	call	0x692	; 0x692 <setEnginesSpeed>
	removeEntryFromTimerQueue(&stopEngines);
     7aa:	8d ee       	ldi	r24, 0xED	; 237
     7ac:	92 e0       	ldi	r25, 0x02	; 2
     7ae:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     7b2:	ac 2f       	mov	r26, r28
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	20 e4       	ldi	r18, 0x40	; 64
     7b8:	32 e4       	ldi	r19, 0x42	; 66
     7ba:	4f e0       	ldi	r20, 0x0F	; 15
     7bc:	50 e0       	ldi	r21, 0x00	; 0
     7be:	0e 94 92 0c 	call	0x1924	; 0x1924 <__muluhisi3>
     7c2:	ab 01       	movw	r20, r22
     7c4:	bc 01       	movw	r22, r24
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	8d ee       	ldi	r24, 0xED	; 237
     7ca:	92 e0       	ldi	r25, 0x02	; 2
     7cc:	0e 94 ed 08 	call	0x11da	; 0x11da <addEntryToTimerQueue>
    if(DEBUGGING)
     7d0:	80 91 12 04 	lds	r24, 0x0412
     7d4:	80 ff       	sbrs	r24, 0
     7d6:	04 c0       	rjmp	.+8      	; 0x7e0 <goFrontLeft+0x4e>
		BTTransmitStr("Ma duc inainte stanga!");
     7d8:	89 e8       	ldi	r24, 0x89	; 137
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	0e 94 15 01 	call	0x22a	; 0x22a <BTTransmitStr>
}
     7e0:	cf 91       	pop	r28
     7e2:	08 95       	ret

000007e4 <goFrontRight>:
void goFrontRight(uint8_t timp, uint8_t viteza){
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	c8 2f       	mov	r28, r24
     7ea:	d6 2f       	mov	r29, r22
	
	setEnginesSpeed(RightEngines, SensFata, 10);
     7ec:	4a e0       	ldi	r20, 0x0A	; 10
     7ee:	60 e0       	ldi	r22, 0x00	; 0
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	0e 94 49 03 	call	0x692	; 0x692 <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensFata, viteza);
     7f6:	4d 2f       	mov	r20, r29
     7f8:	60 e0       	ldi	r22, 0x00	; 0
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	0e 94 49 03 	call	0x692	; 0x692 <setEnginesSpeed>
	removeEntryFromTimerQueue(&stopEngines);
     800:	8d ee       	ldi	r24, 0xED	; 237
     802:	92 e0       	ldi	r25, 0x02	; 2
     804:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     808:	ac 2f       	mov	r26, r28
     80a:	b0 e0       	ldi	r27, 0x00	; 0
     80c:	20 e4       	ldi	r18, 0x40	; 64
     80e:	32 e4       	ldi	r19, 0x42	; 66
     810:	4f e0       	ldi	r20, 0x0F	; 15
     812:	50 e0       	ldi	r21, 0x00	; 0
     814:	0e 94 92 0c 	call	0x1924	; 0x1924 <__muluhisi3>
     818:	ab 01       	movw	r20, r22
     81a:	bc 01       	movw	r22, r24
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	8d ee       	ldi	r24, 0xED	; 237
     820:	92 e0       	ldi	r25, 0x02	; 2
     822:	0e 94 ed 08 	call	0x11da	; 0x11da <addEntryToTimerQueue>
    if(DEBUGGING)
     826:	80 91 12 04 	lds	r24, 0x0412
     82a:	80 ff       	sbrs	r24, 0
     82c:	04 c0       	rjmp	.+8      	; 0x836 <goFrontRight+0x52>
		BTTransmitStr("Ma duc inainte dreapta!");
     82e:	80 ea       	ldi	r24, 0xA0	; 160
     830:	91 e0       	ldi	r25, 0x01	; 1
     832:	0e 94 15 01 	call	0x22a	; 0x22a <BTTransmitStr>
}
     836:	df 91       	pop	r29
     838:	cf 91       	pop	r28
     83a:	08 95       	ret

0000083c <goBackLeft>:

void goBackLeft(uint8_t timp, uint8_t viteza){
     83c:	cf 93       	push	r28
     83e:	c8 2f       	mov	r28, r24
     840:	46 2f       	mov	r20, r22
	
	setEnginesSpeed(RightEngines, SensSpate, viteza);
     842:	61 e0       	ldi	r22, 0x01	; 1
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	0e 94 49 03 	call	0x692	; 0x692 <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensSpate, 10);
     84a:	4a e0       	ldi	r20, 0x0A	; 10
     84c:	61 e0       	ldi	r22, 0x01	; 1
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	0e 94 49 03 	call	0x692	; 0x692 <setEnginesSpeed>
	removeEntryFromTimerQueue(&stopEngines);
     854:	8d ee       	ldi	r24, 0xED	; 237
     856:	92 e0       	ldi	r25, 0x02	; 2
     858:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     85c:	ac 2f       	mov	r26, r28
     85e:	b0 e0       	ldi	r27, 0x00	; 0
     860:	20 e4       	ldi	r18, 0x40	; 64
     862:	32 e4       	ldi	r19, 0x42	; 66
     864:	4f e0       	ldi	r20, 0x0F	; 15
     866:	50 e0       	ldi	r21, 0x00	; 0
     868:	0e 94 92 0c 	call	0x1924	; 0x1924 <__muluhisi3>
     86c:	ab 01       	movw	r20, r22
     86e:	bc 01       	movw	r22, r24
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	8d ee       	ldi	r24, 0xED	; 237
     874:	92 e0       	ldi	r25, 0x02	; 2
     876:	0e 94 ed 08 	call	0x11da	; 0x11da <addEntryToTimerQueue>
    if(DEBUGGING)
     87a:	80 91 12 04 	lds	r24, 0x0412
     87e:	80 ff       	sbrs	r24, 0
     880:	04 c0       	rjmp	.+8      	; 0x88a <goBackLeft+0x4e>
		BTTransmitStr("Ma duc inapoi stanga!");
     882:	88 eb       	ldi	r24, 0xB8	; 184
     884:	91 e0       	ldi	r25, 0x01	; 1
     886:	0e 94 15 01 	call	0x22a	; 0x22a <BTTransmitStr>
}
     88a:	cf 91       	pop	r28
     88c:	08 95       	ret

0000088e <goBackRight>:
void goBackRight(uint8_t timp, uint8_t viteza){
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	c8 2f       	mov	r28, r24
     894:	d6 2f       	mov	r29, r22
	
	setEnginesSpeed(RightEngines, SensSpate, 10);
     896:	4a e0       	ldi	r20, 0x0A	; 10
     898:	61 e0       	ldi	r22, 0x01	; 1
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	0e 94 49 03 	call	0x692	; 0x692 <setEnginesSpeed>
	setEnginesSpeed(LeftEngines, SensSpate, viteza);
     8a0:	4d 2f       	mov	r20, r29
     8a2:	61 e0       	ldi	r22, 0x01	; 1
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	0e 94 49 03 	call	0x692	; 0x692 <setEnginesSpeed>
	removeEntryFromTimerQueue(&stopEngines);
     8aa:	8d ee       	ldi	r24, 0xED	; 237
     8ac:	92 e0       	ldi	r25, 0x02	; 2
     8ae:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     8b2:	ac 2f       	mov	r26, r28
     8b4:	b0 e0       	ldi	r27, 0x00	; 0
     8b6:	20 e4       	ldi	r18, 0x40	; 64
     8b8:	32 e4       	ldi	r19, 0x42	; 66
     8ba:	4f e0       	ldi	r20, 0x0F	; 15
     8bc:	50 e0       	ldi	r21, 0x00	; 0
     8be:	0e 94 92 0c 	call	0x1924	; 0x1924 <__muluhisi3>
     8c2:	ab 01       	movw	r20, r22
     8c4:	bc 01       	movw	r22, r24
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	8d ee       	ldi	r24, 0xED	; 237
     8ca:	92 e0       	ldi	r25, 0x02	; 2
     8cc:	0e 94 ed 08 	call	0x11da	; 0x11da <addEntryToTimerQueue>
    if(DEBUGGING)
     8d0:	80 91 12 04 	lds	r24, 0x0412
     8d4:	80 ff       	sbrs	r24, 0
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <goBackRight+0x52>
		BTTransmitStr("Ma duc inapoi dreapta!");
     8d8:	8e ec       	ldi	r24, 0xCE	; 206
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	0e 94 15 01 	call	0x22a	; 0x22a <BTTransmitStr>
}
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	08 95       	ret

000008e6 <rotirePeLoc>:
void rotirePeLoc(uint8_t timp, uint8_t viteza,  uint8_t engines){
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	d8 2f       	mov	r29, r24
     8ec:	c6 2f       	mov	r28, r22
	
	if(engines == RightEngines){
     8ee:	41 11       	cpse	r20, r1
     8f0:	13 c0       	rjmp	.+38     	; 0x918 <rotirePeLoc+0x32>
		setEnginesSpeed(LeftEngines, SensSpate,  viteza);
     8f2:	46 2f       	mov	r20, r22
     8f4:	61 e0       	ldi	r22, 0x01	; 1
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	0e 94 49 03 	call	0x692	; 0x692 <setEnginesSpeed>
		setEnginesSpeed(RightEngines, SensFata, viteza);
     8fc:	4c 2f       	mov	r20, r28
     8fe:	60 e0       	ldi	r22, 0x00	; 0
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	0e 94 49 03 	call	0x692	; 0x692 <setEnginesSpeed>
		if(DEBUGGING)
     906:	80 91 12 04 	lds	r24, 0x0412
     90a:	80 ff       	sbrs	r24, 0
     90c:	17 c0       	rjmp	.+46     	; 0x93c <rotirePeLoc+0x56>
			BTTransmitStr("ma rotesc spre dreapta");
     90e:	85 ee       	ldi	r24, 0xE5	; 229
     910:	91 e0       	ldi	r25, 0x01	; 1
     912:	0e 94 15 01 	call	0x22a	; 0x22a <BTTransmitStr>
     916:	12 c0       	rjmp	.+36     	; 0x93c <rotirePeLoc+0x56>
	}
	else {
		setEnginesSpeed(LeftEngines, SensFata, viteza);
     918:	46 2f       	mov	r20, r22
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	0e 94 49 03 	call	0x692	; 0x692 <setEnginesSpeed>
		setEnginesSpeed(RightEngines, SensSpate, viteza);
     922:	4c 2f       	mov	r20, r28
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	0e 94 49 03 	call	0x692	; 0x692 <setEnginesSpeed>
		if(DEBUGGING)
     92c:	80 91 12 04 	lds	r24, 0x0412
     930:	80 ff       	sbrs	r24, 0
     932:	04 c0       	rjmp	.+8      	; 0x93c <rotirePeLoc+0x56>
			BTTransmitStr("ma rotesc spre stanga");
     934:	8c ef       	ldi	r24, 0xFC	; 252
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	0e 94 15 01 	call	0x22a	; 0x22a <BTTransmitStr>
	}
	removeEntryFromTimerQueue(&stopEngines);
     93c:	8d ee       	ldi	r24, 0xED	; 237
     93e:	92 e0       	ldi	r25, 0x02	; 2
     940:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <removeEntryFromTimerQueue>
	addEntryToTimerQueue(&stopEngines, 1000UL*1000UL*timp, Once);
     944:	ad 2f       	mov	r26, r29
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	20 e4       	ldi	r18, 0x40	; 64
     94a:	32 e4       	ldi	r19, 0x42	; 66
     94c:	4f e0       	ldi	r20, 0x0F	; 15
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	0e 94 92 0c 	call	0x1924	; 0x1924 <__muluhisi3>
     954:	ab 01       	movw	r20, r22
     956:	bc 01       	movw	r22, r24
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	8d ee       	ldi	r24, 0xED	; 237
     95c:	92 e0       	ldi	r25, 0x02	; 2
     95e:	0e 94 ed 08 	call	0x11da	; 0x11da <addEntryToTimerQueue>
}
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	08 95       	ret

00000968 <sendSensor>:
volatile uint8_t sensorsToRead, sensorsToSend;
char msgBuffer[50];
volatile uint16_t oldValue[4];
volatile uint32_t lastCMValue[4];

void sendSensor(){
     968:	ef 92       	push	r14
     96a:	ff 92       	push	r15
     96c:	0f 93       	push	r16
     96e:	1f 93       	push	r17
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	c0 e0       	ldi	r28, 0x00	; 0
     976:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	
	for(i=0;i<4;i++){		
		if(sensorsToSend & (1<<i)){			
			sprintf(msgBuffer, "sensor #%d = %lu", i, lastCMValue[i]);			
     978:	0f 2e       	mov	r0, r31
     97a:	f2 e1       	ldi	r31, 0x12	; 18
     97c:	ef 2e       	mov	r14, r31
     97e:	f2 e0       	ldi	r31, 0x02	; 2
     980:	ff 2e       	mov	r15, r31
     982:	f0 2d       	mov	r31, r0
     984:	07 e4       	ldi	r16, 0x47	; 71
     986:	14 e0       	ldi	r17, 0x04	; 4

void sendSensor(){
	uint8_t i;
	
	for(i=0;i<4;i++){		
		if(sensorsToSend & (1<<i)){			
     988:	80 91 7a 04 	lds	r24, 0x047A
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	0c 2e       	mov	r0, r28
     990:	02 c0       	rjmp	.+4      	; 0x996 <sendSensor+0x2e>
     992:	95 95       	asr	r25
     994:	87 95       	ror	r24
     996:	0a 94       	dec	r0
     998:	e2 f7       	brpl	.-8      	; 0x992 <sendSensor+0x2a>
     99a:	80 ff       	sbrs	r24, 0
     99c:	22 c0       	rjmp	.+68     	; 0x9e2 <sendSensor+0x7a>
			sprintf(msgBuffer, "sensor #%d = %lu", i, lastCMValue[i]);			
     99e:	fe 01       	movw	r30, r28
     9a0:	ee 0f       	add	r30, r30
     9a2:	ff 1f       	adc	r31, r31
     9a4:	ee 0f       	add	r30, r30
     9a6:	ff 1f       	adc	r31, r31
     9a8:	e9 5c       	subi	r30, 0xC9	; 201
     9aa:	fb 4f       	sbci	r31, 0xFB	; 251
     9ac:	40 81       	ld	r20, Z
     9ae:	51 81       	ldd	r21, Z+1	; 0x01
     9b0:	62 81       	ldd	r22, Z+2	; 0x02
     9b2:	73 81       	ldd	r23, Z+3	; 0x03
     9b4:	7f 93       	push	r23
     9b6:	6f 93       	push	r22
     9b8:	5f 93       	push	r21
     9ba:	4f 93       	push	r20
     9bc:	df 93       	push	r29
     9be:	cf 93       	push	r28
     9c0:	ff 92       	push	r15
     9c2:	ef 92       	push	r14
     9c4:	1f 93       	push	r17
     9c6:	0f 93       	push	r16
     9c8:	0e 94 b1 0c 	call	0x1962	; 0x1962 <sprintf>
			BTTransmitStr(msgBuffer);			
     9cc:	c8 01       	movw	r24, r16
     9ce:	0e 94 15 01 	call	0x22a	; 0x22a <BTTransmitStr>
     9d2:	8d b7       	in	r24, 0x3d	; 61
     9d4:	9e b7       	in	r25, 0x3e	; 62
     9d6:	0a 96       	adiw	r24, 0x0a	; 10
     9d8:	0f b6       	in	r0, 0x3f	; 63
     9da:	f8 94       	cli
     9dc:	9e bf       	out	0x3e, r25	; 62
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	8d bf       	out	0x3d, r24	; 61
     9e2:	21 96       	adiw	r28, 0x01	; 1
volatile uint32_t lastCMValue[4];

void sendSensor(){
	uint8_t i;
	
	for(i=0;i<4;i++){		
     9e4:	c4 30       	cpi	r28, 0x04	; 4
     9e6:	d1 05       	cpc	r29, r1
     9e8:	79 f6       	brne	.-98     	; 0x988 <sendSensor+0x20>
		if(sensorsToSend & (1<<i)){			
			sprintf(msgBuffer, "sensor #%d = %lu", i, lastCMValue[i]);			
			BTTransmitStr(msgBuffer);			
		}
	}
}
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	1f 91       	pop	r17
     9f0:	0f 91       	pop	r16
     9f2:	ff 90       	pop	r15
     9f4:	ef 90       	pop	r14
     9f6:	08 95       	ret

000009f8 <toggleSensorSend>:
void readSensors();
void toggleSensorSend(Sensor sensor){
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
	sensorsToSend ^= 1<<sensor;
     9fc:	40 91 7a 04 	lds	r20, 0x047A
     a00:	21 e0       	ldi	r18, 0x01	; 1
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	b9 01       	movw	r22, r18
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <toggleSensorSend+0x14>
     a08:	66 0f       	add	r22, r22
     a0a:	77 1f       	adc	r23, r23
     a0c:	8a 95       	dec	r24
     a0e:	e2 f7       	brpl	.-8      	; 0xa08 <toggleSensorSend+0x10>
     a10:	cb 01       	movw	r24, r22
     a12:	84 27       	eor	r24, r20
     a14:	80 93 7a 04 	sts	0x047A, r24
	
	sprintf(msgBuffer, "sensorsToSend %d %d %d %d ", sensorsToSend&1, (sensorsToSend&2)>>1, (sensorsToSend&4)>>2, (sensorsToSend&8)>>3);
     a18:	30 91 7a 04 	lds	r19, 0x047A
     a1c:	20 91 7a 04 	lds	r18, 0x047A
     a20:	90 91 7a 04 	lds	r25, 0x047A
     a24:	80 91 7a 04 	lds	r24, 0x047A
     a28:	33 fb       	bst	r19, 3
     a2a:	33 27       	eor	r19, r19
     a2c:	30 f9       	bld	r19, 0
     a2e:	1f 92       	push	r1
     a30:	3f 93       	push	r19
     a32:	22 fb       	bst	r18, 2
     a34:	22 27       	eor	r18, r18
     a36:	20 f9       	bld	r18, 0
     a38:	1f 92       	push	r1
     a3a:	2f 93       	push	r18
     a3c:	96 95       	lsr	r25
     a3e:	91 70       	andi	r25, 0x01	; 1
     a40:	1f 92       	push	r1
     a42:	9f 93       	push	r25
     a44:	81 70       	andi	r24, 0x01	; 1
     a46:	1f 92       	push	r1
     a48:	8f 93       	push	r24
     a4a:	83 e2       	ldi	r24, 0x23	; 35
     a4c:	92 e0       	ldi	r25, 0x02	; 2
     a4e:	9f 93       	push	r25
     a50:	8f 93       	push	r24
     a52:	c7 e4       	ldi	r28, 0x47	; 71
     a54:	d4 e0       	ldi	r29, 0x04	; 4
     a56:	df 93       	push	r29
     a58:	cf 93       	push	r28
     a5a:	0e 94 b1 0c 	call	0x1962	; 0x1962 <sprintf>
	BTTransmitStr(msgBuffer);
     a5e:	ce 01       	movw	r24, r28
     a60:	0e 94 15 01 	call	0x22a	; 0x22a <BTTransmitStr>
	sprintf(msgBuffer, "sensorsToRead %d %d %d %d <<--", sensorsToRead&1, (sensorsToRead&2)>>1, (sensorsToRead&4)>>2, (sensorsToRead&8)>>3);
     a64:	30 91 79 04 	lds	r19, 0x0479
     a68:	20 91 79 04 	lds	r18, 0x0479
     a6c:	90 91 79 04 	lds	r25, 0x0479
     a70:	80 91 79 04 	lds	r24, 0x0479
     a74:	33 fb       	bst	r19, 3
     a76:	33 27       	eor	r19, r19
     a78:	30 f9       	bld	r19, 0
     a7a:	1f 92       	push	r1
     a7c:	3f 93       	push	r19
     a7e:	22 fb       	bst	r18, 2
     a80:	22 27       	eor	r18, r18
     a82:	20 f9       	bld	r18, 0
     a84:	1f 92       	push	r1
     a86:	2f 93       	push	r18
     a88:	96 95       	lsr	r25
     a8a:	91 70       	andi	r25, 0x01	; 1
     a8c:	1f 92       	push	r1
     a8e:	9f 93       	push	r25
     a90:	81 70       	andi	r24, 0x01	; 1
     a92:	1f 92       	push	r1
     a94:	8f 93       	push	r24
     a96:	8e e3       	ldi	r24, 0x3E	; 62
     a98:	92 e0       	ldi	r25, 0x02	; 2
     a9a:	9f 93       	push	r25
     a9c:	8f 93       	push	r24
     a9e:	df 93       	push	r29
     aa0:	cf 93       	push	r28
     aa2:	0e 94 b1 0c 	call	0x1962	; 0x1962 <sprintf>
	BTTransmitStr(msgBuffer);
     aa6:	ce 01       	movw	r24, r28
     aa8:	0e 94 15 01 	call	0x22a	; 0x22a <BTTransmitStr>
	
	uint8_t existsInTimerQueue = existsEntryInTimerQueue(&sendSensor);
     aac:	84 eb       	ldi	r24, 0xB4	; 180
     aae:	94 e0       	ldi	r25, 0x04	; 4
     ab0:	0e 94 67 0a 	call	0x14ce	; 0x14ce <existsEntryInTimerQueue>
	//toggleSensorRead(sensor);
	if(sensorsToSend && !existsInTimerQueue){
     ab4:	90 91 7a 04 	lds	r25, 0x047A
     ab8:	6d b7       	in	r22, 0x3d	; 61
     aba:	7e b7       	in	r23, 0x3e	; 62
     abc:	68 5e       	subi	r22, 0xE8	; 232
     abe:	7f 4f       	sbci	r23, 0xFF	; 255
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	f8 94       	cli
     ac4:	7e bf       	out	0x3e, r23	; 62
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	6d bf       	out	0x3d, r22	; 61
     aca:	99 23       	and	r25, r25
     acc:	61 f0       	breq	.+24     	; 0xae6 <toggleSensorSend+0xee>
     ace:	81 11       	cpse	r24, r1
     ad0:	15 c0       	rjmp	.+42     	; 0xafc <toggleSensorSend+0x104>
		addEntryToTimerQueue(&sendSensor, 1000UL * 1000UL, Periodic);
     ad2:	21 e0       	ldi	r18, 0x01	; 1
     ad4:	40 e4       	ldi	r20, 0x40	; 64
     ad6:	52 e4       	ldi	r21, 0x42	; 66
     ad8:	6f e0       	ldi	r22, 0x0F	; 15
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	84 eb       	ldi	r24, 0xB4	; 180
     ade:	94 e0       	ldi	r25, 0x04	; 4
     ae0:	0e 94 ed 08 	call	0x11da	; 0x11da <addEntryToTimerQueue>
     ae4:	0f c0       	rjmp	.+30     	; 0xb04 <toggleSensorSend+0x10c>
	}
	else{
		if(!sensorsToSend && existsInTimerQueue)
     ae6:	90 91 7a 04 	lds	r25, 0x047A
     aea:	91 11       	cpse	r25, r1
     aec:	0b c0       	rjmp	.+22     	; 0xb04 <toggleSensorSend+0x10c>
     aee:	88 23       	and	r24, r24
     af0:	49 f0       	breq	.+18     	; 0xb04 <toggleSensorSend+0x10c>
		removeEntryFromTimerQueue(&sendSensor);
     af2:	84 eb       	ldi	r24, 0xB4	; 180
     af4:	94 e0       	ldi	r25, 0x04	; 4
     af6:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <removeEntryFromTimerQueue>
     afa:	04 c0       	rjmp	.+8      	; 0xb04 <toggleSensorSend+0x10c>
	//toggleSensorRead(sensor);
	if(sensorsToSend && !existsInTimerQueue){
		addEntryToTimerQueue(&sendSensor, 1000UL * 1000UL, Periodic);
	}
	else{
		if(!sensorsToSend && existsInTimerQueue)
     afc:	80 91 7a 04 	lds	r24, 0x047A
     b00:	88 23       	and	r24, r24
     b02:	b9 f3       	breq	.-18     	; 0xaf2 <toggleSensorSend+0xfa>
		removeEntryFromTimerQueue(&sendSensor);
	}
}
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	08 95       	ret

00000b0a <toggleSensorRead>:
		lastCMValue[2] = getValueOfSensor3(2);
	if(sensorsToRead & 8)
		lastCMValue[3] = getValueOfSensor3(3);
}
void toggleSensorRead(Sensor sensor){
	sensorsToRead ^= 1<<sensor;
     b0a:	40 91 79 04 	lds	r20, 0x0479
     b0e:	21 e0       	ldi	r18, 0x01	; 1
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	b9 01       	movw	r22, r18
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <toggleSensorRead+0x10>
     b16:	66 0f       	add	r22, r22
     b18:	77 1f       	adc	r23, r23
     b1a:	8a 95       	dec	r24
     b1c:	e2 f7       	brpl	.-8      	; 0xb16 <toggleSensorRead+0xc>
     b1e:	cb 01       	movw	r24, r22
     b20:	84 27       	eor	r24, r20
     b22:	80 93 79 04 	sts	0x0479, r24
	
	uint8_t existsInTimerQueue = existsEntryInTimerQueue(&readSensors);
     b26:	80 ef       	ldi	r24, 0xF0	; 240
     b28:	96 e0       	ldi	r25, 0x06	; 6
     b2a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <existsEntryInTimerQueue>
	
	if(sensorsToRead && !existsInTimerQueue){
     b2e:	90 91 79 04 	lds	r25, 0x0479
     b32:	99 23       	and	r25, r25
     b34:	61 f0       	breq	.+24     	; 0xb4e <toggleSensorRead+0x44>
     b36:	81 11       	cpse	r24, r1
     b38:	15 c0       	rjmp	.+42     	; 0xb64 <toggleSensorRead+0x5a>
		addEntryToTimerQueue(&readSensors, 100UL * 1000UL, Periodic);		
     b3a:	21 e0       	ldi	r18, 0x01	; 1
     b3c:	40 ea       	ldi	r20, 0xA0	; 160
     b3e:	56 e8       	ldi	r21, 0x86	; 134
     b40:	61 e0       	ldi	r22, 0x01	; 1
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	80 ef       	ldi	r24, 0xF0	; 240
     b46:	96 e0       	ldi	r25, 0x06	; 6
     b48:	0e 94 ed 08 	call	0x11da	; 0x11da <addEntryToTimerQueue>
     b4c:	08 95       	ret
	}
	else{
		if(!sensorsToRead && existsInTimerQueue){
     b4e:	90 91 79 04 	lds	r25, 0x0479
     b52:	91 11       	cpse	r25, r1
     b54:	0b c0       	rjmp	.+22     	; 0xb6c <toggleSensorRead+0x62>
     b56:	88 23       	and	r24, r24
     b58:	49 f0       	breq	.+18     	; 0xb6c <toggleSensorRead+0x62>
			removeEntryFromTimerQueue(&readSensors);
     b5a:	80 ef       	ldi	r24, 0xF0	; 240
     b5c:	96 e0       	ldi	r25, 0x06	; 6
     b5e:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <removeEntryFromTimerQueue>
     b62:	08 95       	ret
	
	if(sensorsToRead && !existsInTimerQueue){
		addEntryToTimerQueue(&readSensors, 100UL * 1000UL, Periodic);		
	}
	else{
		if(!sensorsToRead && existsInTimerQueue){
     b64:	80 91 79 04 	lds	r24, 0x0479
     b68:	88 23       	and	r24, r24
     b6a:	b9 f3       	breq	.-18     	; 0xb5a <toggleSensorRead+0x50>
     b6c:	08 95       	ret

00000b6e <initSensors>:
}

void initSensors(void){
		
	//init ADC
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
     b6e:	aa e7       	ldi	r26, 0x7A	; 122
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	8c 91       	ld	r24, X
     b74:	87 60       	ori	r24, 0x07	; 7
     b76:	8c 93       	st	X, r24

	ADMUX |= (1 << REFS0);
     b78:	ec e7       	ldi	r30, 0x7C	; 124
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	80 64       	ori	r24, 0x40	; 64
     b80:	80 83       	st	Z, r24
	ADMUX &=~ (1 << REFS1); // Set ADC reference to AVCC
     b82:	80 81       	ld	r24, Z
     b84:	8f 77       	andi	r24, 0x7F	; 127
     b86:	80 83       	st	Z, r24
	
	ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
     b88:	80 81       	ld	r24, Z
     b8a:	80 62       	ori	r24, 0x20	; 32
     b8c:	80 83       	st	Z, r24
	
	//ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running Mode
	
	ADCSRA |= (1 << ADEN);  // Enable ADC
     b8e:	8c 91       	ld	r24, X
     b90:	80 68       	ori	r24, 0x80	; 128
     b92:	8c 93       	st	X, r24
	//ADCSRA |= (1 << ADSC);  // start adc
	sensorsToRead = sensorsToSend = 0;
     b94:	10 92 7a 04 	sts	0x047A, r1
     b98:	10 92 79 04 	sts	0x0479, r1
	toggleSensorRead(0);
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	0e 94 85 05 	call	0xb0a	; 0xb0a <toggleSensorRead>
	toggleSensorRead(1);
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	0e 94 85 05 	call	0xb0a	; 0xb0a <toggleSensorRead>
	toggleSensorRead(2);
     ba8:	82 e0       	ldi	r24, 0x02	; 2
     baa:	0e 94 85 05 	call	0xb0a	; 0xb0a <toggleSensorRead>
	toggleSensorRead(3);
     bae:	83 e0       	ldi	r24, 0x03	; 3
     bb0:	0e 94 85 05 	call	0xb0a	; 0xb0a <toggleSensorRead>
     bb4:	08 95       	ret

00000bb6 <startADCConversionForSensor>:
}

void startADCConversionForSensor(Sensor sensor){

	ADMUX &= ~31; // set lasts 5 bits to 00000
     bb6:	ec e7       	ldi	r30, 0x7C	; 124
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	90 81       	ld	r25, Z
     bbc:	90 7e       	andi	r25, 0xE0	; 224
     bbe:	90 83       	st	Z, r25
	//ADMUX |= 0; // 0-ADC0, 1-ADC1, 2-ADC2 ...    datasheet pg 249-251
	ADMUX |= sensor; // Sensor ia valorile 0,1,2,3, exact ca cele pt ADC-uri
     bc0:	90 81       	ld	r25, Z
     bc2:	89 2b       	or	r24, r25
     bc4:	80 83       	st	Z, r24
	// No MUX values needed to be changed to use ADC0

	
	ADCSRA |= (1 << ADSC);  // Start A2D Conversions
     bc6:	ea e7       	ldi	r30, 0x7A	; 122
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	80 64       	ori	r24, 0x40	; 64
     bce:	80 83       	st	Z, r24
     bd0:	08 95       	ret

00000bd2 <getCurrentValueOfSensor>:
#include "../Timing/Timing.h"


uint32_t getValueOfSensor3(Sensor sensor);
uint16_t getCurrentValueOfSensor(Sensor sensor){	
	startADCConversionForSensor(sensor);	
     bd2:	0e 94 db 05 	call	0xbb6	; 0xbb6 <startADCConversionForSensor>
	while ( ADCSRA & (1 << ADSC));	
     bd6:	ea e7       	ldi	r30, 0x7A	; 122
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	86 fd       	sbrc	r24, 6
     bde:	fd cf       	rjmp	.-6      	; 0xbda <getCurrentValueOfSensor+0x8>
	uint16_t val;
	val = ADCL >> 6;
     be0:	20 91 78 00 	lds	r18, 0x0078
     be4:	22 95       	swap	r18
     be6:	26 95       	lsr	r18
     be8:	26 95       	lsr	r18
     bea:	23 70       	andi	r18, 0x03	; 3
	val |= ADCH << 2;	
     bec:	80 91 79 00 	lds	r24, 0x0079
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
	return val;
}
     bfa:	82 2b       	or	r24, r18
     bfc:	08 95       	ret

00000bfe <getValueOfSensor3>:
			removeEntryFromTimerQueue(&readSensors);
		}
	}
}

uint32_t getValueOfSensor3(Sensor sensor){
     bfe:	8f 92       	push	r8
     c00:	9f 92       	push	r9
     c02:	af 92       	push	r10
     c04:	bf 92       	push	r11
     c06:	cf 92       	push	r12
     c08:	df 92       	push	r13
     c0a:	ef 92       	push	r14
     c0c:	ff 92       	push	r15
     c0e:	0f 93       	push	r16
     c10:	1f 93       	push	r17
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	cd b7       	in	r28, 0x3d	; 61
     c18:	de b7       	in	r29, 0x3e	; 62
     c1a:	2e 97       	sbiw	r28, 0x0e	; 14
     c1c:	0f b6       	in	r0, 0x3f	; 63
     c1e:	f8 94       	cli
     c20:	de bf       	out	0x3e, r29	; 62
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	cd bf       	out	0x3d, r28	; 61
     c26:	18 2f       	mov	r17, r24
     c28:	9e 01       	movw	r18, r28
     c2a:	2f 5f       	subi	r18, 0xFF	; 255
     c2c:	3f 4f       	sbci	r19, 0xFF	; 255
     c2e:	79 01       	movw	r14, r18
     c30:	6e 01       	movw	r12, r28
     c32:	3f e0       	ldi	r19, 0x0F	; 15
     c34:	c3 0e       	add	r12, r19
     c36:	d1 1c       	adc	r13, r1
	uint8_t i;
	uint16_t s, sVals[7];
	
	//citesc 7 valori ale senzorului
	for(i=0;i<7;i++)
		sVals[i] = getCurrentValueOfSensor(sensor);
     c38:	81 2f       	mov	r24, r17
     c3a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <getCurrentValueOfSensor>
     c3e:	d7 01       	movw	r26, r14
     c40:	8d 93       	st	X+, r24
     c42:	9d 93       	st	X+, r25
     c44:	7d 01       	movw	r14, r26
uint32_t getValueOfSensor3(Sensor sensor){
	uint8_t i;
	uint16_t s, sVals[7];
	
	//citesc 7 valori ale senzorului
	for(i=0;i<7;i++)
     c46:	ac 15       	cp	r26, r12
     c48:	bd 05       	cpc	r27, r13
     c4a:	b1 f7       	brne	.-20     	; 0xc38 <getValueOfSensor3+0x3a>
     c4c:	21 e0       	ldi	r18, 0x01	; 1
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	80 e0       	ldi	r24, 0x00	; 0
		sVals[i] = getCurrentValueOfSensor(sensor);
		
	do{ // le sortez (bubble sort)
		s=1;
     c52:	01 e0       	ldi	r16, 0x01	; 1
     c54:	f1 2c       	mov	r15, r1
		for(i=0;i<6;i++)
     c56:	90 e0       	ldi	r25, 0x00	; 0
			if(sVals[i]>sVals[i+1]){
				s = sVals[i];
				sVals[i] = sVals[i+1];
				sVals[i+1] = s;
				s=0;
     c58:	d1 2c       	mov	r13, r1
     c5a:	e1 2c       	mov	r14, r1
     c5c:	2d c0       	rjmp	.+90     	; 0xcb8 <getValueOfSensor3+0xba>
		sVals[i] = getCurrentValueOfSensor(sensor);
		
	do{ // le sortez (bubble sort)
		s=1;
		for(i=0;i<6;i++)
			if(sVals[i]>sVals[i+1]){
     c5e:	48 2f       	mov	r20, r24
     c60:	50 e0       	ldi	r21, 0x00	; 0
     c62:	fa 01       	movw	r30, r20
     c64:	ee 0f       	add	r30, r30
     c66:	ff 1f       	adc	r31, r31
     c68:	aa 24       	eor	r10, r10
     c6a:	a3 94       	inc	r10
     c6c:	b1 2c       	mov	r11, r1
     c6e:	ac 0e       	add	r10, r28
     c70:	bd 1e       	adc	r11, r29
     c72:	ea 0d       	add	r30, r10
     c74:	fb 1d       	adc	r31, r11
     c76:	60 81       	ld	r22, Z
     c78:	71 81       	ldd	r23, Z+1	; 0x01
     c7a:	4a 01       	movw	r8, r20
     c7c:	af ef       	ldi	r26, 0xFF	; 255
     c7e:	8a 1a       	sub	r8, r26
     c80:	9a 0a       	sbc	r9, r26
     c82:	d4 01       	movw	r26, r8
     c84:	aa 0f       	add	r26, r26
     c86:	bb 1f       	adc	r27, r27
     c88:	aa 0d       	add	r26, r10
     c8a:	bb 1d       	adc	r27, r11
     c8c:	0d 90       	ld	r0, X+
     c8e:	bc 91       	ld	r27, X
     c90:	a0 2d       	mov	r26, r0
     c92:	a6 17       	cp	r26, r22
     c94:	b7 07       	cpc	r27, r23
     c96:	58 f4       	brcc	.+22     	; 0xcae <getValueOfSensor3+0xb0>
				s = sVals[i];
				sVals[i] = sVals[i+1];
     c98:	b1 83       	std	Z+1, r27	; 0x01
     c9a:	a0 83       	st	Z, r26
				sVals[i+1] = s;
     c9c:	f4 01       	movw	r30, r8
     c9e:	ee 0f       	add	r30, r30
     ca0:	ff 1f       	adc	r31, r31
     ca2:	ea 0d       	add	r30, r10
     ca4:	fb 1d       	adc	r31, r11
     ca6:	71 83       	std	Z+1, r23	; 0x01
     ca8:	60 83       	st	Z, r22
				s=0;
     caa:	2d 2d       	mov	r18, r13
     cac:	3e 2d       	mov	r19, r14
	for(i=0;i<7;i++)
		sVals[i] = getCurrentValueOfSensor(sensor);
		
	do{ // le sortez (bubble sort)
		s=1;
		for(i=0;i<6;i++)
     cae:	8f 5f       	subi	r24, 0xFF	; 255
     cb0:	03 c0       	rjmp	.+6      	; 0xcb8 <getValueOfSensor3+0xba>
	//citesc 7 valori ale senzorului
	for(i=0;i<7;i++)
		sVals[i] = getCurrentValueOfSensor(sensor);
		
	do{ // le sortez (bubble sort)
		s=1;
     cb2:	20 2f       	mov	r18, r16
     cb4:	3f 2d       	mov	r19, r15
		for(i=0;i<6;i++)
     cb6:	89 2f       	mov	r24, r25
     cb8:	86 30       	cpi	r24, 0x06	; 6
     cba:	88 f2       	brcs	.-94     	; 0xc5e <getValueOfSensor3+0x60>
				s = sVals[i];
				sVals[i] = sVals[i+1];
				sVals[i+1] = s;
				s=0;
			}
	}while(!s);
     cbc:	23 2b       	or	r18, r19
     cbe:	c9 f3       	breq	.-14     	; 0xcb2 <getValueOfSensor3+0xb4>
	
	s = sVals[2] + sVals[3] + sVals[4];
     cc0:	2f 81       	ldd	r18, Y+7	; 0x07
     cc2:	38 85       	ldd	r19, Y+8	; 0x08
     cc4:	8d 81       	ldd	r24, Y+5	; 0x05
     cc6:	9e 81       	ldd	r25, Y+6	; 0x06
     cc8:	28 0f       	add	r18, r24
     cca:	39 1f       	adc	r19, r25
     ccc:	89 85       	ldd	r24, Y+9	; 0x09
     cce:	9a 85       	ldd	r25, Y+10	; 0x0a
     cd0:	28 0f       	add	r18, r24
     cd2:	39 1f       	adc	r19, r25
	s/=3;//calculez media celor 3 din mijloc (eliminandu-le astfel pe cele mai mari si pe cele mai mici)
     cd4:	ab ea       	ldi	r26, 0xAB	; 171
     cd6:	ba ea       	ldi	r27, 0xAA	; 170
     cd8:	0e 94 83 0c 	call	0x1906	; 0x1906 <__umulhisi3>
     cdc:	96 95       	lsr	r25
     cde:	87 95       	ror	r24
	
	//valoarea noua este media ponderata a vechii valori (70%) si valorii curente(30%)
	if(!oldValue[sensor])
     ce0:	41 2f       	mov	r20, r17
     ce2:	50 e0       	ldi	r21, 0x00	; 0
     ce4:	fa 01       	movw	r30, r20
     ce6:	ee 0f       	add	r30, r30
     ce8:	ff 1f       	adc	r31, r31
     cea:	e1 5d       	subi	r30, 0xD1	; 209
     cec:	fb 4f       	sbci	r31, 0xFB	; 251
     cee:	20 81       	ld	r18, Z
     cf0:	31 81       	ldd	r19, Z+1	; 0x01
     cf2:	23 2b       	or	r18, r19
     cf4:	41 f4       	brne	.+16     	; 0xd06 <getValueOfSensor3+0x108>
		oldValue[sensor] = s;
     cf6:	fa 01       	movw	r30, r20
     cf8:	ee 0f       	add	r30, r30
     cfa:	ff 1f       	adc	r31, r31
     cfc:	e1 5d       	subi	r30, 0xD1	; 209
     cfe:	fb 4f       	sbci	r31, 0xFB	; 251
     d00:	91 83       	std	Z+1, r25	; 0x01
     d02:	80 83       	st	Z, r24
     d04:	25 c0       	rjmp	.+74     	; 0xd50 <getValueOfSensor3+0x152>
	else
		oldValue[sensor] = (7*oldValue[sensor] + 3*s) / 10;
     d06:	fa 01       	movw	r30, r20
     d08:	ee 0f       	add	r30, r30
     d0a:	ff 1f       	adc	r31, r31
     d0c:	e1 5d       	subi	r30, 0xD1	; 209
     d0e:	fb 4f       	sbci	r31, 0xFB	; 251
     d10:	20 81       	ld	r18, Z
     d12:	31 81       	ldd	r19, Z+1	; 0x01
     d14:	b9 01       	movw	r22, r18
     d16:	66 0f       	add	r22, r22
     d18:	77 1f       	adc	r23, r23
     d1a:	66 0f       	add	r22, r22
     d1c:	77 1f       	adc	r23, r23
     d1e:	66 0f       	add	r22, r22
     d20:	77 1f       	adc	r23, r23
     d22:	5b 01       	movw	r10, r22
     d24:	a2 1a       	sub	r10, r18
     d26:	b3 0a       	sbc	r11, r19
     d28:	95 01       	movw	r18, r10
     d2a:	bc 01       	movw	r22, r24
     d2c:	66 0f       	add	r22, r22
     d2e:	77 1f       	adc	r23, r23
     d30:	86 0f       	add	r24, r22
     d32:	97 1f       	adc	r25, r23
     d34:	28 0f       	add	r18, r24
     d36:	39 1f       	adc	r19, r25
     d38:	ad ec       	ldi	r26, 0xCD	; 205
     d3a:	bc ec       	ldi	r27, 0xCC	; 204
     d3c:	0e 94 83 0c 	call	0x1906	; 0x1906 <__umulhisi3>
     d40:	96 95       	lsr	r25
     d42:	87 95       	ror	r24
     d44:	96 95       	lsr	r25
     d46:	87 95       	ror	r24
     d48:	96 95       	lsr	r25
     d4a:	87 95       	ror	r24
     d4c:	91 83       	std	Z+1, r25	; 0x01
     d4e:	80 83       	st	Z, r24

	//f(x)=769533/((x<<4)+-520)// front
	//f(x)=24886/((x<<4)+-760) // side
	
	if(sensor<2)
     d50:	12 30       	cpi	r17, 0x02	; 2
     d52:	d0 f4       	brcc	.+52     	; 0xd88 <getValueOfSensor3+0x18a>
		return (322641UL/((oldValue[sensor]<<4)-315));// senzori laterali
     d54:	fa 01       	movw	r30, r20
     d56:	ee 0f       	add	r30, r30
     d58:	ff 1f       	adc	r31, r31
     d5a:	e1 5d       	subi	r30, 0xD1	; 209
     d5c:	fb 4f       	sbci	r31, 0xFB	; 251
     d5e:	20 81       	ld	r18, Z
     d60:	31 81       	ldd	r19, Z+1	; 0x01
     d62:	22 95       	swap	r18
     d64:	32 95       	swap	r19
     d66:	30 7f       	andi	r19, 0xF0	; 240
     d68:	32 27       	eor	r19, r18
     d6a:	20 7f       	andi	r18, 0xF0	; 240
     d6c:	32 27       	eor	r19, r18
     d6e:	2b 53       	subi	r18, 0x3B	; 59
     d70:	31 40       	sbci	r19, 0x01	; 1
     d72:	40 e0       	ldi	r20, 0x00	; 0
     d74:	50 e0       	ldi	r21, 0x00	; 0
     d76:	61 e5       	ldi	r22, 0x51	; 81
     d78:	7c ee       	ldi	r23, 0xEC	; 236
     d7a:	84 e0       	ldi	r24, 0x04	; 4
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__udivmodsi4>
     d82:	ca 01       	movw	r24, r20
     d84:	b9 01       	movw	r22, r18
     d86:	19 c0       	rjmp	.+50     	; 0xdba <getValueOfSensor3+0x1bc>
	else
		return (769533UL/((oldValue[sensor]<<4)-520));	// senzori frontali
     d88:	fa 01       	movw	r30, r20
     d8a:	ee 0f       	add	r30, r30
     d8c:	ff 1f       	adc	r31, r31
     d8e:	e1 5d       	subi	r30, 0xD1	; 209
     d90:	fb 4f       	sbci	r31, 0xFB	; 251
     d92:	20 81       	ld	r18, Z
     d94:	31 81       	ldd	r19, Z+1	; 0x01
     d96:	22 95       	swap	r18
     d98:	32 95       	swap	r19
     d9a:	30 7f       	andi	r19, 0xF0	; 240
     d9c:	32 27       	eor	r19, r18
     d9e:	20 7f       	andi	r18, 0xF0	; 240
     da0:	32 27       	eor	r19, r18
     da2:	28 50       	subi	r18, 0x08	; 8
     da4:	32 40       	sbci	r19, 0x02	; 2
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	50 e0       	ldi	r21, 0x00	; 0
     daa:	6d ef       	ldi	r22, 0xFD	; 253
     dac:	7d eb       	ldi	r23, 0xBD	; 189
     dae:	8b e0       	ldi	r24, 0x0B	; 11
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__udivmodsi4>
     db6:	ca 01       	movw	r24, r20
     db8:	b9 01       	movw	r22, r18
}
     dba:	2e 96       	adiw	r28, 0x0e	; 14
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	1f 91       	pop	r17
     dcc:	0f 91       	pop	r16
     dce:	ff 90       	pop	r15
     dd0:	ef 90       	pop	r14
     dd2:	df 90       	pop	r13
     dd4:	cf 90       	pop	r12
     dd6:	bf 90       	pop	r11
     dd8:	af 90       	pop	r10
     dda:	9f 90       	pop	r9
     ddc:	8f 90       	pop	r8
     dde:	08 95       	ret

00000de0 <readSensors>:
		removeEntryFromTimerQueue(&sendSensor);
	}
}

void readSensors(){
	if(sensorsToRead & 1)
     de0:	80 91 79 04 	lds	r24, 0x0479
     de4:	80 ff       	sbrs	r24, 0
     de6:	0b c0       	rjmp	.+22     	; 0xdfe <readSensors+0x1e>
		lastCMValue[0] = getValueOfSensor3(0);
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	0e 94 ff 05 	call	0xbfe	; 0xbfe <getValueOfSensor3>
     dee:	60 93 37 04 	sts	0x0437, r22
     df2:	70 93 38 04 	sts	0x0438, r23
     df6:	80 93 39 04 	sts	0x0439, r24
     dfa:	90 93 3a 04 	sts	0x043A, r25
	if(sensorsToRead & 2)
     dfe:	80 91 79 04 	lds	r24, 0x0479
     e02:	81 ff       	sbrs	r24, 1
     e04:	0b c0       	rjmp	.+22     	; 0xe1c <readSensors+0x3c>
		lastCMValue[1] = getValueOfSensor3(1);
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	0e 94 ff 05 	call	0xbfe	; 0xbfe <getValueOfSensor3>
     e0c:	60 93 3b 04 	sts	0x043B, r22
     e10:	70 93 3c 04 	sts	0x043C, r23
     e14:	80 93 3d 04 	sts	0x043D, r24
     e18:	90 93 3e 04 	sts	0x043E, r25
	if(sensorsToRead & 4)
     e1c:	80 91 79 04 	lds	r24, 0x0479
     e20:	82 ff       	sbrs	r24, 2
     e22:	0b c0       	rjmp	.+22     	; 0xe3a <readSensors+0x5a>
		lastCMValue[2] = getValueOfSensor3(2);
     e24:	82 e0       	ldi	r24, 0x02	; 2
     e26:	0e 94 ff 05 	call	0xbfe	; 0xbfe <getValueOfSensor3>
     e2a:	60 93 3f 04 	sts	0x043F, r22
     e2e:	70 93 40 04 	sts	0x0440, r23
     e32:	80 93 41 04 	sts	0x0441, r24
     e36:	90 93 42 04 	sts	0x0442, r25
	if(sensorsToRead & 8)
     e3a:	80 91 79 04 	lds	r24, 0x0479
     e3e:	83 ff       	sbrs	r24, 3
     e40:	0b c0       	rjmp	.+22     	; 0xe58 <readSensors+0x78>
		lastCMValue[3] = getValueOfSensor3(3);
     e42:	83 e0       	ldi	r24, 0x03	; 3
     e44:	0e 94 ff 05 	call	0xbfe	; 0xbfe <getValueOfSensor3>
     e48:	60 93 43 04 	sts	0x0443, r22
     e4c:	70 93 44 04 	sts	0x0444, r23
     e50:	80 93 45 04 	sts	0x0445, r24
     e54:	90 93 46 04 	sts	0x0446, r25
     e58:	08 95       	ret

00000e5a <getValueOfSensor>:
	val = ADCL >> 6;
	val |= ADCH << 2;	
	return val;
}

uint16_t getValueOfSensor(Sensor sensor){	
     e5a:	7f 92       	push	r7
     e5c:	8f 92       	push	r8
     e5e:	9f 92       	push	r9
     e60:	af 92       	push	r10
     e62:	bf 92       	push	r11
     e64:	cf 92       	push	r12
     e66:	df 92       	push	r13
     e68:	ef 92       	push	r14
     e6a:	ff 92       	push	r15
     e6c:	0f 93       	push	r16
     e6e:	1f 93       	push	r17
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	2e 97       	sbiw	r28, 0x0e	; 14
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	f8 94       	cli
     e7e:	de bf       	out	0x3e, r29	; 62
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	cd bf       	out	0x3d, r28	; 61
     e84:	78 2e       	mov	r7, r24
     e86:	6e 01       	movw	r12, r28
     e88:	8f e0       	ldi	r24, 0x0F	; 15
     e8a:	c8 0e       	add	r12, r24
     e8c:	d1 1c       	adc	r13, r1
     e8e:	fe 01       	movw	r30, r28
     e90:	31 96       	adiw	r30, 0x01	; 1
     e92:	7f 01       	movw	r14, r30
	uint16_t s;
	
	for(i=0;i<7;i++){
		startADCConversionForSensor(sensor);
		
		while ( ADCSRA & (1 << ADSC));
     e94:	0a e7       	ldi	r16, 0x7A	; 122
     e96:	10 e0       	ldi	r17, 0x00	; 0
		sVals[i] = ADCL >> 6;
     e98:	0f 2e       	mov	r0, r31
     e9a:	f8 e7       	ldi	r31, 0x78	; 120
     e9c:	8f 2e       	mov	r8, r31
     e9e:	91 2c       	mov	r9, r1
     ea0:	f0 2d       	mov	r31, r0
		sVals[i] |= ADCH << 2;		
     ea2:	0f 2e       	mov	r0, r31
     ea4:	f9 e7       	ldi	r31, 0x79	; 121
     ea6:	af 2e       	mov	r10, r31
     ea8:	b1 2c       	mov	r11, r1
     eaa:	f0 2d       	mov	r31, r0
	uint16_t sVals[7];
	uint8_t i;
	uint16_t s;
	
	for(i=0;i<7;i++){
		startADCConversionForSensor(sensor);
     eac:	87 2d       	mov	r24, r7
     eae:	0e 94 db 05 	call	0xbb6	; 0xbb6 <startADCConversionForSensor>
		
		while ( ADCSRA & (1 << ADSC));
     eb2:	f8 01       	movw	r30, r16
     eb4:	80 81       	ld	r24, Z
     eb6:	86 fd       	sbrc	r24, 6
     eb8:	fc cf       	rjmp	.-8      	; 0xeb2 <getValueOfSensor+0x58>
		sVals[i] = ADCL >> 6;
     eba:	f4 01       	movw	r30, r8
     ebc:	20 81       	ld	r18, Z
     ebe:	22 95       	swap	r18
     ec0:	26 95       	lsr	r18
     ec2:	26 95       	lsr	r18
     ec4:	23 70       	andi	r18, 0x03	; 3
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	f7 01       	movw	r30, r14
     eca:	31 83       	std	Z+1, r19	; 0x01
     ecc:	20 83       	st	Z, r18
		sVals[i] |= ADCH << 2;		
     ece:	f5 01       	movw	r30, r10
     ed0:	80 81       	ld	r24, Z
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	28 2b       	or	r18, r24
     ede:	39 2b       	or	r19, r25
     ee0:	f7 01       	movw	r30, r14
     ee2:	21 93       	st	Z+, r18
     ee4:	31 93       	st	Z+, r19
     ee6:	7f 01       	movw	r14, r30
	
	uint16_t sVals[7];
	uint8_t i;
	uint16_t s;
	
	for(i=0;i<7;i++){
     ee8:	ec 15       	cp	r30, r12
     eea:	fd 05       	cpc	r31, r13
     eec:	f9 f6       	brne	.-66     	; 0xeac <getValueOfSensor+0x52>
     eee:	fe 01       	movw	r30, r28
     ef0:	31 96       	adiw	r30, 0x01	; 1
     ef2:	40 e0       	ldi	r20, 0x00	; 0
     ef4:	50 e0       	ldi	r21, 0x00	; 0
		sVals[i] |= ADCH << 2;		
	}
	
	s=0;
	for(i=0;i<7;i++)
		s+=sVals[i];
     ef6:	81 91       	ld	r24, Z+
     ef8:	91 91       	ld	r25, Z+
     efa:	48 0f       	add	r20, r24
     efc:	59 1f       	adc	r21, r25
		sVals[i] = ADCL >> 6;
		sVals[i] |= ADCH << 2;		
	}
	
	s=0;
	for(i=0;i<7;i++)
     efe:	ec 15       	cp	r30, r12
     f00:	fd 05       	cpc	r31, r13
     f02:	c9 f7       	brne	.-14     	; 0xef6 <getValueOfSensor+0x9c>
		s+=sVals[i];
		
	return s/7;
     f04:	9a 01       	movw	r18, r20
     f06:	a3 e9       	ldi	r26, 0x93	; 147
     f08:	b4 e2       	ldi	r27, 0x24	; 36
     f0a:	0e 94 83 0c 	call	0x1906	; 0x1906 <__umulhisi3>
     f0e:	48 1b       	sub	r20, r24
     f10:	59 0b       	sbc	r21, r25
     f12:	9a 01       	movw	r18, r20
     f14:	36 95       	lsr	r19
     f16:	27 95       	ror	r18
     f18:	82 0f       	add	r24, r18
     f1a:	93 1f       	adc	r25, r19
}
     f1c:	96 95       	lsr	r25
     f1e:	87 95       	ror	r24
     f20:	96 95       	lsr	r25
     f22:	87 95       	ror	r24
     f24:	2e 96       	adiw	r28, 0x0e	; 14
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	de bf       	out	0x3e, r29	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	cd bf       	out	0x3d, r28	; 61
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	1f 91       	pop	r17
     f36:	0f 91       	pop	r16
     f38:	ff 90       	pop	r15
     f3a:	ef 90       	pop	r14
     f3c:	df 90       	pop	r13
     f3e:	cf 90       	pop	r12
     f40:	bf 90       	pop	r11
     f42:	af 90       	pop	r10
     f44:	9f 90       	pop	r9
     f46:	8f 90       	pop	r8
     f48:	7f 90       	pop	r7
     f4a:	08 95       	ret

00000f4c <functieRotireStanga>:
		break;
	}	
}


void functieRotireStanga(void){
     f4c:	af 92       	push	r10
     f4e:	bf 92       	push	r11
     f50:	cf 92       	push	r12
     f52:	df 92       	push	r13
     f54:	ef 92       	push	r14
     f56:	ff 92       	push	r15
     f58:	0f 93       	push	r16
     f5a:	1f 93       	push	r17
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	c4 56       	subi	r28, 0x64	; 100
     f66:	d1 09       	sbc	r29, r1
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	de bf       	out	0x3e, r29	; 62
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	cd bf       	out	0x3d, r28	; 61
	uint16_t senzorSt = getValueOfSensor(SideLeftSensor);
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	0e 94 2d 07 	call	0xe5a	; 0xe5a <getValueOfSensor>
     f78:	b8 2e       	mov	r11, r24
     f7a:	a9 2e       	mov	r10, r25
	uint16_t senzorDr = getValueOfSensor(SideRightSensor);
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	0e 94 2d 07 	call	0xe5a	; 0xe5a <getValueOfSensor>
     f82:	8c 01       	movw	r16, r24
	debugging = 0;
     f84:	10 92 12 04 	sts	0x0412, r1
	uint16_t senzorStFata = getValueOfSensor(FrontLeftSensor);
     f88:	83 e0       	ldi	r24, 0x03	; 3
     f8a:	0e 94 2d 07 	call	0xe5a	; 0xe5a <getValueOfSensor>
     f8e:	6c 01       	movw	r12, r24
	uint16_t senzorDrFata =getValueOfSensor(FrontRightSensor);
     f90:	82 e0       	ldi	r24, 0x02	; 2
     f92:	0e 94 2d 07 	call	0xe5a	; 0xe5a <getValueOfSensor>
     f96:	7c 01       	movw	r14, r24
	
	char str[100];
	sprintf(str, "SF=%d  DF=%d  S=%d  D=%d  stare=%d", senzorStFata,senzorDrFata, senzorSt,senzorDr, stare);
     f98:	80 91 11 04 	lds	r24, 0x0411
     f9c:	1f 92       	push	r1
     f9e:	8f 93       	push	r24
     fa0:	1f 93       	push	r17
     fa2:	0f 93       	push	r16
     fa4:	af 92       	push	r10
     fa6:	bf 92       	push	r11
     fa8:	ff 92       	push	r15
     faa:	ef 92       	push	r14
     fac:	df 92       	push	r13
     fae:	cf 92       	push	r12
     fb0:	83 e6       	ldi	r24, 0x63	; 99
     fb2:	92 e0       	ldi	r25, 0x02	; 2
     fb4:	9f 93       	push	r25
     fb6:	8f 93       	push	r24
     fb8:	ce 01       	movw	r24, r28
     fba:	01 96       	adiw	r24, 0x01	; 1
     fbc:	5c 01       	movw	r10, r24
     fbe:	bf 92       	push	r11
     fc0:	8f 93       	push	r24
     fc2:	0e 94 b1 0c 	call	0x1962	; 0x1962 <sprintf>
	BTTransmitStr(str);
     fc6:	c5 01       	movw	r24, r10
     fc8:	0e 94 15 01 	call	0x22a	; 0x22a <BTTransmitStr>
	
	switch(stare){
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	f8 94       	cli
     fd0:	de bf       	out	0x3e, r29	; 62
     fd2:	0f be       	out	0x3f, r0	; 63
     fd4:	cd bf       	out	0x3d, r28	; 61
     fd6:	80 91 11 04 	lds	r24, 0x0411
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	89 30       	cpi	r24, 0x09	; 9
     fde:	91 05       	cpc	r25, r1
     fe0:	08 f0       	brcs	.+2      	; 0xfe4 <functieRotireStanga+0x98>
     fe2:	99 c0       	rjmp	.+306    	; 0x1116 <__stack+0x17>
     fe4:	fc 01       	movw	r30, r24
     fe6:	ed 5a       	subi	r30, 0xAD	; 173
     fe8:	ff 4f       	sbci	r31, 0xFF	; 255
     fea:	0c 94 7d 0c 	jmp	0x18fa	; 0x18fa <__tablejump2__>
		case Start:
			stare = intrareInParcare;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	80 93 11 04 	sts	0x0411, r24
			BTTransmitStr("Sa incepem :D");
     ff4:	86 e8       	ldi	r24, 0x86	; 134
     ff6:	92 e0       	ldi	r25, 0x02	; 2
     ff8:	0e 94 15 01 	call	0x22a	; 0x22a <BTTransmitStr>
		break;
     ffc:	8c c0       	rjmp	.+280    	; 0x1116 <__stack+0x17>
		case intrareInParcare:/*
			if(senzorStFata>200 && senzorDrFata>200){
				rotirePeLoc(60, 75, RightEngines);
				stare=rotireLoc;
			}*/
			goFrontRight(60,125);
     ffe:	6d e7       	ldi	r22, 0x7D	; 125
    1000:	8c e3       	ldi	r24, 0x3C	; 60
    1002:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <goFrontRight>
			stare = rotireMersDR;			
    1006:	83 e0       	ldi	r24, 0x03	; 3
    1008:	80 93 11 04 	sts	0x0411, r24
		break;
    100c:	84 c0       	rjmp	.+264    	; 0x1116 <__stack+0x17>
		case mersFata: // merge in fata
			if(senzorStFata>150 && senzorDrFata>150){
    100e:	97 e9       	ldi	r25, 0x97	; 151
    1010:	c9 16       	cp	r12, r25
    1012:	d1 04       	cpc	r13, r1
    1014:	60 f0       	brcs	.+24     	; 0x102e <functieRotireStanga+0xe2>
    1016:	87 e9       	ldi	r24, 0x97	; 151
    1018:	e8 16       	cp	r14, r24
    101a:	f1 04       	cpc	r15, r1
    101c:	40 f0       	brcs	.+16     	; 0x102e <functieRotireStanga+0xe2>
				stare = rotireLoc;
    101e:	82 e0       	ldi	r24, 0x02	; 2
    1020:	80 93 11 04 	sts	0x0411, r24
				//goFrontLeft(60, 250);
				rotirePeLoc(60, 75, LeftEngines);
    1024:	41 e0       	ldi	r20, 0x01	; 1
    1026:	6b e4       	ldi	r22, 0x4B	; 75
    1028:	8c e3       	ldi	r24, 0x3C	; 60
    102a:	0e 94 73 04 	call	0x8e6	; 0x8e6 <rotirePeLoc>
			}
			if(senzorDr<100){
    102e:	04 36       	cpi	r16, 0x64	; 100
    1030:	11 05       	cpc	r17, r1
    1032:	a8 f4       	brcc	.+42     	; 0x105e <functieRotireStanga+0x112>
				iesire--;
    1034:	80 91 10 04 	lds	r24, 0x0410
    1038:	81 50       	subi	r24, 0x01	; 1
    103a:	80 93 10 04 	sts	0x0410, r24
				if(iesire==0){
    103e:	80 91 10 04 	lds	r24, 0x0410
    1042:	81 11       	cpse	r24, r1
    1044:	09 c0       	rjmp	.+18     	; 0x1058 <functieRotireStanga+0x10c>
					rotirePeLoc(60,75, RightEngines);
    1046:	40 e0       	ldi	r20, 0x00	; 0
    1048:	6b e4       	ldi	r22, 0x4B	; 75
    104a:	8c e3       	ldi	r24, 0x3C	; 60
    104c:	0e 94 73 04 	call	0x8e6	; 0x8e6 <rotirePeLoc>
					stare= poarta;}
    1050:	86 e0       	ldi	r24, 0x06	; 6
    1052:	80 93 11 04 	sts	0x0411, r24
    1056:	03 c0       	rjmp	.+6      	; 0x105e <functieRotireStanga+0x112>
				else stare=nuPoarta;
    1058:	88 e0       	ldi	r24, 0x08	; 8
    105a:	80 93 11 04 	sts	0x0411, r24
				
			}
			if(senzorDr > 220){
    105e:	0d 3d       	cpi	r16, 0xDD	; 221
    1060:	11 05       	cpc	r17, r1
    1062:	38 f0       	brcs	.+14     	; 0x1072 <functieRotireStanga+0x126>
				stare = rotireMersSt;
    1064:	84 e0       	ldi	r24, 0x04	; 4
    1066:	80 93 11 04 	sts	0x0411, r24
				goFrontLeft(60, 75);
    106a:	6b e4       	ldi	r22, 0x4B	; 75
    106c:	8c e3       	ldi	r24, 0x3C	; 60
    106e:	0e 94 c9 03 	call	0x792	; 0x792 <goFrontLeft>
			}		
			if(senzorDr<250 && senzorDr>170){
    1072:	0b 5a       	subi	r16, 0xAB	; 171
    1074:	11 09       	sbc	r17, r1
    1076:	0f 34       	cpi	r16, 0x4F	; 79
    1078:	11 05       	cpc	r17, r1
    107a:	08 f0       	brcs	.+2      	; 0x107e <functieRotireStanga+0x132>
    107c:	4c c0       	rjmp	.+152    	; 0x1116 <__stack+0x17>
				stare= rotireMersDR;
    107e:	83 e0       	ldi	r24, 0x03	; 3
    1080:	80 93 11 04 	sts	0x0411, r24
				goFrontRight(60, 75);
    1084:	6b e4       	ldi	r22, 0x4B	; 75
    1086:	8c e3       	ldi	r24, 0x3C	; 60
    1088:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <goFrontRight>
    108c:	44 c0       	rjmp	.+136    	; 0x1116 <__stack+0x17>
			}
				
		break;
		case poarta:
			if(senzorStFata <91 && senzorDrFata <180){
    108e:	9b e5       	ldi	r25, 0x5B	; 91
    1090:	c9 16       	cp	r12, r25
    1092:	d1 04       	cpc	r13, r1
    1094:	08 f0       	brcs	.+2      	; 0x1098 <functieRotireStanga+0x14c>
    1096:	3f c0       	rjmp	.+126    	; 0x1116 <__stack+0x17>
    1098:	84 eb       	ldi	r24, 0xB4	; 180
    109a:	e8 16       	cp	r14, r24
    109c:	f1 04       	cpc	r15, r1
    109e:	d8 f5       	brcc	.+118    	; 0x1116 <__stack+0x17>
				goFront(6,75);
    10a0:	6b e4       	ldi	r22, 0x4B	; 75
    10a2:	86 e0       	ldi	r24, 0x06	; 6
    10a4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <goFront>
				stare=bv;
    10a8:	87 e0       	ldi	r24, 0x07	; 7
    10aa:	80 93 11 04 	sts	0x0411, r24
    10ae:	33 c0       	rjmp	.+102    	; 0x1116 <__stack+0x17>
			}
		break;	
		case bv:
			{
				stopEngines();
    10b0:	0e 94 ed 02 	call	0x5da	; 0x5da <stopEngines>
				removeEntryFromTimerQueue(&functieRotireStanga);
    10b4:	86 ea       	ldi	r24, 0xA6	; 166
    10b6:	97 e0       	ldi	r25, 0x07	; 7
    10b8:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <removeEntryFromTimerQueue>
			}
		break;		
    10bc:	2c c0       	rjmp	.+88     	; 0x1116 <__stack+0x17>
		case rotireMersSt:
			if(senzorDr < 300){
    10be:	0c 32       	cpi	r16, 0x2C	; 44
    10c0:	11 40       	sbci	r17, 0x01	; 1
    10c2:	48 f5       	brcc	.+82     	; 0x1116 <__stack+0x17>
				stare = mersFata;
    10c4:	85 e0       	ldi	r24, 0x05	; 5
    10c6:	80 93 11 04 	sts	0x0411, r24
				goFront(60, 75);
    10ca:	6b e4       	ldi	r22, 0x4B	; 75
    10cc:	8c e3       	ldi	r24, 0x3C	; 60
    10ce:	0e 94 71 03 	call	0x6e2	; 0x6e2 <goFront>
    10d2:	21 c0       	rjmp	.+66     	; 0x1116 <__stack+0x17>
			}		
		break;
		case rotireMersDR:
			//if(range(senzorDr,senzorDrFata)==0)
			{
				stare=mersFata;
    10d4:	85 e0       	ldi	r24, 0x05	; 5
    10d6:	80 93 11 04 	sts	0x0411, r24
				goFront(60, 75);
    10da:	6b e4       	ldi	r22, 0x4B	; 75
    10dc:	8c e3       	ldi	r24, 0x3C	; 60
    10de:	0e 94 71 03 	call	0x6e2	; 0x6e2 <goFront>
			}
		break;
    10e2:	19 c0       	rjmp	.+50     	; 0x1116 <__stack+0x17>
		case rotireLoc:
			if(senzorDrFata> 100 && senzorDrFata<140){
    10e4:	85 e6       	ldi	r24, 0x65	; 101
    10e6:	e8 1a       	sub	r14, r24
    10e8:	f1 08       	sbc	r15, r1
    10ea:	97 e2       	ldi	r25, 0x27	; 39
    10ec:	e9 16       	cp	r14, r25
    10ee:	f1 04       	cpc	r15, r1
    10f0:	90 f4       	brcc	.+36     	; 0x1116 <__stack+0x17>
				goFront(60, 75);
    10f2:	6b e4       	ldi	r22, 0x4B	; 75
    10f4:	8c e3       	ldi	r24, 0x3C	; 60
    10f6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <goFront>
				stare=mersFata;				
    10fa:	85 e0       	ldi	r24, 0x05	; 5
    10fc:	80 93 11 04 	sts	0x0411, r24
    1100:	0a c0       	rjmp	.+20     	; 0x1116 <__stack+0x17>
			}
		break;
		case nuPoarta:
			if(senzorDr < 300){
    1102:	0c 32       	cpi	r16, 0x2C	; 44
    1104:	11 40       	sbci	r17, 0x01	; 1
    1106:	38 f4       	brcc	.+14     	; 0x1116 <__stack+0x17>
				stare=mersFata;
    1108:	85 e0       	ldi	r24, 0x05	; 5
    110a:	80 93 11 04 	sts	0x0411, r24
				goFront(60,75);
    110e:	6b e4       	ldi	r22, 0x4B	; 75
    1110:	8c e3       	ldi	r24, 0x3C	; 60
    1112:	0e 94 71 03 	call	0x6e2	; 0x6e2 <goFront>
			}
		break;
	}
	
	debugging = 1;
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	80 93 12 04 	sts	0x0412, r24
}
    111c:	cc 59       	subi	r28, 0x9C	; 156
    111e:	df 4f       	sbci	r29, 0xFF	; 255
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	f8 94       	cli
    1124:	de bf       	out	0x3e, r29	; 62
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	cd bf       	out	0x3d, r28	; 61
    112a:	df 91       	pop	r29
    112c:	cf 91       	pop	r28
    112e:	1f 91       	pop	r17
    1130:	0f 91       	pop	r16
    1132:	ff 90       	pop	r15
    1134:	ef 90       	pop	r14
    1136:	df 90       	pop	r13
    1138:	cf 90       	pop	r12
    113a:	bf 90       	pop	r11
    113c:	af 90       	pop	r10
    113e:	08 95       	ret

00001140 <main>:
volatile uint8_t sradc0, shouldBlink=0;

int main(void)
{
	
	initBTProtocol();
    1140:	0e 94 0b 02 	call	0x416	; 0x416 <initBTProtocol>
	initTiming();
    1144:	0e 94 c6 08 	call	0x118c	; 0x118c <initTiming>
	initLeds();
    1148:	0e 94 18 0c 	call	0x1830	; 0x1830 <initLeds>
	initEngines();
    114c:	0e 94 13 03 	call	0x626	; 0x626 <initEngines>
	initTimeQueue();
    1150:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <initTimeQueue>
	initSensors();
    1154:	0e 94 b7 05 	call	0xb6e	; 0xb6e <initSensors>
	initEncoders();
    1158:	0e 94 68 02 	call	0x4d0	; 0x4d0 <initEncoders>
	sei();
    115c:	78 94       	sei
	
	BTTransmitStr("  >>>main start<<<  ");
    115e:	82 eb       	ldi	r24, 0xB2	; 178
    1160:	92 e0       	ldi	r25, 0x02	; 2
    1162:	0e 94 15 01 	call	0x22a	; 0x22a <BTTransmitStr>
	
	
    while(1)
    {
		
		checkTimeQueue();
    1166:	0e 94 83 0b 	call	0x1706	; 0x1706 <checkTimeQueue>
    116a:	fd cf       	rjmp	.-6      	; 0x1166 <main+0x26>

0000116c <toggleDebuggingOff>:
void turnDebuggingOn(){
	debugging = 1;
}

void toggleDebuggingOff(){
	if(DEBUGGING){
    116c:	80 91 12 04 	lds	r24, 0x0412
    1170:	80 ff       	sbrs	r24, 0
    1172:	04 c0       	rjmp	.+8      	; 0x117c <toggleDebuggingOff+0x10>
		debugging = 2;
    1174:	82 e0       	ldi	r24, 0x02	; 2
    1176:	80 93 12 04 	sts	0x0412, r24
    117a:	08 95       	ret
	}
	else
		if(LAST_DEBUGGING)
    117c:	80 91 12 04 	lds	r24, 0x0412
    1180:	81 ff       	sbrs	r24, 1
    1182:	03 c0       	rjmp	.+6      	; 0x118a <toggleDebuggingOff+0x1e>
			debugging = 1;
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	80 93 12 04 	sts	0x0412, r24
    118a:	08 95       	ret

0000118c <initTiming>:
volatile queueEntry TimerQueue[20];
uint8_t TimerQueueSize = 20;

void initTiming()
{
	TIMSK1|=(1<<TOIE1);
    118c:	ef e6       	ldi	r30, 0x6F	; 111
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	81 60       	ori	r24, 0x01	; 1
    1194:	80 83       	st	Z, r24
	TCNT1 = 0x00;
    1196:	10 92 85 00 	sts	0x0085, r1
    119a:	10 92 84 00 	sts	0x0084, r1
	TCCR1B = 0x01;
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	80 93 81 00 	sts	0x0081, r24
    11a4:	08 95       	ret

000011a6 <initTimeQueue>:
}

void initTimeQueue(){
	uint8_t i;
	// initializez toti pointerii cu 0, adica pe fiecare pozitie din coada e o structura neocupata
	for(i=0;i<TimerQueueSize;i++)
    11a6:	40 91 00 01 	lds	r20, 0x0100
    11aa:	44 23       	and	r20, r20
    11ac:	a9 f0       	breq	.+42     	; 0x11d8 <initTimeQueue+0x32>
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	90 e0       	ldi	r25, 0x00	; 0
		TimerQueue[i].pointerFct = 0;
    11b2:	fc 01       	movw	r30, r24
    11b4:	ee 0f       	add	r30, r30
    11b6:	ff 1f       	adc	r31, r31
    11b8:	9c 01       	movw	r18, r24
    11ba:	22 0f       	add	r18, r18
    11bc:	33 1f       	adc	r19, r19
    11be:	22 0f       	add	r18, r18
    11c0:	33 1f       	adc	r19, r19
    11c2:	22 0f       	add	r18, r18
    11c4:	33 1f       	adc	r19, r19
    11c6:	e2 0f       	add	r30, r18
    11c8:	f3 1f       	adc	r31, r19
    11ca:	e5 58       	subi	r30, 0x85	; 133
    11cc:	fb 4f       	sbci	r31, 0xFB	; 251
    11ce:	11 86       	std	Z+9, r1	; 0x09
    11d0:	10 86       	std	Z+8, r1	; 0x08
    11d2:	01 96       	adiw	r24, 0x01	; 1
}

void initTimeQueue(){
	uint8_t i;
	// initializez toti pointerii cu 0, adica pe fiecare pozitie din coada e o structura neocupata
	for(i=0;i<TimerQueueSize;i++)
    11d4:	84 17       	cp	r24, r20
    11d6:	68 f3       	brcs	.-38     	; 0x11b2 <initTimeQueue+0xc>
    11d8:	08 95       	ret

000011da <addEntryToTimerQueue>:
		TimerQueue[i].pointerFct = 0;
}

// delay e in microsecunde (10^-6 secunde)
void addEntryToTimerQueue(void (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
    11da:	df 92       	push	r13
    11dc:	ef 92       	push	r14
    11de:	ff 92       	push	r15
    11e0:	0f 93       	push	r16
    11e2:	1f 93       	push	r17
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	ce 56       	subi	r28, 0x6E	; 110
    11ee:	d1 09       	sbc	r29, r1
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
	cli(); // dezactivare intreruperi
    11fa:	f8 94       	cli
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
    11fc:	d0 90 00 01 	lds	r13, 0x0100
    1200:	dd 20       	and	r13, r13
    1202:	09 f4       	brne	.+2      	; 0x1206 <addEntryToTimerQueue+0x2c>
    1204:	76 c0       	rjmp	.+236    	; 0x12f2 <addEntryToTimerQueue+0x118>
		if(TimerQueue[i].pointerFct == 0)
    1206:	e0 91 83 04 	lds	r30, 0x0483
    120a:	f0 91 84 04 	lds	r31, 0x0484
    120e:	ef 2b       	or	r30, r31
    1210:	09 f4       	brne	.+2      	; 0x1214 <addEntryToTimerQueue+0x3a>
    1212:	78 c0       	rjmp	.+240    	; 0x1304 <addEntryToTimerQueue+0x12a>
			break;
		if(TimerQueue[i].pointerFct == _theFct){
    1214:	e0 91 83 04 	lds	r30, 0x0483
    1218:	f0 91 84 04 	lds	r31, 0x0484
    121c:	e8 17       	cp	r30, r24
    121e:	f9 07       	cpc	r31, r25
    1220:	09 f0       	breq	.+2      	; 0x1224 <addEntryToTimerQueue+0x4a>
    1222:	5d c0       	rjmp	.+186    	; 0x12de <addEntryToTimerQueue+0x104>
    1224:	2d c0       	rjmp	.+90     	; 0x1280 <addEntryToTimerQueue+0xa6>
void addEntryToTimerQueue(void (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
	cli(); // dezactivare intreruperi
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct == 0)
    1226:	7f 01       	movw	r14, r30
    1228:	df 01       	movw	r26, r30
    122a:	aa 0f       	add	r26, r26
    122c:	bb 1f       	adc	r27, r27
    122e:	aa 0f       	add	r26, r26
    1230:	bb 1f       	adc	r27, r27
    1232:	aa 0f       	add	r26, r26
    1234:	bb 1f       	adc	r27, r27
    1236:	8f 01       	movw	r16, r30
    1238:	00 0f       	add	r16, r16
    123a:	11 1f       	adc	r17, r17
    123c:	a0 0f       	add	r26, r16
    123e:	b1 1f       	adc	r27, r17
    1240:	a5 58       	subi	r26, 0x85	; 133
    1242:	bb 4f       	sbci	r27, 0xFB	; 251
    1244:	18 96       	adiw	r26, 0x08	; 8
    1246:	0d 90       	ld	r0, X+
    1248:	bc 91       	ld	r27, X
    124a:	a0 2d       	mov	r26, r0
    124c:	ab 2b       	or	r26, r27
    124e:	09 f4       	brne	.+2      	; 0x1252 <addEntryToTimerQueue+0x78>
    1250:	4d c0       	rjmp	.+154    	; 0x12ec <addEntryToTimerQueue+0x112>
			break;
		if(TimerQueue[i].pointerFct == _theFct){
    1252:	8f 01       	movw	r16, r30
    1254:	00 0f       	add	r16, r16
    1256:	11 1f       	adc	r17, r17
    1258:	df 01       	movw	r26, r30
    125a:	aa 0f       	add	r26, r26
    125c:	bb 1f       	adc	r27, r27
    125e:	aa 0f       	add	r26, r26
    1260:	bb 1f       	adc	r27, r27
    1262:	aa 0f       	add	r26, r26
    1264:	bb 1f       	adc	r27, r27
    1266:	a0 0f       	add	r26, r16
    1268:	b1 1f       	adc	r27, r17
    126a:	a5 58       	subi	r26, 0x85	; 133
    126c:	bb 4f       	sbci	r27, 0xFB	; 251
    126e:	18 96       	adiw	r26, 0x08	; 8
    1270:	0d 90       	ld	r0, X+
    1272:	bc 91       	ld	r27, X
    1274:	a0 2d       	mov	r26, r0
    1276:	31 96       	adiw	r30, 0x01	; 1
    1278:	a8 17       	cp	r26, r24
    127a:	b9 07       	cpc	r27, r25
    127c:	91 f5       	brne	.+100    	; 0x12e2 <addEntryToTimerQueue+0x108>
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <addEntryToTimerQueue+0xaa>
void addEntryToTimerQueue(void (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
	cli(); // dezactivare intreruperi
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct == 0)
    1280:	e1 2c       	mov	r14, r1
    1282:	f1 2c       	mov	r15, r1
			break;
		if(TimerQueue[i].pointerFct == _theFct){
			if(DEBUGGING){
    1284:	80 91 12 04 	lds	r24, 0x0412
    1288:	80 ff       	sbrs	r24, 0
    128a:	97 c0       	rjmp	.+302    	; 0x13ba <addEntryToTimerQueue+0x1e0>
				char msg[100];
				sprintf(msg, "Functia asta e deja in coada! cu delay: %lu", TimerQueue[i].delay);
    128c:	f7 01       	movw	r30, r14
    128e:	ee 0f       	add	r30, r30
    1290:	ff 1f       	adc	r31, r31
    1292:	ee 0c       	add	r14, r14
    1294:	ff 1c       	adc	r15, r15
    1296:	ee 0c       	add	r14, r14
    1298:	ff 1c       	adc	r15, r15
    129a:	ee 0c       	add	r14, r14
    129c:	ff 1c       	adc	r15, r15
    129e:	ee 0d       	add	r30, r14
    12a0:	ff 1d       	adc	r31, r15
    12a2:	e5 58       	subi	r30, 0x85	; 133
    12a4:	fb 4f       	sbci	r31, 0xFB	; 251
    12a6:	80 81       	ld	r24, Z
    12a8:	91 81       	ldd	r25, Z+1	; 0x01
    12aa:	a2 81       	ldd	r26, Z+2	; 0x02
    12ac:	b3 81       	ldd	r27, Z+3	; 0x03
    12ae:	bf 93       	push	r27
    12b0:	af 93       	push	r26
    12b2:	9f 93       	push	r25
    12b4:	8f 93       	push	r24
    12b6:	87 ec       	ldi	r24, 0xC7	; 199
    12b8:	92 e0       	ldi	r25, 0x02	; 2
    12ba:	9f 93       	push	r25
    12bc:	8f 93       	push	r24
    12be:	8e 01       	movw	r16, r28
    12c0:	05 5f       	subi	r16, 0xF5	; 245
    12c2:	1f 4f       	sbci	r17, 0xFF	; 255
    12c4:	1f 93       	push	r17
    12c6:	0f 93       	push	r16
    12c8:	0e 94 b1 0c 	call	0x1962	; 0x1962 <sprintf>
				BTTransmitStr(msg);
    12cc:	c8 01       	movw	r24, r16
    12ce:	0e 94 15 01 	call	0x22a	; 0x22a <BTTransmitStr>
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	de bf       	out	0x3e, r29	; 62
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	cd bf       	out	0x3d, r28	; 61
    12dc:	6e c0       	rjmp	.+220    	; 0x13ba <addEntryToTimerQueue+0x1e0>
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct == 0)
			break;
		if(TimerQueue[i].pointerFct == _theFct){
    12de:	e1 e0       	ldi	r30, 0x01	; 1
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
// delay e in microsecunde (10^-6 secunde)
void addEntryToTimerQueue(void (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
	cli(); // dezactivare intreruperi
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
    12e2:	3e 2f       	mov	r19, r30
    12e4:	ed 15       	cp	r30, r13
    12e6:	08 f4       	brcc	.+2      	; 0x12ea <addEntryToTimerQueue+0x110>
    12e8:	9e cf       	rjmp	.-196    	; 0x1226 <addEntryToTimerQueue+0x4c>
    12ea:	01 c0       	rjmp	.+2      	; 0x12ee <addEntryToTimerQueue+0x114>
    12ec:	e3 2f       	mov	r30, r19
				BTTransmitStr(msg);
			}
			return;
		}
	}
	if(i == TimerQueueSize){
    12ee:	ed 11       	cpse	r30, r13
    12f0:	0a c0       	rjmp	.+20     	; 0x1306 <addEntryToTimerQueue+0x12c>
		//nu mai e loc in coada
		if(DEBUGGING)
    12f2:	80 91 12 04 	lds	r24, 0x0412
    12f6:	80 ff       	sbrs	r24, 0
    12f8:	60 c0       	rjmp	.+192    	; 0x13ba <addEntryToTimerQueue+0x1e0>
			BTTransmitStr("Coada e full!");
    12fa:	83 ef       	ldi	r24, 0xF3	; 243
    12fc:	92 e0       	ldi	r25, 0x02	; 2
    12fe:	0e 94 15 01 	call	0x22a	; 0x22a <BTTransmitStr>
    1302:	5b c0       	rjmp	.+182    	; 0x13ba <addEntryToTimerQueue+0x1e0>
// delay e in microsecunde (10^-6 secunde)
void addEntryToTimerQueue(void (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
	cli(); // dezactivare intreruperi
	uint8_t i;
	
	for(i=0; i<TimerQueueSize; i++){
    1304:	30 e0       	ldi	r19, 0x00	; 0
	}
	
	//construire entry pentru functia curenta 
	queueEntry thisEntry;
	thisEntry.delay = _delay;
	thisEntry.repeatDelay = _repeat ? _delay :0;
    1306:	21 11       	cpse	r18, r1
    1308:	04 c0       	rjmp	.+8      	; 0x1312 <addEntryToTimerQueue+0x138>
    130a:	a0 e0       	ldi	r26, 0x00	; 0
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	e0 e0       	ldi	r30, 0x00	; 0
    1310:	04 c0       	rjmp	.+8      	; 0x131a <addEntryToTimerQueue+0x140>
    1312:	a4 2f       	mov	r26, r20
    1314:	f5 2f       	mov	r31, r21
    1316:	e6 2f       	mov	r30, r22
    1318:	27 2f       	mov	r18, r23
	thisEntry.pointerFct = _theFct;
	
	TimerQueue[i] = thisEntry;
    131a:	03 2f       	mov	r16, r19
    131c:	10 e0       	ldi	r17, 0x00	; 0
    131e:	49 83       	std	Y+1, r20	; 0x01
    1320:	5a 83       	std	Y+2, r21	; 0x02
    1322:	6b 83       	std	Y+3, r22	; 0x03
    1324:	7c 83       	std	Y+4, r23	; 0x04
    1326:	ad 83       	std	Y+5, r26	; 0x05
    1328:	fe 83       	std	Y+6, r31	; 0x06
    132a:	ef 83       	std	Y+7, r30	; 0x07
    132c:	28 87       	std	Y+8, r18	; 0x08
    132e:	9a 87       	std	Y+10, r25	; 0x0a
    1330:	89 87       	std	Y+9, r24	; 0x09
    1332:	d8 01       	movw	r26, r16
    1334:	aa 0f       	add	r26, r26
    1336:	bb 1f       	adc	r27, r27
    1338:	c8 01       	movw	r24, r16
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	a8 0f       	add	r26, r24
    1348:	b9 1f       	adc	r27, r25
    134a:	a5 58       	subi	r26, 0x85	; 133
    134c:	bb 4f       	sbci	r27, 0xFB	; 251
    134e:	8a e0       	ldi	r24, 0x0A	; 10
    1350:	fe 01       	movw	r30, r28
    1352:	31 96       	adiw	r30, 0x01	; 1
    1354:	01 90       	ld	r0, Z+
    1356:	0d 92       	st	X+, r0
    1358:	8a 95       	dec	r24
    135a:	e1 f7       	brne	.-8      	; 0x1354 <addEntryToTimerQueue+0x17a>
	
	if(DEBUGGING){
    135c:	80 91 12 04 	lds	r24, 0x0412
    1360:	80 ff       	sbrs	r24, 0
    1362:	2a c0       	rjmp	.+84     	; 0x13b8 <addEntryToTimerQueue+0x1de>
		char msg[100];		
		sprintf(msg, "Entry adaugat in coada! la index %d si cu delay: %lu", i, TimerQueue[i].delay);
    1364:	f8 01       	movw	r30, r16
    1366:	ee 0f       	add	r30, r30
    1368:	ff 1f       	adc	r31, r31
    136a:	00 0f       	add	r16, r16
    136c:	11 1f       	adc	r17, r17
    136e:	00 0f       	add	r16, r16
    1370:	11 1f       	adc	r17, r17
    1372:	00 0f       	add	r16, r16
    1374:	11 1f       	adc	r17, r17
    1376:	e0 0f       	add	r30, r16
    1378:	f1 1f       	adc	r31, r17
    137a:	e5 58       	subi	r30, 0x85	; 133
    137c:	fb 4f       	sbci	r31, 0xFB	; 251
    137e:	80 81       	ld	r24, Z
    1380:	91 81       	ldd	r25, Z+1	; 0x01
    1382:	a2 81       	ldd	r26, Z+2	; 0x02
    1384:	b3 81       	ldd	r27, Z+3	; 0x03
    1386:	bf 93       	push	r27
    1388:	af 93       	push	r26
    138a:	9f 93       	push	r25
    138c:	8f 93       	push	r24
    138e:	1f 92       	push	r1
    1390:	3f 93       	push	r19
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	93 e0       	ldi	r25, 0x03	; 3
    1396:	9f 93       	push	r25
    1398:	8f 93       	push	r24
    139a:	8e 01       	movw	r16, r28
    139c:	05 5f       	subi	r16, 0xF5	; 245
    139e:	1f 4f       	sbci	r17, 0xFF	; 255
    13a0:	1f 93       	push	r17
    13a2:	0f 93       	push	r16
    13a4:	0e 94 b1 0c 	call	0x1962	; 0x1962 <sprintf>
		BTTransmitStr(msg);
    13a8:	c8 01       	movw	r24, r16
    13aa:	0e 94 15 01 	call	0x22a	; 0x22a <BTTransmitStr>
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	de bf       	out	0x3e, r29	; 62
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	cd bf       	out	0x3d, r28	; 61
	}
	sei();
    13b8:	78 94       	sei
}
    13ba:	c2 59       	subi	r28, 0x92	; 146
    13bc:	df 4f       	sbci	r29, 0xFF	; 255
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	cd bf       	out	0x3d, r28	; 61
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	1f 91       	pop	r17
    13ce:	0f 91       	pop	r16
    13d0:	ff 90       	pop	r15
    13d2:	ef 90       	pop	r14
    13d4:	df 90       	pop	r13
    13d6:	08 95       	ret

000013d8 <removeEntryFromTimerQueue>:
void removeEntryFromTimerQueue(void (*_theFct) (void)){
    13d8:	bf 92       	push	r11
    13da:	cf 92       	push	r12
    13dc:	df 92       	push	r13
    13de:	ef 92       	push	r14
    13e0:	ff 92       	push	r15
    13e2:	0f 93       	push	r16
    13e4:	1f 93       	push	r17
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    13ee:	c4 56       	subi	r28, 0x64	; 100
    13f0:	d1 09       	sbc	r29, r1
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	f8 94       	cli
    13f6:	de bf       	out	0x3e, r29	; 62
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	cd bf       	out	0x3d, r28	; 61
    13fc:	8c 01       	movw	r16, r24
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
    13fe:	80 91 00 01 	lds	r24, 0x0100
    1402:	88 23       	and	r24, r24
    1404:	09 f4       	brne	.+2      	; 0x1408 <removeEntryFromTimerQueue+0x30>
    1406:	52 c0       	rjmp	.+164    	; 0x14ac <removeEntryFromTimerQueue+0xd4>
    1408:	b1 2c       	mov	r11, r1
			TimerQueue[i].pointerFct = 0;
			TimerQueue[i].delay = 0;
			TimerQueue[i].repeatDelay = 0;
			if(DEBUGGING){
				char msg[100];
				sprintf(msg, "Entry sters din coada. de pe pozitia %d", i);
    140a:	0f 2e       	mov	r0, r31
    140c:	f6 e3       	ldi	r31, 0x36	; 54
    140e:	cf 2e       	mov	r12, r31
    1410:	f3 e0       	ldi	r31, 0x03	; 3
    1412:	df 2e       	mov	r13, r31
    1414:	f0 2d       	mov	r31, r0
    1416:	ce 01       	movw	r24, r28
    1418:	01 96       	adiw	r24, 0x01	; 1
    141a:	7c 01       	movw	r14, r24
	sei();
}
void removeEntryFromTimerQueue(void (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct == _theFct){
    141c:	2b 2d       	mov	r18, r11
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	f9 01       	movw	r30, r18
    1422:	ee 0f       	add	r30, r30
    1424:	ff 1f       	adc	r31, r31
    1426:	c9 01       	movw	r24, r18
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	88 0f       	add	r24, r24
    1432:	99 1f       	adc	r25, r25
    1434:	e8 0f       	add	r30, r24
    1436:	f9 1f       	adc	r31, r25
    1438:	e5 58       	subi	r30, 0x85	; 133
    143a:	fb 4f       	sbci	r31, 0xFB	; 251
    143c:	40 85       	ldd	r20, Z+8	; 0x08
    143e:	51 85       	ldd	r21, Z+9	; 0x09
    1440:	40 17       	cp	r20, r16
    1442:	51 07       	cpc	r21, r17
    1444:	69 f5       	brne	.+90     	; 0x14a0 <removeEntryFromTimerQueue+0xc8>
			TimerQueue[i].pointerFct = 0;
    1446:	c9 01       	movw	r24, r18
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	f9 01       	movw	r30, r18
    1456:	ee 0f       	add	r30, r30
    1458:	ff 1f       	adc	r31, r31
    145a:	e8 0f       	add	r30, r24
    145c:	f9 1f       	adc	r31, r25
    145e:	e5 58       	subi	r30, 0x85	; 133
    1460:	fb 4f       	sbci	r31, 0xFB	; 251
    1462:	11 86       	std	Z+9, r1	; 0x09
    1464:	10 86       	std	Z+8, r1	; 0x08
			TimerQueue[i].delay = 0;
    1466:	10 82       	st	Z, r1
    1468:	11 82       	std	Z+1, r1	; 0x01
    146a:	12 82       	std	Z+2, r1	; 0x02
    146c:	13 82       	std	Z+3, r1	; 0x03
			TimerQueue[i].repeatDelay = 0;
    146e:	14 82       	std	Z+4, r1	; 0x04
    1470:	15 82       	std	Z+5, r1	; 0x05
    1472:	16 82       	std	Z+6, r1	; 0x06
    1474:	17 82       	std	Z+7, r1	; 0x07
			if(DEBUGGING){
    1476:	80 91 12 04 	lds	r24, 0x0412
    147a:	80 ff       	sbrs	r24, 0
    147c:	11 c0       	rjmp	.+34     	; 0x14a0 <removeEntryFromTimerQueue+0xc8>
				char msg[100];
				sprintf(msg, "Entry sters din coada. de pe pozitia %d", i);
    147e:	3f 93       	push	r19
    1480:	bf 92       	push	r11
    1482:	df 92       	push	r13
    1484:	cf 92       	push	r12
    1486:	ff 92       	push	r15
    1488:	ef 92       	push	r14
    148a:	0e 94 b1 0c 	call	0x1962	; 0x1962 <sprintf>
				BTTransmitStr(msg);
    148e:	c7 01       	movw	r24, r14
    1490:	0e 94 15 01 	call	0x22a	; 0x22a <BTTransmitStr>
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
	}
	sei();
}
void removeEntryFromTimerQueue(void (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
    14a0:	b3 94       	inc	r11
    14a2:	80 91 00 01 	lds	r24, 0x0100
    14a6:	b8 16       	cp	r11, r24
    14a8:	08 f4       	brcc	.+2      	; 0x14ac <removeEntryFromTimerQueue+0xd4>
    14aa:	b8 cf       	rjmp	.-144    	; 0x141c <removeEntryFromTimerQueue+0x44>
				sprintf(msg, "Entry sters din coada. de pe pozitia %d", i);
				BTTransmitStr(msg);
			}
		}
	}
}
    14ac:	cc 59       	subi	r28, 0x9C	; 156
    14ae:	df 4f       	sbci	r29, 0xFF	; 255
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	cd bf       	out	0x3d, r28	; 61
    14ba:	df 91       	pop	r29
    14bc:	cf 91       	pop	r28
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	ff 90       	pop	r15
    14c4:	ef 90       	pop	r14
    14c6:	df 90       	pop	r13
    14c8:	cf 90       	pop	r12
    14ca:	bf 90       	pop	r11
    14cc:	08 95       	ret

000014ce <existsEntryInTimerQueue>:

uint8_t existsEntryInTimerQueue(void (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
    14ce:	60 91 00 01 	lds	r22, 0x0100
    14d2:	66 23       	and	r22, r22
    14d4:	19 f1       	breq	.+70     	; 0x151c <existsEntryInTimerQueue+0x4e>
		if(TimerQueue[i].pointerFct == _theFct){			
    14d6:	20 91 83 04 	lds	r18, 0x0483
    14da:	30 91 84 04 	lds	r19, 0x0484
    14de:	28 17       	cp	r18, r24
    14e0:	39 07       	cpc	r19, r25
    14e2:	f1 f0       	breq	.+60     	; 0x1520 <existsEntryInTimerQueue+0x52>
    14e4:	21 e0       	ldi	r18, 0x01	; 1
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	15 c0       	rjmp	.+42     	; 0x1514 <existsEntryInTimerQueue+0x46>
    14ea:	f9 01       	movw	r30, r18
    14ec:	ee 0f       	add	r30, r30
    14ee:	ff 1f       	adc	r31, r31
    14f0:	a9 01       	movw	r20, r18
    14f2:	44 0f       	add	r20, r20
    14f4:	55 1f       	adc	r21, r21
    14f6:	44 0f       	add	r20, r20
    14f8:	55 1f       	adc	r21, r21
    14fa:	44 0f       	add	r20, r20
    14fc:	55 1f       	adc	r21, r21
    14fe:	e4 0f       	add	r30, r20
    1500:	f5 1f       	adc	r31, r21
    1502:	e5 58       	subi	r30, 0x85	; 133
    1504:	fb 4f       	sbci	r31, 0xFB	; 251
    1506:	40 85       	ldd	r20, Z+8	; 0x08
    1508:	51 85       	ldd	r21, Z+9	; 0x09
    150a:	2f 5f       	subi	r18, 0xFF	; 255
    150c:	3f 4f       	sbci	r19, 0xFF	; 255
    150e:	48 17       	cp	r20, r24
    1510:	59 07       	cpc	r21, r25
    1512:	41 f0       	breq	.+16     	; 0x1524 <existsEntryInTimerQueue+0x56>
	}
}

uint8_t existsEntryInTimerQueue(void (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
    1514:	26 17       	cp	r18, r22
    1516:	48 f3       	brcs	.-46     	; 0x14ea <existsEntryInTimerQueue+0x1c>
		if(TimerQueue[i].pointerFct == _theFct){			
			return 1;
		}
	}
	return 0;
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	08 95       	ret
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	08 95       	ret

uint8_t existsEntryInTimerQueue(void (*_theFct) (void)){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct == _theFct){			
			return 1;
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	08 95       	ret
    1524:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    1526:	08 95       	ret

00001528 <addEntryIfNotExists>:

void addEntryIfNotExists(void (*_theFct) (void), uint32_t _delay, uint8_t _repeat){
    1528:	cf 92       	push	r12
    152a:	df 92       	push	r13
    152c:	ef 92       	push	r14
    152e:	ff 92       	push	r15
    1530:	1f 93       	push	r17
    1532:	cf 93       	push	r28
    1534:	df 93       	push	r29
    1536:	ec 01       	movw	r28, r24
    1538:	6a 01       	movw	r12, r20
    153a:	7b 01       	movw	r14, r22
    153c:	12 2f       	mov	r17, r18
	if(!existsEntryInTimerQueue(_theFct)){
    153e:	0e 94 67 0a 	call	0x14ce	; 0x14ce <existsEntryInTimerQueue>
    1542:	81 11       	cpse	r24, r1
    1544:	06 c0       	rjmp	.+12     	; 0x1552 <addEntryIfNotExists+0x2a>
		addEntryToTimerQueue(_theFct, _delay, _repeat);
    1546:	21 2f       	mov	r18, r17
    1548:	b7 01       	movw	r22, r14
    154a:	a6 01       	movw	r20, r12
    154c:	ce 01       	movw	r24, r28
    154e:	0e 94 ed 08 	call	0x11da	; 0x11da <addEntryToTimerQueue>
	}	
}
    1552:	df 91       	pop	r29
    1554:	cf 91       	pop	r28
    1556:	1f 91       	pop	r17
    1558:	ff 90       	pop	r15
    155a:	ef 90       	pop	r14
    155c:	df 90       	pop	r13
    155e:	cf 90       	pop	r12
    1560:	08 95       	ret

00001562 <timePassed>:
//se apeleaza din intrerupere (cate microsecunde au trecut)
//pentru fiecare functie(valida) din queue se scade din delay numarul de microsecunde care a trecut

void timePassed(uint32_t passed_us){
    1562:	8f 92       	push	r8
    1564:	9f 92       	push	r9
    1566:	af 92       	push	r10
    1568:	bf 92       	push	r11
    156a:	df 92       	push	r13
    156c:	ef 92       	push	r14
    156e:	ff 92       	push	r15
    1570:	0f 93       	push	r16
    1572:	1f 93       	push	r17
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
    1578:	10 91 00 01 	lds	r17, 0x0100
    157c:	11 23       	and	r17, r17
    157e:	09 f4       	brne	.+2      	; 0x1582 <timePassed+0x20>
    1580:	7b c0       	rjmp	.+246    	; 0x1678 <timePassed+0x116>
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
		if(TimerQueue[i].pointerFct != 0){
			if(TimerQueue[i].delay > 0)
				TimerQueue[i].delay = TimerQueue[i].delay > passed_us ? TimerQueue[i].delay-passed_us : 0;
    1586:	d1 2c       	mov	r13, r1
    1588:	e1 2c       	mov	r14, r1
    158a:	f1 2c       	mov	r15, r1
    158c:	00 e0       	ldi	r16, 0x00	; 0
//pentru fiecare functie(valida) din queue se scade din delay numarul de microsecunde care a trecut

void timePassed(uint32_t passed_us){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
		if(TimerQueue[i].pointerFct != 0){
    158e:	f9 01       	movw	r30, r18
    1590:	a9 01       	movw	r20, r18
    1592:	44 0f       	add	r20, r20
    1594:	55 1f       	adc	r21, r21
    1596:	44 0f       	add	r20, r20
    1598:	55 1f       	adc	r21, r21
    159a:	44 0f       	add	r20, r20
    159c:	55 1f       	adc	r21, r21
    159e:	d9 01       	movw	r26, r18
    15a0:	aa 0f       	add	r26, r26
    15a2:	bb 1f       	adc	r27, r27
    15a4:	a4 0f       	add	r26, r20
    15a6:	b5 1f       	adc	r27, r21
    15a8:	a5 58       	subi	r26, 0x85	; 133
    15aa:	bb 4f       	sbci	r27, 0xFB	; 251
    15ac:	18 96       	adiw	r26, 0x08	; 8
    15ae:	4d 91       	ld	r20, X+
    15b0:	5c 91       	ld	r21, X
    15b2:	19 97       	sbiw	r26, 0x09	; 9
    15b4:	45 2b       	or	r20, r21
    15b6:	09 f4       	brne	.+2      	; 0x15ba <timePassed+0x58>
    15b8:	5a c0       	rjmp	.+180    	; 0x166e <timePassed+0x10c>
			if(TimerQueue[i].delay > 0)
    15ba:	a9 01       	movw	r20, r18
    15bc:	44 0f       	add	r20, r20
    15be:	55 1f       	adc	r21, r21
    15c0:	44 0f       	add	r20, r20
    15c2:	55 1f       	adc	r21, r21
    15c4:	44 0f       	add	r20, r20
    15c6:	55 1f       	adc	r21, r21
    15c8:	d9 01       	movw	r26, r18
    15ca:	aa 0f       	add	r26, r26
    15cc:	bb 1f       	adc	r27, r27
    15ce:	a4 0f       	add	r26, r20
    15d0:	b5 1f       	adc	r27, r21
    15d2:	a5 58       	subi	r26, 0x85	; 133
    15d4:	bb 4f       	sbci	r27, 0xFB	; 251
    15d6:	8d 90       	ld	r8, X+
    15d8:	9d 90       	ld	r9, X+
    15da:	ad 90       	ld	r10, X+
    15dc:	bc 90       	ld	r11, X
    15de:	89 28       	or	r8, r9
    15e0:	8a 28       	or	r8, r10
    15e2:	8b 28       	or	r8, r11
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <timePassed+0x86>
    15e6:	43 c0       	rjmp	.+134    	; 0x166e <timePassed+0x10c>
				TimerQueue[i].delay = TimerQueue[i].delay > passed_us ? TimerQueue[i].delay-passed_us : 0;
    15e8:	a9 01       	movw	r20, r18
    15ea:	44 0f       	add	r20, r20
    15ec:	55 1f       	adc	r21, r21
    15ee:	44 0f       	add	r20, r20
    15f0:	55 1f       	adc	r21, r21
    15f2:	44 0f       	add	r20, r20
    15f4:	55 1f       	adc	r21, r21
    15f6:	d9 01       	movw	r26, r18
    15f8:	aa 0f       	add	r26, r26
    15fa:	bb 1f       	adc	r27, r27
    15fc:	a4 0f       	add	r26, r20
    15fe:	b5 1f       	adc	r27, r21
    1600:	a5 58       	subi	r26, 0x85	; 133
    1602:	bb 4f       	sbci	r27, 0xFB	; 251
    1604:	8d 90       	ld	r8, X+
    1606:	9d 90       	ld	r9, X+
    1608:	ad 90       	ld	r10, X+
    160a:	bc 90       	ld	r11, X
    160c:	68 15       	cp	r22, r8
    160e:	79 05       	cpc	r23, r9
    1610:	8a 05       	cpc	r24, r10
    1612:	9b 05       	cpc	r25, r11
    1614:	b8 f4       	brcc	.+46     	; 0x1644 <timePassed+0xe2>
    1616:	a9 01       	movw	r20, r18
    1618:	44 0f       	add	r20, r20
    161a:	55 1f       	adc	r21, r21
    161c:	44 0f       	add	r20, r20
    161e:	55 1f       	adc	r21, r21
    1620:	44 0f       	add	r20, r20
    1622:	55 1f       	adc	r21, r21
    1624:	d9 01       	movw	r26, r18
    1626:	aa 0f       	add	r26, r26
    1628:	bb 1f       	adc	r27, r27
    162a:	a4 0f       	add	r26, r20
    162c:	b5 1f       	adc	r27, r21
    162e:	a5 58       	subi	r26, 0x85	; 133
    1630:	bb 4f       	sbci	r27, 0xFB	; 251
    1632:	8d 90       	ld	r8, X+
    1634:	9d 90       	ld	r9, X+
    1636:	ad 90       	ld	r10, X+
    1638:	bc 90       	ld	r11, X
    163a:	86 1a       	sub	r8, r22
    163c:	97 0a       	sbc	r9, r23
    163e:	a8 0a       	sbc	r10, r24
    1640:	b9 0a       	sbc	r11, r25
    1642:	04 c0       	rjmp	.+8      	; 0x164c <timePassed+0xea>
    1644:	8d 2c       	mov	r8, r13
    1646:	9e 2c       	mov	r9, r14
    1648:	af 2c       	mov	r10, r15
    164a:	b0 2e       	mov	r11, r16
    164c:	ef 01       	movw	r28, r30
    164e:	cc 0f       	add	r28, r28
    1650:	dd 1f       	adc	r29, r29
    1652:	ee 0f       	add	r30, r30
    1654:	ff 1f       	adc	r31, r31
    1656:	ee 0f       	add	r30, r30
    1658:	ff 1f       	adc	r31, r31
    165a:	ee 0f       	add	r30, r30
    165c:	ff 1f       	adc	r31, r31
    165e:	ec 0f       	add	r30, r28
    1660:	fd 1f       	adc	r31, r29
    1662:	e5 58       	subi	r30, 0x85	; 133
    1664:	fb 4f       	sbci	r31, 0xFB	; 251
    1666:	80 82       	st	Z, r8
    1668:	91 82       	std	Z+1, r9	; 0x01
    166a:	a2 82       	std	Z+2, r10	; 0x02
    166c:	b3 82       	std	Z+3, r11	; 0x03
    166e:	2f 5f       	subi	r18, 0xFF	; 255
    1670:	3f 4f       	sbci	r19, 0xFF	; 255
//se apeleaza din intrerupere (cate microsecunde au trecut)
//pentru fiecare functie(valida) din queue se scade din delay numarul de microsecunde care a trecut

void timePassed(uint32_t passed_us){
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
    1672:	21 17       	cp	r18, r17
    1674:	08 f4       	brcc	.+2      	; 0x1678 <timePassed+0x116>
    1676:	8b cf       	rjmp	.-234    	; 0x158e <timePassed+0x2c>
		if(TimerQueue[i].pointerFct != 0){
			if(TimerQueue[i].delay > 0)
				TimerQueue[i].delay = TimerQueue[i].delay > passed_us ? TimerQueue[i].delay-passed_us : 0;
		}
	}
}
    1678:	df 91       	pop	r29
    167a:	cf 91       	pop	r28
    167c:	1f 91       	pop	r17
    167e:	0f 91       	pop	r16
    1680:	ff 90       	pop	r15
    1682:	ef 90       	pop	r14
    1684:	df 90       	pop	r13
    1686:	bf 90       	pop	r11
    1688:	af 90       	pop	r10
    168a:	9f 90       	pop	r9
    168c:	8f 90       	pop	r8
    168e:	08 95       	ret

00001690 <__vector_15>:
void timePassed(uint32_t passed_us);

volatile uint32_t time=0;

ISR(TIMER1_OVF_vect)// Din datasheet timerq(are 8 mh) => 8/8= 1 microsecunde
{
    1690:	1f 92       	push	r1
    1692:	0f 92       	push	r0
    1694:	0f b6       	in	r0, 0x3f	; 63
    1696:	0f 92       	push	r0
    1698:	11 24       	eor	r1, r1
    169a:	2f 93       	push	r18
    169c:	3f 93       	push	r19
    169e:	4f 93       	push	r20
    16a0:	5f 93       	push	r21
    16a2:	6f 93       	push	r22
    16a4:	7f 93       	push	r23
    16a6:	8f 93       	push	r24
    16a8:	9f 93       	push	r25
    16aa:	af 93       	push	r26
    16ac:	bf 93       	push	r27
    16ae:	ef 93       	push	r30
    16b0:	ff 93       	push	r31
	time++;
    16b2:	80 91 13 04 	lds	r24, 0x0413
    16b6:	90 91 14 04 	lds	r25, 0x0414
    16ba:	a0 91 15 04 	lds	r26, 0x0415
    16be:	b0 91 16 04 	lds	r27, 0x0416
    16c2:	01 96       	adiw	r24, 0x01	; 1
    16c4:	a1 1d       	adc	r26, r1
    16c6:	b1 1d       	adc	r27, r1
    16c8:	80 93 13 04 	sts	0x0413, r24
    16cc:	90 93 14 04 	sts	0x0414, r25
    16d0:	a0 93 15 04 	sts	0x0415, r26
    16d4:	b0 93 16 04 	sts	0x0416, r27
	timePassed(8800);
    16d8:	60 e6       	ldi	r22, 0x60	; 96
    16da:	72 e2       	ldi	r23, 0x22	; 34
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	0e 94 b1 0a 	call	0x1562	; 0x1562 <timePassed>
}
    16e4:	ff 91       	pop	r31
    16e6:	ef 91       	pop	r30
    16e8:	bf 91       	pop	r27
    16ea:	af 91       	pop	r26
    16ec:	9f 91       	pop	r25
    16ee:	8f 91       	pop	r24
    16f0:	7f 91       	pop	r23
    16f2:	6f 91       	pop	r22
    16f4:	5f 91       	pop	r21
    16f6:	4f 91       	pop	r20
    16f8:	3f 91       	pop	r19
    16fa:	2f 91       	pop	r18
    16fc:	0f 90       	pop	r0
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	0f 90       	pop	r0
    1702:	1f 90       	pop	r1
    1704:	18 95       	reti

00001706 <checkTimeQueue>:
	}
}

//se apeleaza din main loop
//verifica daca sunt functii care trebuie apelate (daca delay-ul lor a ajuns la 0)
void checkTimeQueue(void){
    1706:	ef 92       	push	r14
    1708:	ff 92       	push	r15
    170a:	1f 93       	push	r17
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
	cli();
    1710:	f8 94       	cli
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
    1712:	80 91 00 01 	lds	r24, 0x0100
    1716:	88 23       	and	r24, r24
    1718:	09 f4       	brne	.+2      	; 0x171c <checkTimeQueue+0x16>
    171a:	57 c0       	rjmp	.+174    	; 0x17ca <checkTimeQueue+0xc4>
    171c:	10 e0       	ldi	r17, 0x00	; 0
		if(TimerQueue[i].pointerFct != 0){
    171e:	c1 2f       	mov	r28, r17
    1720:	d0 e0       	ldi	r29, 0x00	; 0
    1722:	fe 01       	movw	r30, r28
    1724:	ee 0f       	add	r30, r30
    1726:	ff 1f       	adc	r31, r31
    1728:	ce 01       	movw	r24, r28
    172a:	88 0f       	add	r24, r24
    172c:	99 1f       	adc	r25, r25
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	88 0f       	add	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	e8 0f       	add	r30, r24
    1738:	f9 1f       	adc	r31, r25
    173a:	e5 58       	subi	r30, 0x85	; 133
    173c:	fb 4f       	sbci	r31, 0xFB	; 251
    173e:	80 85       	ldd	r24, Z+8	; 0x08
    1740:	91 85       	ldd	r25, Z+9	; 0x09
    1742:	89 2b       	or	r24, r25
    1744:	e1 f1       	breq	.+120    	; 0x17be <checkTimeQueue+0xb8>
			if(TimerQueue[i].delay == 0){
    1746:	ce 01       	movw	r24, r28
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	fe 01       	movw	r30, r28
    1756:	ee 0f       	add	r30, r30
    1758:	ff 1f       	adc	r31, r31
    175a:	e8 0f       	add	r30, r24
    175c:	f9 1f       	adc	r31, r25
    175e:	e5 58       	subi	r30, 0x85	; 133
    1760:	fb 4f       	sbci	r31, 0xFB	; 251
    1762:	80 81       	ld	r24, Z
    1764:	91 81       	ldd	r25, Z+1	; 0x01
    1766:	a2 81       	ldd	r26, Z+2	; 0x02
    1768:	b3 81       	ldd	r27, Z+3	; 0x03
    176a:	89 2b       	or	r24, r25
    176c:	8a 2b       	or	r24, r26
    176e:	8b 2b       	or	r24, r27
    1770:	31 f5       	brne	.+76     	; 0x17be <checkTimeQueue+0xb8>
				TimerQueue[i].pointerFct();
    1772:	7f 01       	movw	r14, r30
    1774:	00 84       	ldd	r0, Z+8	; 0x08
    1776:	f1 85       	ldd	r31, Z+9	; 0x09
    1778:	e0 2d       	mov	r30, r0
    177a:	09 95       	icall
				if(TimerQueue[i].repeatDelay)
    177c:	f7 01       	movw	r30, r14
    177e:	84 81       	ldd	r24, Z+4	; 0x04
    1780:	95 81       	ldd	r25, Z+5	; 0x05
    1782:	a6 81       	ldd	r26, Z+6	; 0x06
    1784:	b7 81       	ldd	r27, Z+7	; 0x07
    1786:	89 2b       	or	r24, r25
    1788:	8a 2b       	or	r24, r26
    178a:	8b 2b       	or	r24, r27
    178c:	49 f0       	breq	.+18     	; 0x17a0 <checkTimeQueue+0x9a>
					TimerQueue[i].delay = TimerQueue[i].repeatDelay;
    178e:	84 81       	ldd	r24, Z+4	; 0x04
    1790:	95 81       	ldd	r25, Z+5	; 0x05
    1792:	a6 81       	ldd	r26, Z+6	; 0x06
    1794:	b7 81       	ldd	r27, Z+7	; 0x07
    1796:	80 83       	st	Z, r24
    1798:	91 83       	std	Z+1, r25	; 0x01
    179a:	a2 83       	std	Z+2, r26	; 0x02
    179c:	b3 83       	std	Z+3, r27	; 0x03
    179e:	0f c0       	rjmp	.+30     	; 0x17be <checkTimeQueue+0xb8>
				else
					TimerQueue[i].pointerFct = 0;
    17a0:	ce 01       	movw	r24, r28
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	cc 0f       	add	r28, r28
    17a8:	dd 1f       	adc	r29, r29
    17aa:	cc 0f       	add	r28, r28
    17ac:	dd 1f       	adc	r29, r29
    17ae:	cc 0f       	add	r28, r28
    17b0:	dd 1f       	adc	r29, r29
    17b2:	c8 0f       	add	r28, r24
    17b4:	d9 1f       	adc	r29, r25
    17b6:	c5 58       	subi	r28, 0x85	; 133
    17b8:	db 4f       	sbci	r29, 0xFB	; 251
    17ba:	19 86       	std	Y+9, r1	; 0x09
    17bc:	18 86       	std	Y+8, r1	; 0x08
//se apeleaza din main loop
//verifica daca sunt functii care trebuie apelate (daca delay-ul lor a ajuns la 0)
void checkTimeQueue(void){
	cli();
	uint8_t i;
	for(i=0; i<TimerQueueSize; i++){
    17be:	1f 5f       	subi	r17, 0xFF	; 255
    17c0:	80 91 00 01 	lds	r24, 0x0100
    17c4:	18 17       	cp	r17, r24
    17c6:	08 f4       	brcc	.+2      	; 0x17ca <checkTimeQueue+0xc4>
    17c8:	aa cf       	rjmp	.-172    	; 0x171e <checkTimeQueue+0x18>
				else
					TimerQueue[i].pointerFct = 0;
			}
		}
	}
	sei();
    17ca:	78 94       	sei
}
    17cc:	df 91       	pop	r29
    17ce:	cf 91       	pop	r28
    17d0:	1f 91       	pop	r17
    17d2:	ff 90       	pop	r15
    17d4:	ef 90       	pop	r14
    17d6:	08 95       	ret

000017d8 <resetTimerQueue>:

void resetTimerQueue(){
	initTimeQueue();	
    17d8:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <initTimeQueue>
    17dc:	08 95       	ret

000017de <blinkLedD6_v1>:
#include "Car/Sensors.h"
#include "Car/Engines.h"
#include "PID/PID1.h"

volatile uint8_t e_stins = 0;
void blinkLedD6_v1(){
    17de:	08 95       	ret

000017e0 <ledAction>:
void ledAction(char act){
	//char msg[] = "led action:  ";
	//msg[strlen(msg)-1]= act+'0';
	//BTTransmitStr(msg);
	
	switch(act){
    17e0:	81 30       	cpi	r24, 0x01	; 1
    17e2:	69 f0       	breq	.+26     	; 0x17fe <ledAction+0x1e>
    17e4:	18 f0       	brcs	.+6      	; 0x17ec <ledAction+0xc>
    17e6:	82 30       	cpi	r24, 0x02	; 2
    17e8:	99 f0       	breq	.+38     	; 0x1810 <ledAction+0x30>
    17ea:	08 95       	ret
		case 0:
			removeEntryFromTimerQueue(&blinkLedD6_v1);
    17ec:	8f ee       	ldi	r24, 0xEF	; 239
    17ee:	9b e0       	ldi	r25, 0x0B	; 11
    17f0:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <removeEntryFromTimerQueue>
			//PORTD &=~ (1<<PIND2);
			//shouldBlink = 0;
			BTTransmitStr("ledul a fost stins.");
    17f4:	8e e5       	ldi	r24, 0x5E	; 94
    17f6:	93 e0       	ldi	r25, 0x03	; 3
    17f8:	0e 94 15 01 	call	0x22a	; 0x22a <BTTransmitStr>
			break;
    17fc:	08 95       	ret
		case 1:
			removeEntryFromTimerQueue(&blinkLedD6_v1);
    17fe:	8f ee       	ldi	r24, 0xEF	; 239
    1800:	9b e0       	ldi	r25, 0x0B	; 11
    1802:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <removeEntryFromTimerQueue>
			//PORTD |= 1<<PIND2;
			//shouldBlink = 0;
			BTTransmitStr("ledul a fost aprins.");
    1806:	82 e7       	ldi	r24, 0x72	; 114
    1808:	93 e0       	ldi	r25, 0x03	; 3
    180a:	0e 94 15 01 	call	0x22a	; 0x22a <BTTransmitStr>
			break;
    180e:	08 95       	ret
		
		case 2:
			e_stins = 0;
    1810:	10 92 17 04 	sts	0x0417, r1
			addEntryToTimerQueue(&blinkLedD6_v1, (1000UL * 1000UL), Periodic);
    1814:	21 e0       	ldi	r18, 0x01	; 1
    1816:	40 e4       	ldi	r20, 0x40	; 64
    1818:	52 e4       	ldi	r21, 0x42	; 66
    181a:	6f e0       	ldi	r22, 0x0F	; 15
    181c:	70 e0       	ldi	r23, 0x00	; 0
    181e:	8f ee       	ldi	r24, 0xEF	; 239
    1820:	9b e0       	ldi	r25, 0x0B	; 11
    1822:	0e 94 ed 08 	call	0x11da	; 0x11da <addEntryToTimerQueue>
			BTTransmitStr("ledul va 'blincari'.");
    1826:	87 e8       	ldi	r24, 0x87	; 135
    1828:	93 e0       	ldi	r25, 0x03	; 3
    182a:	0e 94 15 01 	call	0x22a	; 0x22a <BTTransmitStr>
    182e:	08 95       	ret

00001830 <initLeds>:
			break;
	}
}

void initLeds(){	
    1830:	08 95       	ret

00001832 <sendEncoderCounter>:
			state = 2;
	}
}

extern volatile uint32_t encoder1CNT, encoder2CNT;
void sendEncoderCounter(){
    1832:	0f 93       	push	r16
    1834:	1f 93       	push	r17
    1836:	cf 93       	push	r28
    1838:	df 93       	push	r29
    183a:	cd b7       	in	r28, 0x3d	; 61
    183c:	de b7       	in	r29, 0x3e	; 62
    183e:	a3 97       	sbiw	r28, 0x23	; 35
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	f8 94       	cli
    1844:	de bf       	out	0x3e, r29	; 62
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	cd bf       	out	0x3d, r28	; 61
	char str[35];
	sprintf(str, "enc CNT: 1:%lu  2:%lu", encoder1CNT, encoder2CNT);
    184a:	40 91 2b 04 	lds	r20, 0x042B
    184e:	50 91 2c 04 	lds	r21, 0x042C
    1852:	60 91 2d 04 	lds	r22, 0x042D
    1856:	70 91 2e 04 	lds	r23, 0x042E
    185a:	80 91 25 04 	lds	r24, 0x0425
    185e:	90 91 26 04 	lds	r25, 0x0426
    1862:	a0 91 27 04 	lds	r26, 0x0427
    1866:	b0 91 28 04 	lds	r27, 0x0428
    186a:	7f 93       	push	r23
    186c:	6f 93       	push	r22
    186e:	5f 93       	push	r21
    1870:	4f 93       	push	r20
    1872:	bf 93       	push	r27
    1874:	af 93       	push	r26
    1876:	9f 93       	push	r25
    1878:	8f 93       	push	r24
    187a:	85 ef       	ldi	r24, 0xF5	; 245
    187c:	93 e0       	ldi	r25, 0x03	; 3
    187e:	9f 93       	push	r25
    1880:	8f 93       	push	r24
    1882:	8e 01       	movw	r16, r28
    1884:	0f 5f       	subi	r16, 0xFF	; 255
    1886:	1f 4f       	sbci	r17, 0xFF	; 255
    1888:	1f 93       	push	r17
    188a:	0f 93       	push	r16
    188c:	0e 94 b1 0c 	call	0x1962	; 0x1962 <sprintf>
	BTTransmitStr(str);	
    1890:	c8 01       	movw	r24, r16
    1892:	0e 94 15 01 	call	0x22a	; 0x22a <BTTransmitStr>
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	f8 94       	cli
    189a:	de bf       	out	0x3e, r29	; 62
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	cd bf       	out	0x3d, r28	; 61
}
    18a0:	a3 96       	adiw	r28, 0x23	; 35
    18a2:	0f b6       	in	r0, 0x3f	; 63
    18a4:	f8 94       	cli
    18a6:	de bf       	out	0x3e, r29	; 62
    18a8:	0f be       	out	0x3f, r0	; 63
    18aa:	cd bf       	out	0x3d, r28	; 61
    18ac:	df 91       	pop	r29
    18ae:	cf 91       	pop	r28
    18b0:	1f 91       	pop	r17
    18b2:	0f 91       	pop	r16
    18b4:	08 95       	ret

000018b6 <__udivmodsi4>:
    18b6:	a1 e2       	ldi	r26, 0x21	; 33
    18b8:	1a 2e       	mov	r1, r26
    18ba:	aa 1b       	sub	r26, r26
    18bc:	bb 1b       	sub	r27, r27
    18be:	fd 01       	movw	r30, r26
    18c0:	0d c0       	rjmp	.+26     	; 0x18dc <__udivmodsi4_ep>

000018c2 <__udivmodsi4_loop>:
    18c2:	aa 1f       	adc	r26, r26
    18c4:	bb 1f       	adc	r27, r27
    18c6:	ee 1f       	adc	r30, r30
    18c8:	ff 1f       	adc	r31, r31
    18ca:	a2 17       	cp	r26, r18
    18cc:	b3 07       	cpc	r27, r19
    18ce:	e4 07       	cpc	r30, r20
    18d0:	f5 07       	cpc	r31, r21
    18d2:	20 f0       	brcs	.+8      	; 0x18dc <__udivmodsi4_ep>
    18d4:	a2 1b       	sub	r26, r18
    18d6:	b3 0b       	sbc	r27, r19
    18d8:	e4 0b       	sbc	r30, r20
    18da:	f5 0b       	sbc	r31, r21

000018dc <__udivmodsi4_ep>:
    18dc:	66 1f       	adc	r22, r22
    18de:	77 1f       	adc	r23, r23
    18e0:	88 1f       	adc	r24, r24
    18e2:	99 1f       	adc	r25, r25
    18e4:	1a 94       	dec	r1
    18e6:	69 f7       	brne	.-38     	; 0x18c2 <__udivmodsi4_loop>
    18e8:	60 95       	com	r22
    18ea:	70 95       	com	r23
    18ec:	80 95       	com	r24
    18ee:	90 95       	com	r25
    18f0:	9b 01       	movw	r18, r22
    18f2:	ac 01       	movw	r20, r24
    18f4:	bd 01       	movw	r22, r26
    18f6:	cf 01       	movw	r24, r30
    18f8:	08 95       	ret

000018fa <__tablejump2__>:
    18fa:	ee 0f       	add	r30, r30
    18fc:	ff 1f       	adc	r31, r31

000018fe <__tablejump__>:
    18fe:	05 90       	lpm	r0, Z+
    1900:	f4 91       	lpm	r31, Z
    1902:	e0 2d       	mov	r30, r0
    1904:	09 94       	ijmp

00001906 <__umulhisi3>:
    1906:	a2 9f       	mul	r26, r18
    1908:	b0 01       	movw	r22, r0
    190a:	b3 9f       	mul	r27, r19
    190c:	c0 01       	movw	r24, r0
    190e:	a3 9f       	mul	r26, r19
    1910:	70 0d       	add	r23, r0
    1912:	81 1d       	adc	r24, r1
    1914:	11 24       	eor	r1, r1
    1916:	91 1d       	adc	r25, r1
    1918:	b2 9f       	mul	r27, r18
    191a:	70 0d       	add	r23, r0
    191c:	81 1d       	adc	r24, r1
    191e:	11 24       	eor	r1, r1
    1920:	91 1d       	adc	r25, r1
    1922:	08 95       	ret

00001924 <__muluhisi3>:
    1924:	0e 94 83 0c 	call	0x1906	; 0x1906 <__umulhisi3>
    1928:	a5 9f       	mul	r26, r21
    192a:	90 0d       	add	r25, r0
    192c:	b4 9f       	mul	r27, r20
    192e:	90 0d       	add	r25, r0
    1930:	a4 9f       	mul	r26, r20
    1932:	80 0d       	add	r24, r0
    1934:	91 1d       	adc	r25, r1
    1936:	11 24       	eor	r1, r1
    1938:	08 95       	ret

0000193a <printf>:
    193a:	a0 e0       	ldi	r26, 0x00	; 0
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	e3 ea       	ldi	r30, 0xA3	; 163
    1940:	fc e0       	ldi	r31, 0x0C	; 12
    1942:	0c 94 5b 0f 	jmp	0x1eb6	; 0x1eb6 <__prologue_saves__+0x20>
    1946:	fe 01       	movw	r30, r28
    1948:	35 96       	adiw	r30, 0x05	; 5
    194a:	61 91       	ld	r22, Z+
    194c:	71 91       	ld	r23, Z+
    194e:	af 01       	movw	r20, r30
    1950:	80 91 45 05 	lds	r24, 0x0545
    1954:	90 91 46 05 	lds	r25, 0x0546
    1958:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <vfprintf>
    195c:	e2 e0       	ldi	r30, 0x02	; 2
    195e:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__epilogue_restores__+0x20>

00001962 <sprintf>:
    1962:	ae e0       	ldi	r26, 0x0E	; 14
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	e7 eb       	ldi	r30, 0xB7	; 183
    1968:	fc e0       	ldi	r31, 0x0C	; 12
    196a:	0c 94 59 0f 	jmp	0x1eb2	; 0x1eb2 <__prologue_saves__+0x1c>
    196e:	0d 89       	ldd	r16, Y+21	; 0x15
    1970:	1e 89       	ldd	r17, Y+22	; 0x16
    1972:	86 e0       	ldi	r24, 0x06	; 6
    1974:	8c 83       	std	Y+4, r24	; 0x04
    1976:	1a 83       	std	Y+2, r17	; 0x02
    1978:	09 83       	std	Y+1, r16	; 0x01
    197a:	8f ef       	ldi	r24, 0xFF	; 255
    197c:	9f e7       	ldi	r25, 0x7F	; 127
    197e:	9e 83       	std	Y+6, r25	; 0x06
    1980:	8d 83       	std	Y+5, r24	; 0x05
    1982:	ae 01       	movw	r20, r28
    1984:	47 5e       	subi	r20, 0xE7	; 231
    1986:	5f 4f       	sbci	r21, 0xFF	; 255
    1988:	6f 89       	ldd	r22, Y+23	; 0x17
    198a:	78 8d       	ldd	r23, Y+24	; 0x18
    198c:	ce 01       	movw	r24, r28
    198e:	01 96       	adiw	r24, 0x01	; 1
    1990:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <vfprintf>
    1994:	ef 81       	ldd	r30, Y+7	; 0x07
    1996:	f8 85       	ldd	r31, Y+8	; 0x08
    1998:	e0 0f       	add	r30, r16
    199a:	f1 1f       	adc	r31, r17
    199c:	10 82       	st	Z, r1
    199e:	2e 96       	adiw	r28, 0x0e	; 14
    19a0:	e4 e0       	ldi	r30, 0x04	; 4
    19a2:	0c 94 75 0f 	jmp	0x1eea	; 0x1eea <__epilogue_restores__+0x1c>

000019a6 <vfprintf>:
    19a6:	ac e0       	ldi	r26, 0x0C	; 12
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	e9 ed       	ldi	r30, 0xD9	; 217
    19ac:	fc e0       	ldi	r31, 0x0C	; 12
    19ae:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__prologue_saves__>
    19b2:	7c 01       	movw	r14, r24
    19b4:	6b 01       	movw	r12, r22
    19b6:	8a 01       	movw	r16, r20
    19b8:	fc 01       	movw	r30, r24
    19ba:	17 82       	std	Z+7, r1	; 0x07
    19bc:	16 82       	std	Z+6, r1	; 0x06
    19be:	83 81       	ldd	r24, Z+3	; 0x03
    19c0:	81 ff       	sbrs	r24, 1
    19c2:	bd c1       	rjmp	.+890    	; 0x1d3e <vfprintf+0x398>
    19c4:	ce 01       	movw	r24, r28
    19c6:	01 96       	adiw	r24, 0x01	; 1
    19c8:	4c 01       	movw	r8, r24
    19ca:	f7 01       	movw	r30, r14
    19cc:	93 81       	ldd	r25, Z+3	; 0x03
    19ce:	f6 01       	movw	r30, r12
    19d0:	93 fd       	sbrc	r25, 3
    19d2:	85 91       	lpm	r24, Z+
    19d4:	93 ff       	sbrs	r25, 3
    19d6:	81 91       	ld	r24, Z+
    19d8:	6f 01       	movw	r12, r30
    19da:	88 23       	and	r24, r24
    19dc:	09 f4       	brne	.+2      	; 0x19e0 <vfprintf+0x3a>
    19de:	ab c1       	rjmp	.+854    	; 0x1d36 <vfprintf+0x390>
    19e0:	85 32       	cpi	r24, 0x25	; 37
    19e2:	39 f4       	brne	.+14     	; 0x19f2 <vfprintf+0x4c>
    19e4:	93 fd       	sbrc	r25, 3
    19e6:	85 91       	lpm	r24, Z+
    19e8:	93 ff       	sbrs	r25, 3
    19ea:	81 91       	ld	r24, Z+
    19ec:	6f 01       	movw	r12, r30
    19ee:	85 32       	cpi	r24, 0x25	; 37
    19f0:	29 f4       	brne	.+10     	; 0x19fc <vfprintf+0x56>
    19f2:	b7 01       	movw	r22, r14
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <fputc>
    19fa:	e7 cf       	rjmp	.-50     	; 0x19ca <vfprintf+0x24>
    19fc:	51 2c       	mov	r5, r1
    19fe:	31 2c       	mov	r3, r1
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	20 32       	cpi	r18, 0x20	; 32
    1a04:	a0 f4       	brcc	.+40     	; 0x1a2e <vfprintf+0x88>
    1a06:	8b 32       	cpi	r24, 0x2B	; 43
    1a08:	69 f0       	breq	.+26     	; 0x1a24 <vfprintf+0x7e>
    1a0a:	30 f4       	brcc	.+12     	; 0x1a18 <vfprintf+0x72>
    1a0c:	80 32       	cpi	r24, 0x20	; 32
    1a0e:	59 f0       	breq	.+22     	; 0x1a26 <vfprintf+0x80>
    1a10:	83 32       	cpi	r24, 0x23	; 35
    1a12:	69 f4       	brne	.+26     	; 0x1a2e <vfprintf+0x88>
    1a14:	20 61       	ori	r18, 0x10	; 16
    1a16:	2c c0       	rjmp	.+88     	; 0x1a70 <vfprintf+0xca>
    1a18:	8d 32       	cpi	r24, 0x2D	; 45
    1a1a:	39 f0       	breq	.+14     	; 0x1a2a <vfprintf+0x84>
    1a1c:	80 33       	cpi	r24, 0x30	; 48
    1a1e:	39 f4       	brne	.+14     	; 0x1a2e <vfprintf+0x88>
    1a20:	21 60       	ori	r18, 0x01	; 1
    1a22:	26 c0       	rjmp	.+76     	; 0x1a70 <vfprintf+0xca>
    1a24:	22 60       	ori	r18, 0x02	; 2
    1a26:	24 60       	ori	r18, 0x04	; 4
    1a28:	23 c0       	rjmp	.+70     	; 0x1a70 <vfprintf+0xca>
    1a2a:	28 60       	ori	r18, 0x08	; 8
    1a2c:	21 c0       	rjmp	.+66     	; 0x1a70 <vfprintf+0xca>
    1a2e:	27 fd       	sbrc	r18, 7
    1a30:	27 c0       	rjmp	.+78     	; 0x1a80 <vfprintf+0xda>
    1a32:	30 ed       	ldi	r19, 0xD0	; 208
    1a34:	38 0f       	add	r19, r24
    1a36:	3a 30       	cpi	r19, 0x0A	; 10
    1a38:	78 f4       	brcc	.+30     	; 0x1a58 <vfprintf+0xb2>
    1a3a:	26 ff       	sbrs	r18, 6
    1a3c:	06 c0       	rjmp	.+12     	; 0x1a4a <vfprintf+0xa4>
    1a3e:	fa e0       	ldi	r31, 0x0A	; 10
    1a40:	5f 9e       	mul	r5, r31
    1a42:	30 0d       	add	r19, r0
    1a44:	11 24       	eor	r1, r1
    1a46:	53 2e       	mov	r5, r19
    1a48:	13 c0       	rjmp	.+38     	; 0x1a70 <vfprintf+0xca>
    1a4a:	8a e0       	ldi	r24, 0x0A	; 10
    1a4c:	38 9e       	mul	r3, r24
    1a4e:	30 0d       	add	r19, r0
    1a50:	11 24       	eor	r1, r1
    1a52:	33 2e       	mov	r3, r19
    1a54:	20 62       	ori	r18, 0x20	; 32
    1a56:	0c c0       	rjmp	.+24     	; 0x1a70 <vfprintf+0xca>
    1a58:	8e 32       	cpi	r24, 0x2E	; 46
    1a5a:	21 f4       	brne	.+8      	; 0x1a64 <vfprintf+0xbe>
    1a5c:	26 fd       	sbrc	r18, 6
    1a5e:	6b c1       	rjmp	.+726    	; 0x1d36 <vfprintf+0x390>
    1a60:	20 64       	ori	r18, 0x40	; 64
    1a62:	06 c0       	rjmp	.+12     	; 0x1a70 <vfprintf+0xca>
    1a64:	8c 36       	cpi	r24, 0x6C	; 108
    1a66:	11 f4       	brne	.+4      	; 0x1a6c <vfprintf+0xc6>
    1a68:	20 68       	ori	r18, 0x80	; 128
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <vfprintf+0xca>
    1a6c:	88 36       	cpi	r24, 0x68	; 104
    1a6e:	41 f4       	brne	.+16     	; 0x1a80 <vfprintf+0xda>
    1a70:	f6 01       	movw	r30, r12
    1a72:	93 fd       	sbrc	r25, 3
    1a74:	85 91       	lpm	r24, Z+
    1a76:	93 ff       	sbrs	r25, 3
    1a78:	81 91       	ld	r24, Z+
    1a7a:	6f 01       	movw	r12, r30
    1a7c:	81 11       	cpse	r24, r1
    1a7e:	c1 cf       	rjmp	.-126    	; 0x1a02 <vfprintf+0x5c>
    1a80:	98 2f       	mov	r25, r24
    1a82:	9f 7d       	andi	r25, 0xDF	; 223
    1a84:	95 54       	subi	r25, 0x45	; 69
    1a86:	93 30       	cpi	r25, 0x03	; 3
    1a88:	28 f4       	brcc	.+10     	; 0x1a94 <vfprintf+0xee>
    1a8a:	0c 5f       	subi	r16, 0xFC	; 252
    1a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a8e:	ff e3       	ldi	r31, 0x3F	; 63
    1a90:	f9 83       	std	Y+1, r31	; 0x01
    1a92:	0d c0       	rjmp	.+26     	; 0x1aae <vfprintf+0x108>
    1a94:	83 36       	cpi	r24, 0x63	; 99
    1a96:	31 f0       	breq	.+12     	; 0x1aa4 <vfprintf+0xfe>
    1a98:	83 37       	cpi	r24, 0x73	; 115
    1a9a:	71 f0       	breq	.+28     	; 0x1ab8 <vfprintf+0x112>
    1a9c:	83 35       	cpi	r24, 0x53	; 83
    1a9e:	09 f0       	breq	.+2      	; 0x1aa2 <vfprintf+0xfc>
    1aa0:	5b c0       	rjmp	.+182    	; 0x1b58 <vfprintf+0x1b2>
    1aa2:	22 c0       	rjmp	.+68     	; 0x1ae8 <vfprintf+0x142>
    1aa4:	f8 01       	movw	r30, r16
    1aa6:	80 81       	ld	r24, Z
    1aa8:	89 83       	std	Y+1, r24	; 0x01
    1aaa:	0e 5f       	subi	r16, 0xFE	; 254
    1aac:	1f 4f       	sbci	r17, 0xFF	; 255
    1aae:	44 24       	eor	r4, r4
    1ab0:	43 94       	inc	r4
    1ab2:	51 2c       	mov	r5, r1
    1ab4:	54 01       	movw	r10, r8
    1ab6:	15 c0       	rjmp	.+42     	; 0x1ae2 <vfprintf+0x13c>
    1ab8:	38 01       	movw	r6, r16
    1aba:	f2 e0       	ldi	r31, 0x02	; 2
    1abc:	6f 0e       	add	r6, r31
    1abe:	71 1c       	adc	r7, r1
    1ac0:	f8 01       	movw	r30, r16
    1ac2:	a0 80       	ld	r10, Z
    1ac4:	b1 80       	ldd	r11, Z+1	; 0x01
    1ac6:	26 ff       	sbrs	r18, 6
    1ac8:	03 c0       	rjmp	.+6      	; 0x1ad0 <vfprintf+0x12a>
    1aca:	65 2d       	mov	r22, r5
    1acc:	70 e0       	ldi	r23, 0x00	; 0
    1ace:	02 c0       	rjmp	.+4      	; 0x1ad4 <vfprintf+0x12e>
    1ad0:	6f ef       	ldi	r22, 0xFF	; 255
    1ad2:	7f ef       	ldi	r23, 0xFF	; 255
    1ad4:	c5 01       	movw	r24, r10
    1ad6:	2c 87       	std	Y+12, r18	; 0x0c
    1ad8:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <strnlen>
    1adc:	2c 01       	movw	r4, r24
    1ade:	83 01       	movw	r16, r6
    1ae0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ae2:	2f 77       	andi	r18, 0x7F	; 127
    1ae4:	22 2e       	mov	r2, r18
    1ae6:	17 c0       	rjmp	.+46     	; 0x1b16 <vfprintf+0x170>
    1ae8:	38 01       	movw	r6, r16
    1aea:	f2 e0       	ldi	r31, 0x02	; 2
    1aec:	6f 0e       	add	r6, r31
    1aee:	71 1c       	adc	r7, r1
    1af0:	f8 01       	movw	r30, r16
    1af2:	a0 80       	ld	r10, Z
    1af4:	b1 80       	ldd	r11, Z+1	; 0x01
    1af6:	26 ff       	sbrs	r18, 6
    1af8:	03 c0       	rjmp	.+6      	; 0x1b00 <vfprintf+0x15a>
    1afa:	65 2d       	mov	r22, r5
    1afc:	70 e0       	ldi	r23, 0x00	; 0
    1afe:	02 c0       	rjmp	.+4      	; 0x1b04 <vfprintf+0x15e>
    1b00:	6f ef       	ldi	r22, 0xFF	; 255
    1b02:	7f ef       	ldi	r23, 0xFF	; 255
    1b04:	c5 01       	movw	r24, r10
    1b06:	2c 87       	std	Y+12, r18	; 0x0c
    1b08:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <strnlen_P>
    1b0c:	2c 01       	movw	r4, r24
    1b0e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b10:	20 68       	ori	r18, 0x80	; 128
    1b12:	22 2e       	mov	r2, r18
    1b14:	83 01       	movw	r16, r6
    1b16:	23 fc       	sbrc	r2, 3
    1b18:	1b c0       	rjmp	.+54     	; 0x1b50 <vfprintf+0x1aa>
    1b1a:	83 2d       	mov	r24, r3
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	48 16       	cp	r4, r24
    1b20:	59 06       	cpc	r5, r25
    1b22:	b0 f4       	brcc	.+44     	; 0x1b50 <vfprintf+0x1aa>
    1b24:	b7 01       	movw	r22, r14
    1b26:	80 e2       	ldi	r24, 0x20	; 32
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <fputc>
    1b2e:	3a 94       	dec	r3
    1b30:	f4 cf       	rjmp	.-24     	; 0x1b1a <vfprintf+0x174>
    1b32:	f5 01       	movw	r30, r10
    1b34:	27 fc       	sbrc	r2, 7
    1b36:	85 91       	lpm	r24, Z+
    1b38:	27 fe       	sbrs	r2, 7
    1b3a:	81 91       	ld	r24, Z+
    1b3c:	5f 01       	movw	r10, r30
    1b3e:	b7 01       	movw	r22, r14
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <fputc>
    1b46:	31 10       	cpse	r3, r1
    1b48:	3a 94       	dec	r3
    1b4a:	f1 e0       	ldi	r31, 0x01	; 1
    1b4c:	4f 1a       	sub	r4, r31
    1b4e:	51 08       	sbc	r5, r1
    1b50:	41 14       	cp	r4, r1
    1b52:	51 04       	cpc	r5, r1
    1b54:	71 f7       	brne	.-36     	; 0x1b32 <vfprintf+0x18c>
    1b56:	e5 c0       	rjmp	.+458    	; 0x1d22 <vfprintf+0x37c>
    1b58:	84 36       	cpi	r24, 0x64	; 100
    1b5a:	11 f0       	breq	.+4      	; 0x1b60 <vfprintf+0x1ba>
    1b5c:	89 36       	cpi	r24, 0x69	; 105
    1b5e:	39 f5       	brne	.+78     	; 0x1bae <vfprintf+0x208>
    1b60:	f8 01       	movw	r30, r16
    1b62:	27 ff       	sbrs	r18, 7
    1b64:	07 c0       	rjmp	.+14     	; 0x1b74 <vfprintf+0x1ce>
    1b66:	60 81       	ld	r22, Z
    1b68:	71 81       	ldd	r23, Z+1	; 0x01
    1b6a:	82 81       	ldd	r24, Z+2	; 0x02
    1b6c:	93 81       	ldd	r25, Z+3	; 0x03
    1b6e:	0c 5f       	subi	r16, 0xFC	; 252
    1b70:	1f 4f       	sbci	r17, 0xFF	; 255
    1b72:	08 c0       	rjmp	.+16     	; 0x1b84 <vfprintf+0x1de>
    1b74:	60 81       	ld	r22, Z
    1b76:	71 81       	ldd	r23, Z+1	; 0x01
    1b78:	88 27       	eor	r24, r24
    1b7a:	77 fd       	sbrc	r23, 7
    1b7c:	80 95       	com	r24
    1b7e:	98 2f       	mov	r25, r24
    1b80:	0e 5f       	subi	r16, 0xFE	; 254
    1b82:	1f 4f       	sbci	r17, 0xFF	; 255
    1b84:	2f 76       	andi	r18, 0x6F	; 111
    1b86:	b2 2e       	mov	r11, r18
    1b88:	97 ff       	sbrs	r25, 7
    1b8a:	09 c0       	rjmp	.+18     	; 0x1b9e <vfprintf+0x1f8>
    1b8c:	90 95       	com	r25
    1b8e:	80 95       	com	r24
    1b90:	70 95       	com	r23
    1b92:	61 95       	neg	r22
    1b94:	7f 4f       	sbci	r23, 0xFF	; 255
    1b96:	8f 4f       	sbci	r24, 0xFF	; 255
    1b98:	9f 4f       	sbci	r25, 0xFF	; 255
    1b9a:	20 68       	ori	r18, 0x80	; 128
    1b9c:	b2 2e       	mov	r11, r18
    1b9e:	2a e0       	ldi	r18, 0x0A	; 10
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	a4 01       	movw	r20, r8
    1ba4:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__ultoa_invert>
    1ba8:	a8 2e       	mov	r10, r24
    1baa:	a8 18       	sub	r10, r8
    1bac:	44 c0       	rjmp	.+136    	; 0x1c36 <vfprintf+0x290>
    1bae:	85 37       	cpi	r24, 0x75	; 117
    1bb0:	29 f4       	brne	.+10     	; 0x1bbc <vfprintf+0x216>
    1bb2:	2f 7e       	andi	r18, 0xEF	; 239
    1bb4:	b2 2e       	mov	r11, r18
    1bb6:	2a e0       	ldi	r18, 0x0A	; 10
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	25 c0       	rjmp	.+74     	; 0x1c06 <vfprintf+0x260>
    1bbc:	f2 2f       	mov	r31, r18
    1bbe:	f9 7f       	andi	r31, 0xF9	; 249
    1bc0:	bf 2e       	mov	r11, r31
    1bc2:	8f 36       	cpi	r24, 0x6F	; 111
    1bc4:	c1 f0       	breq	.+48     	; 0x1bf6 <vfprintf+0x250>
    1bc6:	18 f4       	brcc	.+6      	; 0x1bce <vfprintf+0x228>
    1bc8:	88 35       	cpi	r24, 0x58	; 88
    1bca:	79 f0       	breq	.+30     	; 0x1bea <vfprintf+0x244>
    1bcc:	b4 c0       	rjmp	.+360    	; 0x1d36 <vfprintf+0x390>
    1bce:	80 37       	cpi	r24, 0x70	; 112
    1bd0:	19 f0       	breq	.+6      	; 0x1bd8 <vfprintf+0x232>
    1bd2:	88 37       	cpi	r24, 0x78	; 120
    1bd4:	21 f0       	breq	.+8      	; 0x1bde <vfprintf+0x238>
    1bd6:	af c0       	rjmp	.+350    	; 0x1d36 <vfprintf+0x390>
    1bd8:	2f 2f       	mov	r18, r31
    1bda:	20 61       	ori	r18, 0x10	; 16
    1bdc:	b2 2e       	mov	r11, r18
    1bde:	b4 fe       	sbrs	r11, 4
    1be0:	0d c0       	rjmp	.+26     	; 0x1bfc <vfprintf+0x256>
    1be2:	8b 2d       	mov	r24, r11
    1be4:	84 60       	ori	r24, 0x04	; 4
    1be6:	b8 2e       	mov	r11, r24
    1be8:	09 c0       	rjmp	.+18     	; 0x1bfc <vfprintf+0x256>
    1bea:	24 ff       	sbrs	r18, 4
    1bec:	0a c0       	rjmp	.+20     	; 0x1c02 <vfprintf+0x25c>
    1bee:	9f 2f       	mov	r25, r31
    1bf0:	96 60       	ori	r25, 0x06	; 6
    1bf2:	b9 2e       	mov	r11, r25
    1bf4:	06 c0       	rjmp	.+12     	; 0x1c02 <vfprintf+0x25c>
    1bf6:	28 e0       	ldi	r18, 0x08	; 8
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	05 c0       	rjmp	.+10     	; 0x1c06 <vfprintf+0x260>
    1bfc:	20 e1       	ldi	r18, 0x10	; 16
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <vfprintf+0x260>
    1c02:	20 e1       	ldi	r18, 0x10	; 16
    1c04:	32 e0       	ldi	r19, 0x02	; 2
    1c06:	f8 01       	movw	r30, r16
    1c08:	b7 fe       	sbrs	r11, 7
    1c0a:	07 c0       	rjmp	.+14     	; 0x1c1a <vfprintf+0x274>
    1c0c:	60 81       	ld	r22, Z
    1c0e:	71 81       	ldd	r23, Z+1	; 0x01
    1c10:	82 81       	ldd	r24, Z+2	; 0x02
    1c12:	93 81       	ldd	r25, Z+3	; 0x03
    1c14:	0c 5f       	subi	r16, 0xFC	; 252
    1c16:	1f 4f       	sbci	r17, 0xFF	; 255
    1c18:	06 c0       	rjmp	.+12     	; 0x1c26 <vfprintf+0x280>
    1c1a:	60 81       	ld	r22, Z
    1c1c:	71 81       	ldd	r23, Z+1	; 0x01
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	0e 5f       	subi	r16, 0xFE	; 254
    1c24:	1f 4f       	sbci	r17, 0xFF	; 255
    1c26:	a4 01       	movw	r20, r8
    1c28:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__ultoa_invert>
    1c2c:	a8 2e       	mov	r10, r24
    1c2e:	a8 18       	sub	r10, r8
    1c30:	fb 2d       	mov	r31, r11
    1c32:	ff 77       	andi	r31, 0x7F	; 127
    1c34:	bf 2e       	mov	r11, r31
    1c36:	b6 fe       	sbrs	r11, 6
    1c38:	0b c0       	rjmp	.+22     	; 0x1c50 <vfprintf+0x2aa>
    1c3a:	2b 2d       	mov	r18, r11
    1c3c:	2e 7f       	andi	r18, 0xFE	; 254
    1c3e:	a5 14       	cp	r10, r5
    1c40:	50 f4       	brcc	.+20     	; 0x1c56 <vfprintf+0x2b0>
    1c42:	b4 fe       	sbrs	r11, 4
    1c44:	0a c0       	rjmp	.+20     	; 0x1c5a <vfprintf+0x2b4>
    1c46:	b2 fc       	sbrc	r11, 2
    1c48:	08 c0       	rjmp	.+16     	; 0x1c5a <vfprintf+0x2b4>
    1c4a:	2b 2d       	mov	r18, r11
    1c4c:	2e 7e       	andi	r18, 0xEE	; 238
    1c4e:	05 c0       	rjmp	.+10     	; 0x1c5a <vfprintf+0x2b4>
    1c50:	7a 2c       	mov	r7, r10
    1c52:	2b 2d       	mov	r18, r11
    1c54:	03 c0       	rjmp	.+6      	; 0x1c5c <vfprintf+0x2b6>
    1c56:	7a 2c       	mov	r7, r10
    1c58:	01 c0       	rjmp	.+2      	; 0x1c5c <vfprintf+0x2b6>
    1c5a:	75 2c       	mov	r7, r5
    1c5c:	24 ff       	sbrs	r18, 4
    1c5e:	0d c0       	rjmp	.+26     	; 0x1c7a <vfprintf+0x2d4>
    1c60:	fe 01       	movw	r30, r28
    1c62:	ea 0d       	add	r30, r10
    1c64:	f1 1d       	adc	r31, r1
    1c66:	80 81       	ld	r24, Z
    1c68:	80 33       	cpi	r24, 0x30	; 48
    1c6a:	11 f4       	brne	.+4      	; 0x1c70 <vfprintf+0x2ca>
    1c6c:	29 7e       	andi	r18, 0xE9	; 233
    1c6e:	09 c0       	rjmp	.+18     	; 0x1c82 <vfprintf+0x2dc>
    1c70:	22 ff       	sbrs	r18, 2
    1c72:	06 c0       	rjmp	.+12     	; 0x1c80 <vfprintf+0x2da>
    1c74:	73 94       	inc	r7
    1c76:	73 94       	inc	r7
    1c78:	04 c0       	rjmp	.+8      	; 0x1c82 <vfprintf+0x2dc>
    1c7a:	82 2f       	mov	r24, r18
    1c7c:	86 78       	andi	r24, 0x86	; 134
    1c7e:	09 f0       	breq	.+2      	; 0x1c82 <vfprintf+0x2dc>
    1c80:	73 94       	inc	r7
    1c82:	23 fd       	sbrc	r18, 3
    1c84:	13 c0       	rjmp	.+38     	; 0x1cac <vfprintf+0x306>
    1c86:	20 ff       	sbrs	r18, 0
    1c88:	06 c0       	rjmp	.+12     	; 0x1c96 <vfprintf+0x2f0>
    1c8a:	5a 2c       	mov	r5, r10
    1c8c:	73 14       	cp	r7, r3
    1c8e:	18 f4       	brcc	.+6      	; 0x1c96 <vfprintf+0x2f0>
    1c90:	53 0c       	add	r5, r3
    1c92:	57 18       	sub	r5, r7
    1c94:	73 2c       	mov	r7, r3
    1c96:	73 14       	cp	r7, r3
    1c98:	68 f4       	brcc	.+26     	; 0x1cb4 <vfprintf+0x30e>
    1c9a:	b7 01       	movw	r22, r14
    1c9c:	80 e2       	ldi	r24, 0x20	; 32
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	2c 87       	std	Y+12, r18	; 0x0c
    1ca2:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <fputc>
    1ca6:	73 94       	inc	r7
    1ca8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1caa:	f5 cf       	rjmp	.-22     	; 0x1c96 <vfprintf+0x2f0>
    1cac:	73 14       	cp	r7, r3
    1cae:	10 f4       	brcc	.+4      	; 0x1cb4 <vfprintf+0x30e>
    1cb0:	37 18       	sub	r3, r7
    1cb2:	01 c0       	rjmp	.+2      	; 0x1cb6 <vfprintf+0x310>
    1cb4:	31 2c       	mov	r3, r1
    1cb6:	24 ff       	sbrs	r18, 4
    1cb8:	12 c0       	rjmp	.+36     	; 0x1cde <vfprintf+0x338>
    1cba:	b7 01       	movw	r22, r14
    1cbc:	80 e3       	ldi	r24, 0x30	; 48
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	2c 87       	std	Y+12, r18	; 0x0c
    1cc2:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <fputc>
    1cc6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cc8:	22 ff       	sbrs	r18, 2
    1cca:	17 c0       	rjmp	.+46     	; 0x1cfa <vfprintf+0x354>
    1ccc:	21 ff       	sbrs	r18, 1
    1cce:	03 c0       	rjmp	.+6      	; 0x1cd6 <vfprintf+0x330>
    1cd0:	88 e5       	ldi	r24, 0x58	; 88
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <vfprintf+0x334>
    1cd6:	88 e7       	ldi	r24, 0x78	; 120
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	b7 01       	movw	r22, r14
    1cdc:	0c c0       	rjmp	.+24     	; 0x1cf6 <vfprintf+0x350>
    1cde:	82 2f       	mov	r24, r18
    1ce0:	86 78       	andi	r24, 0x86	; 134
    1ce2:	59 f0       	breq	.+22     	; 0x1cfa <vfprintf+0x354>
    1ce4:	21 fd       	sbrc	r18, 1
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <vfprintf+0x346>
    1ce8:	80 e2       	ldi	r24, 0x20	; 32
    1cea:	01 c0       	rjmp	.+2      	; 0x1cee <vfprintf+0x348>
    1cec:	8b e2       	ldi	r24, 0x2B	; 43
    1cee:	27 fd       	sbrc	r18, 7
    1cf0:	8d e2       	ldi	r24, 0x2D	; 45
    1cf2:	b7 01       	movw	r22, r14
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <fputc>
    1cfa:	a5 14       	cp	r10, r5
    1cfc:	38 f4       	brcc	.+14     	; 0x1d0c <vfprintf+0x366>
    1cfe:	b7 01       	movw	r22, r14
    1d00:	80 e3       	ldi	r24, 0x30	; 48
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <fputc>
    1d08:	5a 94       	dec	r5
    1d0a:	f7 cf       	rjmp	.-18     	; 0x1cfa <vfprintf+0x354>
    1d0c:	aa 94       	dec	r10
    1d0e:	f4 01       	movw	r30, r8
    1d10:	ea 0d       	add	r30, r10
    1d12:	f1 1d       	adc	r31, r1
    1d14:	80 81       	ld	r24, Z
    1d16:	b7 01       	movw	r22, r14
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <fputc>
    1d1e:	a1 10       	cpse	r10, r1
    1d20:	f5 cf       	rjmp	.-22     	; 0x1d0c <vfprintf+0x366>
    1d22:	33 20       	and	r3, r3
    1d24:	09 f4       	brne	.+2      	; 0x1d28 <vfprintf+0x382>
    1d26:	51 ce       	rjmp	.-862    	; 0x19ca <vfprintf+0x24>
    1d28:	b7 01       	movw	r22, r14
    1d2a:	80 e2       	ldi	r24, 0x20	; 32
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <fputc>
    1d32:	3a 94       	dec	r3
    1d34:	f6 cf       	rjmp	.-20     	; 0x1d22 <vfprintf+0x37c>
    1d36:	f7 01       	movw	r30, r14
    1d38:	86 81       	ldd	r24, Z+6	; 0x06
    1d3a:	97 81       	ldd	r25, Z+7	; 0x07
    1d3c:	02 c0       	rjmp	.+4      	; 0x1d42 <vfprintf+0x39c>
    1d3e:	8f ef       	ldi	r24, 0xFF	; 255
    1d40:	9f ef       	ldi	r25, 0xFF	; 255
    1d42:	2c 96       	adiw	r28, 0x0c	; 12
    1d44:	e2 e1       	ldi	r30, 0x12	; 18
    1d46:	0c 94 67 0f 	jmp	0x1ece	; 0x1ece <__epilogue_restores__>

00001d4a <strnlen_P>:
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	05 90       	lpm	r0, Z+
    1d4e:	61 50       	subi	r22, 0x01	; 1
    1d50:	70 40       	sbci	r23, 0x00	; 0
    1d52:	01 10       	cpse	r0, r1
    1d54:	d8 f7       	brcc	.-10     	; 0x1d4c <strnlen_P+0x2>
    1d56:	80 95       	com	r24
    1d58:	90 95       	com	r25
    1d5a:	8e 0f       	add	r24, r30
    1d5c:	9f 1f       	adc	r25, r31
    1d5e:	08 95       	ret

00001d60 <strnlen>:
    1d60:	fc 01       	movw	r30, r24
    1d62:	61 50       	subi	r22, 0x01	; 1
    1d64:	70 40       	sbci	r23, 0x00	; 0
    1d66:	01 90       	ld	r0, Z+
    1d68:	01 10       	cpse	r0, r1
    1d6a:	d8 f7       	brcc	.-10     	; 0x1d62 <strnlen+0x2>
    1d6c:	80 95       	com	r24
    1d6e:	90 95       	com	r25
    1d70:	8e 0f       	add	r24, r30
    1d72:	9f 1f       	adc	r25, r31
    1d74:	08 95       	ret

00001d76 <fputc>:
    1d76:	0f 93       	push	r16
    1d78:	1f 93       	push	r17
    1d7a:	cf 93       	push	r28
    1d7c:	df 93       	push	r29
    1d7e:	18 2f       	mov	r17, r24
    1d80:	09 2f       	mov	r16, r25
    1d82:	eb 01       	movw	r28, r22
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	81 fd       	sbrc	r24, 1
    1d88:	03 c0       	rjmp	.+6      	; 0x1d90 <fputc+0x1a>
    1d8a:	8f ef       	ldi	r24, 0xFF	; 255
    1d8c:	9f ef       	ldi	r25, 0xFF	; 255
    1d8e:	20 c0       	rjmp	.+64     	; 0x1dd0 <fputc+0x5a>
    1d90:	82 ff       	sbrs	r24, 2
    1d92:	10 c0       	rjmp	.+32     	; 0x1db4 <fputc+0x3e>
    1d94:	4e 81       	ldd	r20, Y+6	; 0x06
    1d96:	5f 81       	ldd	r21, Y+7	; 0x07
    1d98:	2c 81       	ldd	r18, Y+4	; 0x04
    1d9a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d9c:	42 17       	cp	r20, r18
    1d9e:	53 07       	cpc	r21, r19
    1da0:	7c f4       	brge	.+30     	; 0x1dc0 <fputc+0x4a>
    1da2:	e8 81       	ld	r30, Y
    1da4:	f9 81       	ldd	r31, Y+1	; 0x01
    1da6:	9f 01       	movw	r18, r30
    1da8:	2f 5f       	subi	r18, 0xFF	; 255
    1daa:	3f 4f       	sbci	r19, 0xFF	; 255
    1dac:	39 83       	std	Y+1, r19	; 0x01
    1dae:	28 83       	st	Y, r18
    1db0:	10 83       	st	Z, r17
    1db2:	06 c0       	rjmp	.+12     	; 0x1dc0 <fputc+0x4a>
    1db4:	e8 85       	ldd	r30, Y+8	; 0x08
    1db6:	f9 85       	ldd	r31, Y+9	; 0x09
    1db8:	81 2f       	mov	r24, r17
    1dba:	09 95       	icall
    1dbc:	89 2b       	or	r24, r25
    1dbe:	29 f7       	brne	.-54     	; 0x1d8a <fputc+0x14>
    1dc0:	2e 81       	ldd	r18, Y+6	; 0x06
    1dc2:	3f 81       	ldd	r19, Y+7	; 0x07
    1dc4:	2f 5f       	subi	r18, 0xFF	; 255
    1dc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc8:	3f 83       	std	Y+7, r19	; 0x07
    1dca:	2e 83       	std	Y+6, r18	; 0x06
    1dcc:	81 2f       	mov	r24, r17
    1dce:	90 2f       	mov	r25, r16
    1dd0:	df 91       	pop	r29
    1dd2:	cf 91       	pop	r28
    1dd4:	1f 91       	pop	r17
    1dd6:	0f 91       	pop	r16
    1dd8:	08 95       	ret

00001dda <__ultoa_invert>:
    1dda:	fa 01       	movw	r30, r20
    1ddc:	aa 27       	eor	r26, r26
    1dde:	28 30       	cpi	r18, 0x08	; 8
    1de0:	51 f1       	breq	.+84     	; 0x1e36 <__ultoa_invert+0x5c>
    1de2:	20 31       	cpi	r18, 0x10	; 16
    1de4:	81 f1       	breq	.+96     	; 0x1e46 <__ultoa_invert+0x6c>
    1de6:	e8 94       	clt
    1de8:	6f 93       	push	r22
    1dea:	6e 7f       	andi	r22, 0xFE	; 254
    1dec:	6e 5f       	subi	r22, 0xFE	; 254
    1dee:	7f 4f       	sbci	r23, 0xFF	; 255
    1df0:	8f 4f       	sbci	r24, 0xFF	; 255
    1df2:	9f 4f       	sbci	r25, 0xFF	; 255
    1df4:	af 4f       	sbci	r26, 0xFF	; 255
    1df6:	b1 e0       	ldi	r27, 0x01	; 1
    1df8:	3e d0       	rcall	.+124    	; 0x1e76 <__ultoa_invert+0x9c>
    1dfa:	b4 e0       	ldi	r27, 0x04	; 4
    1dfc:	3c d0       	rcall	.+120    	; 0x1e76 <__ultoa_invert+0x9c>
    1dfe:	67 0f       	add	r22, r23
    1e00:	78 1f       	adc	r23, r24
    1e02:	89 1f       	adc	r24, r25
    1e04:	9a 1f       	adc	r25, r26
    1e06:	a1 1d       	adc	r26, r1
    1e08:	68 0f       	add	r22, r24
    1e0a:	79 1f       	adc	r23, r25
    1e0c:	8a 1f       	adc	r24, r26
    1e0e:	91 1d       	adc	r25, r1
    1e10:	a1 1d       	adc	r26, r1
    1e12:	6a 0f       	add	r22, r26
    1e14:	71 1d       	adc	r23, r1
    1e16:	81 1d       	adc	r24, r1
    1e18:	91 1d       	adc	r25, r1
    1e1a:	a1 1d       	adc	r26, r1
    1e1c:	20 d0       	rcall	.+64     	; 0x1e5e <__ultoa_invert+0x84>
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <__ultoa_invert+0x48>
    1e20:	68 94       	set
    1e22:	3f 91       	pop	r19
    1e24:	2a e0       	ldi	r18, 0x0A	; 10
    1e26:	26 9f       	mul	r18, r22
    1e28:	11 24       	eor	r1, r1
    1e2a:	30 19       	sub	r19, r0
    1e2c:	30 5d       	subi	r19, 0xD0	; 208
    1e2e:	31 93       	st	Z+, r19
    1e30:	de f6       	brtc	.-74     	; 0x1de8 <__ultoa_invert+0xe>
    1e32:	cf 01       	movw	r24, r30
    1e34:	08 95       	ret
    1e36:	46 2f       	mov	r20, r22
    1e38:	47 70       	andi	r20, 0x07	; 7
    1e3a:	40 5d       	subi	r20, 0xD0	; 208
    1e3c:	41 93       	st	Z+, r20
    1e3e:	b3 e0       	ldi	r27, 0x03	; 3
    1e40:	0f d0       	rcall	.+30     	; 0x1e60 <__ultoa_invert+0x86>
    1e42:	c9 f7       	brne	.-14     	; 0x1e36 <__ultoa_invert+0x5c>
    1e44:	f6 cf       	rjmp	.-20     	; 0x1e32 <__ultoa_invert+0x58>
    1e46:	46 2f       	mov	r20, r22
    1e48:	4f 70       	andi	r20, 0x0F	; 15
    1e4a:	40 5d       	subi	r20, 0xD0	; 208
    1e4c:	4a 33       	cpi	r20, 0x3A	; 58
    1e4e:	18 f0       	brcs	.+6      	; 0x1e56 <__ultoa_invert+0x7c>
    1e50:	49 5d       	subi	r20, 0xD9	; 217
    1e52:	31 fd       	sbrc	r19, 1
    1e54:	40 52       	subi	r20, 0x20	; 32
    1e56:	41 93       	st	Z+, r20
    1e58:	02 d0       	rcall	.+4      	; 0x1e5e <__ultoa_invert+0x84>
    1e5a:	a9 f7       	brne	.-22     	; 0x1e46 <__ultoa_invert+0x6c>
    1e5c:	ea cf       	rjmp	.-44     	; 0x1e32 <__ultoa_invert+0x58>
    1e5e:	b4 e0       	ldi	r27, 0x04	; 4
    1e60:	a6 95       	lsr	r26
    1e62:	97 95       	ror	r25
    1e64:	87 95       	ror	r24
    1e66:	77 95       	ror	r23
    1e68:	67 95       	ror	r22
    1e6a:	ba 95       	dec	r27
    1e6c:	c9 f7       	brne	.-14     	; 0x1e60 <__ultoa_invert+0x86>
    1e6e:	00 97       	sbiw	r24, 0x00	; 0
    1e70:	61 05       	cpc	r22, r1
    1e72:	71 05       	cpc	r23, r1
    1e74:	08 95       	ret
    1e76:	9b 01       	movw	r18, r22
    1e78:	ac 01       	movw	r20, r24
    1e7a:	0a 2e       	mov	r0, r26
    1e7c:	06 94       	lsr	r0
    1e7e:	57 95       	ror	r21
    1e80:	47 95       	ror	r20
    1e82:	37 95       	ror	r19
    1e84:	27 95       	ror	r18
    1e86:	ba 95       	dec	r27
    1e88:	c9 f7       	brne	.-14     	; 0x1e7c <__ultoa_invert+0xa2>
    1e8a:	62 0f       	add	r22, r18
    1e8c:	73 1f       	adc	r23, r19
    1e8e:	84 1f       	adc	r24, r20
    1e90:	95 1f       	adc	r25, r21
    1e92:	a0 1d       	adc	r26, r0
    1e94:	08 95       	ret

00001e96 <__prologue_saves__>:
    1e96:	2f 92       	push	r2
    1e98:	3f 92       	push	r3
    1e9a:	4f 92       	push	r4
    1e9c:	5f 92       	push	r5
    1e9e:	6f 92       	push	r6
    1ea0:	7f 92       	push	r7
    1ea2:	8f 92       	push	r8
    1ea4:	9f 92       	push	r9
    1ea6:	af 92       	push	r10
    1ea8:	bf 92       	push	r11
    1eaa:	cf 92       	push	r12
    1eac:	df 92       	push	r13
    1eae:	ef 92       	push	r14
    1eb0:	ff 92       	push	r15
    1eb2:	0f 93       	push	r16
    1eb4:	1f 93       	push	r17
    1eb6:	cf 93       	push	r28
    1eb8:	df 93       	push	r29
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
    1ebe:	ca 1b       	sub	r28, r26
    1ec0:	db 0b       	sbc	r29, r27
    1ec2:	0f b6       	in	r0, 0x3f	; 63
    1ec4:	f8 94       	cli
    1ec6:	de bf       	out	0x3e, r29	; 62
    1ec8:	0f be       	out	0x3f, r0	; 63
    1eca:	cd bf       	out	0x3d, r28	; 61
    1ecc:	09 94       	ijmp

00001ece <__epilogue_restores__>:
    1ece:	2a 88       	ldd	r2, Y+18	; 0x12
    1ed0:	39 88       	ldd	r3, Y+17	; 0x11
    1ed2:	48 88       	ldd	r4, Y+16	; 0x10
    1ed4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ed6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ed8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1eda:	8c 84       	ldd	r8, Y+12	; 0x0c
    1edc:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ede:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ee0:	b9 84       	ldd	r11, Y+9	; 0x09
    1ee2:	c8 84       	ldd	r12, Y+8	; 0x08
    1ee4:	df 80       	ldd	r13, Y+7	; 0x07
    1ee6:	ee 80       	ldd	r14, Y+6	; 0x06
    1ee8:	fd 80       	ldd	r15, Y+5	; 0x05
    1eea:	0c 81       	ldd	r16, Y+4	; 0x04
    1eec:	1b 81       	ldd	r17, Y+3	; 0x03
    1eee:	aa 81       	ldd	r26, Y+2	; 0x02
    1ef0:	b9 81       	ldd	r27, Y+1	; 0x01
    1ef2:	ce 0f       	add	r28, r30
    1ef4:	d1 1d       	adc	r29, r1
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	de bf       	out	0x3e, r29	; 62
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	cd bf       	out	0x3d, r28	; 61
    1f00:	ed 01       	movw	r28, r26
    1f02:	08 95       	ret

00001f04 <_exit>:
    1f04:	f8 94       	cli

00001f06 <__stop_program>:
    1f06:	ff cf       	rjmp	.-2      	; 0x1f06 <__stop_program>
